/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 108);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var fs = __webpack_require__(7);
var polyfills = __webpack_require__(228);
var legacy = __webpack_require__(230);
var queue = [];

var util = __webpack_require__(34);

function noop() {}

var debug = noop;
if (util.debuglog) debug = util.debuglog('gfs4');else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) debug = function () {
  var m = util.format.apply(util, arguments);
  m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ');
  console.error(m);
};

if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
  process.on('exit', function () {
    debug(queue);
    __webpack_require__(102).equal(queue.length, 0);
  });
}

module.exports = patch(__webpack_require__(101));
if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH) {
  module.exports = patch(fs);
}

// Always patch fs.close/closeSync, because we want to
// retry() whenever a close happens *anywhere* in the program.
// This is essential when multiple graceful-fs instances are
// in play at the same time.
module.exports.close = fs.close = function (fs$close) {
  return function (fd, cb) {
    return fs$close.call(fs, fd, function (err) {
      if (!err) retry();

      if (typeof cb === 'function') cb.apply(this, arguments);
    });
  };
}(fs.close);

module.exports.closeSync = fs.closeSync = function (fs$closeSync) {
  return function (fd) {
    // Note that graceful-fs also retries when fs.closeSync() fails.
    // Looks like a bug to me, although it's probably a harmless one.
    var rval = fs$closeSync.apply(fs, arguments);
    retry();
    return rval;
  };
}(fs.closeSync);

function patch(fs) {
  // Everything that references the open() function needs to be in here
  polyfills(fs);
  fs.gracefulify = patch;
  fs.FileReadStream = ReadStream; // Legacy name.
  fs.FileWriteStream = WriteStream; // Legacy name.
  fs.createReadStream = createReadStream;
  fs.createWriteStream = createWriteStream;
  var fs$readFile = fs.readFile;
  fs.readFile = readFile;
  function readFile(path, options, cb) {
    if (typeof options === 'function') cb = options, options = null;

    return go$readFile(path, options, cb);

    function go$readFile(path, options, cb) {
      return fs$readFile(path, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$readFile, [path, options, cb]]);else {
          if (typeof cb === 'function') cb.apply(this, arguments);
          retry();
        }
      });
    }
  }

  var fs$writeFile = fs.writeFile;
  fs.writeFile = writeFile;
  function writeFile(path, data, options, cb) {
    if (typeof options === 'function') cb = options, options = null;

    return go$writeFile(path, data, options, cb);

    function go$writeFile(path, data, options, cb) {
      return fs$writeFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$writeFile, [path, data, options, cb]]);else {
          if (typeof cb === 'function') cb.apply(this, arguments);
          retry();
        }
      });
    }
  }

  var fs$appendFile = fs.appendFile;
  if (fs$appendFile) fs.appendFile = appendFile;
  function appendFile(path, data, options, cb) {
    if (typeof options === 'function') cb = options, options = null;

    return go$appendFile(path, data, options, cb);

    function go$appendFile(path, data, options, cb) {
      return fs$appendFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$appendFile, [path, data, options, cb]]);else {
          if (typeof cb === 'function') cb.apply(this, arguments);
          retry();
        }
      });
    }
  }

  var fs$readdir = fs.readdir;
  fs.readdir = readdir;
  function readdir(path, options, cb) {
    var args = [path];
    if (typeof options !== 'function') {
      args.push(options);
    } else {
      cb = options;
    }
    args.push(go$readdir$cb);

    return go$readdir(args);

    function go$readdir$cb(err, files) {
      if (files && files.sort) files.sort();

      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$readdir, [args]]);else {
        if (typeof cb === 'function') cb.apply(this, arguments);
        retry();
      }
    }
  }

  function go$readdir(args) {
    return fs$readdir.apply(fs, args);
  }

  if (process.version.substr(0, 4) === 'v0.8') {
    var legStreams = legacy(fs);
    ReadStream = legStreams.ReadStream;
    WriteStream = legStreams.WriteStream;
  }

  var fs$ReadStream = fs.ReadStream;
  ReadStream.prototype = Object.create(fs$ReadStream.prototype);
  ReadStream.prototype.open = ReadStream$open;

  var fs$WriteStream = fs.WriteStream;
  WriteStream.prototype = Object.create(fs$WriteStream.prototype);
  WriteStream.prototype.open = WriteStream$open;

  fs.ReadStream = ReadStream;
  fs.WriteStream = WriteStream;

  function ReadStream(path, options) {
    if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
  }

  function ReadStream$open() {
    var that = this;
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        if (that.autoClose) that.destroy();

        that.emit('error', err);
      } else {
        that.fd = fd;
        that.emit('open', fd);
        that.read();
      }
    });
  }

  function WriteStream(path, options) {
    if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
  }

  function WriteStream$open() {
    var that = this;
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        that.destroy();
        that.emit('error', err);
      } else {
        that.fd = fd;
        that.emit('open', fd);
      }
    });
  }

  function createReadStream(path, options) {
    return new ReadStream(path, options);
  }

  function createWriteStream(path, options) {
    return new WriteStream(path, options);
  }

  var fs$open = fs.open;
  fs.open = open;
  function open(path, flags, mode, cb) {
    if (typeof mode === 'function') cb = mode, mode = null;

    return go$open(path, flags, mode, cb);

    function go$open(path, flags, mode, cb) {
      return fs$open(path, flags, mode, function (err, fd) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$open, [path, flags, mode, cb]]);else {
          if (typeof cb === 'function') cb.apply(this, arguments);
          retry();
        }
      });
    }
  }

  return fs;
}

function enqueue(elem) {
  debug('ENQUEUE', elem[0].name, elem[1]);
  queue.push(elem);
}

function retry() {
  var elem = queue.shift();
  if (elem) {
    debug('RETRY', elem[0].name, elem[1]);
    elem[0].apply(null, elem[1]);
  }
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.fromCallback = function (fn) {
  return Object.defineProperty(function () {
    if (typeof arguments[arguments.length - 1] === 'function') fn.apply(this, arguments);else {
      return new Promise((resolve, reject) => {
        arguments[arguments.length] = (err, res) => {
          if (err) return reject(err);
          resolve(res);
        };
        arguments.length++;
        fn.apply(this, arguments);
      });
    }
  }, 'name', { value: fn.name });
};

exports.fromPromise = function (fn) {
  return Object.defineProperty(function () {
    const cb = arguments[arguments.length - 1];
    if (typeof cb !== 'function') return fn.apply(this, arguments);else fn.apply(this, arguments).then(r => cb(null, r), cb);
  }, 'name', { value: fn.name });
};

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Position", function() { return Position; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Range", function() { return Range; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Location", function() { return Location; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DiagnosticRelatedInformation", function() { return DiagnosticRelatedInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DiagnosticSeverity", function() { return DiagnosticSeverity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Diagnostic", function() { return Diagnostic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Command", function() { return Command; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextEdit", function() { return TextEdit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextDocumentEdit", function() { return TextDocumentEdit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WorkspaceChange", function() { return WorkspaceChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextDocumentIdentifier", function() { return TextDocumentIdentifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VersionedTextDocumentIdentifier", function() { return VersionedTextDocumentIdentifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextDocumentItem", function() { return TextDocumentItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MarkupKind", function() { return MarkupKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompletionItemKind", function() { return CompletionItemKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InsertTextFormat", function() { return InsertTextFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompletionItem", function() { return CompletionItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompletionList", function() { return CompletionList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MarkedString", function() { return MarkedString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParameterInformation", function() { return ParameterInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignatureInformation", function() { return SignatureInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentHighlightKind", function() { return DocumentHighlightKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentHighlight", function() { return DocumentHighlight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SymbolKind", function() { return SymbolKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SymbolInformation", function() { return SymbolInformation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CodeActionContext", function() { return CodeActionContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CodeLens", function() { return CodeLens; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormattingOptions", function() { return FormattingOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentLink", function() { return DocumentLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EOL", function() { return EOL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextDocument", function() { return TextDocument; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextDocumentSaveReason", function() { return TextDocumentSaveReason; });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

/**
 * The Position namespace provides helper functions to work with
 * [Position](#Position) literals.
 */

var Position;
(function (Position) {
    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */
    function create(line, character) {
        return { line: line, character: character };
    }
    Position.create = create;
    /**
     * Checks whether the given liternal conforms to the [Position](#Position) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.number(candidate.line) && Is.number(candidate.character);
    }
    Position.is = is;
})(Position || (Position = {}));
/**
 * The Range namespace provides helper functions to work with
 * [Range](#Range) literals.
 */
var Range;
(function (Range) {
    function create(one, two, three, four) {
        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
        } else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
        } else {
            throw new Error("Range#create called with invalid arguments[" + one + ", " + two + ", " + three + ", " + four + "]");
        }
    }
    Range.create = create;
    /**
     * Checks whether the given literal conforms to the [Range](#Range) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range.is = is;
})(Range || (Range = {}));
/**
 * The Location namespace provides helper functions to work with
 * [Location](#Location) literals.
 */
var Location;
(function (Location) {
    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */
    function create(uri, range) {
        return { uri: uri, range: range };
    }
    Location.create = create;
    /**
     * Checks whether the given literal conforms to the [Location](#Location) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location.is = is;
})(Location || (Location = {}));
/**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.
 */
var DiagnosticRelatedInformation;
(function (DiagnosticRelatedInformation) {
    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */
    function create(location, message) {
        return {
            location: location,
            message: message
        };
    }
    DiagnosticRelatedInformation.create = create;
    /**
     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
/**
 * The diagnostic's severity.
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity.Error = 1;
    /**
     * Reports a warning.
     */
    DiagnosticSeverity.Warning = 2;
    /**
     * Reports an information.
     */
    DiagnosticSeverity.Information = 3;
    /**
     * Reports a hint.
     */
    DiagnosticSeverity.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
/**
 * The Diagnostic namespace provides helper functions to work with
 * [Diagnostic](#Diagnostic) literals.
 */
var Diagnostic;
(function (Diagnostic) {
    /**
     * Creates a new Diagnostic literal.
     */
    function create(range, message, severity, code, source, relatedInformation) {
        var result = { range: range, message: message };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic.create = create;
    /**
     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic.is = is;
})(Diagnostic || (Diagnostic = {}));
/**
 * The Command namespace provides helper functions to work with
 * [Command](#Command) literals.
 */
var Command;
(function (Command) {
    /**
     * Creates a new Command literal.
     */
    function create(title, command) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var result = { title: title, command: command };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command.create = create;
    /**
     * Checks whether the given literal conforms to the [Command](#Command) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.title);
    }
    Command.is = is;
})(Command || (Command = {}));
/**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */
var TextEdit;
(function (TextEdit) {
    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */
    function replace(range, newText) {
        return { range: range, newText: newText };
    }
    TextEdit.replace = replace;
    /**
     * Creates a insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */
    function insert(position, newText) {
        return { range: { start: position, end: position }, newText: newText };
    }
    TextEdit.insert = insert;
    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */
    function del(range) {
        return { range: range, newText: '' };
    }
    TextEdit.del = del;
})(TextEdit || (TextEdit = {}));
/**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */
var TextDocumentEdit;
(function (TextDocumentEdit) {
    /**
     * Creates a new `TextDocumentEdit`
     */
    function create(textDocument, edits) {
        return { textDocument: textDocument, edits: edits };
    }
    TextDocumentEdit.create = create;
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && VersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
    }
    TextDocumentEdit.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var TextEditChangeImpl = /** @class */function () {
    function TextEditChangeImpl(edits) {
        this.edits = edits;
    }
    TextEditChangeImpl.prototype.insert = function (position, newText) {
        this.edits.push(TextEdit.insert(position, newText));
    };
    TextEditChangeImpl.prototype.replace = function (range, newText) {
        this.edits.push(TextEdit.replace(range, newText));
    };
    TextEditChangeImpl.prototype.delete = function (range) {
        this.edits.push(TextEdit.del(range));
    };
    TextEditChangeImpl.prototype.add = function (edit) {
        this.edits.push(edit);
    };
    TextEditChangeImpl.prototype.all = function () {
        return this.edits;
    };
    TextEditChangeImpl.prototype.clear = function () {
        this.edits.splice(0, this.edits.length);
    };
    return TextEditChangeImpl;
}();
/**
 * A workspace change helps constructing changes to a workspace.
 */
var WorkspaceChange = /** @class */function () {
    function WorkspaceChange(workspaceEdit) {
        var _this = this;
        this._textEditChanges = Object.create(null);
        if (workspaceEdit) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {
                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);
                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;
                });
            } else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach(function (key) {
                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    _this._textEditChanges[key] = textEditChange;
                });
            }
        }
    }
    Object.defineProperty(WorkspaceChange.prototype, "edit", {
        /**
         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal
         * use to be returned from a workspace edit operation like rename.
         */
        get: function () {
            return this._workspaceEdit;
        },
        enumerable: true,
        configurable: true
    });
    WorkspaceChange.prototype.getTextEditChange = function (key) {
        if (VersionedTextDocumentIdentifier.is(key)) {
            if (!this._workspaceEdit) {
                this._workspaceEdit = {
                    documentChanges: []
                };
            }
            if (!this._workspaceEdit.documentChanges) {
                throw new Error('Workspace edit is not configured for versioned document changes.');
            }
            var textDocument = key;
            var result = this._textEditChanges[textDocument.uri];
            if (!result) {
                var edits = [];
                var textDocumentEdit = {
                    textDocument: textDocument,
                    edits: edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        } else {
            if (!this._workspaceEdit) {
                this._workspaceEdit = {
                    changes: Object.create(null)
                };
            }
            if (!this._workspaceEdit.changes) {
                throw new Error('Workspace edit is not configured for normal text edit changes.');
            }
            var result = this._textEditChanges[key];
            if (!result) {
                var edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    };
    return WorkspaceChange;
}();

/**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.
 */
var TextDocumentIdentifier;
(function (TextDocumentIdentifier) {
    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */
    function create(uri) {
        return { uri: uri };
    }
    TextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
/**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.
 */
var VersionedTextDocumentIdentifier;
(function (VersionedTextDocumentIdentifier) {
    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param uri The document's text.
     */
    function create(uri, version) {
        return { uri: uri, version: version };
    }
    VersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);
    }
    VersionedTextDocumentIdentifier.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
/**
 * The TextDocumentItem namespace provides helper functions to work with
 * [TextDocumentItem](#TextDocumentItem) literals.
 */
var TextDocumentItem;
(function (TextDocumentItem) {
    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */
    function create(uri, languageId, version, text) {
        return { uri: uri, languageId: languageId, version: version, text: text };
    }
    TextDocumentItem.create = create;
    /**
     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
/**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */
var MarkupKind;
(function (MarkupKind) {
    /**
     * Plain text is supported as a content format
     */
    MarkupKind.PlainText = 'plaintext';
    /**
     * Markdown is supported as a content format
     */
    MarkupKind.Markdown = 'markdown';
})(MarkupKind || (MarkupKind = {}));
/**
 * The kind of a completion entry.
 */
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind.Text = 1;
    CompletionItemKind.Method = 2;
    CompletionItemKind.Function = 3;
    CompletionItemKind.Constructor = 4;
    CompletionItemKind.Field = 5;
    CompletionItemKind.Variable = 6;
    CompletionItemKind.Class = 7;
    CompletionItemKind.Interface = 8;
    CompletionItemKind.Module = 9;
    CompletionItemKind.Property = 10;
    CompletionItemKind.Unit = 11;
    CompletionItemKind.Value = 12;
    CompletionItemKind.Enum = 13;
    CompletionItemKind.Keyword = 14;
    CompletionItemKind.Snippet = 15;
    CompletionItemKind.Color = 16;
    CompletionItemKind.File = 17;
    CompletionItemKind.Reference = 18;
    CompletionItemKind.Folder = 19;
    CompletionItemKind.EnumMember = 20;
    CompletionItemKind.Constant = 21;
    CompletionItemKind.Struct = 22;
    CompletionItemKind.Event = 23;
    CompletionItemKind.Operator = 24;
    CompletionItemKind.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
/**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */
var InsertTextFormat;
(function (InsertTextFormat) {
    /**
     * The primary text to be inserted is treated as a plain string.
     */
    InsertTextFormat.PlainText = 1;
    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md
     */
    InsertTextFormat.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
/**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */
var CompletionItem;
(function (CompletionItem) {
    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */
    function create(label) {
        return { label: label };
    }
    CompletionItem.create = create;
})(CompletionItem || (CompletionItem = {}));
/**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */
var CompletionList;
(function (CompletionList) {
    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */
    function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function (MarkedString) {
    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    }
    MarkedString.fromPlainText = fromPlainText;
})(MarkedString || (MarkedString = {}));
/**
 * The ParameterInformation namespace provides helper functions to work with
 * [ParameterInformation](#ParameterInformation) literals.
 */
var ParameterInformation;
(function (ParameterInformation) {
    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */
    function create(label, documentation) {
        return documentation ? { label: label, documentation: documentation } : { label: label };
    }
    ParameterInformation.create = create;
    ;
})(ParameterInformation || (ParameterInformation = {}));
/**
 * The SignatureInformation namespace provides helper functions to work with
 * [SignatureInformation](#SignatureInformation) literals.
 */
var SignatureInformation;
(function (SignatureInformation) {
    function create(label, documentation) {
        var parameters = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            parameters[_i - 2] = arguments[_i];
        }
        var result = { label: label };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        } else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation.create = create;
})(SignatureInformation || (SignatureInformation = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind.Text = 1;
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind.Read = 2;
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * DocumentHighlight namespace to provide helper functions to work with
 * [DocumentHighlight](#DocumentHighlight) literals.
 */
var DocumentHighlight;
(function (DocumentHighlight) {
    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     */
    function create(range, kind) {
        var result = { range: range };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind.File = 1;
    SymbolKind.Module = 2;
    SymbolKind.Namespace = 3;
    SymbolKind.Package = 4;
    SymbolKind.Class = 5;
    SymbolKind.Method = 6;
    SymbolKind.Property = 7;
    SymbolKind.Field = 8;
    SymbolKind.Constructor = 9;
    SymbolKind.Enum = 10;
    SymbolKind.Interface = 11;
    SymbolKind.Function = 12;
    SymbolKind.Variable = 13;
    SymbolKind.Constant = 14;
    SymbolKind.String = 15;
    SymbolKind.Number = 16;
    SymbolKind.Boolean = 17;
    SymbolKind.Array = 18;
    SymbolKind.Object = 19;
    SymbolKind.Key = 20;
    SymbolKind.Null = 21;
    SymbolKind.EnumMember = 22;
    SymbolKind.Struct = 23;
    SymbolKind.Event = 24;
    SymbolKind.Operator = 25;
    SymbolKind.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
var SymbolInformation;
(function (SymbolInformation) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol, defaults to the current document.
     * @param containerName The name of the symbol containing the symbol.
     */
    function create(name, kind, range, uri, containerName) {
        var result = {
            name: name,
            kind: kind,
            location: { uri: uri, range: range }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation.create = create;
})(SymbolInformation || (SymbolInformation = {}));
/**
 * The CodeActionContext namespace provides helper functions to work with
 * [CodeActionContext](#CodeActionContext) literals.
 */
var CodeActionContext;
(function (CodeActionContext) {
    /**
     * Creates a new CodeActionContext literal.
     */
    function create(diagnostics) {
        return { diagnostics: diagnostics };
    }
    CodeActionContext.create = create;
    /**
     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is);
    }
    CodeActionContext.is = is;
})(CodeActionContext || (CodeActionContext = {}));
/**
 * The CodeLens namespace provides helper functions to work with
 * [CodeLens](#CodeLens) literals.
 */
var CodeLens;
(function (CodeLens) {
    /**
     * Creates a new CodeLens literal.
     */
    function create(range, data) {
        var result = { range: range };
        if (Is.defined(data)) result.data = data;
        return result;
    }
    CodeLens.create = create;
    /**
     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens.is = is;
})(CodeLens || (CodeLens = {}));
/**
 * The FormattingOptions namespace provides helper functions to work with
 * [FormattingOptions](#FormattingOptions) literals.
 */
var FormattingOptions;
(function (FormattingOptions) {
    /**
     * Creates a new FormattingOptions literal.
     */
    function create(tabSize, insertSpaces) {
        return { tabSize: tabSize, insertSpaces: insertSpaces };
    }
    FormattingOptions.create = create;
    /**
     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions.is = is;
})(FormattingOptions || (FormattingOptions = {}));
/**
 * A document link is a range in a text document that links to an internal or external resource, like another
 * text document or a web site.
 */
var DocumentLink = /** @class */function () {
    function DocumentLink() {}
    return DocumentLink;
}();

/**
 * The DocumentLink namespace provides helper functions to work with
 * [DocumentLink](#DocumentLink) literals.
 */
(function (DocumentLink) {
    /**
     * Creates a new DocumentLink literal.
     */
    function create(range, target) {
        return { range: range, target: target };
    }
    DocumentLink.create = create;
    /**
     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink.is = is;
})(DocumentLink || (DocumentLink = {}));
var EOL = ['\n', '\r\n', '\r'];
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.
     */
    function is(value) {
        var candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument.is = is;
    function applyEdits(document, edits) {
        var text = document.getText();
        var sortedEdits = mergeSort(edits, function (a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return 0;
        });
        var lastModifiedOffset = text.length;
        for (var i = sortedEdits.length - 1; i >= 0; i--) {
            var e = sortedEdits[i];
            var startOffset = document.offsetAt(e.range.start);
            var endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            } else {
                throw new Error('Ovelapping edit');
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument.applyEdits = applyEdits;
    function mergeSort(data, compare) {
        if (data.length <= 1) {
            // sorted
            return data;
        }
        var p = data.length / 2 | 0;
        var left = data.slice(0, p);
        var right = data.slice(p);
        mergeSort(left, compare);
        mergeSort(right, compare);
        var leftIdx = 0;
        var rightIdx = 0;
        var i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
            var ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                // smaller_equal -> take left to preserve order
                data[i++] = left[leftIdx++];
            } else {
                // greater -> take right
                data[i++] = right[rightIdx++];
            }
        }
        while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(TextDocument || (TextDocument = {}));
/**
 * Represents reasons why a text document is saved.
 */
var TextDocumentSaveReason;
(function (TextDocumentSaveReason) {
    /**
     * Manually triggered, e.g. by the user pressing save, by starting debugging,
     * or by an API call.
     */
    TextDocumentSaveReason.Manual = 1;
    /**
     * Automatic after a delay.
     */
    TextDocumentSaveReason.AfterDelay = 2;
    /**
     * When the editor lost focus.
     */
    TextDocumentSaveReason.FocusOut = 3;
})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));
var FullTextDocument = /** @class */function () {
    function FullTextDocument(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = null;
    }
    Object.defineProperty(FullTextDocument.prototype, "uri", {
        get: function () {
            return this._uri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullTextDocument.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: true,
        configurable: true
    });
    FullTextDocument.prototype.getText = function (range) {
        if (range) {
            var start = this.offsetAt(range.start);
            var end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    };
    FullTextDocument.prototype.update = function (event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = null;
    };
    FullTextDocument.prototype.getLineOffsets = function () {
        if (this._lineOffsets === null) {
            var lineOffsets = [];
            var text = this._content;
            var isLineStart = true;
            for (var i = 0; i < text.length; i++) {
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                var ch = text.charAt(i);
                isLineStart = ch === '\r' || ch === '\n';
                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    };
    FullTextDocument.prototype.positionAt = function (offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        var lineOffsets = this.getLineOffsets();
        var low = 0,
            high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        var line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    };
    FullTextDocument.prototype.offsetAt = function (position) {
        var lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        } else if (position.line < 0) {
            return 0;
        }
        var lineOffset = lineOffsets[position.line];
        var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    };
    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
        get: function () {
            return this.getLineOffsets().length;
        },
        enumerable: true,
        configurable: true
    });
    return FullTextDocument;
}();
var Is;
(function (Is) {
    var toString = Object.prototype.toString;
    function defined(value) {
        return typeof value !== 'undefined';
    }
    Is.defined = defined;
    function undefined(value) {
        return typeof value === 'undefined';
    }
    Is.undefined = undefined;
    function boolean(value) {
        return value === true || value === false;
    }
    Is.boolean = boolean;
    function string(value) {
        return toString.call(value) === '[object String]';
    }
    Is.string = string;
    function number(value) {
        return toString.call(value) === '[object Number]';
    }
    Is.number = number;
    function func(value) {
        return toString.call(value) === '[object Function]';
    }
    Is.func = func;
    function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
    }
    Is.typedArray = typedArray;
})(Is || (Is = {}));

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_types_1 = __webpack_require__(3);
function popMany(array, count) {
    let popped = [];
    while (count--) {
        popped.push(array.pop());
    }
    return popped.reverse();
}
exports.popMany = popMany;
function top(array) {
    return array.length ? array[array.length - 1] : null;
}
exports.top = top;
function isString(s) {
    return typeof s === 'string' || s instanceof String;
}
exports.isString = isString;
function isInRange(position, range) {
    let start = range.start;
    let end = range.end;
    if (position.line < start.line || position.line === start.line && position.character < start.character) {
        return -1;
    }
    if (position.line > end.line || position.line === end.line && position.character > end.character) {
        return 1;
    }
    return 0;
}
exports.isInRange = isInRange;
function positionEquality(p1, p2) {
    return p1 && p2 && p1.character === p2.character && p1.line === p2.line;
}
exports.positionEquality = positionEquality;
function rangeEquality(r1, r2) {
    return r1 && r2 && positionEquality(r1.start, r2.start) && positionEquality(r1.end, r2.end);
}
exports.rangeEquality = rangeEquality;
function acronym(text) {
    if (!text) {
        return '';
    }
    let lcText = text.toLowerCase();
    let n = 0;
    let l = text.length;
    let c;
    let acronym = lcText[0] !== '_' && lcText[0] !== '$' ? lcText[0] : '';
    while (n < l) {
        c = text[n];
        if ((c === '$' || c === '_') && n + 1 < l && text[n + 1] !== '_') {
            ++n;
            acronym += lcText[n];
        } else if (n > 0 && c !== lcText[n] && text[n - 1] === lcText[n - 1]) {
            acronym += lcText[n];
        }
        ++n;
    }
    return acronym;
}
exports.acronym = acronym;
function trigrams(text) {
    if (text.length < 3) {
        return new Set();
    }
    let trigrams = new Set();
    for (let n = 0, l = text.length - 2; n < l; ++n) {
        trigrams.add(text.substr(n, 3));
    }
    return trigrams;
}
exports.trigrams = trigrams;
function ciStringContains(query, subject) {
    if (!query) {
        return true;
    }
    return subject.toLowerCase().indexOf(query.toLowerCase()) > -1;
}
exports.ciStringContains = ciStringContains;
function ciStringMatch(a, b) {
    return a.toLowerCase() === b.toLowerCase();
}
exports.ciStringMatch = ciStringMatch;
function whitespace(n) {
    return new Array(n).fill(' ').join('');
}
exports.whitespace = whitespace;
function hash32(text) {
    let hash = 0;
    let chr;
    for (let i = 0, l = text.length; i < l; ++i) {
        chr = text.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0;
    }
    return hash;
}
exports.hash32 = hash32;
function filter(items, fn) {
    let filtered = [];
    if (!items) {
        return filtered;
    }
    let item;
    for (let n = 0, l = items.length; n < l; ++n) {
        item = items[n];
        if (fn(item)) {
            filtered.push(item);
        }
    }
    return filtered;
}
exports.filter = filter;
function find(items, fn) {
    if (!items) {
        return undefined;
    }
    let item;
    for (let n = 0, l = items.length; n < l; ++n) {
        item = items[n];
        if (fn(item)) {
            return item;
        }
    }
    return undefined;
}
exports.find = find;
function cloneRange(range) {
    return vscode_languageserver_types_1.Range.create(range.start.line, range.start.character, range.end.line, range.end.character);
}
exports.cloneRange = cloneRange;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(2).fromCallback;
const mkdirs = u(__webpack_require__(232));
const mkdirsSync = __webpack_require__(233);

module.exports = {
  mkdirs: mkdirs,
  mkdirsSync: mkdirsSync,
  // alias
  mkdirp: mkdirs,
  mkdirpSync: mkdirsSync,
  ensureDir: mkdirs,
  ensureDirSync: mkdirsSync
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Detect Electron renderer process, which is node, but we should
 * treat as a browser.
 */

if (typeof process !== 'undefined' && process.type === 'renderer') {
  module.exports = __webpack_require__(124);
} else {
  module.exports = __webpack_require__(125);
}

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("buffer");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * depd
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var callSiteToString = __webpack_require__(63).callSiteToString;
var eventListenerCount = __webpack_require__(63).eventListenerCount;
var relative = __webpack_require__(0).relative;

/**
 * Module exports.
 */

module.exports = depd;

/**
 * Get the path to base files on.
 */

var basePath = process.cwd();

/**
 * Determine if namespace is contained in the string.
 */

function containsNamespace(str, namespace) {
  var vals = str.split(/[ ,]+/);
  var ns = String(namespace).toLowerCase();

  for (var i = 0; i < vals.length; i++) {
    var val = vals[i];

    // namespace contained
    if (val && (val === '*' || val.toLowerCase() === ns)) {
      return true;
    }
  }

  return false;
}

/**
 * Convert a data descriptor to accessor descriptor.
 */

function convertDataDescriptorToAccessor(obj, prop, message) {
  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
  var value = descriptor.value;

  descriptor.get = function getter() {
    return value;
  };

  if (descriptor.writable) {
    descriptor.set = function setter(val) {
      return value = val;
    };
  }

  delete descriptor.value;
  delete descriptor.writable;

  Object.defineProperty(obj, prop, descriptor);

  return descriptor;
}

/**
 * Create arguments string to keep arity.
 */

function createArgumentsString(arity) {
  var str = '';

  for (var i = 0; i < arity; i++) {
    str += ', arg' + i;
  }

  return str.substr(2);
}

/**
 * Create stack string from stack.
 */

function createStackString(stack) {
  var str = this.name + ': ' + this.namespace;

  if (this.message) {
    str += ' deprecated ' + this.message;
  }

  for (var i = 0; i < stack.length; i++) {
    str += '\n    at ' + callSiteToString(stack[i]);
  }

  return str;
}

/**
 * Create deprecate for namespace in caller.
 */

function depd(namespace) {
  if (!namespace) {
    throw new TypeError('argument namespace is required');
  }

  var stack = getStack();
  var site = callSiteLocation(stack[1]);
  var file = site[0];

  function deprecate(message) {
    // call to self as log
    log.call(deprecate, message);
  }

  deprecate._file = file;
  deprecate._ignored = isignored(namespace);
  deprecate._namespace = namespace;
  deprecate._traced = istraced(namespace);
  deprecate._warned = Object.create(null);

  deprecate.function = wrapfunction;
  deprecate.property = wrapproperty;

  return deprecate;
}

/**
 * Determine if namespace is ignored.
 */

function isignored(namespace) {
  /* istanbul ignore next: tested in a child processs */
  if (process.noDeprecation) {
    // --no-deprecation support
    return true;
  }

  var str = process.env.NO_DEPRECATION || '';

  // namespace ignored
  return containsNamespace(str, namespace);
}

/**
 * Determine if namespace is traced.
 */

function istraced(namespace) {
  /* istanbul ignore next: tested in a child processs */
  if (process.traceDeprecation) {
    // --trace-deprecation support
    return true;
  }

  var str = process.env.TRACE_DEPRECATION || '';

  // namespace traced
  return containsNamespace(str, namespace);
}

/**
 * Display deprecation message.
 */

function log(message, site) {
  var haslisteners = eventListenerCount(process, 'deprecation') !== 0;

  // abort early if no destination
  if (!haslisteners && this._ignored) {
    return;
  }

  var caller;
  var callFile;
  var callSite;
  var depSite;
  var i = 0;
  var seen = false;
  var stack = getStack();
  var file = this._file;

  if (site) {
    // provided site
    depSite = site;
    callSite = callSiteLocation(stack[1]);
    callSite.name = depSite.name;
    file = callSite[0];
  } else {
    // get call site
    i = 2;
    depSite = callSiteLocation(stack[i]);
    callSite = depSite;
  }

  // get caller of deprecated thing in relation to file
  for (; i < stack.length; i++) {
    caller = callSiteLocation(stack[i]);
    callFile = caller[0];

    if (callFile === file) {
      seen = true;
    } else if (callFile === this._file) {
      file = this._file;
    } else if (seen) {
      break;
    }
  }

  var key = caller ? depSite.join(':') + '__' + caller.join(':') : undefined;

  if (key !== undefined && key in this._warned) {
    // already warned
    return;
  }

  this._warned[key] = true;

  // generate automatic message from call site
  var msg = message;
  if (!msg) {
    msg = callSite === depSite || !callSite.name ? defaultMessage(depSite) : defaultMessage(callSite);
  }

  // emit deprecation if listeners exist
  if (haslisteners) {
    var err = DeprecationError(this._namespace, msg, stack.slice(i));
    process.emit('deprecation', err);
    return;
  }

  // format and write message
  var format = process.stderr.isTTY ? formatColor : formatPlain;
  var output = format.call(this, msg, caller, stack.slice(i));
  process.stderr.write(output + '\n', 'utf8');
}

/**
 * Get call site location as array.
 */

function callSiteLocation(callSite) {
  var file = callSite.getFileName() || '<anonymous>';
  var line = callSite.getLineNumber();
  var colm = callSite.getColumnNumber();

  if (callSite.isEval()) {
    file = callSite.getEvalOrigin() + ', ' + file;
  }

  var site = [file, line, colm];

  site.callSite = callSite;
  site.name = callSite.getFunctionName();

  return site;
}

/**
 * Generate a default message from the site.
 */

function defaultMessage(site) {
  var callSite = site.callSite;
  var funcName = site.name;

  // make useful anonymous name
  if (!funcName) {
    funcName = '<anonymous@' + formatLocation(site) + '>';
  }

  var context = callSite.getThis();
  var typeName = context && callSite.getTypeName();

  // ignore useless type name
  if (typeName === 'Object') {
    typeName = undefined;
  }

  // make useful type name
  if (typeName === 'Function') {
    typeName = context.name || typeName;
  }

  return typeName && callSite.getMethodName() ? typeName + '.' + funcName : funcName;
}

/**
 * Format deprecation message without color.
 */

function formatPlain(msg, caller, stack) {
  var timestamp = new Date().toUTCString();

  var formatted = timestamp + ' ' + this._namespace + ' deprecated ' + msg;

  // add stack trace
  if (this._traced) {
    for (var i = 0; i < stack.length; i++) {
      formatted += '\n    at ' + callSiteToString(stack[i]);
    }

    return formatted;
  }

  if (caller) {
    formatted += ' at ' + formatLocation(caller);
  }

  return formatted;
}

/**
 * Format deprecation message with color.
 */

function formatColor(msg, caller, stack) {
  var formatted = '\x1b[36;1m' + this._namespace + '\x1b[22;39m' + // bold cyan
  ' \x1b[33;1mdeprecated\x1b[22;39m' + // bold yellow
  ' \x1b[0m' + msg + '\x1b[39m'; // reset

  // add stack trace
  if (this._traced) {
    for (var i = 0; i < stack.length; i++) {
      formatted += '\n    \x1b[36mat ' + callSiteToString(stack[i]) + '\x1b[39m'; // cyan
    }

    return formatted;
  }

  if (caller) {
    formatted += ' \x1b[36m' + formatLocation(caller) + '\x1b[39m'; // cyan
  }

  return formatted;
}

/**
 * Format call site location.
 */

function formatLocation(callSite) {
  return relative(basePath, callSite[0]) + ':' + callSite[1] + ':' + callSite[2];
}

/**
 * Get the stack as array of call sites.
 */

function getStack() {
  var limit = Error.stackTraceLimit;
  var obj = {};
  var prep = Error.prepareStackTrace;

  Error.prepareStackTrace = prepareObjectStackTrace;
  Error.stackTraceLimit = Math.max(10, limit);

  // capture the stack
  Error.captureStackTrace(obj);

  // slice this function off the top
  var stack = obj.stack.slice(1);

  Error.prepareStackTrace = prep;
  Error.stackTraceLimit = limit;

  return stack;
}

/**
 * Capture call site stack from v8.
 */

function prepareObjectStackTrace(obj, stack) {
  return stack;
}

/**
 * Return a wrapped function in a deprecation message.
 */

function wrapfunction(fn, message) {
  if (typeof fn !== 'function') {
    throw new TypeError('argument fn must be a function');
  }

  var args = createArgumentsString(fn.length);
  var deprecate = this; // eslint-disable-line no-unused-vars
  var stack = getStack();
  var site = callSiteLocation(stack[1]);

  site.name = fn.name;

  // eslint-disable-next-line no-eval
  var deprecatedfn = eval('(function (' + args + ') {\n' + '"use strict"\n' + 'log.call(deprecate, message, site)\n' + 'return fn.apply(this, arguments)\n' + '})');

  return deprecatedfn;
}

/**
 * Wrap property in a deprecation message.
 */

function wrapproperty(obj, prop, message) {
  if (!obj || typeof obj !== 'object' && typeof obj !== 'function') {
    throw new TypeError('argument obj must be object');
  }

  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);

  if (!descriptor) {
    throw new TypeError('must call property on owner object');
  }

  if (!descriptor.configurable) {
    throw new TypeError('property must be configurable');
  }

  var deprecate = this;
  var stack = getStack();
  var site = callSiteLocation(stack[1]);

  // set site name
  site.name = prop;

  // convert data descriptor
  if ('value' in descriptor) {
    descriptor = convertDataDescriptorToAccessor(obj, prop, message);
  }

  var get = descriptor.get;
  var set = descriptor.set;

  // wrap getter
  if (typeof get === 'function') {
    descriptor.get = function getter() {
      log.call(deprecate, message, site);
      return get.apply(this, arguments);
    };
  }

  // wrap setter
  if (typeof set === 'function') {
    descriptor.set = function setter() {
      log.call(deprecate, message, site);
      return set.apply(this, arguments);
    };
  }

  Object.defineProperty(obj, prop, descriptor);
}

/**
 * Create DeprecationError for deprecation
 */

function DeprecationError(namespace, message, stack) {
  var error = new Error();
  var stackString;

  Object.defineProperty(error, 'constructor', {
    value: DeprecationError
  });

  Object.defineProperty(error, 'message', {
    configurable: true,
    enumerable: false,
    value: message,
    writable: true
  });

  Object.defineProperty(error, 'name', {
    enumerable: false,
    configurable: true,
    value: 'DeprecationError',
    writable: true
  });

  Object.defineProperty(error, 'namespace', {
    configurable: true,
    enumerable: false,
    value: namespace,
    writable: true
  });

  Object.defineProperty(error, 'stack', {
    configurable: true,
    enumerable: false,
    get: function () {
      if (stackString !== undefined) {
        return stackString;
      }

      // prepare stack trace
      return stackString = createStackString.call(this, stack);
    },
    set: function setter(val) {
      stackString = val;
    }
  });

  return error;
}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="./thenable.ts" />


var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var Is = __webpack_require__(27);
var messages_1 = __webpack_require__(86);
exports.RequestType = messages_1.RequestType;
exports.RequestType0 = messages_1.RequestType0;
exports.RequestType1 = messages_1.RequestType1;
exports.RequestType2 = messages_1.RequestType2;
exports.RequestType3 = messages_1.RequestType3;
exports.RequestType4 = messages_1.RequestType4;
exports.RequestType5 = messages_1.RequestType5;
exports.RequestType6 = messages_1.RequestType6;
exports.RequestType7 = messages_1.RequestType7;
exports.RequestType8 = messages_1.RequestType8;
exports.RequestType9 = messages_1.RequestType9;
exports.ResponseError = messages_1.ResponseError;
exports.ErrorCodes = messages_1.ErrorCodes;
exports.NotificationType = messages_1.NotificationType;
exports.NotificationType0 = messages_1.NotificationType0;
exports.NotificationType1 = messages_1.NotificationType1;
exports.NotificationType2 = messages_1.NotificationType2;
exports.NotificationType3 = messages_1.NotificationType3;
exports.NotificationType4 = messages_1.NotificationType4;
exports.NotificationType5 = messages_1.NotificationType5;
exports.NotificationType6 = messages_1.NotificationType6;
exports.NotificationType7 = messages_1.NotificationType7;
exports.NotificationType8 = messages_1.NotificationType8;
exports.NotificationType9 = messages_1.NotificationType9;
var messageReader_1 = __webpack_require__(41);
exports.MessageReader = messageReader_1.MessageReader;
exports.StreamMessageReader = messageReader_1.StreamMessageReader;
exports.IPCMessageReader = messageReader_1.IPCMessageReader;
exports.SocketMessageReader = messageReader_1.SocketMessageReader;
var messageWriter_1 = __webpack_require__(42);
exports.MessageWriter = messageWriter_1.MessageWriter;
exports.StreamMessageWriter = messageWriter_1.StreamMessageWriter;
exports.IPCMessageWriter = messageWriter_1.IPCMessageWriter;
exports.SocketMessageWriter = messageWriter_1.SocketMessageWriter;
var events_1 = __webpack_require__(28);
exports.Disposable = events_1.Disposable;
exports.Event = events_1.Event;
exports.Emitter = events_1.Emitter;
var cancellation_1 = __webpack_require__(187);
exports.CancellationTokenSource = cancellation_1.CancellationTokenSource;
exports.CancellationToken = cancellation_1.CancellationToken;
var linkedMap_1 = __webpack_require__(188);
__export(__webpack_require__(189));
__export(__webpack_require__(190));
var CancelNotification;
(function (CancelNotification) {
    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
})(CancelNotification || (CancelNotification = {}));
exports.NullLogger = Object.freeze({
    error: function () {},
    warn: function () {},
    info: function () {},
    log: function () {}
});
var Trace;
(function (Trace) {
    Trace[Trace["Off"] = 0] = "Off";
    Trace[Trace["Messages"] = 1] = "Messages";
    Trace[Trace["Verbose"] = 2] = "Verbose";
})(Trace = exports.Trace || (exports.Trace = {}));
(function (Trace) {
    function fromString(value) {
        value = value.toLowerCase();
        switch (value) {
            case 'off':
                return Trace.Off;
            case 'messages':
                return Trace.Messages;
            case 'verbose':
                return Trace.Verbose;
            default:
                return Trace.Off;
        }
    }
    Trace.fromString = fromString;
    function toString(value) {
        switch (value) {
            case Trace.Off:
                return 'off';
            case Trace.Messages:
                return 'messages';
            case Trace.Verbose:
                return 'verbose';
            default:
                return 'off';
        }
    }
    Trace.toString = toString;
})(Trace = exports.Trace || (exports.Trace = {}));
var SetTraceNotification;
(function (SetTraceNotification) {
    SetTraceNotification.type = new messages_1.NotificationType('$/setTraceNotification');
})(SetTraceNotification = exports.SetTraceNotification || (exports.SetTraceNotification = {}));
var LogTraceNotification;
(function (LogTraceNotification) {
    LogTraceNotification.type = new messages_1.NotificationType('$/logTraceNotification');
})(LogTraceNotification = exports.LogTraceNotification || (exports.LogTraceNotification = {}));
var ConnectionErrors;
(function (ConnectionErrors) {
    /**
     * The connection is closed.
     */
    ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
    /**
     * The connection got disposed.
     */
    ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
    /**
     * The connection is already in listening mode.
     */
    ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
})(ConnectionErrors = exports.ConnectionErrors || (exports.ConnectionErrors = {}));
var ConnectionError = /** @class */function (_super) {
    __extends(ConnectionError, _super);
    function ConnectionError(code, message) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        Object.setPrototypeOf(_this, ConnectionError.prototype);
        return _this;
    }
    return ConnectionError;
}(Error);
exports.ConnectionError = ConnectionError;
var ConnectionStrategy;
(function (ConnectionStrategy) {
    function is(value) {
        var candidate = value;
        return candidate && Is.func(candidate.cancelUndispatched);
    }
    ConnectionStrategy.is = is;
})(ConnectionStrategy = exports.ConnectionStrategy || (exports.ConnectionStrategy = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["New"] = 1] = "New";
    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
})(ConnectionState || (ConnectionState = {}));
function _createMessageConnection(messageReader, messageWriter, logger, strategy) {
    var sequenceNumber = 0;
    var notificationSquenceNumber = 0;
    var unknownResponseSquenceNumber = 0;
    var version = '2.0';
    var starRequestHandler = undefined;
    var requestHandlers = Object.create(null);
    var starNotificationHandler = undefined;
    var notificationHandlers = Object.create(null);
    var timer;
    var messageQueue = new linkedMap_1.LinkedMap();
    var responsePromises = Object.create(null);
    var requestTokens = Object.create(null);
    var trace = Trace.Off;
    var tracer;
    var state = ConnectionState.New;
    var errorEmitter = new events_1.Emitter();
    var closeEmitter = new events_1.Emitter();
    var unhandledNotificationEmitter = new events_1.Emitter();
    var disposeEmitter = new events_1.Emitter();
    function createRequestQueueKey(id) {
        return 'req-' + id.toString();
    }
    function createResponseQueueKey(id) {
        if (id === null) {
            return 'res-unknown-' + (++unknownResponseSquenceNumber).toString();
        } else {
            return 'res-' + id.toString();
        }
    }
    function createNotificationQueueKey() {
        return 'not-' + (++notificationSquenceNumber).toString();
    }
    function addMessageToQueue(queue, message) {
        if (messages_1.isRequestMessage(message)) {
            queue.set(createRequestQueueKey(message.id), message);
        } else if (messages_1.isResponseMessage(message)) {
            queue.set(createResponseQueueKey(message.id), message);
        } else {
            queue.set(createNotificationQueueKey(), message);
        }
    }
    function cancelUndispatched(_message) {
        return undefined;
    }
    function isListening() {
        return state === ConnectionState.Listening;
    }
    function isClosed() {
        return state === ConnectionState.Closed;
    }
    function isDisposed() {
        return state === ConnectionState.Disposed;
    }
    function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
            state = ConnectionState.Closed;
            closeEmitter.fire(undefined);
        }
        // If the connection is disposed don't sent close events.
    }
    ;
    function readErrorHandler(error) {
        errorEmitter.fire([error, undefined, undefined]);
    }
    function writeErrorHandler(data) {
        errorEmitter.fire(data);
    }
    messageReader.onClose(closeHandler);
    messageReader.onError(readErrorHandler);
    messageWriter.onClose(closeHandler);
    messageWriter.onError(writeErrorHandler);
    function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
            return;
        }
        timer = setImmediate(function () {
            timer = undefined;
            processMessageQueue();
        });
    }
    function processMessageQueue() {
        if (messageQueue.size === 0) {
            return;
        }
        var message = messageQueue.shift();
        try {
            if (messages_1.isRequestMessage(message)) {
                handleRequest(message);
            } else if (messages_1.isNotificationMessage(message)) {
                handleNotification(message);
            } else if (messages_1.isResponseMessage(message)) {
                handleResponse(message);
            } else {
                handleInvalidMessage(message);
            }
        } finally {
            triggerMessageQueue();
        }
    }
    var callback = function (message) {
        try {
            // We have received a cancellation message. Check if the message is still in the queue
            // and cancel it if allowed to do so.
            if (messages_1.isNotificationMessage(message) && message.method === CancelNotification.type.method) {
                var key = createRequestQueueKey(message.params.id);
                var toCancel = messageQueue.get(key);
                if (messages_1.isRequestMessage(toCancel)) {
                    var response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                    if (response && (response.error !== void 0 || response.result !== void 0)) {
                        messageQueue.delete(key);
                        response.id = toCancel.id;
                        traceSendingResponse(response, message.method, Date.now());
                        messageWriter.write(response);
                        return;
                    }
                }
            }
            addMessageToQueue(messageQueue, message);
        } finally {
            triggerMessageQueue();
        }
    };
    function handleRequest(requestMessage) {
        if (isDisposed()) {
            // we return here silently since we fired an event when the
            // connection got disposed.
            return;
        }
        function reply(resultOrError, method, startTime) {
            var message = {
                jsonrpc: version,
                id: requestMessage.id
            };
            if (resultOrError instanceof messages_1.ResponseError) {
                message.error = resultOrError.toJson();
            } else {
                message.result = resultOrError === void 0 ? null : resultOrError;
            }
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        function replyError(error, method, startTime) {
            var message = {
                jsonrpc: version,
                id: requestMessage.id,
                error: error.toJson()
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        function replySuccess(result, method, startTime) {
            // The JSON RPC defines that a response must either have a result or an error
            // So we can't treat undefined as a valid response result.
            if (result === void 0) {
                result = null;
            }
            var message = {
                jsonrpc: version,
                id: requestMessage.id,
                result: result
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message);
        }
        traceReceivedRequest(requestMessage);
        var element = requestHandlers[requestMessage.method];
        var type;
        var requestHandler;
        if (element) {
            type = element.type;
            requestHandler = element.handler;
        }
        var startTime = Date.now();
        if (requestHandler || starRequestHandler) {
            var cancellationSource = new cancellation_1.CancellationTokenSource();
            var tokenKey_1 = String(requestMessage.id);
            requestTokens[tokenKey_1] = cancellationSource;
            try {
                var handlerResult = void 0;
                if (requestMessage.params === void 0 || type !== void 0 && type.numberOfParams === 0) {
                    handlerResult = requestHandler ? requestHandler(cancellationSource.token) : starRequestHandler(requestMessage.method, cancellationSource.token);
                } else if (Is.array(requestMessage.params) && (type === void 0 || type.numberOfParams > 1)) {
                    handlerResult = requestHandler ? requestHandler.apply(void 0, requestMessage.params.concat([cancellationSource.token])) : starRequestHandler.apply(void 0, [requestMessage.method].concat(requestMessage.params, [cancellationSource.token]));
                } else {
                    handlerResult = requestHandler ? requestHandler(requestMessage.params, cancellationSource.token) : starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                }
                var promise = handlerResult;
                if (!handlerResult) {
                    delete requestTokens[tokenKey_1];
                    replySuccess(handlerResult, requestMessage.method, startTime);
                } else if (promise.then) {
                    promise.then(function (resultOrError) {
                        delete requestTokens[tokenKey_1];
                        reply(resultOrError, requestMessage.method, startTime);
                    }, function (error) {
                        delete requestTokens[tokenKey_1];
                        if (error instanceof messages_1.ResponseError) {
                            replyError(error, requestMessage.method, startTime);
                        } else if (error && Is.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request " + requestMessage.method + " failed with message: " + error.message), requestMessage.method, startTime);
                        } else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request " + requestMessage.method + " failed unexpectedly without providing any details."), requestMessage.method, startTime);
                        }
                    });
                } else {
                    delete requestTokens[tokenKey_1];
                    reply(handlerResult, requestMessage.method, startTime);
                }
            } catch (error) {
                delete requestTokens[tokenKey_1];
                if (error instanceof messages_1.ResponseError) {
                    reply(error, requestMessage.method, startTime);
                } else if (error && Is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request " + requestMessage.method + " failed with message: " + error.message), requestMessage.method, startTime);
                } else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, "Request " + requestMessage.method + " failed unexpectedly without providing any details."), requestMessage.method, startTime);
                }
            }
        } else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, "Unhandled method " + requestMessage.method), requestMessage.method, startTime);
        }
    }
    function handleResponse(responseMessage) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        if (responseMessage.id === null) {
            if (responseMessage.error) {
                logger.error("Received response message without id: Error is: \n" + JSON.stringify(responseMessage.error, undefined, 4));
            } else {
                logger.error("Received response message without id. No further error information provided.");
            }
        } else {
            var key = String(responseMessage.id);
            var responsePromise = responsePromises[key];
            traceReceivedResponse(responseMessage, responsePromise);
            if (responsePromise) {
                delete responsePromises[key];
                try {
                    if (responseMessage.error) {
                        var error = responseMessage.error;
                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                    } else if (responseMessage.result !== void 0) {
                        responsePromise.resolve(responseMessage.result);
                    } else {
                        throw new Error('Should never happen.');
                    }
                } catch (error) {
                    if (error.message) {
                        logger.error("Response handler '" + responsePromise.method + "' failed with message: " + error.message);
                    } else {
                        logger.error("Response handler '" + responsePromise.method + "' failed unexpectedly.");
                    }
                }
            }
        }
    }
    function handleNotification(message) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        var type = undefined;
        var notificationHandler;
        if (message.method === CancelNotification.type.method) {
            notificationHandler = function (params) {
                var id = params.id;
                var source = requestTokens[String(id)];
                if (source) {
                    source.cancel();
                }
            };
        } else {
            var element = notificationHandlers[message.method];
            if (element) {
                notificationHandler = element.handler;
                type = element.type;
            }
        }
        if (notificationHandler || starNotificationHandler) {
            try {
                traceReceivedNotification(message);
                if (message.params === void 0 || type !== void 0 && type.numberOfParams === 0) {
                    notificationHandler ? notificationHandler() : starNotificationHandler(message.method);
                } else if (Is.array(message.params) && (type === void 0 || type.numberOfParams > 1)) {
                    notificationHandler ? notificationHandler.apply(void 0, message.params) : starNotificationHandler.apply(void 0, [message.method].concat(message.params));
                } else {
                    notificationHandler ? notificationHandler(message.params) : starNotificationHandler(message.method, message.params);
                }
            } catch (error) {
                if (error.message) {
                    logger.error("Notification handler '" + message.method + "' failed with message: " + error.message);
                } else {
                    logger.error("Notification handler '" + message.method + "' failed unexpectedly.");
                }
            }
        } else {
            unhandledNotificationEmitter.fire(message);
        }
    }
    function handleInvalidMessage(message) {
        if (!message) {
            logger.error('Received empty message.');
            return;
        }
        logger.error("Received message which is neither a response nor a notification message:\n" + JSON.stringify(message, null, 4));
        // Test whether we find an id to reject the promise
        var responseMessage = message;
        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
            var key = String(responseMessage.id);
            var responseHandler = responsePromises[key];
            if (responseHandler) {
                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
            }
        }
    }
    function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        var data = undefined;
        if (trace === Trace.Verbose && message.params) {
            data = "Params: " + JSON.stringify(message.params, null, 4) + "\n\n";
        }
        tracer.log("Sending request '" + message.method + " - (" + message.id + ")'.", data);
    }
    function traceSendNotification(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        var data = undefined;
        if (trace === Trace.Verbose) {
            if (message.params) {
                data = "Params: " + JSON.stringify(message.params, null, 4) + "\n\n";
            } else {
                data = 'No parameters provided.\n\n';
            }
        }
        tracer.log("Sending notification '" + message.method + "'.", data);
    }
    function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        var data = undefined;
        if (trace === Trace.Verbose) {
            if (message.error && message.error.data) {
                data = "Error data: " + JSON.stringify(message.error.data, null, 4) + "\n\n";
            } else {
                if (message.result) {
                    data = "Result: " + JSON.stringify(message.result, null, 4) + "\n\n";
                } else if (message.error === void 0) {
                    data = 'No result returned.\n\n';
                }
            }
        }
        tracer.log("Sending response '" + method + " - (" + message.id + ")'. Processing request took " + (Date.now() - startTime) + "ms", data);
    }
    function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        var data = undefined;
        if (trace === Trace.Verbose && message.params) {
            data = "Params: " + JSON.stringify(message.params, null, 4) + "\n\n";
        }
        tracer.log("Received request '" + message.method + " - (" + message.id + ")'.", data);
    }
    function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
            return;
        }
        var data = undefined;
        if (trace === Trace.Verbose) {
            if (message.params) {
                data = "Params: " + JSON.stringify(message.params, null, 4) + "\n\n";
            } else {
                data = 'No parameters provided.\n\n';
            }
        }
        tracer.log("Received notification '" + message.method + "'.", data);
    }
    function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        var data = undefined;
        if (trace === Trace.Verbose) {
            if (message.error && message.error.data) {
                data = "Error data: " + JSON.stringify(message.error.data, null, 4) + "\n\n";
            } else {
                if (message.result) {
                    data = "Result: " + JSON.stringify(message.result, null, 4) + "\n\n";
                } else if (message.error === void 0) {
                    data = 'No result returned.\n\n';
                }
            }
        }
        if (responsePromise) {
            var error = message.error ? " Request failed: " + message.error.message + " (" + message.error.code + ")." : '';
            tracer.log("Received response '" + responsePromise.method + " - (" + message.id + ")' in " + (Date.now() - responsePromise.timerStart) + "ms." + error, data);
        } else {
            tracer.log("Received response " + message.id + " without active response promise.", data);
        }
    }
    function throwIfClosedOrDisposed() {
        if (isClosed()) {
            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
        }
        if (isDisposed()) {
            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
        }
    }
    function throwIfListening() {
        if (isListening()) {
            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
        }
    }
    function throwIfNotListening() {
        if (!isListening()) {
            throw new Error('Call listen() first.');
        }
    }
    function undefinedToNull(param) {
        if (param === void 0) {
            return null;
        } else {
            return param;
        }
    }
    function computeMessageParams(type, params) {
        var result;
        var numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
            case 0:
                result = null;
                break;
            case 1:
                result = undefinedToNull(params[0]);
                break;
            default:
                result = [];
                for (var i = 0; i < params.length && i < numberOfParams; i++) {
                    result.push(undefinedToNull(params[i]));
                }
                if (params.length < numberOfParams) {
                    for (var i = params.length; i < numberOfParams; i++) {
                        result.push(null);
                    }
                }
                break;
        }
        return result;
    }
    var connection = {
        sendNotification: function (type) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            throwIfClosedOrDisposed();
            var method;
            var messageParams;
            if (Is.string(type)) {
                method = type;
                switch (params.length) {
                    case 0:
                        messageParams = null;
                        break;
                    case 1:
                        messageParams = params[0];
                        break;
                    default:
                        messageParams = params;
                        break;
                }
            } else {
                method = type.method;
                messageParams = computeMessageParams(type, params);
            }
            var notificationMessage = {
                jsonrpc: version,
                method: method,
                params: messageParams
            };
            traceSendNotification(notificationMessage);
            messageWriter.write(notificationMessage);
        },
        onNotification: function (type, handler) {
            throwIfClosedOrDisposed();
            if (Is.func(type)) {
                starNotificationHandler = type;
            } else if (handler) {
                if (Is.string(type)) {
                    notificationHandlers[type] = { type: undefined, handler: handler };
                } else {
                    notificationHandlers[type.method] = { type: type, handler: handler };
                }
            }
        },
        sendRequest: function (type) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            throwIfClosedOrDisposed();
            throwIfNotListening();
            var method;
            var messageParams;
            var token = undefined;
            if (Is.string(type)) {
                method = type;
                switch (params.length) {
                    case 0:
                        messageParams = null;
                        break;
                    case 1:
                        // The cancellation token is optional so it can also be undefined.
                        if (cancellation_1.CancellationToken.is(params[0])) {
                            messageParams = null;
                            token = params[0];
                        } else {
                            messageParams = undefinedToNull(params[0]);
                        }
                        break;
                    default:
                        var last = params.length - 1;
                        if (cancellation_1.CancellationToken.is(params[last])) {
                            token = params[last];
                            if (params.length === 2) {
                                messageParams = undefinedToNull(params[0]);
                            } else {
                                messageParams = params.slice(0, last).map(function (value) {
                                    return undefinedToNull(value);
                                });
                            }
                        } else {
                            messageParams = params.map(function (value) {
                                return undefinedToNull(value);
                            });
                        }
                        break;
                }
            } else {
                method = type.method;
                messageParams = computeMessageParams(type, params);
                var numberOfParams = type.numberOfParams;
                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
            }
            var id = sequenceNumber++;
            var result = new Promise(function (resolve, reject) {
                var requestMessage = {
                    jsonrpc: version,
                    id: id,
                    method: method,
                    params: messageParams
                };
                var responsePromise = { method: method, timerStart: Date.now(), resolve: resolve, reject: reject };
                traceSendingRequest(requestMessage);
                try {
                    messageWriter.write(requestMessage);
                } catch (e) {
                    // Writing the message failed. So we need to reject the promise.
                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, e.message ? e.message : 'Unknown reason'));
                    responsePromise = null;
                }
                if (responsePromise) {
                    responsePromises[String(id)] = responsePromise;
                }
            });
            if (token) {
                token.onCancellationRequested(function () {
                    connection.sendNotification(CancelNotification.type, { id: id });
                });
            }
            return result;
        },
        onRequest: function (type, handler) {
            throwIfClosedOrDisposed();
            if (Is.func(type)) {
                starRequestHandler = type;
            } else if (handler) {
                if (Is.string(type)) {
                    requestHandlers[type] = { type: undefined, handler: handler };
                } else {
                    requestHandlers[type.method] = { type: type, handler: handler };
                }
            }
        },
        trace: function (_value, _tracer, sendNotification) {
            if (sendNotification === void 0) {
                sendNotification = false;
            }
            trace = _value;
            if (trace === Trace.Off) {
                tracer = undefined;
            } else {
                tracer = _tracer;
            }
            if (sendNotification && !isClosed() && !isDisposed()) {
                connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
            }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        dispose: function () {
            if (isDisposed()) {
                return;
            }
            state = ConnectionState.Disposed;
            disposeEmitter.fire(undefined);
            var error = new Error('Connection got disposed.');
            Object.keys(responsePromises).forEach(function (key) {
                responsePromises[key].reject(error);
            });
            responsePromises = Object.create(null);
            requestTokens = Object.create(null);
            messageQueue = new linkedMap_1.LinkedMap();
            // Test for backwards compatibility
            if (Is.func(messageWriter.dispose)) {
                messageWriter.dispose();
            }
            if (Is.func(messageReader.dispose)) {
                messageReader.dispose();
            }
        },
        listen: function () {
            throwIfClosedOrDisposed();
            throwIfListening();
            state = ConnectionState.Listening;
            messageReader.listen(callback);
        },
        inspect: function () {
            console.log("inspect");
        }
    };
    connection.onNotification(LogTraceNotification.type, function (params) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        tracer.log(params.message, trace === Trace.Verbose ? params.verbose : undefined);
    });
    return connection;
}
function isMessageReader(value) {
    return value.listen !== void 0 && value.read === void 0;
}
function isMessageWriter(value) {
    return value.write !== void 0 && value.end === void 0;
}
function createMessageConnection(input, output, logger, strategy) {
    if (!logger) {
        logger = exports.NullLogger;
    }
    var reader = isMessageReader(input) ? input : new messageReader_1.StreamMessageReader(input);
    var writer = isMessageWriter(output) ? output : new messageWriter_1.StreamMessageWriter(output);
    return _createMessageConnection(reader, writer, logger, strategy);
}
exports.createMessageConnection = createMessageConnection;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const util = __webpack_require__(4);
var PhpSymbolDoc;
(function (PhpSymbolDoc) {
    function create(description, type) {
        return {
            description: description || '',
            type: type || ''
        };
    }
    PhpSymbolDoc.create = create;
})(PhpSymbolDoc = exports.PhpSymbolDoc || (exports.PhpSymbolDoc = {}));
var PhpSymbol;
(function (PhpSymbol) {
    function keys(s) {
        if (!s.name) {
            return [];
        }
        if (s.kind === 512) {
            return [s.name.toLowerCase()];
        }
        let text = notFqn(s.name);
        let lcText = text.toLowerCase();
        let suffixes = [s.name.toLowerCase()];
        if (text !== s.name) {
            suffixes.push(lcText);
        }
        let n = 0;
        let c;
        let l = text.length;
        while (n < l) {
            c = text[n];
            if ((c === '$' || c === '_') && n + 1 < l && text[n + 1] !== '_') {
                ++n;
                suffixes.push(lcText.slice(n));
            } else if (n > 0 && c !== lcText[n] && text[n - 1] === lcText[n - 1]) {
                suffixes.push(lcText.slice(n));
            }
            ++n;
        }
        return suffixes;
    }
    PhpSymbol.keys = keys;
    function isParameter(s) {
        return s.kind === 128;
    }
    function isClassLike(s) {
        return (s.kind & (1 | 2 | 4)) > 0;
    }
    PhpSymbol.isClassLike = isClassLike;
    function signatureString(s, excludeTypeInfo) {
        if (!s || !(s.kind & (64 | 32))) {
            return '';
        }
        const params = s.children ? s.children.filter(isParameter) : [];
        const paramStrings = [];
        let param;
        let parts;
        let paramType;
        let closeBrackets = '';
        for (let n = 0, l = params.length; n < l; ++n) {
            param = params[n];
            parts = [];
            if (n) {
                parts.push(',');
            }
            if (!excludeTypeInfo) {
                paramType = PhpSymbol.type(param);
                if (paramType) {
                    parts.push(paramType);
                }
            }
            parts.push(param.name);
            if (param.value) {
                const space = n ? ' ' : '';
                paramStrings.push(`${space}[${parts.join(' ')}`);
                closeBrackets += ']';
            } else {
                paramStrings.push(parts.join(' '));
            }
        }
        let sig = `(${paramStrings.join('')}${closeBrackets})`;
        if (!excludeTypeInfo) {
            const sType = PhpSymbol.type(s);
            if (sType) {
                sig += `: ${sType}`;
            }
        }
        return sig;
    }
    PhpSymbol.signatureString = signatureString;
    function hasParameters(s) {
        return s.children && s.children.find(isParameter) !== undefined;
    }
    PhpSymbol.hasParameters = hasParameters;
    function notFqn(text) {
        if (!text) {
            return text;
        }
        let pos = text.lastIndexOf('\\') + 1;
        return text.slice(pos);
    }
    PhpSymbol.notFqn = notFqn;
    function namespace(fqn) {
        if (!fqn) {
            return '';
        }
        let pos = fqn.lastIndexOf('\\');
        return pos < 0 ? '' : fqn.slice(0, pos);
    }
    PhpSymbol.namespace = namespace;
    function clone(s) {
        return {
            kind: s.kind,
            name: s.name,
            children: s.children,
            location: s.location,
            modifiers: s.modifiers,
            associated: s.associated,
            type: s.type,
            doc: s.doc,
            scope: s.scope,
            value: s.value
        };
    }
    PhpSymbol.clone = clone;
    function type(s) {
        if (s.type) {
            return s.type;
        } else if (s.doc && s.doc.type) {
            return s.doc.type;
        } else {
            return '';
        }
    }
    PhpSymbol.type = type;
    function setScope(symbols, scope) {
        if (!symbols) {
            return symbols;
        }
        for (let n = 0; n < symbols.length; ++n) {
            symbols[n].scope = scope;
        }
        return symbols;
    }
    PhpSymbol.setScope = setScope;
    function create(kind, name, location) {
        return {
            kind: kind,
            name: name,
            location: location
        };
    }
    PhpSymbol.create = create;
    function filterChildren(parent, fn) {
        if (!parent || !parent.children) {
            return [];
        }
        return util.filter(parent.children, fn);
    }
    PhpSymbol.filterChildren = filterChildren;
    function findChild(parent, fn) {
        if (!parent || !parent.children) {
            return undefined;
        }
        return util.find(parent.children, fn);
    }
    PhpSymbol.findChild = findChild;
    function isAssociated(symbol, name) {
        let lcName = name.toLowerCase();
        let fn = x => {
            return lcName === x.name.toLowerCase();
        };
        return util.find(symbol.associated, fn);
    }
    PhpSymbol.isAssociated = isAssociated;
    function unique(symbols) {
        let uniqueSymbols = [];
        if (!symbols) {
            return uniqueSymbols;
        }
        let map = {};
        let s;
        for (let n = 0, l = symbols.length; n < l; ++n) {
            s = symbols[n];
            if (!(map[s.name] & s.kind)) {
                uniqueSymbols.push(s);
                map[s.name] |= s.kind;
            }
        }
        return uniqueSymbols;
    }
    PhpSymbol.unique = unique;
})(PhpSymbol = exports.PhpSymbol || (exports.PhpSymbol = {}));
class UniqueSymbolSet {
    constructor() {
        this._map = {};
        this._symbols = [];
    }
    add(s) {
        if (!this.has(s)) {
            this._symbols.push(s);
            this._map[s.name] |= s.kind;
        }
    }
    has(s) {
        return (this._map[s.name] & s.kind) === s.kind;
    }
    toArray() {
        return this._symbols.slice(0);
    }
}
exports.UniqueSymbolSet = UniqueSymbolSet;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(2).fromPromise;
const fs = __webpack_require__(100);

function pathExists(path) {
  return fs.access(path).then(() => true).catch(() => false);
}

module.exports = {
  pathExists: u(pathExists),
  pathExistsSync: fs.existsSync
};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @api private
 */

var Buffer = __webpack_require__(80).Buffer;
var contentDisposition = __webpack_require__(81);
var contentType = __webpack_require__(31);
var deprecate = __webpack_require__(10)('express');
var flatten = __webpack_require__(39);
var mime = __webpack_require__(50).mime;
var etag = __webpack_require__(82);
var proxyaddr = __webpack_require__(85);
var qs = __webpack_require__(48);
var querystring = __webpack_require__(75);

/**
 * Return strong ETag for `body`.
 *
 * @param {String|Buffer} body
 * @param {String} [encoding]
 * @return {String}
 * @api private
 */

exports.etag = createETagGenerator({ weak: false });

/**
 * Return weak ETag for `body`.
 *
 * @param {String|Buffer} body
 * @param {String} [encoding]
 * @return {String}
 * @api private
 */

exports.wetag = createETagGenerator({ weak: true });

/**
 * Check if `path` looks absolute.
 *
 * @param {String} path
 * @return {Boolean}
 * @api private
 */

exports.isAbsolute = function (path) {
  if ('/' === path[0]) return true;
  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
};

/**
 * Flatten the given `arr`.
 *
 * @param {Array} arr
 * @return {Array}
 * @api private
 */

exports.flatten = deprecate.function(flatten, 'utils.flatten: use array-flatten npm module instead');

/**
 * Normalize the given `type`, for example "html" becomes "text/html".
 *
 * @param {String} type
 * @return {Object}
 * @api private
 */

exports.normalizeType = function (type) {
  return ~type.indexOf('/') ? acceptParams(type) : { value: mime.lookup(type), params: {} };
};

/**
 * Normalize `types`, for example "html" becomes "text/html".
 *
 * @param {Array} types
 * @return {Array}
 * @api private
 */

exports.normalizeTypes = function (types) {
  var ret = [];

  for (var i = 0; i < types.length; ++i) {
    ret.push(exports.normalizeType(types[i]));
  }

  return ret;
};

/**
 * Generate Content-Disposition header appropriate for the filename.
 * non-ascii filenames are urlencoded and a filename* parameter is added
 *
 * @param {String} filename
 * @return {String}
 * @api private
 */

exports.contentDisposition = deprecate.function(contentDisposition, 'utils.contentDisposition: use content-disposition npm module instead');

/**
 * Parse accept params `str` returning an
 * object with `.value`, `.quality` and `.params`.
 * also includes `.originalIndex` for stable sorting
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function acceptParams(str, index) {
  var parts = str.split(/ *; */);
  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };

  for (var i = 1; i < parts.length; ++i) {
    var pms = parts[i].split(/ *= */);
    if ('q' === pms[0]) {
      ret.quality = parseFloat(pms[1]);
    } else {
      ret.params[pms[0]] = pms[1];
    }
  }

  return ret;
}

/**
 * Compile "etag" value to function.
 *
 * @param  {Boolean|String|Function} val
 * @return {Function}
 * @api private
 */

exports.compileETag = function (val) {
  var fn;

  if (typeof val === 'function') {
    return val;
  }

  switch (val) {
    case true:
      fn = exports.wetag;
      break;
    case false:
      break;
    case 'strong':
      fn = exports.etag;
      break;
    case 'weak':
      fn = exports.wetag;
      break;
    default:
      throw new TypeError('unknown value for etag function: ' + val);
  }

  return fn;
};

/**
 * Compile "query parser" value to function.
 *
 * @param  {String|Function} val
 * @return {Function}
 * @api private
 */

exports.compileQueryParser = function compileQueryParser(val) {
  var fn;

  if (typeof val === 'function') {
    return val;
  }

  switch (val) {
    case true:
      fn = querystring.parse;
      break;
    case false:
      fn = newObject;
      break;
    case 'extended':
      fn = parseExtendedQueryString;
      break;
    case 'simple':
      fn = querystring.parse;
      break;
    default:
      throw new TypeError('unknown value for query parser function: ' + val);
  }

  return fn;
};

/**
 * Compile "proxy trust" value to function.
 *
 * @param  {Boolean|String|Number|Array|Function} val
 * @return {Function}
 * @api private
 */

exports.compileTrust = function (val) {
  if (typeof val === 'function') return val;

  if (val === true) {
    // Support plain true/false
    return function () {
      return true;
    };
  }

  if (typeof val === 'number') {
    // Support trusting hop count
    return function (a, i) {
      return i < val;
    };
  }

  if (typeof val === 'string') {
    // Support comma-separated values
    val = val.split(/ *, */);
  }

  return proxyaddr.compile(val || []);
};

/**
 * Set the charset in a given Content-Type string.
 *
 * @param {String} type
 * @param {String} charset
 * @return {String}
 * @api private
 */

exports.setCharset = function setCharset(type, charset) {
  if (!type || !charset) {
    return type;
  }

  // parse type
  var parsed = contentType.parse(type);

  // set charset
  parsed.parameters.charset = charset;

  // format type
  return contentType.format(parsed);
};

/**
 * Create an ETag generator function, generating ETags with
 * the given options.
 *
 * @param {object} options
 * @return {function}
 * @private
 */

function createETagGenerator(options) {
  return function generateETag(body, encoding) {
    var buf = !Buffer.isBuffer(body) ? Buffer.from(body, encoding) : body;

    return etag(buf, options);
  };
}

/**
 * Parse an extended query string with qs.
 *
 * @return {Object}
 * @private
 */

function parseExtendedQueryString(str) {
  return qs.parse(str, {
    allowPrototypes: true
  });
}

/**
 * Return new empty object.
 *
 * @return {Object}
 * @api private
 */

function newObject() {
  return {};
}

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const php7parser_1 = __webpack_require__(94);
const textDocument_1 = __webpack_require__(213);
const lsp = __webpack_require__(3);
const types_1 = __webpack_require__(19);
const util = __webpack_require__(4);
const textDocumentChangeDebounceWait = 250;
class ParsedDocument {
    constructor(uri, text, version = 0) {
        this.version = version;
        this._uriHash = 0;
        this._reparse = x => {
            this._parseTree = php7parser_1.Parser.parse(this._textDocument.text);
            this._changeEvent.trigger({ parsedDocument: this });
        };
        this._parseTree = php7parser_1.Parser.parse(text);
        this._textDocument = new textDocument_1.TextDocument(uri, text);
        this._debounce = new types_1.Debounce(this._reparse, textDocumentChangeDebounceWait);
        this._changeEvent = new types_1.Event();
        this._uriHash = Math.abs(util.hash32(uri));
    }
    get tree() {
        return this._parseTree;
    }
    get uri() {
        return this._textDocument.uri;
    }
    get text() {
        return this._textDocument.text;
    }
    get changeEvent() {
        return this._changeEvent;
    }
    find(predicate) {
        let traverser = new types_1.TreeTraverser([this._parseTree]);
        return traverser.find(predicate);
    }
    textBeforeOffset(offset, length) {
        return this._textDocument.textBeforeOffset(offset, length);
    }
    lineSubstring(offset) {
        return this._textDocument.lineSubstring(offset);
    }
    wordAtOffset(offset) {
        let lineText = this._textDocument.lineSubstring(offset);
        let match = lineText.match(ParsedDocument._wordRegex);
        return match ? match[0] : '';
    }
    flush() {
        this._debounce.flush();
    }
    traverse(visitor) {
        let traverser = new types_1.TreeTraverser([this._parseTree]);
        traverser.traverse(visitor);
        return visitor;
    }
    applyChanges(contentChanges) {
        let change;
        for (let n = 0, l = contentChanges.length; n < l; ++n) {
            change = contentChanges[n];
            if (!change.range) {
                this._textDocument.text = change.text;
            } else {
                this._textDocument.applyEdit(change.range.start, change.range.end, change.text);
            }
        }
        this._debounce.handle(null);
    }
    tokenRange(t) {
        if (!t) {
            return null;
        }
        let r = {
            start: this._textDocument.positionAtOffset(t.offset),
            end: this._textDocument.positionAtOffset(t.offset + t.length)
        };
        return r;
    }
    nodeHashedLocation(node) {
        if (!node) {
            return null;
        }
        let range = this.nodeRange(node);
        if (!range) {
            return null;
        }
        return types_1.HashedLocation.create(this._uriHash, range);
    }
    nodeLocation(node) {
        if (!node) {
            return undefined;
        }
        let range = this.nodeRange(node);
        if (!range) {
            return undefined;
        }
        return lsp.Location.create(this.uri, range);
    }
    nodeRange(node) {
        if (!node) {
            return null;
        }
        if (ParsedDocument.isToken(node)) {
            return this.tokenRange(node);
        }
        let tFirst = ParsedDocument.firstToken(node);
        let tLast = ParsedDocument.lastToken(node);
        if (!tFirst || !tLast) {
            return lsp.Range.create(0, 0, 0, 0);
        }
        let range = {
            start: this._textDocument.positionAtOffset(tFirst.offset),
            end: this._textDocument.positionAtOffset(tLast.offset + tLast.length)
        };
        return range;
    }
    tokenText(t) {
        return t && t.tokenType !== undefined ? this._textDocument.textAtOffset(t.offset, t.length) : '';
    }
    nodeText(node) {
        if (!node) {
            return '';
        }
        if (node.tokenType !== undefined) {
            return this._textDocument.textAtOffset(node.offset, node.length);
        }
        let tFirst = ParsedDocument.firstToken(node);
        let tLast = ParsedDocument.lastToken(node);
        if (!tFirst || !tLast) {
            return '';
        }
        return this._textDocument.text.slice(tFirst.offset, tLast.offset + tLast.length);
    }
    createAnonymousName(node) {
        let tFirst = ParsedDocument.firstToken(node);
        let offset = tFirst ? tFirst.offset : 0;
        return `#anon#${this.uri}#${offset}`;
    }
    positionAtOffset(offset) {
        return this._textDocument.positionAtOffset(offset);
    }
    offsetAtPosition(position) {
        return this._textDocument.offsetAtPosition(position);
    }
    documentLanguageRanges() {
        let visitor = new DocumentLanguageRangesVisitor(this);
        this.traverse(visitor);
        return visitor.ranges;
    }
}
ParsedDocument._wordRegex = /[$a-zA-Z_\x80-\xff][\\a-zA-Z0-9_\x80-\xff]*$/;
exports.ParsedDocument = ParsedDocument;
(function (ParsedDocument) {
    function firstToken(node) {
        if (ParsedDocument.isToken(node)) {
            return node;
        }
        let t;
        for (let n = 0, l = node.children.length; n < l; ++n) {
            t = this.firstToken(node.children[n]);
            if (t !== null) {
                return t;
            }
        }
        return null;
    }
    ParsedDocument.firstToken = firstToken;
    function lastToken(node) {
        if (ParsedDocument.isToken(node)) {
            return node;
        }
        let t;
        for (let n = node.children.length - 1; n >= 0; --n) {
            t = this.lastToken(node.children[n]);
            if (t !== null) {
                return t;
            }
        }
        return null;
    }
    ParsedDocument.lastToken = lastToken;
    function isToken(node, types) {
        return node && node.tokenType !== undefined && (!types || types.indexOf(node.tokenType) > -1);
    }
    ParsedDocument.isToken = isToken;
    function isPhrase(node, types) {
        return node && node.phraseType !== undefined && (!types || types.indexOf(node.phraseType) > -1);
    }
    ParsedDocument.isPhrase = isPhrase;
    function isOffsetInToken(offset, t) {
        return offset > -1 && ParsedDocument.isToken(t) && t.offset <= offset && t.offset + t.length - 1 >= offset;
    }
    ParsedDocument.isOffsetInToken = isOffsetInToken;
    function isOffsetInNode(offset, node) {
        if (!node || offset < 0) {
            return false;
        }
        if (ParsedDocument.isToken(node)) {
            return ParsedDocument.isOffsetInToken(offset, node);
        }
        let tFirst = ParsedDocument.firstToken(node);
        let tLast = ParsedDocument.lastToken(node);
        if (!tFirst || !tLast) {
            return false;
        }
        return tFirst.offset <= offset && tLast.offset + tLast.length - 1 >= offset;
    }
    ParsedDocument.isOffsetInNode = isOffsetInNode;
    function findChild(parent, fn) {
        if (!parent || !parent.children) {
            return undefined;
        }
        let child;
        for (let n = 0, l = parent.children.length; n < l; ++n) {
            child = parent.children[n];
            if (fn(child)) {
                return child;
            }
        }
        return undefined;
    }
    ParsedDocument.findChild = findChild;
    function filterChildren(parent, fn) {
        let filtered = [];
        if (!parent || !parent.children) {
            return filtered;
        }
        let child;
        for (let n = 0, l = parent.children.length; n < l; ++n) {
            child = parent.children[n];
            if (fn(child)) {
                filtered.push(child);
            }
        }
        return filtered;
    }
    ParsedDocument.filterChildren = filterChildren;
    function isNamePhrase(node) {
        if (!node) {
            return false;
        }
        switch (node.phraseType) {
            case 141:
            case 144:
            case 84:
                return true;
            default:
                return false;
        }
    }
    ParsedDocument.isNamePhrase = isNamePhrase;
})(ParsedDocument = exports.ParsedDocument || (exports.ParsedDocument = {}));
class ParsedDocumentStore {
    constructor() {
        this._bubbleEvent = args => {
            this._parsedDocumentChangeEvent.trigger(args);
        };
        this._parsedDocumentmap = {};
        this._parsedDocumentChangeEvent = new types_1.Event();
        this._unsubscribeMap = {};
    }
    get parsedDocumentChangeEvent() {
        return this._parsedDocumentChangeEvent;
    }
    get count() {
        return Object.keys(this._parsedDocumentmap).length;
    }
    get documents() {
        return Object.keys(this._parsedDocumentmap).map(v => {
            return this._parsedDocumentmap[v];
        });
    }
    has(uri) {
        return this._parsedDocumentmap[uri] !== undefined;
    }
    add(parsedDocument) {
        if (this.has(parsedDocument.uri)) {
            throw new Error('Duplicate key');
        }
        this._parsedDocumentmap[parsedDocument.uri] = parsedDocument;
        this._unsubscribeMap[parsedDocument.uri] = parsedDocument.changeEvent.subscribe(this._bubbleEvent);
    }
    remove(uri) {
        if (!this.has(uri)) {
            return;
        }
        let unsubscribe = this._unsubscribeMap[uri];
        unsubscribe();
        delete this._parsedDocumentmap[uri];
    }
    find(uri) {
        return this._parsedDocumentmap[uri];
    }
}
exports.ParsedDocumentStore = ParsedDocumentStore;
class ToStringVisitor {
    constructor(doc, ignore) {
        this._text = '';
        this._doc = doc;
    }
    get text() {
        return this._text;
    }
    postorder(node, spine) {
        if (ParsedDocument.isToken(node) && (!this._ignore || this._ignore.indexOf(node.tokenType) < 0)) {
            this._text += this._doc.tokenText(node);
        }
    }
}
const phpLanguageId = 'php';
class DocumentLanguageRangesVisitor {
    constructor(doc) {
        this.doc = doc;
        this._ranges = [];
    }
    get ranges() {
        if (this._phpOpenPosition && this._lastToken) {
            this._ranges.push({
                range: lsp.Range.create(this._phpOpenPosition, this.doc.tokenRange(this._lastToken).end),
                languageId: phpLanguageId
            });
            this._phpOpenPosition = undefined;
        }
        return this._ranges;
    }
    preorder(node, spine) {
        switch (node.tokenType) {
            case 81:
                this._ranges.push({ range: this.doc.tokenRange(node) });
                break;
            case 156:
            case 157:
                this._phpOpenPosition = this.doc.tokenRange(node).start;
                break;
            case 158:
                {
                    let closeTagRange = this.doc.tokenRange(node);
                    this._ranges.push({
                        range: lsp.Range.create(this._phpOpenPosition || closeTagRange.start, closeTagRange.end),
                        languageId: phpLanguageId
                    });
                    this._phpOpenPosition = undefined;
                }
                break;
            default:
                break;
        }
        if (node.tokenType !== undefined) {
            this._lastToken = node;
        }
        return true;
    }
}

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
class Event {
    constructor() {
        this._subscribed = [];
    }
    subscribe(handler) {
        this._subscribed.push(handler);
        let index = this._subscribed.length - 1;
        let subscribed = this._subscribed;
        return () => {
            subscribed.splice(index, 1);
        };
    }
    trigger(args) {
        let handler;
        for (let n = 0; n < this._subscribed.length; ++n) {
            handler = this._subscribed[n];
            handler(args);
        }
    }
}
exports.Event = Event;
var HashedLocation;
(function (HashedLocation) {
    function create(uriHash, range) {
        return {
            uriHash: uriHash,
            range: range
        };
    }
    HashedLocation.create = create;
})(HashedLocation = exports.HashedLocation || (exports.HashedLocation = {}));
class TreeTraverser {
    constructor(spine) {
        this._spine = spine.slice(0);
    }
    get spine() {
        return this._spine.slice(0);
    }
    get node() {
        return this._spine.length ? this._spine[this._spine.length - 1] : null;
    }
    traverse(visitor) {
        this._traverse(this.node, visitor, this._spine.slice(0));
    }
    filter(predicate) {
        let visitor = new FilterVisitor(predicate);
        this.traverse(visitor);
        return visitor.array;
    }
    toArray() {
        let visitor = new ToArrayVisitor();
        this.traverse(visitor);
        return visitor.array;
    }
    count() {
        let visitor = new CountVisitor();
        this.traverse(visitor);
        return visitor.count;
    }
    depth() {
        return this._spine.length - 1;
    }
    up(n) {
        let steps = Math.max(this._spine.length - 1, n);
        this._spine = this._spine.slice(0, this._spine.length - steps);
    }
    find(predicate) {
        let visitor = new FindVisitor(predicate);
        this.traverse(visitor);
        if (visitor.found) {
            this._spine = visitor.found;
            return this.node;
        }
        return null;
    }
    child(predicate) {
        let parent = this.node;
        if (!parent || !parent.children) {
            return null;
        }
        for (let n = 0; n < parent.children.length; ++n) {
            if (predicate(parent.children[n])) {
                this._spine.push(parent.children[n]);
                return this.node;
            }
        }
        return null;
    }
    nthChild(n) {
        let parent = this.node;
        if (!parent || !parent.children || n < 0 || n > parent.children.length - 1) {
            return undefined;
        }
        this._spine.push(parent.children[n]);
        return this.node;
    }
    childCount() {
        let node = this.node;
        return node && node.children ? node.children.length : 0;
    }
    prevSibling() {
        if (this._spine.length < 2) {
            return null;
        }
        let parent = this._spine[this._spine.length - 2];
        let childIndex = parent.children.indexOf(this.node);
        if (childIndex > 0) {
            this._spine.pop();
            this._spine.push(parent.children[childIndex - 1]);
            return this.node;
        } else {
            return null;
        }
    }
    nextSibling() {
        if (this._spine.length < 2) {
            return null;
        }
        let parent = this._spine[this._spine.length - 2];
        let childIndex = parent.children.indexOf(this.node);
        if (childIndex < parent.children.length - 1) {
            this._spine.pop();
            this._spine.push(parent.children[childIndex + 1]);
            return this.node;
        } else {
            return null;
        }
    }
    ancestor(predicate) {
        for (let n = this._spine.length - 2; n >= 0; --n) {
            if (predicate(this._spine[n])) {
                this._spine = this._spine.slice(0, n + 1);
                return this.node;
            }
        }
        return undefined;
    }
    parent() {
        if (this._spine.length > 1) {
            this._spine.pop();
            return this.node;
        }
        return null;
    }
    clone() {
        return new TreeTraverser(this._spine);
    }
    _traverse(treeNode, visitor, spine) {
        if (visitor.haltTraverse) {
            return;
        }
        let descend = true;
        if (visitor.preorder) {
            descend = visitor.preorder(treeNode, spine);
            if (visitor.haltTraverse) {
                return;
            }
        }
        if (treeNode.children && descend) {
            spine.push(treeNode);
            for (let n = 0, l = treeNode.children.length; n < l; ++n) {
                this._traverse(treeNode.children[n], visitor, spine);
                if (visitor.haltTraverse) {
                    return;
                }
            }
            spine.pop();
        }
        if (visitor.postorder) {
            visitor.postorder(treeNode, spine);
        }
    }
}
exports.TreeTraverser = TreeTraverser;
class FilterVisitor {
    constructor(predicate) {
        this._predicate = predicate;
        this._array = [];
    }
    get array() {
        return this._array;
    }
    preorder(node, spine) {
        if (this._predicate(node)) {
            this._array.push(node);
        }
        return true;
    }
}
class FindVisitor {
    constructor(predicate) {
        this._predicate = predicate;
        this.haltTraverse = false;
    }
    get found() {
        return this._found;
    }
    preorder(node, spine) {
        if (this._predicate(node)) {
            this._found = spine.slice(0);
            this._found.push(node);
            this.haltTraverse = true;
            return false;
        }
        return true;
    }
}
class Debounce {
    constructor(handler, wait) {
        this.wait = wait;
        this.clear = () => {
            clearTimeout(this._timer);
            this._timer = null;
            this._lastEvent = null;
        };
        this._handler = handler;
        this.wait = wait;
    }
    handle(event) {
        this.clear();
        this._lastEvent = event;
        let that = this;
        let handler = this._handler;
        let clear = this.clear;
        let later = () => {
            handler.apply(that, [event]);
            clear();
        };
        this._timer = setTimeout(later, this.wait);
    }
    flush() {
        if (!this._timer) {
            return;
        }
        let event = this._lastEvent;
        this.clear();
        this._handler.apply(this, [event]);
    }
}
exports.Debounce = Debounce;
class ToArrayVisitor {
    constructor() {
        this._array = [];
    }
    get array() {
        return this._array;
    }
    preorder(t, spine) {
        this._array.push(t);
        return true;
    }
}
exports.ToArrayVisitor = ToArrayVisitor;
class CountVisitor {
    constructor() {
        this._count = 0;
    }
    get count() {
        return this._count;
    }
    preorder(t, spine) {
        ++this._count;
        return true;
    }
}
exports.CountVisitor = CountVisitor;
class MultiVisitor {
    constructor(visitors) {
        this.haltTraverse = false;
        this._visitors = [];
        for (let n = 0; n < visitors.length; ++n) {
            this.add(visitors[n]);
        }
    }
    add(v) {
        this._visitors.push([v, null]);
    }
    preorder(node, spine) {
        let v;
        let descend;
        for (let n = 0; n < this._visitors.length; ++n) {
            v = this._visitors[n];
            if (!v[1] && v[0].preorder && !v[0].preorder(node, spine)) {
                v[1] = node;
            }
            if (v[0].haltTraverse) {
                this.haltTraverse = true;
                break;
            }
        }
        return true;
    }
    postorder(node, spine) {
        let v;
        for (let n = 0; n < this._visitors.length; ++n) {
            v = this._visitors[n];
            if (v[1] === node) {
                v[1] = null;
            }
            if (!v[1] && v[0].postorder) {
                v[0].postorder(node, spine);
            }
            if (v[0].haltTraverse) {
                this.haltTraverse = true;
                break;
            }
        }
    }
}
exports.MultiVisitor = MultiVisitor;
class BinarySearch {
    constructor(sortedArray) {
        this._sortedArray = sortedArray;
    }
    find(compare) {
        let result = this.search(compare);
        return result.isExactMatch ? this._sortedArray[result.rank] : null;
    }
    rank(compare) {
        return this.search(compare).rank;
    }
    range(compareLower, compareUpper) {
        let rankLower = this.rank(compareLower);
        return this._sortedArray.slice(rankLower, this.search(compareUpper, rankLower).rank);
    }
    search(compare, offset) {
        let left = offset ? offset : 0;
        let right = this._sortedArray.length - 1;
        let mid = 0;
        let compareResult = 0;
        let searchResult;
        while (true) {
            if (left > right) {
                searchResult = { rank: left, isExactMatch: false };
                break;
            }
            mid = Math.floor((left + right) / 2);
            compareResult = compare(this._sortedArray[mid]);
            if (compareResult < 0) {
                left = mid + 1;
            } else if (compareResult > 0) {
                right = mid - 1;
            } else {
                searchResult = { rank: mid, isExactMatch: true };
                break;
            }
        }
        return searchResult;
    }
}
exports.BinarySearch = BinarySearch;
class NameIndex {
    constructor(keysDelegate) {
        this._keysDelegate = keysDelegate;
        this._nodeArray = [];
        this._binarySearch = new BinarySearch(this._nodeArray);
        this._collator = new Intl.Collator('en');
    }
    add(item) {
        let suffixes = this._keysDelegate(item);
        let node;
        for (let n = 0; n < suffixes.length; ++n) {
            node = this._nodeFind(suffixes[n]);
            if (node) {
                node.items.push(item);
            } else {
                this._insertNode({ key: suffixes[n], items: [item] });
            }
        }
    }
    addMany(items) {
        for (let n = 0; n < items.length; ++n) {
            this.add(items[n]);
        }
    }
    remove(item) {
        let suffixes = this._keysDelegate(item);
        let node;
        let i;
        for (let n = 0; n < suffixes.length; ++n) {
            node = this._nodeFind(suffixes[n]);
            if (!node) {
                continue;
            }
            i = node.items.indexOf(item);
            if (i > -1) {
                node.items.splice(i, 1);
            }
        }
    }
    removeMany(items) {
        for (let n = 0; n < items.length; ++n) {
            this.remove(items[n]);
        }
    }
    match(text) {
        text = text.toLowerCase();
        let nodes = this._nodeMatch(text);
        let matches = [];
        for (let n = 0; n < nodes.length; ++n) {
            Array.prototype.push.apply(matches, nodes[n].items);
        }
        return Array.from(new Set(matches));
    }
    *matchIterator(text) {
        text = text.toLowerCase();
        const nodes = this._nodeMatch(text);
        const matches = new Set();
        let node;
        for (let n = 0, l = nodes.length; n < l; ++n) {
            node = nodes[n];
            for (let k = 0, i = node.items.length; k < i; ++k) {
                yield node.items[k];
            }
        }
    }
    find(text) {
        let node = this._nodeFind(text.toLowerCase());
        return node ? node.items.slice(0) : [];
    }
    toJSON() {
        return this._nodeArray;
    }
    fromJSON(data) {
        this._nodeArray = data;
        this._binarySearch = new BinarySearch(this._nodeArray);
    }
    _nodeMatch(lcText) {
        let collator = this._collator;
        let compareLowerFn = n => {
            return collator.compare(n.key, lcText);
        };
        let compareUpperFn = n => {
            return n.key.slice(0, lcText.length) === lcText ? -1 : 1;
        };
        return this._binarySearch.range(compareLowerFn, compareUpperFn);
    }
    _nodeFind(lcText) {
        let collator = this._collator;
        let compareFn = n => {
            return collator.compare(n.key, lcText);
        };
        return this._binarySearch.find(compareFn);
    }
    _insertNode(node) {
        let collator = this._collator;
        let rank = this._binarySearch.rank(n => {
            return collator.compare(n.key, node.key);
        });
        this._nodeArray.splice(rank, 0, node);
    }
    _deleteNode(node) {
        let collator = this._collator;
        let rank = this._binarySearch.rank(n => {
            return collator.compare(n.key, node.key);
        });
        if (this._nodeArray[rank] === node) {
            this._nodeArray.splice(rank, 1);
        }
    }
}
exports.NameIndex = NameIndex;
class SortedList {
    constructor(compareFn, items) {
        this.compareFn = compareFn;
        this._items = items || [];
        this._search = new BinarySearch(this._items);
    }
    get length() {
        return this._items.length;
    }
    get items() {
        return this._items;
    }
    add(item) {
        let cmpFn = this._createCompareClosure(item, this.compareFn);
        let result = this._search.search(cmpFn);
        if (result.isExactMatch) {
            throw new Error(`Duplicate key ${JSON.stringify(item)}`);
        }
        this._items.splice(result.rank, 0, item);
    }
    remove(compareFn) {
        let result = this._search.search(compareFn);
        if (result.isExactMatch) {
            return this._items.splice(result.rank, 1).shift();
        }
        return undefined;
    }
    find(compareFn) {
        return this._search.find(compareFn);
    }
    _createCompareClosure(item, cmpFn) {
        return t => {
            return cmpFn(t, item);
        };
    }
}
exports.SortedList = SortedList;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = require("net");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
  kStatusCode: Symbol('status-code'),
  kWebSocket: Symbol('websocket'),
  EMPTY_BUFFER: Buffer.alloc(0),
  NOOP: () => {}
};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * bytes
 * Copyright(c) 2012-2014 TJ Holowaychuk
 * Copyright(c) 2015 Jed Watson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = bytes;
module.exports.format = format;
module.exports.parse = parse;

/**
 * Module variables.
 * @private
 */

var formatThousandsRegExp = /\B(?=(\d{3})+(?!\d))/g;

var formatDecimalsRegExp = /(?:\.0*|(\.[^0]+)0+)$/;

var map = {
  b: 1,
  kb: 1 << 10,
  mb: 1 << 20,
  gb: 1 << 30,
  tb: (1 << 30) * 1024
};

var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb)$/i;

/**
 * Convert the given value in bytes into a string or parse to string to an integer in bytes.
 *
 * @param {string|number} value
 * @param {{
 *  case: [string],
 *  decimalPlaces: [number]
 *  fixedDecimals: [boolean]
 *  thousandsSeparator: [string]
 *  unitSeparator: [string]
 *  }} [options] bytes options.
 *
 * @returns {string|number|null}
 */

function bytes(value, options) {
  if (typeof value === 'string') {
    return parse(value);
  }

  if (typeof value === 'number') {
    return format(value, options);
  }

  return null;
}

/**
 * Format the given value in bytes into a string.
 *
 * If the value is negative, it is kept as such. If it is a float,
 * it is rounded.
 *
 * @param {number} value
 * @param {object} [options]
 * @param {number} [options.decimalPlaces=2]
 * @param {number} [options.fixedDecimals=false]
 * @param {string} [options.thousandsSeparator=]
 * @param {string} [options.unit=]
 * @param {string} [options.unitSeparator=]
 *
 * @returns {string|null}
 * @public
 */

function format(value, options) {
  if (!Number.isFinite(value)) {
    return null;
  }

  var mag = Math.abs(value);
  var thousandsSeparator = options && options.thousandsSeparator || '';
  var unitSeparator = options && options.unitSeparator || '';
  var decimalPlaces = options && options.decimalPlaces !== undefined ? options.decimalPlaces : 2;
  var fixedDecimals = Boolean(options && options.fixedDecimals);
  var unit = options && options.unit || '';

  if (!unit || !map[unit.toLowerCase()]) {
    if (mag >= map.tb) {
      unit = 'TB';
    } else if (mag >= map.gb) {
      unit = 'GB';
    } else if (mag >= map.mb) {
      unit = 'MB';
    } else if (mag >= map.kb) {
      unit = 'KB';
    } else {
      unit = 'B';
    }
  }

  var val = value / map[unit.toLowerCase()];
  var str = val.toFixed(decimalPlaces);

  if (!fixedDecimals) {
    str = str.replace(formatDecimalsRegExp, '$1');
  }

  if (thousandsSeparator) {
    str = str.replace(formatThousandsRegExp, thousandsSeparator);
  }

  return str + unitSeparator + unit;
}

/**
 * Parse the string value into an integer in bytes.
 *
 * If no unit is given, it is assumed the value is in bytes.
 *
 * @param {number|string} val
 *
 * @returns {number|null}
 * @public
 */

function parse(val) {
  if (typeof val === 'number' && !isNaN(val)) {
    return val;
  }

  if (typeof val !== 'string') {
    return null;
  }

  // Test if the string passed is valid
  var results = parseRegExp.exec(val);
  var floatValue;
  var unit = 'b';

  if (!results) {
    // Nothing could be extracted from the given string
    floatValue = parseInt(val, 10);
    unit = 'b';
  } else {
    // Retrieve the value and the unit
    floatValue = parseFloat(results[1]);
    unit = results[4].toLowerCase();
  }

  return Math.floor(map[unit] * floatValue);
}

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * statuses
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var codes = __webpack_require__(122);

/**
 * Module exports.
 * @public
 */

module.exports = status;

// status code to message map
status.STATUS_CODES = codes;

// array of status codes
status.codes = populateStatusesMap(status, codes);

// status codes for redirects
status.redirect = {
  300: true,
  301: true,
  302: true,
  303: true,
  305: true,
  307: true,
  308: true

  // status codes for empty bodies
};status.empty = {
  204: true,
  205: true,
  304: true

  // status codes for when you should retry the request
};status.retry = {
  502: true,
  503: true,
  504: true

  /**
   * Populate the statuses map for given codes.
   * @private
   */

};function populateStatusesMap(statuses, codes) {
  var arr = [];

  Object.keys(codes).forEach(function forEachCode(code) {
    var message = codes[code];
    var status = Number(code);

    // Populate properties
    statuses[status] = message;
    statuses[message] = status;
    statuses[message.toLowerCase()] = status;

    // Add to array
    arr.push(status);
  });

  return arr;
}

/**
 * Get the status code.
 *
 * Given a number, this will throw if it is not a known status
 * code, otherwise the code will be returned. Given a string,
 * the string will be parsed for a number and return the code
 * if valid, otherwise will lookup the code assuming this is
 * the status message.
 *
 * @param {string|number} code
 * @returns {number}
 * @public
 */

function status(code) {
  if (typeof code === 'number') {
    if (!status[code]) throw new Error('invalid status code: ' + code);
    return code;
  }

  if (typeof code !== 'string') {
    throw new TypeError('code must be a number or string');
  }

  // '403'
  var n = parseInt(code, 10);
  if (!isNaN(n)) {
    if (!status[n]) throw new Error('invalid status code: ' + n);
    return n;
  }

  n = status[code.toLowerCase()];
  if (!n) throw new Error('invalid status message: "' + code + '"');
  return n;
}

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * type-is
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var typer = __webpack_require__(152);
var mime = __webpack_require__(72);

/**
 * Module exports.
 * @public
 */

module.exports = typeofrequest;
module.exports.is = typeis;
module.exports.hasBody = hasbody;
module.exports.normalize = normalize;
module.exports.match = mimeMatch;

/**
 * Compare a `value` content-type with `types`.
 * Each `type` can be an extension like `html`,
 * a special shortcut like `multipart` or `urlencoded`,
 * or a mime type.
 *
 * If no types match, `false` is returned.
 * Otherwise, the first `type` that matches is returned.
 *
 * @param {String} value
 * @param {Array} types
 * @public
 */

function typeis(value, types_) {
  var i;
  var types = types_;

  // remove parameters and normalize
  var val = tryNormalizeType(value);

  // no type or invalid
  if (!val) {
    return false;
  }

  // support flattened arguments
  if (types && !Array.isArray(types)) {
    types = new Array(arguments.length - 1);
    for (i = 0; i < types.length; i++) {
      types[i] = arguments[i + 1];
    }
  }

  // no types, return the content type
  if (!types || !types.length) {
    return val;
  }

  var type;
  for (i = 0; i < types.length; i++) {
    if (mimeMatch(normalize(type = types[i]), val)) {
      return type[0] === '+' || type.indexOf('*') !== -1 ? val : type;
    }
  }

  // no matches
  return false;
}

/**
 * Check if a request has a request body.
 * A request with a body __must__ either have `transfer-encoding`
 * or `content-length` headers set.
 * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3
 *
 * @param {Object} request
 * @return {Boolean}
 * @public
 */

function hasbody(req) {
  return req.headers['transfer-encoding'] !== undefined || !isNaN(req.headers['content-length']);
}

/**
 * Check if the incoming request contains the "Content-Type"
 * header field, and it contains any of the give mime `type`s.
 * If there is no request body, `null` is returned.
 * If there is no content type, `false` is returned.
 * Otherwise, it returns the first `type` that matches.
 *
 * Examples:
 *
 *     // With Content-Type: text/html; charset=utf-8
 *     this.is('html'); // => 'html'
 *     this.is('text/html'); // => 'text/html'
 *     this.is('text/*', 'application/json'); // => 'text/html'
 *
 *     // When Content-Type is application/json
 *     this.is('json', 'urlencoded'); // => 'json'
 *     this.is('application/json'); // => 'application/json'
 *     this.is('html', 'application/*'); // => 'application/json'
 *
 *     this.is('html'); // => false
 *
 * @param {String|Array} types...
 * @return {String|false|null}
 * @public
 */

function typeofrequest(req, types_) {
  var types = types_;

  // no body
  if (!hasbody(req)) {
    return null;
  }

  // support flattened arguments
  if (arguments.length > 2) {
    types = new Array(arguments.length - 1);
    for (var i = 0; i < types.length; i++) {
      types[i] = arguments[i + 1];
    }
  }

  // request content type
  var value = req.headers['content-type'];

  return typeis(value, types);
}

/**
 * Normalize a mime type.
 * If it's a shorthand, expand it to a valid mime type.
 *
 * In general, you probably want:
 *
 *   var type = is(req, ['urlencoded', 'json', 'multipart']);
 *
 * Then use the appropriate body parsers.
 * These three are the most common request body types
 * and are thus ensured to work.
 *
 * @param {String} type
 * @private
 */

function normalize(type) {
  if (typeof type !== 'string') {
    // invalid type
    return false;
  }

  switch (type) {
    case 'urlencoded':
      return 'application/x-www-form-urlencoded';
    case 'multipart':
      return 'multipart/*';
  }

  if (type[0] === '+') {
    // "+json" -> "*/*+json" expando
    return '*/*' + type;
  }

  return type.indexOf('/') === -1 ? mime.lookup(type) : type;
}

/**
 * Check if `expected` mime type
 * matches `actual` mime type with
 * wildcard and +suffix support.
 *
 * @param {String} expected
 * @param {String} actual
 * @return {Boolean}
 * @private
 */

function mimeMatch(expected, actual) {
  // invalid type
  if (expected === false) {
    return false;
  }

  // split types
  var actualParts = actual.split('/');
  var expectedParts = expected.split('/');

  // invalid format
  if (actualParts.length !== 2 || expectedParts.length !== 2) {
    return false;
  }

  // validate type
  if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {
    return false;
  }

  // validate suffix wildcard
  if (expectedParts[1].substr(0, 2) === '*+') {
    return expectedParts[1].length <= actualParts[1].length + 1 && expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length);
  }

  // validate subtype
  if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {
    return false;
  }

  return true;
}

/**
 * Normalize a type and remove parameters.
 *
 * @param {string} value
 * @return {string}
 * @private
 */

function normalizeType(value) {
  // parse the type
  var type = typer.parse(value);

  // remove the parameters
  type.parameters = undefined;

  // reformat it
  return typer.format(type);
}

/**
 * Try to normalize a type and remove parameters.
 *
 * @param {string} value
 * @return {string}
 * @private
 */

function tryNormalizeType(value) {
  try {
    return normalizeType(value);
  } catch (err) {
    return null;
  }
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * parseurl
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var url = __webpack_require__(17);
var parse = url.parse;
var Url = url.Url;

/**
 * Module exports.
 * @public
 */

module.exports = parseurl;
module.exports.original = originalurl;

/**
 * Parse the `req` url with memoization.
 *
 * @param {ServerRequest} req
 * @return {Object}
 * @public
 */

function parseurl(req) {
  var url = req.url;

  if (url === undefined) {
    // URL is undefined
    return undefined;
  }

  var parsed = req._parsedUrl;

  if (fresh(url, parsed)) {
    // Return cached URL parse
    return parsed;
  }

  // Parse the URL
  parsed = fastparse(url);
  parsed._raw = url;

  return req._parsedUrl = parsed;
};

/**
 * Parse the `req` original url with fallback and memoization.
 *
 * @param {ServerRequest} req
 * @return {Object}
 * @public
 */

function originalurl(req) {
  var url = req.originalUrl;

  if (typeof url !== 'string') {
    // Fallback
    return parseurl(req);
  }

  var parsed = req._parsedOriginalUrl;

  if (fresh(url, parsed)) {
    // Return cached URL parse
    return parsed;
  }

  // Parse the URL
  parsed = fastparse(url);
  parsed._raw = url;

  return req._parsedOriginalUrl = parsed;
};

/**
 * Parse the `str` url with fast-path short-cut.
 *
 * @param {string} str
 * @return {Object}
 * @private
 */

function fastparse(str) {
  if (typeof str !== 'string' || str.charCodeAt(0) !== 0x2f /* / */) {
      return parse(str);
    }

  var pathname = str;
  var query = null;
  var search = null;

  // This takes the regexp from https://github.com/joyent/node/pull/7878
  // Which is /^(\/[^?#\s]*)(\?[^#\s]*)?$/
  // And unrolls it into a for loop
  for (var i = 1; i < str.length; i++) {
    switch (str.charCodeAt(i)) {
      case 0x3f:
        /* ?  */
        if (search === null) {
          pathname = str.substring(0, i);
          query = str.substring(i + 1);
          search = str.substring(i);
        }
        break;
      case 0x09: /* \t */
      case 0x0a: /* \n */
      case 0x0c: /* \f */
      case 0x0d: /* \r */
      case 0x20: /*    */
      case 0x23: /* #  */
      case 0xa0:
      case 0xfeff:
        return parse(str);
    }
  }

  var url = Url !== undefined ? new Url() : {};
  url.path = str;
  url.href = str;
  url.pathname = pathname;
  url.query = query;
  url.search = search;

  return url;
}

/**
 * Determine if parsed is still fresh for url.
 *
 * @param {string} url
 * @param {object} parsedUrl
 * @return {boolean}
 * @private
 */

function fresh(url, parsedUrl) {
  return typeof parsedUrl === 'object' && parsedUrl !== null && (Url === undefined || parsedUrl instanceof Url) && parsedUrl._raw === url;
}

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
var toString = Object.prototype.toString;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return toString.call(value) === '[object String]';
}
exports.string = string;
function number(value) {
    return toString.call(value) === '[object Number]';
}
exports.number = number;
function error(value) {
    return toString.call(value) === '[object Error]';
}
exports.error = error;
function func(value) {
    return toString.call(value) === '[object Function]';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(function (elem) {
        return string(elem);
    });
}
exports.stringArray = stringArray;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
var Disposable;
(function (Disposable) {
    function create(func) {
        return {
            dispose: func
        };
    }
    Disposable.create = create;
})(Disposable = exports.Disposable || (exports.Disposable = {}));
var Event;
(function (Event) {
    var _disposable = { dispose: function () {} };
    Event.None = function () {
        return _disposable;
    };
})(Event = exports.Event || (exports.Event = {}));
var CallbackList = /** @class */function () {
    function CallbackList() {}
    CallbackList.prototype.add = function (callback, context, bucket) {
        var _this = this;
        if (context === void 0) {
            context = null;
        }
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ dispose: function () {
                    return _this.remove(callback, context);
                } });
        }
    };
    CallbackList.prototype.remove = function (callback, context) {
        if (context === void 0) {
            context = null;
        }
        if (!this._callbacks) {
            return;
        }
        var foundCallbackWithDifferentContext = false;
        for (var i = 0, len = this._callbacks.length; i < len; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                } else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    };
    CallbackList.prototype.invoke = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!this._callbacks) {
            return [];
        }
        var ret = [],
            callbacks = this._callbacks.slice(0),
            contexts = this._contexts.slice(0);
        for (var i = 0, len = callbacks.length; i < len; i++) {
            try {
                ret.push(callbacks[i].apply(contexts[i], args));
            } catch (e) {
                console.error(e);
            }
        }
        return ret;
    };
    CallbackList.prototype.isEmpty = function () {
        return !this._callbacks || this._callbacks.length === 0;
    };
    CallbackList.prototype.dispose = function () {
        this._callbacks = undefined;
        this._contexts = undefined;
    };
    return CallbackList;
}();
var Emitter = /** @class */function () {
    function Emitter(_options) {
        this._options = _options;
    }
    Object.defineProperty(Emitter.prototype, "event", {
        /**
         * For the public to allow to subscribe
         * to events from this Emitter
         */
        get: function () {
            var _this = this;
            if (!this._event) {
                this._event = function (listener, thisArgs, disposables) {
                    if (!_this._callbacks) {
                        _this._callbacks = new CallbackList();
                    }
                    if (_this._options && _this._options.onFirstListenerAdd && _this._callbacks.isEmpty()) {
                        _this._options.onFirstListenerAdd(_this);
                    }
                    _this._callbacks.add(listener, thisArgs);
                    var result;
                    result = {
                        dispose: function () {
                            _this._callbacks.remove(listener, thisArgs);
                            result.dispose = Emitter._noop;
                            if (_this._options && _this._options.onLastListenerRemove && _this._callbacks.isEmpty()) {
                                _this._options.onLastListenerRemove(_this);
                            }
                        }
                    };
                    if (Array.isArray(disposables)) {
                        disposables.push(result);
                    }
                    return result;
                };
            }
            return this._event;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    Emitter.prototype.fire = function (event) {
        if (this._callbacks) {
            this._callbacks.invoke.call(this._callbacks, event);
        }
    };
    Emitter.prototype.dispose = function () {
        if (this._callbacks) {
            this._callbacks.dispose();
            this._callbacks = undefined;
        }
    };
    Emitter._noop = function () {};
    return Emitter;
}();
exports.Emitter = Emitter;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var TypeString;
(function (TypeString) {
    const classNamePattern = /[$\\a-zA-Z_\x7f-\xff][\\a-zA-Z0-9_\x7f-\xff]*/g;
    const keywords = ['string', 'integer', 'int', 'boolean', 'bool', 'float', 'double', 'object', 'mixed', 'array', 'resource', 'void', 'null', 'false', 'true', 'self', 'static', 'callable', '$this', 'real', 'iterable'];
    function atomicClassArray(typeString) {
        if (!typeString) {
            return [];
        }
        let classes = [];
        let types = chunk(typeString);
        let type;
        for (let n = 0; n < types.length; ++n) {
            type = types[n];
            if (type[type.length - 1] !== ']' && keywords.indexOf(type.toLowerCase()) < 0) {
                classes.push(type);
            }
        }
        return classes;
    }
    TypeString.atomicClassArray = atomicClassArray;
    function arrayDereference(typeString) {
        if (!typeString) {
            return '';
        }
        let dereferenced = [];
        let types = chunk(typeString);
        let type;
        for (let n = 0; n < types.length; ++n) {
            type = types[n];
            if (type.slice(-2) === '[]') {
                type = type.slice(0, -2);
                if (type.slice(-1) === ')') {
                    type = type.slice(1, -1);
                    Array.prototype.push.apply(dereferenced, chunk(type));
                } else {
                    dereferenced.push(type);
                }
            }
        }
        dereferenced = unique(dereferenced);
        return dereferenced.join('|');
    }
    TypeString.arrayDereference = arrayDereference;
    function arrayReference(typeString) {
        if (!typeString) {
            return '';
        }
        let text;
        let types = chunk(typeString);
        if (types.length > 1) {
            text = '(' + types.join('|') + ')[]';
        } else {
            text = types[0] + '[]';
        }
        return text;
    }
    TypeString.arrayReference = arrayReference;
    function merge(a, b) {
        if (!a && !b) {
            return '';
        }
        if (a === b) {
            return a;
        }
        if (!a) {
            return b;
        }
        if (!b) {
            return a;
        }
        let types = chunk(a);
        Array.prototype.push.apply(types, chunk(b));
        return unique(types).join('|');
    }
    TypeString.merge = merge;
    function mergeMany(typeStrings) {
        let type = '';
        for (let n = 0; n < typeStrings.length; ++n) {
            type = merge(type, typeStrings[n]);
        }
        return type;
    }
    TypeString.mergeMany = mergeMany;
    function nameResolve(typeString, nameResolver) {
        if (!typeString) {
            return '';
        }
        let replacer = (match, offset, text) => {
            let lcMatch = match.toLowerCase();
            if (lcMatch === 'self') {
                return nameResolver.className;
            } else if (keywords.indexOf(lcMatch) >= 0) {
                return match;
            } else if (match[0] === '\\') {
                return match.slice(1);
            } else {
                return nameResolver.resolveNotFullyQualified(match);
            }
        };
        return typeString.replace(classNamePattern, replacer);
    }
    TypeString.nameResolve = nameResolve;
    function count(typeString) {
        return chunk(typeString).length;
    }
    TypeString.count = count;
    function resolveThisOrStatic(typeString, fqn) {
        if (!typeString) {
            return '';
        }
        let replacer = (match, offset, text) => {
            let lcMatch = match.toLowerCase();
            if (lcMatch === '$this' || lcMatch === 'static') {
                return fqn;
            }
            return match;
        };
        return typeString.replace(classNamePattern, replacer);
    }
    TypeString.resolveThisOrStatic = resolveThisOrStatic;
    function unique(parts) {
        let set = new Set(parts);
        return Array.from(set);
    }
    function chunk(typeString) {
        let n = 0;
        let parentheses = 0;
        let parts = [];
        let part = '';
        let c;
        while (n < typeString.length) {
            c = typeString[n];
            switch (c) {
                case '|':
                    if (parentheses) {
                        part += c;
                    } else if (part) {
                        parts.push(part);
                        part = '';
                    }
                    break;
                case '(':
                    ++parentheses;
                    part += c;
                    break;
                case ')':
                    --parentheses;
                    part += c;
                    break;
                default:
                    part += c;
                    break;
            }
            ++n;
        }
        if (part) {
            parts.push(part);
        }
        return parts;
    }
})(TypeString = exports.TypeString || (exports.TypeString = {}));

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const Limiter = __webpack_require__(113);
const zlib = __webpack_require__(58);

const bufferUtil = __webpack_require__(46);
const constants = __webpack_require__(22);

const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
const EMPTY_BLOCK = Buffer.from([0x00]);

const kPerMessageDeflate = Symbol('permessage-deflate');
const kWriteInProgress = Symbol('write-in-progress');
const kPendingClose = Symbol('pending-close');
const kTotalLength = Symbol('total-length');
const kCallback = Symbol('callback');
const kBuffers = Symbol('buffers');
const kError = Symbol('error');

//
// We limit zlib concurrency, which prevents severe memory fragmentation
// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
// and https://github.com/websockets/ws/issues/1202
//
// Intentionally global; it's the global thread pool that's an issue.
//
let zlibLimiter;

/**
 * permessage-deflate implementation.
 */
class PerMessageDeflate {
  /**
   * Creates a PerMessageDeflate instance.
   *
   * @param {Object} options Configuration options
   * @param {Boolean} options.serverNoContextTakeover Request/accept disabling
   *     of server context takeover
   * @param {Boolean} options.clientNoContextTakeover Advertise/acknowledge
   *     disabling of client context takeover
   * @param {(Boolean|Number)} options.serverMaxWindowBits Request/confirm the
   *     use of a custom server window size
   * @param {(Boolean|Number)} options.clientMaxWindowBits Advertise support
   *     for, or request, a custom client window size
   * @param {Object} options.zlibDeflateOptions Options to pass to zlib on deflate
   * @param {Object} options.zlibInflateOptions Options to pass to zlib on inflate
   * @param {Number} options.threshold Size (in bytes) below which messages
   *     should not be compressed
   * @param {Number} options.concurrencyLimit The number of concurrent calls to
   *     zlib
   * @param {Boolean} isServer Create the instance in either server or client
   *     mode
   * @param {Number} maxPayload The maximum allowed message length
   */
  constructor(options, isServer, maxPayload) {
    this._maxPayload = maxPayload | 0;
    this._options = options || {};
    this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;
    this._isServer = !!isServer;
    this._deflate = null;
    this._inflate = null;

    this.params = null;

    if (!zlibLimiter) {
      const concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;
      zlibLimiter = new Limiter({ concurrency });
    }
  }

  /**
   * @type {String}
   */
  static get extensionName() {
    return 'permessage-deflate';
  }

  /**
   * Create an extension negotiation offer.
   *
   * @return {Object} Extension parameters
   * @public
   */
  offer() {
    const params = {};

    if (this._options.serverNoContextTakeover) {
      params.server_no_context_takeover = true;
    }
    if (this._options.clientNoContextTakeover) {
      params.client_no_context_takeover = true;
    }
    if (this._options.serverMaxWindowBits) {
      params.server_max_window_bits = this._options.serverMaxWindowBits;
    }
    if (this._options.clientMaxWindowBits) {
      params.client_max_window_bits = this._options.clientMaxWindowBits;
    } else if (this._options.clientMaxWindowBits == null) {
      params.client_max_window_bits = true;
    }

    return params;
  }

  /**
   * Accept an extension negotiation offer/response.
   *
   * @param {Array} configurations The extension negotiation offers/reponse
   * @return {Object} Accepted configuration
   * @public
   */
  accept(configurations) {
    configurations = this.normalizeParams(configurations);

    this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);

    return this.params;
  }

  /**
   * Releases all resources used by the extension.
   *
   * @public
   */
  cleanup() {
    if (this._inflate) {
      if (this._inflate[kWriteInProgress]) {
        this._inflate[kPendingClose] = true;
      } else {
        this._inflate.close();
        this._inflate = null;
      }
    }
    if (this._deflate) {
      if (this._deflate[kWriteInProgress]) {
        this._deflate[kPendingClose] = true;
      } else {
        this._deflate.close();
        this._deflate = null;
      }
    }
  }

  /**
   *  Accept an extension negotiation offer.
   *
   * @param {Array} offers The extension negotiation offers
   * @return {Object} Accepted configuration
   * @private
   */
  acceptAsServer(offers) {
    const opts = this._options;
    const accepted = offers.find(params => {
      if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === 'number' && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === 'number' && !params.client_max_window_bits) {
        return false;
      }

      return true;
    });

    if (!accepted) {
      throw new Error('None of the extension offers can be accepted');
    }

    if (opts.serverNoContextTakeover) {
      accepted.server_no_context_takeover = true;
    }
    if (opts.clientNoContextTakeover) {
      accepted.client_no_context_takeover = true;
    }
    if (typeof opts.serverMaxWindowBits === 'number') {
      accepted.server_max_window_bits = opts.serverMaxWindowBits;
    }
    if (typeof opts.clientMaxWindowBits === 'number') {
      accepted.client_max_window_bits = opts.clientMaxWindowBits;
    } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
      delete accepted.client_max_window_bits;
    }

    return accepted;
  }

  /**
   * Accept the extension negotiation response.
   *
   * @param {Array} response The extension negotiation response
   * @return {Object} Accepted configuration
   * @private
   */
  acceptAsClient(response) {
    const params = response[0];

    if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
      throw new Error('Unexpected parameter "client_no_context_takeover"');
    }

    if (!params.client_max_window_bits) {
      if (typeof this._options.clientMaxWindowBits === 'number') {
        params.client_max_window_bits = this._options.clientMaxWindowBits;
      }
    } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === 'number' && params.client_max_window_bits > this._options.clientMaxWindowBits) {
      throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
    }

    return params;
  }

  /**
   * Normalize parameters.
   *
   * @param {Array} configurations The extension negotiation offers/reponse
   * @return {Array} The offers/response with normalized parameters
   * @private
   */
  normalizeParams(configurations) {
    configurations.forEach(params => {
      Object.keys(params).forEach(key => {
        var value = params[key];

        if (value.length > 1) {
          throw new Error(`Parameter "${key}" must have only a single value`);
        }

        value = value[0];

        if (key === 'client_max_window_bits') {
          if (value !== true) {
            const num = +value;
            if (!Number.isInteger(num) || num < 8 || num > 15) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }
            value = num;
          } else if (!this._isServer) {
            throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
          }
        } else if (key === 'server_max_window_bits') {
          const num = +value;
          if (!Number.isInteger(num) || num < 8 || num > 15) {
            throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
          }
          value = num;
        } else if (key === 'client_no_context_takeover' || key === 'server_no_context_takeover') {
          if (value !== true) {
            throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
          }
        } else {
          throw new Error(`Unknown parameter "${key}"`);
        }

        params[key] = value;
      });
    });

    return configurations;
  }

  /**
   * Decompress data. Concurrency limited by async-limiter.
   *
   * @param {Buffer} data Compressed data
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @public
   */
  decompress(data, fin, callback) {
    zlibLimiter.push(done => {
      this._decompress(data, fin, (err, result) => {
        done();
        callback(err, result);
      });
    });
  }

  /**
   * Compress data. Concurrency limited by async-limiter.
   *
   * @param {Buffer} data Data to compress
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @public
   */
  compress(data, fin, callback) {
    zlibLimiter.push(done => {
      this._compress(data, fin, (err, result) => {
        done();
        callback(err, result);
      });
    });
  }

  /**
   * Decompress data.
   *
   * @param {Buffer} data Compressed data
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @private
   */
  _decompress(data, fin, callback) {
    const endpoint = this._isServer ? 'client' : 'server';

    if (!this._inflate) {
      const key = `${endpoint}_max_window_bits`;
      const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];

      this._inflate = zlib.createInflateRaw(Object.assign({}, this._options.zlibInflateOptions, { windowBits }));
      this._inflate[kPerMessageDeflate] = this;
      this._inflate[kTotalLength] = 0;
      this._inflate[kBuffers] = [];
      this._inflate.on('error', inflateOnError);
      this._inflate.on('data', inflateOnData);
    }

    this._inflate[kCallback] = callback;
    this._inflate[kWriteInProgress] = true;

    this._inflate.write(data);
    if (fin) this._inflate.write(TRAILER);

    this._inflate.flush(() => {
      const err = this._inflate[kError];

      if (err) {
        this._inflate.close();
        this._inflate = null;
        callback(err);
        return;
      }

      const data = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);

      if (fin && this.params[`${endpoint}_no_context_takeover`] || this._inflate[kPendingClose]) {
        this._inflate.close();
        this._inflate = null;
      } else {
        this._inflate[kWriteInProgress] = false;
        this._inflate[kTotalLength] = 0;
        this._inflate[kBuffers] = [];
      }

      callback(null, data);
    });
  }

  /**
   * Compress data.
   *
   * @param {Buffer} data Data to compress
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @private
   */
  _compress(data, fin, callback) {
    if (!data || data.length === 0) {
      process.nextTick(callback, null, EMPTY_BLOCK);
      return;
    }

    const endpoint = this._isServer ? 'server' : 'client';

    if (!this._deflate) {
      const key = `${endpoint}_max_window_bits`;
      const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];

      this._deflate = zlib.createDeflateRaw(Object.assign(
      // TODO deprecate memLevel/level and recommend zlibDeflateOptions instead
      {
        memLevel: this._options.memLevel,
        level: this._options.level
      }, this._options.zlibDeflateOptions, { windowBits }));

      this._deflate[kTotalLength] = 0;
      this._deflate[kBuffers] = [];

      //
      // `zlib.DeflateRaw` emits an `'error'` event only when an attempt to use
      // it is made after it has already been closed. This cannot happen here,
      // so we only add a listener for the `'data'` event.
      //
      this._deflate.on('data', deflateOnData);
    }

    this._deflate[kWriteInProgress] = true;

    this._deflate.write(data);
    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
      var data = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);

      if (fin) data = data.slice(0, data.length - 4);

      if (fin && this.params[`${endpoint}_no_context_takeover`] || this._deflate[kPendingClose]) {
        this._deflate.close();
        this._deflate = null;
      } else {
        this._deflate[kWriteInProgress] = false;
        this._deflate[kTotalLength] = 0;
        this._deflate[kBuffers] = [];
      }

      callback(null, data);
    });
  }
}

module.exports = PerMessageDeflate;

/**
 * The listener of the `zlib.DeflateRaw` stream `'data'` event.
 *
 * @param {Buffer} chunk A chunk of data
 * @private
 */
function deflateOnData(chunk) {
  this[kBuffers].push(chunk);
  this[kTotalLength] += chunk.length;
}

/**
 * The listener of the `zlib.InflateRaw` stream `'data'` event.
 *
 * @param {Buffer} chunk A chunk of data
 * @private
 */
function inflateOnData(chunk) {
  this[kTotalLength] += chunk.length;

  if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
    this[kBuffers].push(chunk);
    return;
  }

  this[kError] = new RangeError('Max payload size exceeded');
  this[kError][constants.kStatusCode] = 1009;
  this.removeListener('data', inflateOnData);
  this.reset();
}

/**
 * The listener of the `zlib.InflateRaw` stream `'error'` event.
 *
 * @param {Error} err The emitted error
 * @private
 */
function inflateOnError(err) {
  //
  // There is no need to call `Zlib#close()` as the handle is automatically
  // closed when an error is emitted.
  //
  this[kPerMessageDeflate]._inflate = null;
  err[constants.kStatusCode] = 1007;
  this[kCallback](err);
}

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * content-type
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
 *
 * parameter     = token "=" ( token / quoted-string )
 * token         = 1*tchar
 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
 *               / DIGIT / ALPHA
 *               ; any VCHAR, except delimiters
 * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
 * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
 * obs-text      = %x80-FF
 * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
 */

var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g;
var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/;
var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;

/**
 * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
 *
 * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
 * obs-text    = %x80-FF
 */
var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g;

/**
 * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6
 */
var QUOTE_REGEXP = /([\\"])/g;

/**
 * RegExp to match type in RFC 7231 sec 3.1.1.1
 *
 * media-type = type "/" subtype
 * type       = token
 * subtype    = token
 */
var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;

/**
 * Module exports.
 * @public
 */

exports.format = format;
exports.parse = parse;

/**
 * Format object to media type.
 *
 * @param {object} obj
 * @return {string}
 * @public
 */

function format(obj) {
  if (!obj || typeof obj !== 'object') {
    throw new TypeError('argument obj is required');
  }

  var parameters = obj.parameters;
  var type = obj.type;

  if (!type || !TYPE_REGEXP.test(type)) {
    throw new TypeError('invalid type');
  }

  var string = type;

  // append parameters
  if (parameters && typeof parameters === 'object') {
    var param;
    var params = Object.keys(parameters).sort();

    for (var i = 0; i < params.length; i++) {
      param = params[i];

      if (!TOKEN_REGEXP.test(param)) {
        throw new TypeError('invalid parameter name');
      }

      string += '; ' + param + '=' + qstring(parameters[param]);
    }
  }

  return string;
}

/**
 * Parse media type to object.
 *
 * @param {string|object} string
 * @return {Object}
 * @public
 */

function parse(string) {
  if (!string) {
    throw new TypeError('argument string is required');
  }

  // support req/res-like objects as argument
  var header = typeof string === 'object' ? getcontenttype(string) : string;

  if (typeof header !== 'string') {
    throw new TypeError('argument string is required to be a string');
  }

  var index = header.indexOf(';');
  var type = index !== -1 ? header.substr(0, index).trim() : header.trim();

  if (!TYPE_REGEXP.test(type)) {
    throw new TypeError('invalid media type');
  }

  var obj = new ContentType(type.toLowerCase());

  // parse parameters
  if (index !== -1) {
    var key;
    var match;
    var value;

    PARAM_REGEXP.lastIndex = index;

    while (match = PARAM_REGEXP.exec(header)) {
      if (match.index !== index) {
        throw new TypeError('invalid parameter format');
      }

      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];

      if (value[0] === '"') {
        // remove quotes and escapes
        value = value.substr(1, value.length - 2).replace(QESC_REGEXP, '$1');
      }

      obj.parameters[key] = value;
    }

    if (index !== header.length) {
      throw new TypeError('invalid parameter format');
    }
  }

  return obj;
}

/**
 * Get content-type from req/res objects.
 *
 * @param {object}
 * @return {Object}
 * @private
 */

function getcontenttype(obj) {
  var header;

  if (typeof obj.getHeader === 'function') {
    // res-like
    header = obj.getHeader('content-type');
  } else if (typeof obj.headers === 'object') {
    // req-like
    header = obj.headers && obj.headers['content-type'];
  }

  if (typeof header !== 'string') {
    throw new TypeError('content-type header is missing from object');
  }

  return header;
}

/**
 * Quote a string if necessary.
 *
 * @param {string} val
 * @return {string}
 * @private
 */

function qstring(val) {
  var str = String(val);

  // no need to quote tokens
  if (TOKEN_REGEXP.test(str)) {
    return str;
  }

  if (str.length > 0 && !TEXT_REGEXP.test(str)) {
    throw new TypeError('invalid parameter value');
  }

  return '"' + str.replace(QUOTE_REGEXP, '\\$1') + '"';
}

/**
 * Class to represent a content type.
 * @private
 */
function ContentType(type) {
  this.parameters = Object.create(null);
  this.type = type;
}

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var deprecate = __webpack_require__(10)('http-errors');
var setPrototypeOf = __webpack_require__(33);
var statuses = __webpack_require__(24);
var inherits = __webpack_require__(64);

/**
 * Module exports.
 * @public
 */

module.exports = createError;
module.exports.HttpError = createHttpErrorConstructor();

// Populate exports for all constructors
populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);

/**
 * Get the code class of a status code.
 * @private
 */

function codeClass(status) {
  return Number(String(status).charAt(0) + '00');
}

/**
 * Create a new HTTP Error.
 *
 * @returns {Error}
 * @public
 */

function createError() {
  // so much arity going on ~_~
  var err;
  var msg;
  var status = 500;
  var props = {};
  for (var i = 0; i < arguments.length; i++) {
    var arg = arguments[i];
    if (arg instanceof Error) {
      err = arg;
      status = err.status || err.statusCode || status;
      continue;
    }
    switch (typeof arg) {
      case 'string':
        msg = arg;
        break;
      case 'number':
        status = arg;
        if (i !== 0) {
          deprecate('non-first-argument status code; replace with createError(' + arg + ', ...)');
        }
        break;
      case 'object':
        props = arg;
        break;
    }
  }

  if (typeof status === 'number' && (status < 400 || status >= 600)) {
    deprecate('non-error status code; use only 4xx or 5xx status codes');
  }

  if (typeof status !== 'number' || !statuses[status] && (status < 400 || status >= 600)) {
    status = 500;
  }

  // constructor
  var HttpError = createError[status] || createError[codeClass(status)];

  if (!err) {
    // create error
    err = HttpError ? new HttpError(msg) : new Error(msg || statuses[status]);
    Error.captureStackTrace(err, createError);
  }

  if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
    // add properties to generic error
    err.expose = status < 500;
    err.status = err.statusCode = status;
  }

  for (var key in props) {
    if (key !== 'status' && key !== 'statusCode') {
      err[key] = props[key];
    }
  }

  return err;
}

/**
 * Create HTTP error abstract base class.
 * @private
 */

function createHttpErrorConstructor() {
  function HttpError() {
    throw new TypeError('cannot construct abstract class');
  }

  inherits(HttpError, Error);

  return HttpError;
}

/**
 * Create a constructor for a client error.
 * @private
 */

function createClientErrorConstructor(HttpError, name, code) {
  var className = name.match(/Error$/) ? name : name + 'Error';

  function ClientError(message) {
    // create the error object
    var msg = message != null ? message : statuses[code];
    var err = new Error(msg);

    // capture a stack trace to the construction point
    Error.captureStackTrace(err, ClientError);

    // adjust the [[Prototype]]
    setPrototypeOf(err, ClientError.prototype);

    // redefine the error message
    Object.defineProperty(err, 'message', {
      enumerable: true,
      configurable: true,
      value: msg,
      writable: true
    });

    // redefine the error name
    Object.defineProperty(err, 'name', {
      enumerable: false,
      configurable: true,
      value: className,
      writable: true
    });

    return err;
  }

  inherits(ClientError, HttpError);

  ClientError.prototype.status = code;
  ClientError.prototype.statusCode = code;
  ClientError.prototype.expose = true;

  return ClientError;
}

/**
 * Create a constructor for a server error.
 * @private
 */

function createServerErrorConstructor(HttpError, name, code) {
  var className = name.match(/Error$/) ? name : name + 'Error';

  function ServerError(message) {
    // create the error object
    var msg = message != null ? message : statuses[code];
    var err = new Error(msg);

    // capture a stack trace to the construction point
    Error.captureStackTrace(err, ServerError);

    // adjust the [[Prototype]]
    setPrototypeOf(err, ServerError.prototype);

    // redefine the error message
    Object.defineProperty(err, 'message', {
      enumerable: true,
      configurable: true,
      value: msg,
      writable: true
    });

    // redefine the error name
    Object.defineProperty(err, 'name', {
      enumerable: false,
      configurable: true,
      value: className,
      writable: true
    });

    return err;
  }

  inherits(ServerError, HttpError);

  ServerError.prototype.status = code;
  ServerError.prototype.statusCode = code;
  ServerError.prototype.expose = false;

  return ServerError;
}

/**
 * Populate the exports object with constructors for every error class.
 * @private
 */

function populateConstructorExports(exports, codes, HttpError) {
  codes.forEach(function forEachCode(code) {
    var CodeError;
    var name = toIdentifier(statuses[code]);

    switch (codeClass(code)) {
      case 400:
        CodeError = createClientErrorConstructor(HttpError, name, code);
        break;
      case 500:
        CodeError = createServerErrorConstructor(HttpError, name, code);
        break;
    }

    if (CodeError) {
      // export the constructor
      exports[code] = CodeError;
      exports[name] = CodeError;
    }
  });

  // backwards-compatibility
  exports["I'mateapot"] = deprecate.function(exports.ImATeapot, '"I\'mateapot"; use "ImATeapot" instead');
}

/**
 * Convert a string of words to a JavaScript identifier.
 * @private
 */

function toIdentifier(str) {
  return str.split(' ').map(function (token) {
    return token.slice(0, 1).toUpperCase() + token.slice(1);
  }).join('').replace(/[^ _0-9a-z]/gi, '');
}

/***/ }),
/* 33 */
/***/ (function(module, exports) {

module.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);

function setProtoOf(obj, proto) {
	obj.__proto__ = proto;
	return obj;
}

function mixinProperties(obj, proto) {
	for (var prop in proto) {
		if (!obj.hasOwnProperty(prop)) {
			obj[prop] = proto[prop];
		}
	}
	return obj;
}

/***/ }),
/* 34 */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var createError = __webpack_require__(32);
var getBody = __webpack_require__(127);
var iconv = __webpack_require__(68);
var onFinished = __webpack_require__(36);
var zlib = __webpack_require__(58);

/**
 * Module exports.
 */

module.exports = read;

/**
 * Read a request into a buffer and parse.
 *
 * @param {object} req
 * @param {object} res
 * @param {function} next
 * @param {function} parse
 * @param {function} debug
 * @param {object} options
 * @private
 */

function read(req, res, next, parse, debug, options) {
  var length;
  var opts = options;
  var stream;

  // flag as parsed
  req._body = true;

  // read options
  var encoding = opts.encoding !== null ? opts.encoding : null;
  var verify = opts.verify;

  try {
    // get the content stream
    stream = contentstream(req, debug, opts.inflate);
    length = stream.length;
    stream.length = undefined;
  } catch (err) {
    return next(err);
  }

  // set raw-body options
  opts.length = length;
  opts.encoding = verify ? null : encoding;

  // assert charset is supported
  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {
    return next(createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
      charset: encoding.toLowerCase(),
      type: 'charset.unsupported'
    }));
  }

  // read body
  debug('read body');
  getBody(stream, opts, function (error, body) {
    if (error) {
      var _error;

      if (error.type === 'encoding.unsupported') {
        // echo back charset
        _error = createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
          charset: encoding.toLowerCase(),
          type: 'charset.unsupported'
        });
      } else {
        // set status code on error
        _error = createError(400, error);
      }

      // read off entire request
      stream.resume();
      onFinished(req, function onfinished() {
        next(createError(400, _error));
      });
      return;
    }

    // verify
    if (verify) {
      try {
        debug('verify body');
        verify(req, res, body, encoding);
      } catch (err) {
        next(createError(403, err, {
          body: body,
          type: err.type || 'entity.verify.failed'
        }));
        return;
      }
    }

    // parse
    var str = body;
    try {
      debug('parse body');
      str = typeof body !== 'string' && encoding !== null ? iconv.decode(body, encoding) : body;
      req.body = parse(str);
    } catch (err) {
      next(createError(400, err, {
        body: str,
        type: err.type || 'entity.parse.failed'
      }));
      return;
    }

    next();
  });
}

/**
 * Get the content stream of the request.
 *
 * @param {object} req
 * @param {function} debug
 * @param {boolean} [inflate=true]
 * @return {object}
 * @api private
 */

function contentstream(req, debug, inflate) {
  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase();
  var length = req.headers['content-length'];
  var stream;

  debug('content-encoding "%s"', encoding);

  if (inflate === false && encoding !== 'identity') {
    throw createError(415, 'content encoding unsupported', {
      encoding: encoding,
      type: 'encoding.unsupported'
    });
  }

  switch (encoding) {
    case 'deflate':
      stream = zlib.createInflate();
      debug('inflate body');
      req.pipe(stream);
      break;
    case 'gzip':
      stream = zlib.createGunzip();
      debug('gunzip body');
      req.pipe(stream);
      break;
    case 'identity':
      stream = req;
      stream.length = length;
      break;
    default:
      throw createError(415, 'unsupported content encoding "' + encoding + '"', {
        encoding: encoding,
        type: 'encoding.unsupported'
      });
  }

  return stream;
}

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * on-finished
 * Copyright(c) 2013 Jonathan Ong
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = onFinished;
module.exports.isFinished = isFinished;

/**
 * Module dependencies.
 * @private
 */

var first = __webpack_require__(151);

/**
 * Variables.
 * @private
 */

/* istanbul ignore next */
var defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {
  process.nextTick(fn.bind.apply(fn, arguments));
};

/**
 * Invoke callback when the response has finished, useful for
 * cleaning up resources afterwards.
 *
 * @param {object} msg
 * @param {function} listener
 * @return {object}
 * @public
 */

function onFinished(msg, listener) {
  if (isFinished(msg) !== false) {
    defer(listener, null, msg);
    return msg;
  }

  // attach the listener to the message
  attachListener(msg, listener);

  return msg;
}

/**
 * Determine if message is already finished.
 *
 * @param {object} msg
 * @return {boolean}
 * @public
 */

function isFinished(msg) {
  var socket = msg.socket;

  if (typeof msg.finished === 'boolean') {
    // OutgoingMessage
    return Boolean(msg.finished || socket && !socket.writable);
  }

  if (typeof msg.complete === 'boolean') {
    // IncomingMessage
    return Boolean(msg.upgrade || !socket || !socket.readable || msg.complete && !msg.readable);
  }

  // don't know
  return undefined;
}

/**
 * Attach a finished listener to the message.
 *
 * @param {object} msg
 * @param {function} callback
 * @private
 */

function attachFinishedListener(msg, callback) {
  var eeMsg;
  var eeSocket;
  var finished = false;

  function onFinish(error) {
    eeMsg.cancel();
    eeSocket.cancel();

    finished = true;
    callback(error);
  }

  // finished on first message event
  eeMsg = eeSocket = first([[msg, 'end', 'finish']], onFinish);

  function onSocket(socket) {
    // remove listener
    msg.removeListener('socket', onSocket);

    if (finished) return;
    if (eeMsg !== eeSocket) return;

    // finished on first socket event
    eeSocket = first([[socket, 'error', 'close']], onFinish);
  }

  if (msg.socket) {
    // socket already assigned
    onSocket(msg.socket);
    return;
  }

  // wait for socket to be assigned
  msg.on('socket', onSocket);

  if (msg.socket === undefined) {
    // node.js 0.8 patch
    patchAssignSocket(msg, onSocket);
  }
}

/**
 * Attach the listener to the message.
 *
 * @param {object} msg
 * @return {function}
 * @private
 */

function attachListener(msg, listener) {
  var attached = msg.__onFinished;

  // create a private single listener with queue
  if (!attached || !attached.queue) {
    attached = msg.__onFinished = createListener(msg);
    attachFinishedListener(msg, attached);
  }

  attached.queue.push(listener);
}

/**
 * Create listener on message.
 *
 * @param {object} msg
 * @return {function}
 * @private
 */

function createListener(msg) {
  function listener(err) {
    if (msg.__onFinished === listener) msg.__onFinished = null;
    if (!listener.queue) return;

    var queue = listener.queue;
    listener.queue = null;

    for (var i = 0; i < queue.length; i++) {
      queue[i](err, msg);
    }
  }

  listener.queue = [];

  return listener;
}

/**
 * Patch ServerResponse.prototype.assignSocket for node.js 0.8.
 *
 * @param {ServerResponse} res
 * @param {function} callback
 * @private
 */

function patchAssignSocket(res, callback) {
  var assignSocket = res.assignSocket;

  if (typeof assignSocket !== 'function') return;

  // res.on('socket', callback) is broken in 0.8
  res.assignSocket = function _assignSocket(socket) {
    assignSocket.call(this, socket);
    callback(socket);
  };
}

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * encodeurl
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = encodeUrl;

/**
 * RegExp to match non-URL code points, *after* encoding (i.e. not including "%")
 * and including invalid escape sequences.
 * @private
 */

var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;

/**
 * RegExp to match unmatched surrogate pair.
 * @private
 */

var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;

/**
 * String to replace unmatched surrogate pair with.
 * @private
 */

var UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\uFFFD$2';

/**
 * Encode a URL to a percent-encoded form, excluding already-encoded sequences.
 *
 * This function will take an already-encoded URL and encode all the non-URL
 * code points. This function will not encode the "%" character unless it is
 * not part of a valid sequence (`%20` will be left as-is, but `%foo` will
 * be encoded as `%25foo`).
 *
 * This encode is meant to be "safe" and does not throw errors. It will try as
 * hard as it can to properly encode the given URL, including replacing any raw,
 * unpaired surrogate pairs with the Unicode replacement character prior to
 * encoding.
 *
 * @param {string} url
 * @return {string}
 * @public
 */

function encodeUrl(url) {
  return String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);
}

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */



/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Module exports.
 * @public
 */

module.exports = escapeHtml;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#39;';
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Expose `arrayFlatten`.
 */

module.exports = arrayFlatten;

/**
 * Recursive flatten function with depth.
 *
 * @param  {Array}  array
 * @param  {Array}  result
 * @param  {Number} depth
 * @return {Array}
 */
function flattenWithDepth(array, result, depth) {
  for (var i = 0; i < array.length; i++) {
    var value = array[i];

    if (depth > 0 && Array.isArray(value)) {
      flattenWithDepth(value, result, depth - 1);
    } else {
      result.push(value);
    }
  }

  return result;
}

/**
 * Recursive flatten function. Omitting depth is slightly faster.
 *
 * @param  {Array} array
 * @param  {Array} result
 * @return {Array}
 */
function flattenForever(array, result) {
  for (var i = 0; i < array.length; i++) {
    var value = array[i];

    if (Array.isArray(value)) {
      flattenForever(value, result);
    } else {
      result.push(value);
    }
  }

  return result;
}

/**
 * Flatten an array, with the ability to define a depth.
 *
 * @param  {Array}  array
 * @param  {Number} depth
 * @return {Array}
 */
function arrayFlatten(array, depth) {
  if (depth == null) {
    return flattenForever(array, []);
  }

  return flattenWithDepth(array, [], depth);
}

/***/ }),
/* 40 */
/***/ (function(module, exports) {

/**
 * Merge object b with object a.
 *
 *     var a = { foo: 'bar' }
 *       , b = { bar: 'baz' };
 *
 *     merge(a, b);
 *     // => { foo: 'bar', bar: 'baz' }
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object}
 * @api public
 */

exports = module.exports = function (a, b) {
  if (a && b) {
    for (var key in b) {
      a[key] = b[key];
    }
  }
  return a;
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(28);
var Is = __webpack_require__(27);
var DefaultSize = 8192;
var CR = new Buffer('\r', 'ascii')[0];
var LF = new Buffer('\n', 'ascii')[0];
var CRLF = '\r\n';
var MessageBuffer = /** @class */function () {
    function MessageBuffer(encoding) {
        if (encoding === void 0) {
            encoding = 'utf8';
        }
        this.encoding = encoding;
        this.index = 0;
        this.buffer = new Buffer(DefaultSize);
    }
    MessageBuffer.prototype.append = function (chunk) {
        var toAppend = chunk;
        if (typeof chunk == 'string') {
            var str = chunk;
            var bufferLen = Buffer.byteLength(str, this.encoding);
            toAppend = new Buffer(bufferLen);
            toAppend.write(str, 0, bufferLen, this.encoding);
        }
        if (this.buffer.length - this.index >= toAppend.length) {
            toAppend.copy(this.buffer, this.index, 0, toAppend.length);
        } else {
            var newSize = (Math.ceil((this.index + toAppend.length) / DefaultSize) + 1) * DefaultSize;
            if (this.index === 0) {
                this.buffer = new Buffer(newSize);
                toAppend.copy(this.buffer, 0, 0, toAppend.length);
            } else {
                this.buffer = Buffer.concat([this.buffer.slice(0, this.index), toAppend], newSize);
            }
        }
        this.index += toAppend.length;
    };
    MessageBuffer.prototype.tryReadHeaders = function () {
        var result = undefined;
        var current = 0;
        while (current + 3 < this.index && (this.buffer[current] !== CR || this.buffer[current + 1] !== LF || this.buffer[current + 2] !== CR || this.buffer[current + 3] !== LF)) {
            current++;
        }
        // No header / body separator found (e.g CRLFCRLF)
        if (current + 3 >= this.index) {
            return result;
        }
        result = Object.create(null);
        var headers = this.buffer.toString('ascii', 0, current).split(CRLF);
        headers.forEach(function (header) {
            var index = header.indexOf(':');
            if (index === -1) {
                throw new Error('Message header must separate key and value using :');
            }
            var key = header.substr(0, index);
            var value = header.substr(index + 1).trim();
            result[key] = value;
        });
        var nextStart = current + 4;
        this.buffer = this.buffer.slice(nextStart);
        this.index = this.index - nextStart;
        return result;
    };
    MessageBuffer.prototype.tryReadContent = function (length) {
        if (this.index < length) {
            return null;
        }
        var result = this.buffer.toString(this.encoding, 0, length);
        var nextStart = length;
        this.buffer.copy(this.buffer, 0, nextStart);
        this.index = this.index - nextStart;
        return result;
    };
    Object.defineProperty(MessageBuffer.prototype, "numberOfBytes", {
        get: function () {
            return this.index;
        },
        enumerable: true,
        configurable: true
    });
    return MessageBuffer;
}();
var MessageReader;
(function (MessageReader) {
    function is(value) {
        var candidate = value;
        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) && Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
    }
    MessageReader.is = is;
})(MessageReader = exports.MessageReader || (exports.MessageReader = {}));
var AbstractMessageReader = /** @class */function () {
    function AbstractMessageReader() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
    }
    AbstractMessageReader.prototype.dispose = function () {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    };
    Object.defineProperty(AbstractMessageReader.prototype, "onError", {
        get: function () {
            return this.errorEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    AbstractMessageReader.prototype.fireError = function (error) {
        this.errorEmitter.fire(this.asError(error));
    };
    Object.defineProperty(AbstractMessageReader.prototype, "onClose", {
        get: function () {
            return this.closeEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    AbstractMessageReader.prototype.fireClose = function () {
        this.closeEmitter.fire(undefined);
    };
    Object.defineProperty(AbstractMessageReader.prototype, "onPartialMessage", {
        get: function () {
            return this.partialMessageEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    AbstractMessageReader.prototype.firePartialMessage = function (info) {
        this.partialMessageEmitter.fire(info);
    };
    AbstractMessageReader.prototype.asError = function (error) {
        if (error instanceof Error) {
            return error;
        } else {
            return new Error("Reader recevied error. Reason: " + (Is.string(error.message) ? error.message : 'unknown'));
        }
    };
    return AbstractMessageReader;
}();
exports.AbstractMessageReader = AbstractMessageReader;
var StreamMessageReader = /** @class */function (_super) {
    __extends(StreamMessageReader, _super);
    function StreamMessageReader(readable, encoding) {
        if (encoding === void 0) {
            encoding = 'utf8';
        }
        var _this = _super.call(this) || this;
        _this.readable = readable;
        _this.buffer = new MessageBuffer(encoding);
        _this._partialMessageTimeout = 10000;
        return _this;
    }
    Object.defineProperty(StreamMessageReader.prototype, "partialMessageTimeout", {
        get: function () {
            return this._partialMessageTimeout;
        },
        set: function (timeout) {
            this._partialMessageTimeout = timeout;
        },
        enumerable: true,
        configurable: true
    });
    StreamMessageReader.prototype.listen = function (callback) {
        var _this = this;
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = undefined;
        this.callback = callback;
        this.readable.on('data', function (data) {
            _this.onData(data);
        });
        this.readable.on('error', function (error) {
            return _this.fireError(error);
        });
        this.readable.on('close', function () {
            return _this.fireClose();
        });
    };
    StreamMessageReader.prototype.onData = function (data) {
        this.buffer.append(data);
        while (true) {
            if (this.nextMessageLength === -1) {
                var headers = this.buffer.tryReadHeaders();
                if (!headers) {
                    return;
                }
                var contentLength = headers['Content-Length'];
                if (!contentLength) {
                    throw new Error('Header must provide a Content-Length property.');
                }
                var length = parseInt(contentLength);
                if (isNaN(length)) {
                    throw new Error('Content-Length value must be a number.');
                }
                this.nextMessageLength = length;
                // Take the encoding form the header. For compatibility
                // treat both utf-8 and utf8 as node utf8
            }
            var msg = this.buffer.tryReadContent(this.nextMessageLength);
            if (msg === null) {
                /** We haven't recevied the full message yet. */
                this.setPartialMessageTimer();
                return;
            }
            this.clearPartialMessageTimer();
            this.nextMessageLength = -1;
            this.messageToken++;
            var json = JSON.parse(msg);
            this.callback(json);
        }
    };
    StreamMessageReader.prototype.clearPartialMessageTimer = function () {
        if (this.partialMessageTimer) {
            clearTimeout(this.partialMessageTimer);
            this.partialMessageTimer = undefined;
        }
    };
    StreamMessageReader.prototype.setPartialMessageTimer = function () {
        var _this = this;
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
            return;
        }
        this.partialMessageTimer = setTimeout(function (token, timeout) {
            _this.partialMessageTimer = undefined;
            if (token === _this.messageToken) {
                _this.firePartialMessage({ messageToken: token, waitingTime: timeout });
                _this.setPartialMessageTimer();
            }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
    };
    return StreamMessageReader;
}(AbstractMessageReader);
exports.StreamMessageReader = StreamMessageReader;
var IPCMessageReader = /** @class */function (_super) {
    __extends(IPCMessageReader, _super);
    function IPCMessageReader(process) {
        var _this = _super.call(this) || this;
        _this.process = process;
        var eventEmitter = _this.process;
        eventEmitter.on('error', function (error) {
            return _this.fireError(error);
        });
        eventEmitter.on('close', function () {
            return _this.fireClose();
        });
        return _this;
    }
    IPCMessageReader.prototype.listen = function (callback) {
        this.process.on('message', callback);
    };
    return IPCMessageReader;
}(AbstractMessageReader);
exports.IPCMessageReader = IPCMessageReader;
var SocketMessageReader = /** @class */function (_super) {
    __extends(SocketMessageReader, _super);
    function SocketMessageReader(socket, encoding) {
        if (encoding === void 0) {
            encoding = 'utf-8';
        }
        return _super.call(this, socket, encoding) || this;
    }
    return SocketMessageReader;
}(StreamMessageReader);
exports.SocketMessageReader = SocketMessageReader;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(28);
var Is = __webpack_require__(27);
var ContentLength = 'Content-Length: ';
var CRLF = '\r\n';
var MessageWriter;
(function (MessageWriter) {
    function is(value) {
        var candidate = value;
        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) && Is.func(candidate.onError) && Is.func(candidate.write);
    }
    MessageWriter.is = is;
})(MessageWriter = exports.MessageWriter || (exports.MessageWriter = {}));
var AbstractMessageWriter = /** @class */function () {
    function AbstractMessageWriter() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
    }
    AbstractMessageWriter.prototype.dispose = function () {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    };
    Object.defineProperty(AbstractMessageWriter.prototype, "onError", {
        get: function () {
            return this.errorEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    AbstractMessageWriter.prototype.fireError = function (error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
    };
    Object.defineProperty(AbstractMessageWriter.prototype, "onClose", {
        get: function () {
            return this.closeEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    AbstractMessageWriter.prototype.fireClose = function () {
        this.closeEmitter.fire(undefined);
    };
    AbstractMessageWriter.prototype.asError = function (error) {
        if (error instanceof Error) {
            return error;
        } else {
            return new Error("Writer recevied error. Reason: " + (Is.string(error.message) ? error.message : 'unknown'));
        }
    };
    return AbstractMessageWriter;
}();
exports.AbstractMessageWriter = AbstractMessageWriter;
var StreamMessageWriter = /** @class */function (_super) {
    __extends(StreamMessageWriter, _super);
    function StreamMessageWriter(writable, encoding) {
        if (encoding === void 0) {
            encoding = 'utf8';
        }
        var _this = _super.call(this) || this;
        _this.writable = writable;
        _this.encoding = encoding;
        _this.errorCount = 0;
        _this.writable.on('error', function (error) {
            return _this.fireError(error);
        });
        _this.writable.on('close', function () {
            return _this.fireClose();
        });
        return _this;
    }
    StreamMessageWriter.prototype.write = function (msg) {
        var json = JSON.stringify(msg);
        var contentLength = Buffer.byteLength(json, this.encoding);
        var headers = [ContentLength, contentLength.toString(), CRLF, CRLF];
        try {
            // Header must be written in ASCII encoding
            this.writable.write(headers.join(''), 'ascii');
            // Now write the content. This can be written in any encoding
            this.writable.write(json, this.encoding);
            this.errorCount = 0;
        } catch (error) {
            this.errorCount++;
            this.fireError(error, msg, this.errorCount);
        }
    };
    return StreamMessageWriter;
}(AbstractMessageWriter);
exports.StreamMessageWriter = StreamMessageWriter;
var IPCMessageWriter = /** @class */function (_super) {
    __extends(IPCMessageWriter, _super);
    function IPCMessageWriter(process) {
        var _this = _super.call(this) || this;
        _this.process = process;
        _this.errorCount = 0;
        _this.queue = [];
        _this.sending = false;
        var eventEmitter = _this.process;
        eventEmitter.on('error', function (error) {
            return _this.fireError(error);
        });
        eventEmitter.on('close', function () {
            return _this.fireClose;
        });
        return _this;
    }
    IPCMessageWriter.prototype.write = function (msg) {
        if (!this.sending && this.queue.length === 0) {
            // See https://github.com/nodejs/node/issues/7657
            this.doWriteMessage(msg);
        } else {
            this.queue.push(msg);
        }
    };
    IPCMessageWriter.prototype.doWriteMessage = function (msg) {
        var _this = this;
        try {
            if (this.process.send) {
                this.sending = true;
                this.process.send(msg, undefined, undefined, function (error) {
                    _this.sending = false;
                    if (error) {
                        _this.errorCount++;
                        _this.fireError(error, msg, _this.errorCount);
                    } else {
                        _this.errorCount = 0;
                    }
                    if (_this.queue.length > 0) {
                        _this.doWriteMessage(_this.queue.shift());
                    }
                });
            }
        } catch (error) {
            this.errorCount++;
            this.fireError(error, msg, this.errorCount);
        }
    };
    return IPCMessageWriter;
}(AbstractMessageWriter);
exports.IPCMessageWriter = IPCMessageWriter;
var SocketMessageWriter = /** @class */function (_super) {
    __extends(SocketMessageWriter, _super);
    function SocketMessageWriter(socket, encoding) {
        if (encoding === void 0) {
            encoding = 'utf8';
        }
        var _this = _super.call(this) || this;
        _this.socket = socket;
        _this.queue = [];
        _this.sending = false;
        _this.encoding = encoding;
        _this.errorCount = 0;
        _this.socket.on('error', function (error) {
            return _this.fireError(error);
        });
        _this.socket.on('close', function () {
            return _this.fireClose();
        });
        return _this;
    }
    SocketMessageWriter.prototype.write = function (msg) {
        if (!this.sending && this.queue.length === 0) {
            // See https://github.com/nodejs/node/issues/7657
            this.doWriteMessage(msg);
        } else {
            this.queue.push(msg);
        }
    };
    SocketMessageWriter.prototype.doWriteMessage = function (msg) {
        var _this = this;
        var json = JSON.stringify(msg);
        var contentLength = Buffer.byteLength(json, this.encoding);
        var headers = [ContentLength, contentLength.toString(), CRLF, CRLF];
        try {
            // Header must be written in ASCII encoding
            this.sending = true;
            this.socket.write(headers.join(''), 'ascii', function (error) {
                if (error) {
                    _this.handleError(error, msg);
                }
                try {
                    // Now write the content. This can be written in any encoding
                    _this.socket.write(json, _this.encoding, function (error) {
                        _this.sending = false;
                        if (error) {
                            _this.handleError(error, msg);
                        } else {
                            _this.errorCount = 0;
                        }
                        if (_this.queue.length > 0) {
                            _this.doWriteMessage(_this.queue.shift());
                        }
                    });
                } catch (error) {
                    _this.handleError(error, msg);
                }
            });
        } catch (error) {
            this.handleError(error, msg);
        }
    };
    SocketMessageWriter.prototype.handleError = function (error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    };
    return SocketMessageWriter;
}(AbstractMessageWriter);
exports.SocketMessageWriter = SocketMessageWriter;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_jsonrpc_1 = __webpack_require__(11);
exports.ErrorCodes = vscode_jsonrpc_1.ErrorCodes;
exports.ResponseError = vscode_jsonrpc_1.ResponseError;
exports.CancellationToken = vscode_jsonrpc_1.CancellationToken;
exports.CancellationTokenSource = vscode_jsonrpc_1.CancellationTokenSource;
exports.Disposable = vscode_jsonrpc_1.Disposable;
exports.Event = vscode_jsonrpc_1.Event;
exports.Emitter = vscode_jsonrpc_1.Emitter;
exports.Trace = vscode_jsonrpc_1.Trace;
exports.SetTraceNotification = vscode_jsonrpc_1.SetTraceNotification;
exports.LogTraceNotification = vscode_jsonrpc_1.LogTraceNotification;
exports.RequestType = vscode_jsonrpc_1.RequestType;
exports.RequestType0 = vscode_jsonrpc_1.RequestType0;
exports.NotificationType = vscode_jsonrpc_1.NotificationType;
exports.NotificationType0 = vscode_jsonrpc_1.NotificationType0;
exports.MessageReader = vscode_jsonrpc_1.MessageReader;
exports.MessageWriter = vscode_jsonrpc_1.MessageWriter;
exports.ConnectionStrategy = vscode_jsonrpc_1.ConnectionStrategy;
exports.StreamMessageReader = vscode_jsonrpc_1.StreamMessageReader;
exports.StreamMessageWriter = vscode_jsonrpc_1.StreamMessageWriter;
exports.IPCMessageReader = vscode_jsonrpc_1.IPCMessageReader;
exports.IPCMessageWriter = vscode_jsonrpc_1.IPCMessageWriter;
exports.createClientPipeTransport = vscode_jsonrpc_1.createClientPipeTransport;
exports.createServerPipeTransport = vscode_jsonrpc_1.createServerPipeTransport;
exports.generateRandomPipeName = vscode_jsonrpc_1.generateRandomPipeName;
exports.createClientSocketTransport = vscode_jsonrpc_1.createClientSocketTransport;
exports.createServerSocketTransport = vscode_jsonrpc_1.createServerSocketTransport;
__export(__webpack_require__(3));
__export(__webpack_require__(198));
function createProtocolConnection(reader, writer, logger, strategy) {
    return vscode_jsonrpc_1.createMessageConnection(reader, writer, logger, strategy);
}
exports.createProtocolConnection = createProtocolConnection;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const symbol_1 = __webpack_require__(12);
const util = __webpack_require__(4);
const typeString_1 = __webpack_require__(29);
class TypeAggregate {
    constructor(symbolStore, symbol, excludeTraits) {
        this.symbolStore = symbolStore;
        this._excludeTraits = false;
        if (!symbol) {
            throw new Error('Invalid Argument');
        }
        this._symbol = symbol;
        this._excludeTraits = excludeTraits;
    }
    get type() {
        return this._symbol;
    }
    get name() {
        return Array.isArray(this._symbol) ? this._symbol[0].name : this._symbol.name;
    }
    isBaseClass(name) {
        let lcName = name.toLowerCase();
        let fn = x => {
            return x.kind === 1 && lcName === x.name.toLowerCase();
        };
        return !!this.associated(fn);
    }
    isAssociated(name) {
        if (!name) {
            return false;
        }
        let lcName = name.toLowerCase();
        let fn = x => {
            return x.name.toLowerCase() === lcName;
        };
        return this.associated(fn).length > 0;
    }
    associated(filter) {
        let assoc = this._getAssociated();
        return filter ? util.filter(assoc, filter) : assoc;
    }
    firstMember(predicate) {
        let member;
        let symbols = Array.isArray(this._symbol) ? this._symbol : [this._symbol];
        for (let n = 0; n < symbols.length; ++n) {
            if (member = symbol_1.PhpSymbol.findChild(symbols[n], predicate)) {
                return member;
            }
        }
        for (let s of this._associatedIterator()) {
            if (member = symbol_1.PhpSymbol.findChild(s, predicate)) {
                return member;
            }
        }
        return undefined;
    }
    members(mergeStrategy, predicate) {
        let associated = this._getAssociated().slice(0);
        let kind;
        let name;
        if (Array.isArray(this._symbol)) {
            associated.unshift(...this._symbol);
            kind = this._symbol[0].kind;
            name = this._symbol[0].name;
        } else {
            associated.unshift(this._symbol);
            kind = this._symbol.kind;
            name = this._symbol.name;
        }
        let members;
        switch (kind) {
            case 1:
                members = this._classMembers(associated, mergeStrategy, predicate);
                break;
            case 2:
                members = this._interfaceMembers(associated, predicate);
                break;
            case 4:
                members = this._traitMembers(associated, predicate);
                break;
            default:
                members = [];
                break;
        }
        return this._resolveThisAndStaticReturnType(members, name);
    }
    _resolveThisAndStaticReturnType(members, name) {
        let resolved = [];
        let s;
        let type;
        let sClone;
        for (let n = 0; n < members.length; ++n) {
            s = members[n];
            if ((s.kind & (32 | 16)) > 0 && s.doc && s.doc.type) {
                type = typeString_1.TypeString.resolveThisOrStatic(s.doc.type, name);
                if (type !== s.doc.type) {
                    sClone = symbol_1.PhpSymbol.clone(s);
                    sClone.doc = { description: s.doc.description, type: type };
                    resolved.push(sClone);
                    continue;
                }
            }
            resolved.push(s);
        }
        return resolved;
    }
    _classMembers(associated, strategy, predicate) {
        let members = [];
        let s;
        let traits = [];
        let p = predicate;
        let noPrivate = x => {
            return !(x.modifiers & 4) && (!predicate || predicate(x));
        };
        for (let n = 0; n < associated.length; ++n) {
            s = associated[n];
            if (s.kind === 4) {
                traits.push(s);
            } else if (s.children) {
                Array.prototype.push.apply(members, p ? s.children.filter(p) : s.children);
            }
            p = noPrivate;
        }
        p = noPrivate;
        members = this._mergeMembers(members, strategy);
        Array.prototype.push.apply(members, this._traitMembers(traits, p));
        return members;
    }
    _interfaceMembers(interfaces, predicate) {
        let members = [];
        let s;
        for (let n = 0; n < interfaces.length; ++n) {
            s = interfaces[n];
            if (s.children) {
                Array.prototype.push.apply(members, predicate ? s.children.filter(predicate) : s.children);
            }
        }
        return members;
    }
    _traitMembers(traits, predicate) {
        return this._interfaceMembers(traits, predicate);
    }
    _mergeMembers(symbols, strategy) {
        let map = {};
        let s;
        let mapped;
        if (strategy === 0) {
            return symbols;
        }
        for (let n = 0; n < symbols.length; ++n) {
            s = symbols[n];
            mapped = map[s.name];
            if (!mapped || (mapped.modifiers & 256) > 0 && !(s.modifiers & 256) || strategy === 2 && (!mapped.doc || this.hasInheritdoc(mapped.doc.description)) && s.doc || strategy === 3) {
                map[s.name] = s;
            }
        }
        return Object.keys(map).map(v => {
            return map[v];
        });
    }
    hasInheritdoc(description) {
        if (!description) {
            return false;
        }
        description = description.toLowerCase().trim();
        return description === '@inheritdoc' || description === '{@inheritdoc}';
    }
    _getAssociated() {
        if (this._associated) {
            return this._associated;
        }
        return this._associated = Array.from(this._associatedIterator());
    }
    _symbolsAssociatedReduce(accum, current) {
        if (current.associated) {
            Array.prototype.push.apply(accum, current.associated);
        }
        return accum;
    }
    *_associatedIterator() {
        let associated = new Set();
        let symbols;
        let queue = [];
        let stub;
        let s;
        if (Array.isArray(this._symbol)) {
            Array.prototype.push.apply(queue, this._symbol.reduce(this._symbolsAssociatedReduce, []));
        } else if (this._symbol.associated) {
            Array.prototype.push.apply(queue, this._symbol.associated);
        }
        let filterFn = x => {
            return symbol_1.PhpSymbol.isClassLike(x) && !associated.has(x);
        };
        while (stub = queue.shift()) {
            if (this._excludeTraits && stub.kind === 4) {
                continue;
            }
            symbols = this.symbolStore.find(stub.name, filterFn);
            for (let n = 0; n < symbols.length; ++n) {
                s = symbols[n];
                associated.add(s);
                if (s.associated) {
                    Array.prototype.push.apply(queue, s.associated);
                }
                yield s;
            }
        }
    }
    static create(symbolStore, fqn) {
        if (!fqn) {
            return null;
        }
        let symbols = symbolStore.find(fqn, symbol_1.PhpSymbol.isClassLike);
        if (!symbols.length) {
            return null;
        } else if (symbols.length === 1) {
            return new TypeAggregate(symbolStore, symbols[0]);
        } else {
            return new TypeAggregate(symbolStore, symbols);
        }
    }
}
exports.TypeAggregate = TypeAggregate;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(2).fromCallback;
const rimraf = __webpack_require__(235);

module.exports = {
  remove: u(rimraf),
  removeSync: rimraf.sync
};

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Merges an array of buffers into a new buffer.
 *
 * @param {Buffer[]} list The array of buffers to concat
 * @param {Number} totalLength The total length of buffers in the list
 * @return {Buffer} The resulting buffer
 * @public
 */

function concat(list, totalLength) {
  const target = Buffer.allocUnsafe(totalLength);
  var offset = 0;

  for (var i = 0; i < list.length; i++) {
    const buf = list[i];
    buf.copy(target, offset);
    offset += buf.length;
  }

  return target;
}

/**
 * Masks a buffer using the given mask.
 *
 * @param {Buffer} source The buffer to mask
 * @param {Buffer} mask The mask to use
 * @param {Buffer} output The buffer where to store the result
 * @param {Number} offset The offset at which to start writing
 * @param {Number} length The number of bytes to mask.
 * @public
 */
function _mask(source, mask, output, offset, length) {
  for (var i = 0; i < length; i++) {
    output[offset + i] = source[i] ^ mask[i & 3];
  }
}

/**
 * Unmasks a buffer using the given mask.
 *
 * @param {Buffer} buffer The buffer to unmask
 * @param {Buffer} mask The mask to use
 * @public
 */
function _unmask(buffer, mask) {
  // Required until https://github.com/nodejs/node/issues/9006 is resolved.
  const length = buffer.length;
  for (var i = 0; i < length; i++) {
    buffer[i] ^= mask[i & 3];
  }
}

try {
  const bufferUtil = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"bufferutil\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
  const bu = bufferUtil.BufferUtil || bufferUtil;

  module.exports = {
    mask(source, mask, output, offset, length) {
      if (length < 48) _mask(source, mask, output, offset, length);else bu.mask(source, mask, output, offset, length);
    },
    unmask(buffer, mask) {
      if (buffer.length < 32) _unmask(buffer, mask);else bu.unmask(buffer, mask);
    },
    concat
  };
} catch (e) /* istanbul ignore next */{
  module.exports = { concat, mask: _mask, unmask: _unmask };
}

/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = [["0","\u0000",127,"€"],["8140","丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",5,"乲乴",9,"乿",6,"亇亊"],["8180","亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",6,"伋伌伒",4,"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",4,"佄佅佇",5,"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"],["8240","侤侫侭侰",4,"侶",8,"俀俁係俆俇俈俉俋俌俍俒",4,"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",11],["8280","個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",10,"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",4,"偖偗偘偙偛偝",7,"偦",5,"偭",8,"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",20,"傤傦傪傫傭",4,"傳",6,"傼"],["8340","傽",17,"僐",5,"僗僘僙僛",10,"僨僩僪僫僯僰僱僲僴僶",4,"僼",9,"儈"],["8380","儉儊儌",5,"儓",13,"儢",28,"兂兇兊兌兎兏児兒兓兗兘兙兛兝",4,"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",4,"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",5],["8440","凘凙凚凜凞凟凢凣凥",5,"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",5,"剋剎剏剒剓剕剗剘"],["8480","剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",9,"剾劀劃",4,"劉",6,"劑劒劔",6,"劜劤劥劦劧劮劯劰労",9,"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",5,"勠勡勢勣勥",10,"勱",7,"勻勼勽匁匂匃匄匇匉匊匋匌匎"],["8540","匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",9,"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"],["8580","厐",4,"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",6,"厷厸厹厺厼厽厾叀參",4,"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",4,"呣呥呧呩",7,"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"],["8640","咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",4,"哫哬哯哰哱哴",5,"哻哾唀唂唃唄唅唈唊",4,"唒唓唕",5,"唜唝唞唟唡唥唦"],["8680","唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",4,"啑啒啓啔啗",4,"啝啞啟啠啢啣啨啩啫啯",5,"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",6,"喨",8,"喲喴営喸喺喼喿",4,"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",4,"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",4,"嗿嘂嘃嘄嘅"],["8740","嘆嘇嘊嘋嘍嘐",7,"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",11,"噏",4,"噕噖噚噛噝",4],["8780","噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",7,"嚇",6,"嚐嚑嚒嚔",14,"嚤",10,"嚰",6,"嚸嚹嚺嚻嚽",12,"囋",8,"囕囖囘囙囜団囥",5,"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",6],["8840","園",9,"圝圞圠圡圢圤圥圦圧圫圱圲圴",4,"圼圽圿坁坃坄坅坆坈坉坋坒",4,"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"],["8880","垁垇垈垉垊垍",4,"垔",6,"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",8,"埄",6,"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",7,"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",4,"堫",4,"報堲堳場堶",7],["8940","堾",5,"塅",6,"塎塏塐塒塓塕塖塗塙",4,"塟",5,"塦",4,"塭",16,"塿墂墄墆墇墈墊墋墌"],["8980","墍",4,"墔",4,"墛墜墝墠",7,"墪",17,"墽墾墿壀壂壃壄壆",10,"壒壓壔壖",13,"壥",5,"壭壯壱売壴壵壷壸壺",7,"夃夅夆夈",4,"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"],["8a40","夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",4,"奡奣奤奦",12,"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"],["8a80","妧妬妭妰妱妳",5,"妺妼妽妿",6,"姇姈姉姌姍姎姏姕姖姙姛姞",4,"姤姦姧姩姪姫姭",11,"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",6,"娳娵娷",4,"娽娾娿婁",4,"婇婈婋",9,"婖婗婘婙婛",5],["8b40","婡婣婤婥婦婨婩婫",8,"婸婹婻婼婽婾媀",17,"媓",6,"媜",13,"媫媬"],["8b80","媭",4,"媴媶媷媹",4,"媿嫀嫃",5,"嫊嫋嫍",4,"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",4,"嫲",22,"嬊",11,"嬘",25,"嬳嬵嬶嬸",7,"孁",6],["8c40","孈",7,"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"],["8c80","寑寔",8,"寠寢寣實寧審",4,"寯寱",6,"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",6,"屰屲",6,"屻屼屽屾岀岃",4,"岉岊岋岎岏岒岓岕岝",4,"岤",4],["8d40","岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",5,"峌",5,"峓",5,"峚",6,"峢峣峧峩峫峬峮峯峱",9,"峼",4],["8d80","崁崄崅崈",5,"崏",4,"崕崗崘崙崚崜崝崟",4,"崥崨崪崫崬崯",4,"崵",7,"崿",7,"嵈嵉嵍",10,"嵙嵚嵜嵞",10,"嵪嵭嵮嵰嵱嵲嵳嵵",12,"嶃",21,"嶚嶛嶜嶞嶟嶠"],["8e40","嶡",21,"嶸",12,"巆",6,"巎",12,"巜巟巠巣巤巪巬巭"],["8e80","巰巵巶巸",4,"巿帀帄帇帉帊帋帍帎帒帓帗帞",7,"帨",4,"帯帰帲",4,"帹帺帾帿幀幁幃幆",5,"幍",6,"幖",4,"幜幝幟幠幣",14,"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",4,"庮",4,"庴庺庻庼庽庿",6],["8f40","廆廇廈廋",5,"廔廕廗廘廙廚廜",11,"廩廫",8,"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"],["8f80","弨弫弬弮弰弲",6,"弻弽弾弿彁",14,"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",5,"復徫徬徯",5,"徶徸徹徺徻徾",4,"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"],["9040","怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",4,"怶",4,"怽怾恀恄",6,"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"],["9080","悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",7,"惇惈惉惌",4,"惒惓惔惖惗惙惛惞惡",4,"惪惱惲惵惷惸惻",4,"愂愃愄愅愇愊愋愌愐",4,"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",18,"慀",6],["9140","慇慉態慍慏慐慒慓慔慖",6,"慞慟慠慡慣慤慥慦慩",6,"慱慲慳慴慶慸",18,"憌憍憏",4,"憕"],["9180","憖",6,"憞",8,"憪憫憭",9,"憸",5,"憿懀懁懃",4,"應懌",4,"懓懕",16,"懧",13,"懶",8,"戀",5,"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",4,"扂扄扅扆扊"],["9240","扏扐払扖扗扙扚扜",6,"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",5,"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"],["9280","拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",5,"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",7,"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",6,"採掤掦掫掯掱掲掵掶掹掻掽掿揀"],["9340","揁揂揃揅揇揈揊揋揌揑揓揔揕揗",6,"揟揢揤",4,"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",4,"損搎搑搒搕",5,"搝搟搢搣搤"],["9380","搥搧搨搩搫搮",5,"搵",4,"搻搼搾摀摂摃摉摋",6,"摓摕摖摗摙",4,"摟",7,"摨摪摫摬摮",9,"摻",6,"撃撆撈",8,"撓撔撗撘撚撛撜撝撟",4,"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",6,"擏擑擓擔擕擖擙據"],["9440","擛擜擝擟擠擡擣擥擧",24,"攁",7,"攊",7,"攓",4,"攙",8],["9480","攢攣攤攦",4,"攬攭攰攱攲攳攷攺攼攽敀",4,"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",14,"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",7,"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",7,"旡旣旤旪旫"],["9540","旲旳旴旵旸旹旻",4,"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",4,"昽昿晀時晄",6,"晍晎晐晑晘"],["9580","晙晛晜晝晞晠晢晣晥晧晩",4,"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",4,"暞",8,"暩",4,"暯",4,"暵暶暷暸暺暻暼暽暿",25,"曚曞",7,"曧曨曪",5,"曱曵曶書曺曻曽朁朂會"],["9640","朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",5,"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",4,"杝杢杣杤杦杧杫杬杮東杴杶"],["9680","杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",7,"柂柅",9,"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",7,"柾栁栂栃栄栆栍栐栒栔栕栘",4,"栞栟栠栢",6,"栫",6,"栴栵栶栺栻栿桇桋桍桏桒桖",5],["9740","桜桝桞桟桪桬",7,"桵桸",8,"梂梄梇",7,"梐梑梒梔梕梖梘",9,"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"],["9780","梹",6,"棁棃",5,"棊棌棎棏棐棑棓棔棖棗棙棛",4,"棡棢棤",9,"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",4,"椌椏椑椓",11,"椡椢椣椥",7,"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",16,"楕楖楘楙楛楜楟"],["9840","楡楢楤楥楧楨楩楪楬業楯楰楲",4,"楺楻楽楾楿榁榃榅榊榋榌榎",5,"榖榗榙榚榝",9,"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"],["9880","榾榿槀槂",7,"構槍槏槑槒槓槕",5,"槜槝槞槡",11,"槮槯槰槱槳",9,"槾樀",9,"樋",11,"標",5,"樠樢",5,"権樫樬樭樮樰樲樳樴樶",6,"樿",4,"橅橆橈",7,"橑",6,"橚"],["9940","橜",4,"橢橣橤橦",10,"橲",6,"橺橻橽橾橿檁檂檃檅",8,"檏檒",4,"檘",7,"檡",5],["9980","檧檨檪檭",114,"欥欦欨",6],["9a40","欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",11,"歚",7,"歨歩歫",13,"歺歽歾歿殀殅殈"],["9a80","殌殎殏殐殑殔殕殗殘殙殜",4,"殢",7,"殫",7,"殶殸",6,"毀毃毄毆",4,"毌毎毐毑毘毚毜",4,"毢",7,"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",6,"氈",4,"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",4,"汑汒汓汖汘"],["9b40","汙汚汢汣汥汦汧汫",4,"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"],["9b80","泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",5,"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",4,"涃涄涆涇涊涋涍涏涐涒涖",4,"涜涢涥涬涭涰涱涳涴涶涷涹",5,"淁淂淃淈淉淊"],["9c40","淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",7,"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"],["9c80","渶渷渹渻",7,"湅",7,"湏湐湑湒湕湗湙湚湜湝湞湠",10,"湬湭湯",14,"満溁溂溄溇溈溊",4,"溑",6,"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",5],["9d40","滰滱滲滳滵滶滷滸滺",7,"漃漄漅漇漈漊",4,"漐漑漒漖",9,"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",6,"漿潀潁潂"],["9d80","潃潄潅潈潉潊潌潎",9,"潙潚潛潝潟潠潡潣潤潥潧",5,"潯潰潱潳潵潶潷潹潻潽",6,"澅澆澇澊澋澏",12,"澝澞澟澠澢",4,"澨",10,"澴澵澷澸澺",5,"濁濃",5,"濊",6,"濓",10,"濟濢濣濤濥"],["9e40","濦",7,"濰",32,"瀒",7,"瀜",6,"瀤",6],["9e80","瀫",9,"瀶瀷瀸瀺",17,"灍灎灐",13,"灟",11,"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",12,"炰炲炴炵炶為炾炿烄烅烆烇烉烋",12,"烚"],["9f40","烜烝烞烠烡烢烣烥烪烮烰",6,"烸烺烻烼烾",10,"焋",4,"焑焒焔焗焛",10,"焧",7,"焲焳焴"],["9f80","焵焷",13,"煆煇煈煉煋煍煏",12,"煝煟",4,"煥煩",4,"煯煰煱煴煵煶煷煹煻煼煾",5,"熅",4,"熋熌熍熎熐熑熒熓熕熖熗熚",4,"熡",6,"熩熪熫熭",5,"熴熶熷熸熺",8,"燄",9,"燏",4],["a040","燖",9,"燡燢燣燤燦燨",5,"燯",9,"燺",11,"爇",19],["a080","爛爜爞",9,"爩爫爭爮爯爲爳爴爺爼爾牀",6,"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",4,"犌犎犐犑犓",11,"犠",11,"犮犱犲犳犵犺",6,"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],["a1a1","　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",7,"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],["a2a1","ⅰ",9],["a2b1","⒈",19,"⑴",19,"①",9],["a2e5","㈠",9],["a2f1","Ⅰ",11],["a3a1","！＂＃￥％",88,"￣"],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a6e0","︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"],["a6ee","︻︼︷︸︱"],["a6f4","︳︴"],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a840","ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",35,"▁",6],["a880","█",7,"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"],["a8a1","āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"],["a8bd","ńň"],["a8c0","ɡ"],["a8c5","ㄅ",36],["a940","〡",8,"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"],["a959","℡㈱"],["a95c","‐"],["a960","ー゛゜ヽヾ〆ゝゞ﹉",9,"﹔﹕﹖﹗﹙",8],["a980","﹢",4,"﹨﹩﹪﹫"],["a996","〇"],["a9a4","─",75],["aa40","狜狝狟狢",5,"狪狫狵狶狹狽狾狿猀猂猄",5,"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",8],["aa80","獉獊獋獌獎獏獑獓獔獕獖獘",7,"獡",10,"獮獰獱"],["ab40","獲",11,"獿",4,"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",5,"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",4],["ab80","珋珌珎珒",6,"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",4],["ac40","珸",10,"琄琇琈琋琌琍琎琑",8,"琜",5,"琣琤琧琩琫琭琯琱琲琷",4,"琽琾琿瑀瑂",11],["ac80","瑎",6,"瑖瑘瑝瑠",12,"瑮瑯瑱",4,"瑸瑹瑺"],["ad40","瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",10,"璝璟",7,"璪",15,"璻",12],["ad80","瓈",9,"瓓",8,"瓝瓟瓡瓥瓧",6,"瓰瓱瓲"],["ae40","瓳瓵瓸",6,"甀甁甂甃甅",7,"甎甐甒甔甕甖甗甛甝甞甠",4,"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"],["ae80","畝",7,"畧畨畩畫",6,"畳畵當畷畺",4,"疀疁疂疄疅疇"],["af40","疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",4,"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"],["af80","瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"],["b040","癅",6,"癎",5,"癕癗",4,"癝癟癠癡癢癤",6,"癬癭癮癰",7,"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"],["b080","皜",7,"皥",8,"皯皰皳皵",9,"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"],["b140","盄盇盉盋盌盓盕盙盚盜盝盞盠",4,"盦",7,"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",10,"眛眜眝眞眡眣眤眥眧眪眫"],["b180","眬眮眰",4,"眹眻眽眾眿睂睄睅睆睈",7,"睒",7,"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"],["b240","睝睞睟睠睤睧睩睪睭",11,"睺睻睼瞁瞂瞃瞆",5,"瞏瞐瞓",11,"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",4],["b280","瞼瞾矀",12,"矎",8,"矘矙矚矝",4,"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"],["b340","矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",5,"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"],["b380","硛硜硞",11,"硯",7,"硸硹硺硻硽",6,"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"],["b440","碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",7,"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",9],["b480","磤磥磦磧磩磪磫磭",4,"磳磵磶磸磹磻",5,"礂礃礄礆",6,"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"],["b540","礍",5,"礔",9,"礟",4,"礥",14,"礵",4,"礽礿祂祃祄祅祇祊",8,"祔祕祘祙祡祣"],["b580","祤祦祩祪祫祬祮祰",6,"祹祻",4,"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"],["b640","禓",6,"禛",11,"禨",10,"禴",4,"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",5,"秠秡秢秥秨秪"],["b680","秬秮秱",6,"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",4,"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"],["b740","稝稟稡稢稤",14,"稴稵稶稸稺稾穀",5,"穇",9,"穒",4,"穘",16],["b780","穩",6,"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"],["b840","窣窤窧窩窪窫窮",4,"窴",10,"竀",10,"竌",9,"竗竘竚竛竜竝竡竢竤竧",5,"竮竰竱竲竳"],["b880","竴",4,"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"],["b940","笯笰笲笴笵笶笷笹笻笽笿",5,"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",10,"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",6,"箎箏"],["b980","箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",7,"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"],["ba40","篅篈築篊篋篍篎篏篐篒篔",4,"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",4,"篸篹篺篻篽篿",7,"簈簉簊簍簎簐",5,"簗簘簙"],["ba80","簚",4,"簠",5,"簨簩簫",12,"簹",5,"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"],["bb40","籃",9,"籎",36,"籵",5,"籾",9],["bb80","粈粊",6,"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",4,"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"],["bc40","粿糀糂糃糄糆糉糋糎",6,"糘糚糛糝糞糡",6,"糩",5,"糰",7,"糹糺糼",13,"紋",5],["bc80","紑",14,"紡紣紤紥紦紨紩紪紬紭紮細",6,"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"],["bd40","紷",54,"絯",7],["bd80","絸",32,"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"],["be40","継",12,"綧",6,"綯",42],["be80","線",32,"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"],["bf40","緻",62],["bf80","縺縼",4,"繂",4,"繈",21,"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"],["c040","繞",35,"纃",23,"纜纝纞"],["c080","纮纴纻纼绖绤绬绹缊缐缞缷缹缻",6,"罃罆",9,"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"],["c140","罖罙罛罜罝罞罠罣",4,"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",7,"羋羍羏",4,"羕",4,"羛羜羠羢羣羥羦羨",6,"羱"],["c180","羳",4,"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",4,"翖翗翙",5,"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"],["c240","翤翧翨翪翫翬翭翯翲翴",6,"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",5,"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"],["c280","聙聛",13,"聫",5,"聲",11,"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"],["c340","聾肁肂肅肈肊肍",5,"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",4,"胏",6,"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"],["c380","脌脕脗脙脛脜脝脟",12,"脭脮脰脳脴脵脷脹",4,"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"],["c440","腀",5,"腇腉腍腎腏腒腖腗腘腛",4,"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",4,"膉膋膌膍膎膐膒",5,"膙膚膞",4,"膤膥"],["c480","膧膩膫",7,"膴",5,"膼膽膾膿臄臅臇臈臉臋臍",6,"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"],["c540","臔",14,"臤臥臦臨臩臫臮",4,"臵",5,"臽臿舃與",4,"舎舏舑舓舕",5,"舝舠舤舥舦舧舩舮舲舺舼舽舿"],["c580","艀艁艂艃艅艆艈艊艌艍艎艐",7,"艙艛艜艝艞艠",7,"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"],["c640","艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"],["c680","苺苼",4,"茊茋茍茐茒茓茖茘茙茝",9,"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"],["c740","茾茿荁荂荄荅荈荊",4,"荓荕",4,"荝荢荰",6,"荹荺荾",6,"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",6,"莬莭莮"],["c780","莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"],["c840","菮華菳",4,"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",5,"萙萚萛萞",5,"萩",7,"萲",5,"萹萺萻萾",7,"葇葈葉"],["c880","葊",6,"葒",4,"葘葝葞葟葠葢葤",4,"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"],["c940","葽",4,"蒃蒄蒅蒆蒊蒍蒏",7,"蒘蒚蒛蒝蒞蒟蒠蒢",12,"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"],["c980","蓘",4,"蓞蓡蓢蓤蓧",4,"蓭蓮蓯蓱",10,"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"],["ca40","蔃",8,"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",8,"蔭",9,"蔾",4,"蕄蕅蕆蕇蕋",10],["ca80","蕗蕘蕚蕛蕜蕝蕟",4,"蕥蕦蕧蕩",8,"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"],["cb40","薂薃薆薈",6,"薐",10,"薝",6,"薥薦薧薩薫薬薭薱",5,"薸薺",6,"藂",6,"藊",4,"藑藒"],["cb80","藔藖",5,"藝",6,"藥藦藧藨藪",14,"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"],["cc40","藹藺藼藽藾蘀",4,"蘆",10,"蘒蘓蘔蘕蘗",15,"蘨蘪",13,"蘹蘺蘻蘽蘾蘿虀"],["cc80","虁",11,"虒虓處",4,"虛虜虝號虠虡虣",7,"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"],["cd40","虭虯虰虲",6,"蚃",6,"蚎",4,"蚔蚖",5,"蚞",4,"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",4,"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"],["cd80","蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"],["ce40","蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",6,"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",5,"蝡蝢蝦",7,"蝯蝱蝲蝳蝵"],["ce80","蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",4,"螔螕螖螘",6,"螠",4,"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"],["cf40","螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",4,"蟇蟈蟉蟌",4,"蟔",6,"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",9],["cf80","蟺蟻蟼蟽蟿蠀蠁蠂蠄",5,"蠋",7,"蠔蠗蠘蠙蠚蠜",4,"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"],["d040","蠤",13,"蠳",5,"蠺蠻蠽蠾蠿衁衂衃衆",5,"衎",5,"衕衖衘衚",6,"衦衧衪衭衯衱衳衴衵衶衸衹衺"],["d080","衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",4,"袝",4,"袣袥",5,"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"],["d140","袬袮袯袰袲",4,"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",4,"裠裡裦裧裩",6,"裲裵裶裷裺裻製裿褀褁褃",5],["d180","褉褋",4,"褑褔",4,"褜",4,"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"],["d240","褸",8,"襂襃襅",24,"襠",5,"襧",19,"襼"],["d280","襽襾覀覂覄覅覇",26,"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"],["d340","覢",30,"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",6],["d380","觻",4,"訁",5,"計",21,"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"],["d440","訞",31,"訿",8,"詉",21],["d480","詟",25,"詺",6,"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"],["d540","誁",7,"誋",7,"誔",46],["d580","諃",32,"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"],["d640","諤",34,"謈",27],["d680","謤謥謧",30,"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"],["d740","譆",31,"譧",4,"譭",25],["d780","讇",24,"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"],["d840","谸",8,"豂豃豄豅豈豊豋豍",7,"豖豗豘豙豛",5,"豣",6,"豬",6,"豴豵豶豷豻",6,"貃貄貆貇"],["d880","貈貋貍",6,"貕貖貗貙",20,"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"],["d940","貮",62],["d980","賭",32,"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"],["da40","贎",14,"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",8,"趂趃趆趇趈趉趌",4,"趒趓趕",9,"趠趡"],["da80","趢趤",12,"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"],["db40","跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",6,"踆踇踈踋踍踎踐踑踒踓踕",7,"踠踡踤",4,"踫踭踰踲踳踴踶踷踸踻踼踾"],["db80","踿蹃蹅蹆蹌",4,"蹓",5,"蹚",11,"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"],["dc40","蹳蹵蹷",4,"蹽蹾躀躂躃躄躆躈",6,"躑躒躓躕",6,"躝躟",11,"躭躮躰躱躳",6,"躻",7],["dc80","軃",10,"軏",21,"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"],["dd40","軥",62],["dd80","輤",32,"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"],["de40","轅",32,"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"],["de80","迉",4,"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"],["df40","這逜連逤逥逧",5,"逰",4,"逷逹逺逽逿遀遃遅遆遈",4,"過達違遖遙遚遜",5,"遤遦遧適遪遫遬遯",4,"遶",6,"遾邁"],["df80","還邅邆邇邉邊邌",4,"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"],["e040","郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",19,"鄚鄛鄜"],["e080","鄝鄟鄠鄡鄤",10,"鄰鄲",6,"鄺",8,"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"],["e140","酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",4,"醆醈醊醎醏醓",6,"醜",5,"醤",5,"醫醬醰醱醲醳醶醷醸醹醻"],["e180","醼",10,"釈釋釐釒",9,"針",8,"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"],["e240","釦",62],["e280","鈥",32,"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",5,"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"],["e340","鉆",45,"鉵",16],["e380","銆",7,"銏",24,"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"],["e440","銨",5,"銯",24,"鋉",31],["e480","鋩",32,"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"],["e540","錊",51,"錿",10],["e580","鍊",31,"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"],["e640","鍬",34,"鎐",27],["e680","鎬",29,"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"],["e740","鏎",7,"鏗",54],["e780","鐎",32,"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",6,"缪缫缬缭缯",4,"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"],["e840","鐯",14,"鐿",43,"鑬鑭鑮鑯"],["e880","鑰",20,"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"],["e940","锧锳锽镃镈镋镕镚镠镮镴镵長",7,"門",42],["e980","閫",32,"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"],["ea40","闌",27,"闬闿阇阓阘阛阞阠阣",6,"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"],["ea80","陘陙陚陜陝陞陠陣陥陦陫陭",4,"陳陸",12,"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"],["eb40","隌階隑隒隓隕隖隚際隝",9,"隨",7,"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",9,"雡",6,"雫"],["eb80","雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",4,"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"],["ec40","霡",8,"霫霬霮霯霱霳",4,"霺霻霼霽霿",18,"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",7],["ec80","靲靵靷",4,"靽",7,"鞆",4,"鞌鞎鞏鞐鞓鞕鞖鞗鞙",4,"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"],["ed40","鞞鞟鞡鞢鞤",6,"鞬鞮鞰鞱鞳鞵",46],["ed80","韤韥韨韮",4,"韴韷",23,"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"],["ee40","頏",62],["ee80","顎",32,"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",4,"钼钽钿铄铈",6,"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"],["ef40","顯",5,"颋颎颒颕颙颣風",37,"飏飐飔飖飗飛飜飝飠",4],["ef80","飥飦飩",30,"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",4,"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",8,"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"],["f040","餈",4,"餎餏餑",28,"餯",26],["f080","饊",9,"饖",12,"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",4,"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",6,"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"],["f140","馌馎馚",10,"馦馧馩",47],["f180","駙",32,"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"],["f240","駺",62],["f280","騹",32,"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"],["f340","驚",17,"驲骃骉骍骎骔骕骙骦骩",6,"骲骳骴骵骹骻骽骾骿髃髄髆",4,"髍髎髏髐髒體髕髖髗髙髚髛髜"],["f380","髝髞髠髢髣髤髥髧髨髩髪髬髮髰",8,"髺髼",6,"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"],["f440","鬇鬉",5,"鬐鬑鬒鬔",10,"鬠鬡鬢鬤",10,"鬰鬱鬳",7,"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",5],["f480","魛",32,"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"],["f540","魼",62],["f580","鮻",32,"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"],["f640","鯜",62],["f680","鰛",32,"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",5,"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",5,"鲥",4,"鲫鲭鲮鲰",7,"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"],["f740","鰼",62],["f780","鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",4,"鳈鳉鳑鳒鳚鳛鳠鳡鳌",4,"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"],["f840","鳣",62],["f880","鴢",32],["f940","鵃",62],["f980","鶂",32],["fa40","鶣",62],["fa80","鷢",32],["fb40","鸃",27,"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",9,"麀"],["fb80","麁麃麄麅麆麉麊麌",5,"麔",8,"麞麠",5,"麧麨麩麪"],["fc40","麫",8,"麵麶麷麹麺麼麿",4,"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",8,"黺黽黿",6],["fc80","鼆",4,"鼌鼏鼑鼒鼔鼕鼖鼘鼚",5,"鼡鼣",8,"鼭鼮鼰鼱"],["fd40","鼲",4,"鼸鼺鼼鼿",4,"齅",10,"齒",38],["fd80","齹",5,"龁龂龍",11,"龜龝龞龡",4,"郎凉秊裏隣"],["fe40","兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"]]

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var stringify = __webpack_require__(158);
var parse = __webpack_require__(159);
var formats = __webpack_require__(74);

module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * methods
 * Copyright(c) 2013-2014 TJ Holowaychuk
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var http = __webpack_require__(16);

/**
 * Module exports.
 * @public
 */

module.exports = getCurrentNodeMethods() || getBasicNodeMethods();

/**
 * Get the current Node.js methods.
 * @private
 */

function getCurrentNodeMethods() {
  return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {
    return method.toLowerCase();
  });
}

/**
 * Get the "basic" Node.js methods, a snapshot from Node.js 0.10.
 * @private
 */

function getBasicNodeMethods() {
  return ['get', 'post', 'put', 'head', 'delete', 'options', 'trace', 'copy', 'lock', 'mkcol', 'move', 'purge', 'propfind', 'proppatch', 'unlock', 'report', 'mkactivity', 'checkout', 'merge', 'm-search', 'notify', 'subscribe', 'unsubscribe', 'patch', 'search', 'connect'];
}

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * send
 * Copyright(c) 2012 TJ Holowaychuk
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var createError = __webpack_require__(32);
var debug = __webpack_require__(6)('send');
var deprecate = __webpack_require__(10)('send');
var destroy = __webpack_require__(167);
var encodeUrl = __webpack_require__(37);
var escapeHtml = __webpack_require__(38);
var etag = __webpack_require__(82);
var fresh = __webpack_require__(83);
var fs = __webpack_require__(7);
var mime = __webpack_require__(168);
var ms = __webpack_require__(66);
var onFinished = __webpack_require__(36);
var parseRange = __webpack_require__(84);
var path = __webpack_require__(0);
var statuses = __webpack_require__(24);
var Stream = __webpack_require__(9);
var util = __webpack_require__(34);

/**
 * Path function references.
 * @private
 */

var extname = path.extname;
var join = path.join;
var normalize = path.normalize;
var resolve = path.resolve;
var sep = path.sep;

/**
 * Regular expression for identifying a bytes Range header.
 * @private
 */

var BYTES_RANGE_REGEXP = /^ *bytes=/;

/**
 * Maximum value allowed for the max age.
 * @private
 */

var MAX_MAXAGE = 60 * 60 * 24 * 365 * 1000; // 1 year

/**
 * Regular expression to match a path with a directory up component.
 * @private
 */

var UP_PATH_REGEXP = /(?:^|[\\/])\.\.(?:[\\/]|$)/;

/**
 * Module exports.
 * @public
 */

module.exports = send;
module.exports.mime = mime;

/**
 * Return a `SendStream` for `req` and `path`.
 *
 * @param {object} req
 * @param {string} path
 * @param {object} [options]
 * @return {SendStream}
 * @public
 */

function send(req, path, options) {
  return new SendStream(req, path, options);
}

/**
 * Initialize a `SendStream` with the given `path`.
 *
 * @param {Request} req
 * @param {String} path
 * @param {object} [options]
 * @private
 */

function SendStream(req, path, options) {
  Stream.call(this);

  var opts = options || {};

  this.options = opts;
  this.path = path;
  this.req = req;

  this._acceptRanges = opts.acceptRanges !== undefined ? Boolean(opts.acceptRanges) : true;

  this._cacheControl = opts.cacheControl !== undefined ? Boolean(opts.cacheControl) : true;

  this._etag = opts.etag !== undefined ? Boolean(opts.etag) : true;

  this._dotfiles = opts.dotfiles !== undefined ? opts.dotfiles : 'ignore';

  if (this._dotfiles !== 'ignore' && this._dotfiles !== 'allow' && this._dotfiles !== 'deny') {
    throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"');
  }

  this._hidden = Boolean(opts.hidden);

  if (opts.hidden !== undefined) {
    deprecate('hidden: use dotfiles: \'' + (this._hidden ? 'allow' : 'ignore') + '\' instead');
  }

  // legacy support
  if (opts.dotfiles === undefined) {
    this._dotfiles = undefined;
  }

  this._extensions = opts.extensions !== undefined ? normalizeList(opts.extensions, 'extensions option') : [];

  this._immutable = opts.immutable !== undefined ? Boolean(opts.immutable) : false;

  this._index = opts.index !== undefined ? normalizeList(opts.index, 'index option') : ['index.html'];

  this._lastModified = opts.lastModified !== undefined ? Boolean(opts.lastModified) : true;

  this._maxage = opts.maxAge || opts.maxage;
  this._maxage = typeof this._maxage === 'string' ? ms(this._maxage) : Number(this._maxage);
  this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;

  this._root = opts.root ? resolve(opts.root) : null;

  if (!this._root && opts.from) {
    this.from(opts.from);
  }
}

/**
 * Inherits from `Stream`.
 */

util.inherits(SendStream, Stream);

/**
 * Enable or disable etag generation.
 *
 * @param {Boolean} val
 * @return {SendStream}
 * @api public
 */

SendStream.prototype.etag = deprecate.function(function etag(val) {
  this._etag = Boolean(val);
  debug('etag %s', this._etag);
  return this;
}, 'send.etag: pass etag as option');

/**
 * Enable or disable "hidden" (dot) files.
 *
 * @param {Boolean} path
 * @return {SendStream}
 * @api public
 */

SendStream.prototype.hidden = deprecate.function(function hidden(val) {
  this._hidden = Boolean(val);
  this._dotfiles = undefined;
  debug('hidden %s', this._hidden);
  return this;
}, 'send.hidden: use dotfiles option');

/**
 * Set index `paths`, set to a falsy
 * value to disable index support.
 *
 * @param {String|Boolean|Array} paths
 * @return {SendStream}
 * @api public
 */

SendStream.prototype.index = deprecate.function(function index(paths) {
  var index = !paths ? [] : normalizeList(paths, 'paths argument');
  debug('index %o', paths);
  this._index = index;
  return this;
}, 'send.index: pass index as option');

/**
 * Set root `path`.
 *
 * @param {String} path
 * @return {SendStream}
 * @api public
 */

SendStream.prototype.root = function root(path) {
  this._root = resolve(String(path));
  debug('root %s', this._root);
  return this;
};

SendStream.prototype.from = deprecate.function(SendStream.prototype.root, 'send.from: pass root as option');

SendStream.prototype.root = deprecate.function(SendStream.prototype.root, 'send.root: pass root as option');

/**
 * Set max-age to `maxAge`.
 *
 * @param {Number} maxAge
 * @return {SendStream}
 * @api public
 */

SendStream.prototype.maxage = deprecate.function(function maxage(maxAge) {
  this._maxage = typeof maxAge === 'string' ? ms(maxAge) : Number(maxAge);
  this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;
  debug('max-age %d', this._maxage);
  return this;
}, 'send.maxage: pass maxAge as option');

/**
 * Emit error with `status`.
 *
 * @param {number} status
 * @param {Error} [err]
 * @private
 */

SendStream.prototype.error = function error(status, err) {
  // emit if listeners instead of responding
  if (hasListeners(this, 'error')) {
    return this.emit('error', createError(status, err, {
      expose: false
    }));
  }

  var res = this.res;
  var msg = statuses[status] || String(status);
  var doc = createHtmlDocument('Error', escapeHtml(msg));

  // clear existing headers
  clearHeaders(res);

  // add error headers
  if (err && err.headers) {
    setHeaders(res, err.headers);
  }

  // send basic response
  res.statusCode = status;
  res.setHeader('Content-Type', 'text/html; charset=UTF-8');
  res.setHeader('Content-Length', Buffer.byteLength(doc));
  res.setHeader('Content-Security-Policy', "default-src 'self'");
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.end(doc);
};

/**
 * Check if the pathname ends with "/".
 *
 * @return {boolean}
 * @private
 */

SendStream.prototype.hasTrailingSlash = function hasTrailingSlash() {
  return this.path[this.path.length - 1] === '/';
};

/**
 * Check if this is a conditional GET request.
 *
 * @return {Boolean}
 * @api private
 */

SendStream.prototype.isConditionalGET = function isConditionalGET() {
  return this.req.headers['if-match'] || this.req.headers['if-unmodified-since'] || this.req.headers['if-none-match'] || this.req.headers['if-modified-since'];
};

/**
 * Check if the request preconditions failed.
 *
 * @return {boolean}
 * @private
 */

SendStream.prototype.isPreconditionFailure = function isPreconditionFailure() {
  var req = this.req;
  var res = this.res;

  // if-match
  var match = req.headers['if-match'];
  if (match) {
    var etag = res.getHeader('ETag');
    return !etag || match !== '*' && parseTokenList(match).every(function (match) {
      return match !== etag && match !== 'W/' + etag && 'W/' + match !== etag;
    });
  }

  // if-unmodified-since
  var unmodifiedSince = parseHttpDate(req.headers['if-unmodified-since']);
  if (!isNaN(unmodifiedSince)) {
    var lastModified = parseHttpDate(res.getHeader('Last-Modified'));
    return isNaN(lastModified) || lastModified > unmodifiedSince;
  }

  return false;
};

/**
 * Strip content-* header fields.
 *
 * @private
 */

SendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields() {
  var res = this.res;
  var headers = getHeaderNames(res);

  for (var i = 0; i < headers.length; i++) {
    var header = headers[i];
    if (header.substr(0, 8) === 'content-' && header !== 'content-location') {
      res.removeHeader(header);
    }
  }
};

/**
 * Respond with 304 not modified.
 *
 * @api private
 */

SendStream.prototype.notModified = function notModified() {
  var res = this.res;
  debug('not modified');
  this.removeContentHeaderFields();
  res.statusCode = 304;
  res.end();
};

/**
 * Raise error that headers already sent.
 *
 * @api private
 */

SendStream.prototype.headersAlreadySent = function headersAlreadySent() {
  var err = new Error('Can\'t set headers after they are sent.');
  debug('headers already sent');
  this.error(500, err);
};

/**
 * Check if the request is cacheable, aka
 * responded with 2xx or 304 (see RFC 2616 section 14.2{5,6}).
 *
 * @return {Boolean}
 * @api private
 */

SendStream.prototype.isCachable = function isCachable() {
  var statusCode = this.res.statusCode;
  return statusCode >= 200 && statusCode < 300 || statusCode === 304;
};

/**
 * Handle stat() error.
 *
 * @param {Error} error
 * @private
 */

SendStream.prototype.onStatError = function onStatError(error) {
  switch (error.code) {
    case 'ENAMETOOLONG':
    case 'ENOENT':
    case 'ENOTDIR':
      this.error(404, error);
      break;
    default:
      this.error(500, error);
      break;
  }
};

/**
 * Check if the cache is fresh.
 *
 * @return {Boolean}
 * @api private
 */

SendStream.prototype.isFresh = function isFresh() {
  return fresh(this.req.headers, {
    'etag': this.res.getHeader('ETag'),
    'last-modified': this.res.getHeader('Last-Modified')
  });
};

/**
 * Check if the range is fresh.
 *
 * @return {Boolean}
 * @api private
 */

SendStream.prototype.isRangeFresh = function isRangeFresh() {
  var ifRange = this.req.headers['if-range'];

  if (!ifRange) {
    return true;
  }

  // if-range as etag
  if (ifRange.indexOf('"') !== -1) {
    var etag = this.res.getHeader('ETag');
    return Boolean(etag && ifRange.indexOf(etag) !== -1);
  }

  // if-range as modified date
  var lastModified = this.res.getHeader('Last-Modified');
  return parseHttpDate(lastModified) <= parseHttpDate(ifRange);
};

/**
 * Redirect to path.
 *
 * @param {string} path
 * @private
 */

SendStream.prototype.redirect = function redirect(path) {
  var res = this.res;

  if (hasListeners(this, 'directory')) {
    this.emit('directory', res, path);
    return;
  }

  if (this.hasTrailingSlash()) {
    this.error(403);
    return;
  }

  var loc = encodeUrl(collapseLeadingSlashes(this.path + '/'));
  var doc = createHtmlDocument('Redirecting', 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + '</a>');

  // redirect
  res.statusCode = 301;
  res.setHeader('Content-Type', 'text/html; charset=UTF-8');
  res.setHeader('Content-Length', Buffer.byteLength(doc));
  res.setHeader('Content-Security-Policy', "default-src 'self'");
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('Location', loc);
  res.end(doc);
};

/**
 * Pipe to `res.
 *
 * @param {Stream} res
 * @return {Stream} res
 * @api public
 */

SendStream.prototype.pipe = function pipe(res) {
  // root path
  var root = this._root;

  // references
  this.res = res;

  // decode the path
  var path = decode(this.path);
  if (path === -1) {
    this.error(400);
    return res;
  }

  // null byte(s)
  if (~path.indexOf('\0')) {
    this.error(400);
    return res;
  }

  var parts;
  if (root !== null) {
    // normalize
    if (path) {
      path = normalize('.' + sep + path);
    }

    // malicious path
    if (UP_PATH_REGEXP.test(path)) {
      debug('malicious path "%s"', path);
      this.error(403);
      return res;
    }

    // explode path parts
    parts = path.split(sep);

    // join / normalize from optional root dir
    path = normalize(join(root, path));
    root = normalize(root + sep);
  } else {
    // ".." is malicious without "root"
    if (UP_PATH_REGEXP.test(path)) {
      debug('malicious path "%s"', path);
      this.error(403);
      return res;
    }

    // explode path parts
    parts = normalize(path).split(sep);

    // resolve the path
    path = resolve(path);
  }

  // dotfile handling
  if (containsDotFile(parts)) {
    var access = this._dotfiles;

    // legacy support
    if (access === undefined) {
      access = parts[parts.length - 1][0] === '.' ? this._hidden ? 'allow' : 'ignore' : 'allow';
    }

    debug('%s dotfile "%s"', access, path);
    switch (access) {
      case 'allow':
        break;
      case 'deny':
        this.error(403);
        return res;
      case 'ignore':
      default:
        this.error(404);
        return res;
    }
  }

  // index file support
  if (this._index.length && this.hasTrailingSlash()) {
    this.sendIndex(path);
    return res;
  }

  this.sendFile(path);
  return res;
};

/**
 * Transfer `path`.
 *
 * @param {String} path
 * @api public
 */

SendStream.prototype.send = function send(path, stat) {
  var len = stat.size;
  var options = this.options;
  var opts = {};
  var res = this.res;
  var req = this.req;
  var ranges = req.headers.range;
  var offset = options.start || 0;

  if (headersSent(res)) {
    // impossible to send now
    this.headersAlreadySent();
    return;
  }

  debug('pipe "%s"', path);

  // set header fields
  this.setHeader(path, stat);

  // set content-type
  this.type(path);

  // conditional GET support
  if (this.isConditionalGET()) {
    if (this.isPreconditionFailure()) {
      this.error(412);
      return;
    }

    if (this.isCachable() && this.isFresh()) {
      this.notModified();
      return;
    }
  }

  // adjust len to start/end options
  len = Math.max(0, len - offset);
  if (options.end !== undefined) {
    var bytes = options.end - offset + 1;
    if (len > bytes) len = bytes;
  }

  // Range support
  if (this._acceptRanges && BYTES_RANGE_REGEXP.test(ranges)) {
    // parse
    ranges = parseRange(len, ranges, {
      combine: true
    });

    // If-Range support
    if (!this.isRangeFresh()) {
      debug('range stale');
      ranges = -2;
    }

    // unsatisfiable
    if (ranges === -1) {
      debug('range unsatisfiable');

      // Content-Range
      res.setHeader('Content-Range', contentRange('bytes', len));

      // 416 Requested Range Not Satisfiable
      return this.error(416, {
        headers: { 'Content-Range': res.getHeader('Content-Range') }
      });
    }

    // valid (syntactically invalid/multiple ranges are treated as a regular response)
    if (ranges !== -2 && ranges.length === 1) {
      debug('range %j', ranges);

      // Content-Range
      res.statusCode = 206;
      res.setHeader('Content-Range', contentRange('bytes', len, ranges[0]));

      // adjust for requested range
      offset += ranges[0].start;
      len = ranges[0].end - ranges[0].start + 1;
    }
  }

  // clone options
  for (var prop in options) {
    opts[prop] = options[prop];
  }

  // set read options
  opts.start = offset;
  opts.end = Math.max(offset, offset + len - 1);

  // content-length
  res.setHeader('Content-Length', len);

  // HEAD support
  if (req.method === 'HEAD') {
    res.end();
    return;
  }

  this.stream(path, opts);
};

/**
 * Transfer file for `path`.
 *
 * @param {String} path
 * @api private
 */
SendStream.prototype.sendFile = function sendFile(path) {
  var i = 0;
  var self = this;

  debug('stat "%s"', path);
  fs.stat(path, function onstat(err, stat) {
    if (err && err.code === 'ENOENT' && !extname(path) && path[path.length - 1] !== sep) {
      // not found, check extensions
      return next(err);
    }
    if (err) return self.onStatError(err);
    if (stat.isDirectory()) return self.redirect(path);
    self.emit('file', path, stat);
    self.send(path, stat);
  });

  function next(err) {
    if (self._extensions.length <= i) {
      return err ? self.onStatError(err) : self.error(404);
    }

    var p = path + '.' + self._extensions[i++];

    debug('stat "%s"', p);
    fs.stat(p, function (err, stat) {
      if (err) return next(err);
      if (stat.isDirectory()) return next();
      self.emit('file', p, stat);
      self.send(p, stat);
    });
  }
};

/**
 * Transfer index for `path`.
 *
 * @param {String} path
 * @api private
 */
SendStream.prototype.sendIndex = function sendIndex(path) {
  var i = -1;
  var self = this;

  function next(err) {
    if (++i >= self._index.length) {
      if (err) return self.onStatError(err);
      return self.error(404);
    }

    var p = join(path, self._index[i]);

    debug('stat "%s"', p);
    fs.stat(p, function (err, stat) {
      if (err) return next(err);
      if (stat.isDirectory()) return next();
      self.emit('file', p, stat);
      self.send(p, stat);
    });
  }

  next();
};

/**
 * Stream `path` to the response.
 *
 * @param {String} path
 * @param {Object} options
 * @api private
 */

SendStream.prototype.stream = function stream(path, options) {
  // TODO: this is all lame, refactor meeee
  var finished = false;
  var self = this;
  var res = this.res;

  // pipe
  var stream = fs.createReadStream(path, options);
  this.emit('stream', stream);
  stream.pipe(res);

  // response finished, done with the fd
  onFinished(res, function onfinished() {
    finished = true;
    destroy(stream);
  });

  // error handling code-smell
  stream.on('error', function onerror(err) {
    // request already finished
    if (finished) return;

    // clean up stream
    finished = true;
    destroy(stream);

    // error
    self.onStatError(err);
  });

  // end
  stream.on('end', function onend() {
    self.emit('end');
  });
};

/**
 * Set content-type based on `path`
 * if it hasn't been explicitly set.
 *
 * @param {String} path
 * @api private
 */

SendStream.prototype.type = function type(path) {
  var res = this.res;

  if (res.getHeader('Content-Type')) return;

  var type = mime.lookup(path);

  if (!type) {
    debug('no content-type');
    return;
  }

  var charset = mime.charsets.lookup(type);

  debug('content-type %s', type);
  res.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''));
};

/**
 * Set response header fields, most
 * fields may be pre-defined.
 *
 * @param {String} path
 * @param {Object} stat
 * @api private
 */

SendStream.prototype.setHeader = function setHeader(path, stat) {
  var res = this.res;

  this.emit('headers', res, path, stat);

  if (this._acceptRanges && !res.getHeader('Accept-Ranges')) {
    debug('accept ranges');
    res.setHeader('Accept-Ranges', 'bytes');
  }

  if (this._cacheControl && !res.getHeader('Cache-Control')) {
    var cacheControl = 'public, max-age=' + Math.floor(this._maxage / 1000);

    if (this._immutable) {
      cacheControl += ', immutable';
    }

    debug('cache-control %s', cacheControl);
    res.setHeader('Cache-Control', cacheControl);
  }

  if (this._lastModified && !res.getHeader('Last-Modified')) {
    var modified = stat.mtime.toUTCString();
    debug('modified %s', modified);
    res.setHeader('Last-Modified', modified);
  }

  if (this._etag && !res.getHeader('ETag')) {
    var val = etag(stat);
    debug('etag %s', val);
    res.setHeader('ETag', val);
  }
};

/**
 * Clear all headers from a response.
 *
 * @param {object} res
 * @private
 */

function clearHeaders(res) {
  var headers = getHeaderNames(res);

  for (var i = 0; i < headers.length; i++) {
    res.removeHeader(headers[i]);
  }
}

/**
 * Collapse all leading slashes into a single slash
 *
 * @param {string} str
 * @private
 */
function collapseLeadingSlashes(str) {
  for (var i = 0; i < str.length; i++) {
    if (str[i] !== '/') {
      break;
    }
  }

  return i > 1 ? '/' + str.substr(i) : str;
}

/**
 * Determine if path parts contain a dotfile.
 *
 * @api private
 */

function containsDotFile(parts) {
  for (var i = 0; i < parts.length; i++) {
    var part = parts[i];
    if (part.length > 1 && part[0] === '.') {
      return true;
    }
  }

  return false;
}

/**
 * Create a Content-Range header.
 *
 * @param {string} type
 * @param {number} size
 * @param {array} [range]
 */

function contentRange(type, size, range) {
  return type + ' ' + (range ? range.start + '-' + range.end : '*') + '/' + size;
}

/**
 * Create a minimal HTML document.
 *
 * @param {string} title
 * @param {string} body
 * @private
 */

function createHtmlDocument(title, body) {
  return '<!DOCTYPE html>\n' + '<html lang="en">\n' + '<head>\n' + '<meta charset="utf-8">\n' + '<title>' + title + '</title>\n' + '</head>\n' + '<body>\n' + '<pre>' + body + '</pre>\n' + '</body>\n' + '</html>\n';
}

/**
 * decodeURIComponent.
 *
 * Allows V8 to only deoptimize this fn instead of all
 * of send().
 *
 * @param {String} path
 * @api private
 */

function decode(path) {
  try {
    return decodeURIComponent(path);
  } catch (err) {
    return -1;
  }
}

/**
 * Get the header names on a respnse.
 *
 * @param {object} res
 * @returns {array[string]}
 * @private
 */

function getHeaderNames(res) {
  return typeof res.getHeaderNames !== 'function' ? Object.keys(res._headers || {}) : res.getHeaderNames();
}

/**
 * Determine if emitter has listeners of a given type.
 *
 * The way to do this check is done three different ways in Node.js >= 0.8
 * so this consolidates them into a minimal set using instance methods.
 *
 * @param {EventEmitter} emitter
 * @param {string} type
 * @returns {boolean}
 * @private
 */

function hasListeners(emitter, type) {
  var count = typeof emitter.listenerCount !== 'function' ? emitter.listeners(type).length : emitter.listenerCount(type);

  return count > 0;
}

/**
 * Determine if the response headers have been sent.
 *
 * @param {object} res
 * @returns {boolean}
 * @private
 */

function headersSent(res) {
  return typeof res.headersSent !== 'boolean' ? Boolean(res._header) : res.headersSent;
}

/**
 * Normalize the index option into an array.
 *
 * @param {boolean|string|array} val
 * @param {string} name
 * @private
 */

function normalizeList(val, name) {
  var list = [].concat(val || []);

  for (var i = 0; i < list.length; i++) {
    if (typeof list[i] !== 'string') {
      throw new TypeError(name + ' must be array of strings or false');
    }
  }

  return list;
}

/**
 * Parse an HTTP Date into a number.
 *
 * @param {string} date
 * @private
 */

function parseHttpDate(date) {
  var timestamp = date && Date.parse(date);

  return typeof timestamp === 'number' ? timestamp : NaN;
}

/**
 * Parse a HTTP token list.
 *
 * @param {string} str
 * @private
 */

function parseTokenList(str) {
  var end = 0;
  var list = [];
  var start = 0;

  // gather tokens
  for (var i = 0, len = str.length; i < len; i++) {
    switch (str.charCodeAt(i)) {
      case 0x20:
        /*   */
        if (start === end) {
          start = end = i + 1;
        }
        break;
      case 0x2c:
        /* , */
        list.push(str.substring(start, end));
        start = end = i + 1;
        break;
      default:
        end = i + 1;
        break;
    }
  }

  // final token
  list.push(str.substring(start, end));

  return list;
}

/**
 * Set an object of headers on a response.
 *
 * @param {object} res
 * @param {object} headers
 * @private
 */

function setHeaders(res, headers) {
  var keys = Object.keys(headers);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    res.setHeader(key, headers[key]);
  }
}

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) 2017 TypeFox GmbH (http://www.typefox.io). All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
__export(__webpack_require__(52));
__export(__webpack_require__(192));
__export(__webpack_require__(193));

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) 2017 TypeFox GmbH (http://www.typefox.io). All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var stream_1 = __webpack_require__(9);
var ReadableStream = function (_super) {
    __extends(ReadableStream, _super);
    function ReadableStream(data) {
        var _this = _super.call(this) || this;
        _this.push(data);
        _this.push(null);
        return _this;
    }
    ReadableStream.prototype._read = function (size) {
        /* no-op */
    };
    return ReadableStream;
}(stream_1.Readable);
exports.ReadableStream = ReadableStream;
var WritableStream = function (_super) {
    __extends(WritableStream, _super);
    function WritableStream() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.data = new Buffer('');
        return _this;
    }
    WritableStream.prototype._write = function (data, encoding, callback) {
        var buffer = this.toBuffer(data, encoding);
        this.data = Buffer.concat([this.data, buffer]);
        callback();
    };
    WritableStream.prototype.toBuffer = function (data, encoding) {
        if (Buffer.isBuffer(data)) {
            return data;
        }
        return new Buffer(data, encoding);
    };
    return WritableStream;
}(stream_1.Writable);
exports.WritableStream = WritableStream;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = __webpack_require__(19);
const parsedDocument_1 = __webpack_require__(18);
class ParseTreeTraverser extends types_1.TreeTraverser {
    constructor(document, symbolTable, refTable) {
        super([document.tree]);
        this._doc = document;
        this._symbolTable = symbolTable;
        this._refTable = refTable;
    }
    get document() {
        return this._doc;
    }
    get symbolTable() {
        return this._symbolTable;
    }
    get refTable() {
        return this._refTable;
    }
    get text() {
        return this._doc.nodeText(this.node);
    }
    get range() {
        return this._doc.nodeRange(this.node);
    }
    get reference() {
        let range = this.range;
        return this._refTable.referenceAtPosition(range.start);
    }
    get scope() {
        let range = this.range;
        if (!range) {
            return null;
        }
        return this._symbolTable.scope(range.start);
    }
    get nameResolver() {
        let firstToken = parsedDocument_1.ParsedDocument.firstToken(this.node);
        let pos = this.document.positionAtOffset(firstToken.offset);
        return this._symbolTable.nameResolver(pos);
    }
    position(pos) {
        let offset = this._doc.offsetAtPosition(pos) - 1;
        let fn = x => {
            return x.tokenType !== undefined && offset < x.offset + x.length && offset >= x.offset;
        };
        return this.find(fn);
    }
    clone() {
        let spine = this.spine;
        let traverser = new ParseTreeTraverser(this._doc, this._symbolTable, this._refTable);
        traverser._spine = spine;
        return traverser;
    }
    prevToken(skipTrivia) {
        const spine = this._spine.slice(0);
        let current;
        let parent;
        let prevSiblingIndex;
        while (spine.length > 1) {
            current = spine.pop();
            parent = spine[spine.length - 1];
            prevSiblingIndex = parent.children.indexOf(current) - 1;
            if (prevSiblingIndex > -1) {
                spine.push(parent.children[prevSiblingIndex]);
                if (this._lastToken(spine, skipTrivia)) {
                    this._spine = spine;
                    return this.node;
                }
            }
        }
        return undefined;
    }
    _lastToken(spine, skipTrivia) {
        let node = spine[spine.length - 1];
        if (node.tokenType !== undefined && (!skipTrivia || node.tokenType < 159)) {
            return spine;
        }
        if (!node.children) {
            return undefined;
        }
        for (let n = node.children.length - 1; n >= 0; --n) {
            spine.push(node.children[n]);
            if (this._lastToken(spine)) {
                return spine;
            } else {
                spine.pop();
            }
        }
        return undefined;
    }
    get isDeclarationName() {
        let traverser = this.clone();
        let t = traverser.node;
        let parent = traverser.parent();
        if (!t || !parent) {
            return false;
        }
        return (t.tokenType === 83 || t.tokenType === 84) && this._isDeclarationPhrase(parent) || parent.phraseType === 95 && this._isDeclarationPhrase(traverser.parent());
    }
    _isDeclarationPhrase(node) {
        if (!node) {
            return false;
        }
        switch (node.phraseType) {
            case 30:
            case 167:
            case 105:
            case 138:
            case 43:
            case 129:
            case 88:
            case 115:
            case 26:
                return true;
            default:
                return false;
        }
    }
}
exports.ParseTreeTraverser = ParseTreeTraverser;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = __webpack_require__(19);
const util = __webpack_require__(4);
const logger_1 = __webpack_require__(55);
var Reference;
(function (Reference) {
    function create(kind, name, location) {
        return {
            kind: kind,
            name: name,
            location: location
        };
    }
    Reference.create = create;
})(Reference = exports.Reference || (exports.Reference = {}));
var Scope;
(function (Scope) {
    function create(location) {
        return {
            location: location,
            children: []
        };
    }
    Scope.create = create;
})(Scope = exports.Scope || (exports.Scope = {}));
class ReferenceTable {
    constructor(uri, root, hash) {
        this._uri = uri;
        this._root = root;
        if (hash) {
            this._hash = hash;
        } else {
            this._hash = Math.abs(util.hash32(uri));
        }
    }
    get uri() {
        return this._uri;
    }
    get root() {
        return this._root;
    }
    get hash() {
        return this._hash;
    }
    get referenceCount() {
        return this.references().length;
    }
    references(filter) {
        let traverser = new types_1.TreeTraverser([this.root]);
        let visitor = new ReferencesVisitor(filter);
        traverser.traverse(visitor);
        return visitor.references;
    }
    referenceAtPosition(position) {
        let visitor = new LocateVisitor(position);
        this.traverse(visitor);
        let ref = visitor.node;
        return ref && ref.kind ? ref : undefined;
    }
    scopeAtPosition(position) {
        let visitor = new LocateVisitor(position);
        this.traverse(visitor);
        let node = visitor.node;
        return node && node.kind === undefined ? node : undefined;
    }
    createTraverser() {
        return new types_1.TreeTraverser([this.root]);
    }
    traverse(visitor) {
        let traverser = new types_1.TreeTraverser([this.root]);
        traverser.traverse(visitor);
        return visitor;
    }
    static fromJSON(data) {
        return new ReferenceTable(data._uri, data._root, data._hash);
    }
}
exports.ReferenceTable = ReferenceTable;
var ReferenceTableSummary;
(function (ReferenceTableSummary) {
    function fromTable(table) {
        return table.traverse(new ReferenceTableSummaryVisitor(table.uri)).referenceTableSummary;
    }
    ReferenceTableSummary.fromTable = fromTable;
    function create(uri, identifiers) {
        return {
            uri: uri,
            identifiers: identifiers
        };
    }
    ReferenceTableSummary.create = create;
    var collator = new Intl.Collator('en');
    function compare(a, b) {
        return collator.compare(a.uri, b.uri);
    }
    ReferenceTableSummary.compare = compare;
    function keys(x) {
        return x.identifiers;
    }
    ReferenceTableSummary.keys = keys;
    function uriCompareFn(uri) {
        return x => {
            return collator.compare(x.uri, uri);
        };
    }
    ReferenceTableSummary.uriCompareFn = uriCompareFn;
})(ReferenceTableSummary || (ReferenceTableSummary = {}));
class ReferenceStore {
    constructor(cache) {
        this._fetchTable = uri => {
            let findOpenTableFn = t => {
                return t.uri === uri;
            };
            let table = this.getReferenceTable(uri);
            if (table) {
                return Promise.resolve(table);
            } else {
                return this._cache.read(uri).then(obj => {
                    return Promise.resolve(new ReferenceTable(uri, obj));
                });
            }
        };
        this._nameIndex = new types_1.NameIndex(ReferenceTableSummary.keys);
        this._summaryIndex = new types_1.SortedList(ReferenceTableSummary.compare);
        this._tables = [];
        this._cache = cache;
    }
    *knownDocuments() {
        let items = this._summaryIndex.items;
        for (let n = 0, l = items.length; n < l; ++n) {
            yield items[n].uri;
        }
    }
    getReferenceTable(uri) {
        return util.find(this._tables, t => {
            return t.uri === uri;
        });
    }
    add(table) {
        if (this.getReferenceTable(table.uri) || this._summaryIndex.find(ReferenceTableSummary.uriCompareFn(table.uri))) {
            this.remove(table.uri);
        }
        this._tables.push(table);
        let summary = ReferenceTableSummary.fromTable(table);
        this._summaryIndex.add(summary);
        this._nameIndex.add(summary);
    }
    remove(uri, purge) {
        this._tablesRemove(uri);
        let summary = this._summaryRemove(uri);
        if (!summary) {
            return;
        }
        this._nameIndex.remove(summary);
        if (purge) {
            this._cache.delete(uri);
        }
    }
    close(uri) {
        let table = this._tablesRemove(uri);
        if (table) {
            return this._cache.write(table.uri, table.root).catch(msg => {
                logger_1.Log.error(msg);
            });
        }
        return Promise.resolve();
    }
    closeAll() {
        let tables = this._tables;
        let cache = this._cache;
        this._tables = [];
        let count = tables.length;
        return new Promise((resolve, reject) => {
            let onReject = msg => {
                --count;
                logger_1.Log.error(msg);
                writeTableFn();
            };
            let onResolve = () => {
                --count;
                writeTableFn();
            };
            let writeTableFn = () => {
                let table = tables.pop();
                if (table) {
                    cache.write(table.uri, table).then(onResolve).catch(onReject);
                } else if (count < 1) {
                    resolve();
                }
            };
            let maxOpenFiles = Math.min(4, tables.length);
            for (let n = 0; n < maxOpenFiles; ++n) {
                writeTableFn();
            }
        });
    }
    find(name, filter) {
        if (!name) {
            return Promise.resolve([]);
        }
        let summaries = this._nameIndex.find(name);
        let count = summaries.length;
        if (!count) {
            return Promise.resolve([]);
        }
        let tables = [];
        let fetchTableFn = this._fetchTable;
        let findInTablesFn = this._findInTables;
        return new Promise((resolve, reject) => {
            let onSuccess = table => {
                tables.push(table);
                onAlways();
            };
            let onFail = msg => {
                logger_1.Log.warn(msg);
                onAlways();
            };
            let onAlways = () => {
                count--;
                if (count < 1) {
                    resolve(findInTablesFn(tables, name, filter));
                } else {
                    let summary = summaries.pop();
                    if (summary) {
                        fetchTableFn(summary.uri).then(onSuccess).catch(onFail);
                    }
                }
            };
            let maxOpenFiles = Math.min(4, summaries.length);
            while (maxOpenFiles--) {
                fetchTableFn(summaries.pop().uri).then(onSuccess).catch(onFail);
            }
        });
    }
    fromJSON(data) {
        this._summaryIndex = new types_1.SortedList(ReferenceTableSummary.compare, data);
        let items = this._summaryIndex.items;
        let item;
        for (let n = 0; n < items.length; ++n) {
            item = items[n];
            this._nameIndex.add(item);
        }
    }
    toJSON() {
        return this._summaryIndex.items;
    }
    _findInTables(tables, name, filter) {
        const caseSensitiveKindMask = 16 | 256 | 8 | 1024;
        let refs = [];
        let lcName = name.toLowerCase();
        let table;
        if (!name || !tables.length) {
            return refs;
        }
        let predicate = r => {
            return ((r.kind & caseSensitiveKindMask) > 0 && name === r.name || !(r.kind & caseSensitiveKindMask) && lcName === r.name.toLowerCase()) && (!filter || filter(r));
        };
        for (let n = 0; n < tables.length; ++n) {
            table = tables[n];
            Array.prototype.push.apply(refs, table.references(predicate));
        }
        return refs;
    }
    _tablesRemove(uri) {
        let index = this._tables.findIndex(t => {
            return t.uri === uri;
        });
        if (index > -1) {
            return this._tables.splice(index, 1).shift();
        }
        return undefined;
    }
    _summaryRemove(uri) {
        let cmpFn = ReferenceTableSummary.uriCompareFn(uri);
        return this._summaryIndex.remove(cmpFn);
    }
}
exports.ReferenceStore = ReferenceStore;
class ReferencesVisitor {
    constructor(filter) {
        this._filter = filter;
        this._refs = [];
    }
    get references() {
        return this._refs;
    }
    preorder(node, spine) {
        if (node.kind !== undefined && (!this._filter || this._filter(node))) {
            this._refs.push(node);
        }
        return true;
    }
}
class ReferenceTableSummaryVisitor {
    constructor(uri) {
        this.uri = uri;
        this.identifiers = new Set();
    }
    get referenceTableSummary() {
        return ReferenceTableSummary.create(this.uri, Array.from(this.identifiers));
    }
    preorder(node, spine) {
        if (this._shouldIndex(node)) {
            let lcName = node.name.toLowerCase();
            let altName = node.altName;
            if (lcName) {
                this.identifiers.add(lcName);
            }
            if (altName) {
                let lcAltName = altName.toLowerCase();
                if (lcAltName !== lcName && lcAltName !== 'static' && lcAltName !== 'self' && lcAltName !== 'parent') {
                    this.identifiers.add(lcAltName);
                }
            }
        }
        return true;
    }
    _shouldIndex(node) {
        switch (node.kind) {
            case undefined:
            case 256:
            case 128:
                return false;
            default:
                return true;
        }
    }
}
class LocateVisitor {
    constructor(position) {
        this.position = position;
    }
    get node() {
        return this._node;
    }
    preorder(node, spine) {
        if (node.location && node.location.range && util.isInRange(this.position, node.location.range) === 0) {
            this._node = node;
            return true;
        }
        return false;
    }
}

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var Log;
(function (Log) {
    function error(msg) {
        if (Log.writer && msg) {
            Log.writer.error(msg);
        }
    }
    Log.error = error;
    function warn(msg) {
        if (Log.writer && msg) {
            Log.writer.warn(msg);
        }
    }
    Log.warn = warn;
    function info(msg) {
        if (Log.writer && msg) {
            Log.writer.info(msg);
        }
    }
    Log.info = info;
})(Log = exports.Log || (exports.Log = {}));

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(2).fromCallback;
const jsonFile = __webpack_require__(237);

module.exports = {
  // jsonfile exports
  readJson: u(jsonFile.readFile),
  readJsonSync: jsonFile.readFileSync,
  writeJson: u(jsonFile.writeFile),
  writeJsonSync: jsonFile.writeFileSync
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(20);
const crypto = __webpack_require__(15);
const https = __webpack_require__(111);
const http = __webpack_require__(16);
const net = __webpack_require__(21);
const tls = __webpack_require__(112);
const url = __webpack_require__(17);

const PerMessageDeflate = __webpack_require__(30);
const EventTarget = __webpack_require__(114);
const extension = __webpack_require__(59);
const constants = __webpack_require__(22);
const Receiver = __webpack_require__(60);
const Sender = __webpack_require__(62);

const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
const kWebSocket = constants.kWebSocket;
const protocolVersions = [8, 13];
const closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly.

/**
 * Class representing a WebSocket.
 *
 * @extends EventEmitter
 */
class WebSocket extends EventEmitter {
  /**
   * Create a new `WebSocket`.
   *
   * @param {(String|url.Url|url.URL)} address The URL to which to connect
   * @param {(String|String[])} protocols The subprotocols
   * @param {Object} options Connection options
   */
  constructor(address, protocols, options) {
    super();

    this.readyState = WebSocket.CONNECTING;
    this.protocol = '';

    this._binaryType = constants.BINARY_TYPES[0];
    this._closeFrameReceived = false;
    this._closeFrameSent = false;
    this._closeMessage = '';
    this._closeTimer = null;
    this._closeCode = 1006;
    this._extensions = {};
    this._isServer = true;
    this._receiver = null;
    this._sender = null;
    this._socket = null;

    if (address !== null) {
      if (Array.isArray(protocols)) {
        protocols = protocols.join(', ');
      } else if (typeof protocols === 'object' && protocols !== null) {
        options = protocols;
        protocols = undefined;
      }

      initAsClient.call(this, address, protocols, options);
    }
  }

  get CONNECTING() {
    return WebSocket.CONNECTING;
  }
  get CLOSING() {
    return WebSocket.CLOSING;
  }
  get CLOSED() {
    return WebSocket.CLOSED;
  }
  get OPEN() {
    return WebSocket.OPEN;
  }

  /**
   * This deviates from the WHATWG interface since ws doesn't support the required
   * default "blob" type (instead we define a custom "nodebuffer" type).
   *
   * @type {String}
   */
  get binaryType() {
    return this._binaryType;
  }

  set binaryType(type) {
    if (constants.BINARY_TYPES.indexOf(type) < 0) return;

    this._binaryType = type;

    //
    // Allow to change `binaryType` on the fly.
    //
    if (this._receiver) this._receiver._binaryType = type;
  }

  /**
   * @type {Number}
   */
  get bufferedAmount() {
    if (!this._socket) return 0;

    //
    // `socket.bufferSize` is `undefined` if the socket is closed.
    //
    return (this._socket.bufferSize || 0) + this._sender._bufferedBytes;
  }

  /**
   * @type {String}
   */
  get extensions() {
    return Object.keys(this._extensions).join();
  }

  /**
   * Set up the socket and the internal resources.
   *
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Number} maxPayload The maximum allowed message size
   * @private
   */
  setSocket(socket, head, maxPayload) {
    const receiver = new Receiver(this._binaryType, this._extensions, maxPayload);

    this._sender = new Sender(socket, this._extensions);
    this._receiver = receiver;
    this._socket = socket;

    receiver[kWebSocket] = this;
    socket[kWebSocket] = this;

    receiver.on('conclude', receiverOnConclude);
    receiver.on('drain', receiverOnDrain);
    receiver.on('error', receiverOnError);
    receiver.on('message', receiverOnMessage);
    receiver.on('ping', receiverOnPing);
    receiver.on('pong', receiverOnPong);

    socket.setTimeout(0);
    socket.setNoDelay();

    if (head.length > 0) socket.unshift(head);

    socket.on('close', socketOnClose);
    socket.on('data', socketOnData);
    socket.on('end', socketOnEnd);
    socket.on('error', socketOnError);

    this.readyState = WebSocket.OPEN;
    this.emit('open');
  }

  /**
   * Emit the `'close'` event.
   *
   * @private
   */
  emitClose() {
    this.readyState = WebSocket.CLOSED;

    if (!this._socket) {
      this.emit('close', this._closeCode, this._closeMessage);
      return;
    }

    if (this._extensions[PerMessageDeflate.extensionName]) {
      this._extensions[PerMessageDeflate.extensionName].cleanup();
    }

    this._receiver.removeAllListeners();
    this.emit('close', this._closeCode, this._closeMessage);
  }

  /**
   * Start a closing handshake.
   *
   *          +----------+   +-----------+   +----------+
   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
   *    |     +----------+   +-----------+   +----------+     |
   *          +----------+   +-----------+         |
   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
   *          +----------+   +-----------+   |
   *    |           |                        |   +---+        |
   *                +------------------------+-->|fin| - - - -
   *    |         +---+                      |   +---+
   *     - - - - -|fin|<---------------------+
   *              +---+
   *
   * @param {Number} code Status code explaining why the connection is closing
   * @param {String} data A string explaining why the connection is closing
   * @public
   */
  close(code, data) {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      const msg = 'WebSocket was closed before the connection was established';
      return abortHandshake(this, this._req, msg);
    }

    if (this.readyState === WebSocket.CLOSING) {
      if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();
      return;
    }

    this.readyState = WebSocket.CLOSING;
    this._sender.close(code, data, !this._isServer, err => {
      //
      // This error is handled by the `'error'` listener on the socket. We only
      // want to know if the close frame has been sent here.
      //
      if (err) return;

      this._closeFrameSent = true;

      if (this._socket.writable) {
        if (this._closeFrameReceived) this._socket.end();

        //
        // Ensure that the connection is closed even if the closing handshake
        // fails.
        //
        this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);
      }
    });
  }

  /**
   * Send a ping.
   *
   * @param {*} data The data to send
   * @param {Boolean} mask Indicates whether or not to mask `data`
   * @param {Function} cb Callback which is executed when the ping is sent
   * @public
   */
  ping(data, mask, cb) {
    if (typeof data === 'function') {
      cb = data;
      data = mask = undefined;
    } else if (typeof mask === 'function') {
      cb = mask;
      mask = undefined;
    }

    if (this.readyState !== WebSocket.OPEN) {
      const err = new Error(`WebSocket is not open: readyState ${this.readyState} ` + `(${readyStates[this.readyState]})`);

      if (cb) return cb(err);
      throw err;
    }

    if (typeof data === 'number') data = data.toString();
    if (mask === undefined) mask = !this._isServer;
    this._sender.ping(data || constants.EMPTY_BUFFER, mask, cb);
  }

  /**
   * Send a pong.
   *
   * @param {*} data The data to send
   * @param {Boolean} mask Indicates whether or not to mask `data`
   * @param {Function} cb Callback which is executed when the pong is sent
   * @public
   */
  pong(data, mask, cb) {
    if (typeof data === 'function') {
      cb = data;
      data = mask = undefined;
    } else if (typeof mask === 'function') {
      cb = mask;
      mask = undefined;
    }

    if (this.readyState !== WebSocket.OPEN) {
      const err = new Error(`WebSocket is not open: readyState ${this.readyState} ` + `(${readyStates[this.readyState]})`);

      if (cb) return cb(err);
      throw err;
    }

    if (typeof data === 'number') data = data.toString();
    if (mask === undefined) mask = !this._isServer;
    this._sender.pong(data || constants.EMPTY_BUFFER, mask, cb);
  }

  /**
   * Send a data message.
   *
   * @param {*} data The message to send
   * @param {Object} options Options object
   * @param {Boolean} options.compress Specifies whether or not to compress `data`
   * @param {Boolean} options.binary Specifies whether `data` is binary or text
   * @param {Boolean} options.fin Specifies whether the fragment is the last one
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback which is executed when data is written out
   * @public
   */
  send(data, options, cb) {
    if (typeof options === 'function') {
      cb = options;
      options = {};
    }

    if (this.readyState !== WebSocket.OPEN) {
      const err = new Error(`WebSocket is not open: readyState ${this.readyState} ` + `(${readyStates[this.readyState]})`);

      if (cb) return cb(err);
      throw err;
    }

    if (typeof data === 'number') data = data.toString();

    const opts = Object.assign({
      binary: typeof data !== 'string',
      mask: !this._isServer,
      compress: true,
      fin: true
    }, options);

    if (!this._extensions[PerMessageDeflate.extensionName]) {
      opts.compress = false;
    }

    this._sender.send(data || constants.EMPTY_BUFFER, opts, cb);
  }

  /**
   * Forcibly close the connection.
   *
   * @public
   */
  terminate() {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      const msg = 'WebSocket was closed before the connection was established';
      return abortHandshake(this, this._req, msg);
    }

    if (this._socket) {
      this.readyState = WebSocket.CLOSING;
      this._socket.destroy();
    }
  }
}

readyStates.forEach((readyState, i) => {
  WebSocket[readyStates[i]] = i;
});

//
// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
//
['open', 'error', 'close', 'message'].forEach(method => {
  Object.defineProperty(WebSocket.prototype, `on${method}`, {
    /**
     * Return the listener of the event.
     *
     * @return {(Function|undefined)} The event listener or `undefined`
     * @public
     */
    get() {
      const listeners = this.listeners(method);
      for (var i = 0; i < listeners.length; i++) {
        if (listeners[i]._listener) return listeners[i]._listener;
      }
    },
    /**
     * Add a listener for the event.
     *
     * @param {Function} listener The listener to add
     * @public
     */
    set(listener) {
      const listeners = this.listeners(method);
      for (var i = 0; i < listeners.length; i++) {
        //
        // Remove only the listeners added via `addEventListener`.
        //
        if (listeners[i]._listener) this.removeListener(method, listeners[i]);
      }
      this.addEventListener(method, listener);
    }
  });
});

WebSocket.prototype.addEventListener = EventTarget.addEventListener;
WebSocket.prototype.removeEventListener = EventTarget.removeEventListener;

module.exports = WebSocket;

/**
 * Initialize a WebSocket client.
 *
 * @param {(String|url.Url|url.URL)} address The URL to which to connect
 * @param {String} protocols The subprotocols
 * @param {Object} options Connection options
 * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate
 * @param {Number} options.handshakeTimeout Timeout in milliseconds for the handshake request
 * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version` header
 * @param {String} options.origin Value of the `Origin` or `Sec-WebSocket-Origin` header
 * @private
 */
function initAsClient(address, protocols, options) {
  options = Object.assign({
    protocolVersion: protocolVersions[1],
    perMessageDeflate: true
  }, options, {
    createConnection: undefined,
    socketPath: undefined,
    hostname: undefined,
    protocol: undefined,
    timeout: undefined,
    method: undefined,
    auth: undefined,
    host: undefined,
    path: undefined,
    port: undefined
  });

  if (protocolVersions.indexOf(options.protocolVersion) === -1) {
    throw new RangeError(`Unsupported protocol version: ${options.protocolVersion} ` + `(supported versions: ${protocolVersions.join(', ')})`);
  }

  this._isServer = false;

  var parsedUrl;

  if (typeof address === 'object' && address.href !== undefined) {
    parsedUrl = address;
    this.url = address.href;
  } else {
    parsedUrl = url.parse(address);
    this.url = address;
  }

  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';

  if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
    throw new Error(`Invalid URL: ${this.url}`);
  }

  const isSecure = parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';
  const key = crypto.randomBytes(16).toString('base64');
  const httpObj = isSecure ? https : http;
  const path = parsedUrl.search ? `${parsedUrl.pathname || '/'}${parsedUrl.search}` : parsedUrl.pathname || '/';
  var perMessageDeflate;

  options.createConnection = isSecure ? tlsConnect : netConnect;
  options.port = parsedUrl.port || (isSecure ? 443 : 80);
  options.host = parsedUrl.hostname.startsWith('[') ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
  options.headers = Object.assign({
    'Sec-WebSocket-Version': options.protocolVersion,
    'Sec-WebSocket-Key': key,
    'Connection': 'Upgrade',
    'Upgrade': 'websocket'
  }, options.headers);
  options.path = path;

  if (options.perMessageDeflate) {
    perMessageDeflate = new PerMessageDeflate(options.perMessageDeflate !== true ? options.perMessageDeflate : {}, false);
    options.headers['Sec-WebSocket-Extensions'] = extension.format({
      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
    });
  }
  if (protocols) {
    options.headers['Sec-WebSocket-Protocol'] = protocols;
  }
  if (options.origin) {
    if (options.protocolVersion < 13) {
      options.headers['Sec-WebSocket-Origin'] = options.origin;
    } else {
      options.headers.Origin = options.origin;
    }
  }
  if (parsedUrl.auth) {
    options.auth = parsedUrl.auth;
  } else if (parsedUrl.username || parsedUrl.password) {
    options.auth = `${parsedUrl.username}:${parsedUrl.password}`;
  }

  if (isUnixSocket) {
    const parts = path.split(':');

    if (options.agent == null && process.versions.modules < 57) {
      //
      // Setting `socketPath` in conjunction with `createConnection` without an
      // agent throws an error on Node.js < 8. Work around the issue by using a
      // different property.
      //
      options._socketPath = parts[0];
    } else {
      options.socketPath = parts[0];
    }

    options.path = parts[1];
  }

  var req = this._req = httpObj.get(options);

  if (options.handshakeTimeout) {
    req.setTimeout(options.handshakeTimeout, abortHandshake.bind(null, this, req, 'Opening handshake has timed out'));
  }

  req.on('error', err => {
    if (this._req.aborted) return;

    req = this._req = null;
    this.readyState = WebSocket.CLOSING;
    this.emit('error', err);
    this.emitClose();
  });

  req.on('response', res => {
    if (this.emit('unexpected-response', req, res)) return;

    abortHandshake(this, req, `Unexpected server response: ${res.statusCode}`);
  });

  req.on('upgrade', (res, socket, head) => {
    this.emit('upgrade', res);

    //
    // The user may have closed the connection from a listener of the `upgrade`
    // event.
    //
    if (this.readyState !== WebSocket.CONNECTING) return;

    req = this._req = null;

    const digest = crypto.createHash('sha1').update(key + constants.GUID, 'binary').digest('base64');

    if (res.headers['sec-websocket-accept'] !== digest) {
      abortHandshake(this, socket, 'Invalid Sec-WebSocket-Accept header');
      return;
    }

    const serverProt = res.headers['sec-websocket-protocol'];
    const protList = (protocols || '').split(/, */);
    var protError;

    if (!protocols && serverProt) {
      protError = 'Server sent a subprotocol but none was requested';
    } else if (protocols && !serverProt) {
      protError = 'Server sent no subprotocol';
    } else if (serverProt && protList.indexOf(serverProt) === -1) {
      protError = 'Server sent an invalid subprotocol';
    }

    if (protError) {
      abortHandshake(this, socket, protError);
      return;
    }

    if (serverProt) this.protocol = serverProt;

    if (perMessageDeflate) {
      try {
        const extensions = extension.parse(res.headers['sec-websocket-extensions']);

        if (extensions[PerMessageDeflate.extensionName]) {
          perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
          this._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
        }
      } catch (err) {
        abortHandshake(this, socket, 'Invalid Sec-WebSocket-Extensions header');
        return;
      }
    }

    this.setSocket(socket, head, 0);
  });
}

/**
 * Create a `net.Socket` and initiate a connection.
 *
 * @param {Object} options Connection options
 * @return {net.Socket} The newly created socket used to start the connection
 * @private
 */
function netConnect(options) {
  options.path = options.socketPath || options._socketPath || undefined;
  return net.connect(options);
}

/**
 * Create a `tls.TLSSocket` and initiate a connection.
 *
 * @param {Object} options Connection options
 * @return {tls.TLSSocket} The newly created socket used to start the connection
 * @private
 */
function tlsConnect(options) {
  options.path = options.socketPath || options._socketPath || undefined;
  options.servername = options.servername || options.host;
  return tls.connect(options);
}

/**
 * Abort the handshake and emit an error.
 *
 * @param {WebSocket} websocket The WebSocket instance
 * @param {(http.ClientRequest|net.Socket)} stream The request to abort or the
 *     socket to destroy
 * @param {String} message The error message
 * @private
 */
function abortHandshake(websocket, stream, message) {
  websocket.readyState = WebSocket.CLOSING;

  const err = new Error(message);
  Error.captureStackTrace(err, abortHandshake);

  if (stream.setHeader) {
    stream.abort();
    stream.once('abort', websocket.emitClose.bind(websocket));
    websocket.emit('error', err);
  } else {
    stream.destroy(err);
    stream.once('error', websocket.emit.bind(websocket, 'error'));
    stream.once('close', websocket.emitClose.bind(websocket));
  }
}

/**
 * The listener of the `Receiver` `'conclude'` event.
 *
 * @param {Number} code The status code
 * @param {String} reason The reason for closing
 * @private
 */
function receiverOnConclude(code, reason) {
  const websocket = this[kWebSocket];

  websocket._socket.removeListener('data', socketOnData);
  websocket._socket.resume();

  websocket._closeFrameReceived = true;
  websocket._closeMessage = reason;
  websocket._closeCode = code;

  if (code === 1005) websocket.close();else websocket.close(code, reason);
}

/**
 * The listener of the `Receiver` `'drain'` event.
 *
 * @private
 */
function receiverOnDrain() {
  this[kWebSocket]._socket.resume();
}

/**
 * The listener of the `Receiver` `'error'` event.
 *
 * @param {(RangeError|Error)} err The emitted error
 * @private
 */
function receiverOnError(err) {
  const websocket = this[kWebSocket];

  websocket.readyState = WebSocket.CLOSING;
  websocket._closeCode = err[constants.kStatusCode];
  websocket.emit('error', err);
  websocket._socket.destroy();
}

/**
 * The listener of the `Receiver` `'finish'` event.
 *
 * @private
 */
function receiverOnFinish() {
  this[kWebSocket].emitClose();
}

/**
 * The listener of the `Receiver` `'message'` event.
 *
 * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message
 * @private
 */
function receiverOnMessage(data) {
  this[kWebSocket].emit('message', data);
}

/**
 * The listener of the `Receiver` `'ping'` event.
 *
 * @param {Buffer} data The data included in the ping frame
 * @private
 */
function receiverOnPing(data) {
  const websocket = this[kWebSocket];

  websocket.pong(data, !websocket._isServer, constants.NOOP);
  websocket.emit('ping', data);
}

/**
 * The listener of the `Receiver` `'pong'` event.
 *
 * @param {Buffer} data The data included in the pong frame
 * @private
 */
function receiverOnPong(data) {
  this[kWebSocket].emit('pong', data);
}

/**
 * The listener of the `net.Socket` `'close'` event.
 *
 * @private
 */
function socketOnClose() {
  const websocket = this[kWebSocket];

  this.removeListener('close', socketOnClose);
  this.removeListener('data', socketOnData);
  this.removeListener('end', socketOnEnd);
  this[kWebSocket] = undefined;

  websocket.readyState = WebSocket.CLOSING;

  //
  // The close frame might not have been received or the `'end'` event emitted,
  // for example, if the socket was destroyed due to an error. Ensure that the
  // `receiver` stream is closed after writing any remaining buffered data to
  // it.
  //
  websocket._socket.read();
  websocket._receiver.end();

  clearTimeout(websocket._closeTimer);

  if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
    websocket.emitClose();
  } else {
    websocket._receiver.on('error', receiverOnFinish);
    websocket._receiver.on('finish', receiverOnFinish);
  }
}

/**
 * The listener of the `net.Socket` `'data'` event.
 *
 * @param {Buffer} chunk A chunk of data
 * @private
 */
function socketOnData(chunk) {
  if (!this[kWebSocket]._receiver.write(chunk)) {
    this.pause();
  }
}

/**
 * The listener of the `net.Socket` `'end'` event.
 *
 * @private
 */
function socketOnEnd() {
  const websocket = this[kWebSocket];

  websocket.readyState = WebSocket.CLOSING;
  websocket._receiver.end();
  this.end();
}

/**
 * The listener of the `net.Socket` `'error'` event.
 *
 * @private
 */
function socketOnError() {
  const websocket = this[kWebSocket];

  this.removeListener('error', socketOnError);
  this.on('error', constants.NOOP);

  if (websocket) {
    websocket.readyState = WebSocket.CLOSING;
    this.destroy();
  }
}

/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = require("zlib");

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//
// Allowed token characters:
//
// '!', '#', '$', '%', '&', ''', '*', '+', '-',
// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
//
// tokenChars[32] === 0 // ' '
// tokenChars[33] === 1 // '!'
// tokenChars[34] === 0 // '"'
// ...
//

const tokenChars = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
];

/**
 * Adds an offer to the map of extension offers or a parameter to the map of
 * parameters.
 *
 * @param {Object} dest The map of extension offers or parameters
 * @param {String} name The extension or parameter name
 * @param {(Object|Boolean|String)} elem The extension parameters or the
 *     parameter value
 * @private
 */
function push(dest, name, elem) {
  if (Object.prototype.hasOwnProperty.call(dest, name)) dest[name].push(elem);else dest[name] = [elem];
}

/**
 * Parses the `Sec-WebSocket-Extensions` header into an object.
 *
 * @param {String} header The field value of the header
 * @return {Object} The parsed object
 * @public
 */
function parse(header) {
  const offers = {};

  if (header === undefined || header === '') return offers;

  var params = {};
  var mustUnescape = false;
  var isEscaping = false;
  var inQuotes = false;
  var extensionName;
  var paramName;
  var start = -1;
  var end = -1;

  for (var i = 0; i < header.length; i++) {
    const code = header.charCodeAt(i);

    if (extensionName === undefined) {
      if (end === -1 && tokenChars[code] === 1) {
        if (start === -1) start = i;
      } else if (code === 0x20 /* ' ' */ || code === 0x09 /* '\t' */) {
          if (end === -1 && start !== -1) end = i;
        } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          const name = header.slice(start, end);
          if (code === 0x2c) {
            push(offers, name, params);
            params = {};
          } else {
            extensionName = name;
          }

          start = end = -1;
        } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    } else if (paramName === undefined) {
      if (end === -1 && tokenChars[code] === 1) {
        if (start === -1) start = i;
      } else if (code === 0x20 || code === 0x09) {
        if (end === -1 && start !== -1) end = i;
      } else if (code === 0x3b || code === 0x2c) {
        if (start === -1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }

        if (end === -1) end = i;
        push(params, header.slice(start, end), true);
        if (code === 0x2c) {
          push(offers, extensionName, params);
          params = {};
          extensionName = undefined;
        }

        start = end = -1;
      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
        paramName = header.slice(start, i);
        start = end = -1;
      } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    } else {
      //
      // The value of a quoted-string after unescaping must conform to the
      // token ABNF, so only token characters are valid.
      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
      //
      if (isEscaping) {
        if (tokenChars[code] !== 1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
        if (start === -1) start = i;else if (!mustUnescape) mustUnescape = true;
        isEscaping = false;
      } else if (inQuotes) {
        if (tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x22 /* '"' */ && start !== -1) {
          inQuotes = false;
          end = i;
        } else if (code === 0x5c /* '\' */) {
            isEscaping = true;
          } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
        inQuotes = true;
      } else if (end === -1 && tokenChars[code] === 1) {
        if (start === -1) start = i;
      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
        if (end === -1) end = i;
      } else if (code === 0x3b || code === 0x2c) {
        if (start === -1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }

        if (end === -1) end = i;
        var value = header.slice(start, end);
        if (mustUnescape) {
          value = value.replace(/\\/g, '');
          mustUnescape = false;
        }
        push(params, paramName, value);
        if (code === 0x2c) {
          push(offers, extensionName, params);
          params = {};
          extensionName = undefined;
        }

        paramName = undefined;
        start = end = -1;
      } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    }
  }

  if (start === -1 || inQuotes) {
    throw new SyntaxError('Unexpected end of input');
  }

  if (end === -1) end = i;
  const token = header.slice(start, end);
  if (extensionName === undefined) {
    push(offers, token, {});
  } else {
    if (paramName === undefined) {
      push(params, token, true);
    } else if (mustUnescape) {
      push(params, paramName, token.replace(/\\/g, ''));
    } else {
      push(params, paramName, token);
    }
    push(offers, extensionName, params);
  }

  return offers;
}

/**
 * Builds the `Sec-WebSocket-Extensions` header field value.
 *
 * @param {Object} extensions The map of extensions and parameters to format
 * @return {String} A string representing the given object
 * @public
 */
function format(extensions) {
  return Object.keys(extensions).map(extension => {
    var configurations = extensions[extension];
    if (!Array.isArray(configurations)) configurations = [configurations];
    return configurations.map(params => {
      return [extension].concat(Object.keys(params).map(k => {
        var values = params[k];
        if (!Array.isArray(values)) values = [values];
        return values.map(v => v === true ? k : `${k}=${v}`).join('; ');
      })).join('; ');
    }).join(', ');
  }).join(', ');
}

module.exports = { format, parse };

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const stream = __webpack_require__(9);

const PerMessageDeflate = __webpack_require__(30);
const bufferUtil = __webpack_require__(46);
const validation = __webpack_require__(61);
const constants = __webpack_require__(22);

const GET_INFO = 0;
const GET_PAYLOAD_LENGTH_16 = 1;
const GET_PAYLOAD_LENGTH_64 = 2;
const GET_MASK = 3;
const GET_DATA = 4;
const INFLATING = 5;

/**
 * HyBi Receiver implementation.
 *
 * @extends stream.Writable
 */
class Receiver extends stream.Writable {
  /**
   * Creates a Receiver instance.
   *
   * @param {String} binaryType The type for binary data
   * @param {Object} extensions An object containing the negotiated extensions
   * @param {Number} maxPayload The maximum allowed message length
   */
  constructor(binaryType, extensions, maxPayload) {
    super();

    this._binaryType = binaryType || constants.BINARY_TYPES[0];
    this[constants.kWebSocket] = undefined;
    this._extensions = extensions || {};
    this._maxPayload = maxPayload | 0;

    this._bufferedBytes = 0;
    this._buffers = [];

    this._compressed = false;
    this._payloadLength = 0;
    this._mask = undefined;
    this._fragmented = 0;
    this._masked = false;
    this._fin = false;
    this._opcode = 0;

    this._totalPayloadLength = 0;
    this._messageLength = 0;
    this._fragments = [];

    this._state = GET_INFO;
    this._loop = false;
  }

  /**
   * Implements `Writable.prototype._write()`.
   *
   * @param {Buffer} chunk The chunk of data to write
   * @param {String} encoding The character encoding of `chunk`
   * @param {Function} cb Callback
   */
  _write(chunk, encoding, cb) {
    if (this._opcode === 0x08) return cb();

    this._bufferedBytes += chunk.length;
    this._buffers.push(chunk);
    this.startLoop(cb);
  }

  /**
   * Consumes `n` bytes from the buffered data.
   *
   * @param {Number} n The number of bytes to consume
   * @return {Buffer} The consumed bytes
   * @private
   */
  consume(n) {
    this._bufferedBytes -= n;

    if (n === this._buffers[0].length) return this._buffers.shift();

    if (n < this._buffers[0].length) {
      const buf = this._buffers[0];
      this._buffers[0] = buf.slice(n);
      return buf.slice(0, n);
    }

    const dst = Buffer.allocUnsafe(n);

    do {
      const buf = this._buffers[0];

      if (n >= buf.length) {
        this._buffers.shift().copy(dst, dst.length - n);
      } else {
        buf.copy(dst, dst.length - n, 0, n);
        this._buffers[0] = buf.slice(n);
      }

      n -= buf.length;
    } while (n > 0);

    return dst;
  }

  /**
   * Starts the parsing loop.
   *
   * @param {Function} cb Callback
   * @private
   */
  startLoop(cb) {
    var err;
    this._loop = true;

    do {
      switch (this._state) {
        case GET_INFO:
          err = this.getInfo();
          break;
        case GET_PAYLOAD_LENGTH_16:
          err = this.getPayloadLength16();
          break;
        case GET_PAYLOAD_LENGTH_64:
          err = this.getPayloadLength64();
          break;
        case GET_MASK:
          this.getMask();
          break;
        case GET_DATA:
          err = this.getData(cb);
          break;
        default:
          // `INFLATING`
          this._loop = false;
          return;
      }
    } while (this._loop);

    cb(err);
  }

  /**
   * Reads the first two bytes of a frame.
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  getInfo() {
    if (this._bufferedBytes < 2) {
      this._loop = false;
      return;
    }

    const buf = this.consume(2);

    if ((buf[0] & 0x30) !== 0x00) {
      this._loop = false;
      return error(RangeError, 'RSV2 and RSV3 must be clear', true, 1002);
    }

    const compressed = (buf[0] & 0x40) === 0x40;

    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
      this._loop = false;
      return error(RangeError, 'RSV1 must be clear', true, 1002);
    }

    this._fin = (buf[0] & 0x80) === 0x80;
    this._opcode = buf[0] & 0x0f;
    this._payloadLength = buf[1] & 0x7f;

    if (this._opcode === 0x00) {
      if (compressed) {
        this._loop = false;
        return error(RangeError, 'RSV1 must be clear', true, 1002);
      }

      if (!this._fragmented) {
        this._loop = false;
        return error(RangeError, 'invalid opcode 0', true, 1002);
      }

      this._opcode = this._fragmented;
    } else if (this._opcode === 0x01 || this._opcode === 0x02) {
      if (this._fragmented) {
        this._loop = false;
        return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
      }

      this._compressed = compressed;
    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
      if (!this._fin) {
        this._loop = false;
        return error(RangeError, 'FIN must be set', true, 1002);
      }

      if (compressed) {
        this._loop = false;
        return error(RangeError, 'RSV1 must be clear', true, 1002);
      }

      if (this._payloadLength > 0x7d) {
        this._loop = false;
        return error(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002);
      }
    } else {
      this._loop = false;
      return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
    }

    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
    this._masked = (buf[1] & 0x80) === 0x80;

    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;else return this.haveLength();
  }

  /**
   * Gets extended payload length (7+16).
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  getPayloadLength16() {
    if (this._bufferedBytes < 2) {
      this._loop = false;
      return;
    }

    this._payloadLength = this.consume(2).readUInt16BE(0);
    return this.haveLength();
  }

  /**
   * Gets extended payload length (7+64).
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  getPayloadLength64() {
    if (this._bufferedBytes < 8) {
      this._loop = false;
      return;
    }

    const buf = this.consume(8);
    const num = buf.readUInt32BE(0);

    //
    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
    // if payload length is greater than this number.
    //
    if (num > Math.pow(2, 53 - 32) - 1) {
      this._loop = false;
      return error(RangeError, 'Unsupported WebSocket frame: payload length > 2^53 - 1', false, 1009);
    }

    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
    return this.haveLength();
  }

  /**
   * Payload length has been read.
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  haveLength() {
    if (this._payloadLength && this._opcode < 0x08) {
      this._totalPayloadLength += this._payloadLength;
      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
        this._loop = false;
        return error(RangeError, 'Max payload size exceeded', false, 1009);
      }
    }

    if (this._masked) this._state = GET_MASK;else this._state = GET_DATA;
  }

  /**
   * Reads mask bytes.
   *
   * @private
   */
  getMask() {
    if (this._bufferedBytes < 4) {
      this._loop = false;
      return;
    }

    this._mask = this.consume(4);
    this._state = GET_DATA;
  }

  /**
   * Reads data bytes.
   *
   * @param {Function} cb Callback
   * @return {(Error|RangeError|undefined)} A possible error
   * @private
   */
  getData(cb) {
    var data = constants.EMPTY_BUFFER;

    if (this._payloadLength) {
      if (this._bufferedBytes < this._payloadLength) {
        this._loop = false;
        return;
      }

      data = this.consume(this._payloadLength);
      if (this._masked) bufferUtil.unmask(data, this._mask);
    }

    if (this._opcode > 0x07) return this.controlMessage(data);

    if (this._compressed) {
      this._state = INFLATING;
      this.decompress(data, cb);
      return;
    }

    if (data.length) {
      //
      // This message is not compressed so its lenght is the sum of the payload
      // length of all fragments.
      //
      this._messageLength = this._totalPayloadLength;
      this._fragments.push(data);
    }

    return this.dataMessage();
  }

  /**
   * Decompresses data.
   *
   * @param {Buffer} data Compressed data
   * @param {Function} cb Callback
   * @private
   */
  decompress(data, cb) {
    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

    perMessageDeflate.decompress(data, this._fin, (err, buf) => {
      if (err) return cb(err);

      if (buf.length) {
        this._messageLength += buf.length;
        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
          return cb(error(RangeError, 'Max payload size exceeded', false, 1009));
        }

        this._fragments.push(buf);
      }

      const er = this.dataMessage();
      if (er) return cb(er);

      this.startLoop(cb);
    });
  }

  /**
   * Handles a data message.
   *
   * @return {(Error|undefined)} A possible error
   * @private
   */
  dataMessage() {
    if (this._fin) {
      const messageLength = this._messageLength;
      const fragments = this._fragments;

      this._totalPayloadLength = 0;
      this._messageLength = 0;
      this._fragmented = 0;
      this._fragments = [];

      if (this._opcode === 2) {
        var data;

        if (this._binaryType === 'nodebuffer') {
          data = toBuffer(fragments, messageLength);
        } else if (this._binaryType === 'arraybuffer') {
          data = toArrayBuffer(toBuffer(fragments, messageLength));
        } else {
          data = fragments;
        }

        this.emit('message', data);
      } else {
        const buf = toBuffer(fragments, messageLength);

        if (!validation.isValidUTF8(buf)) {
          this._loop = false;
          return error(Error, 'invalid UTF-8 sequence', true, 1007);
        }

        this.emit('message', buf.toString());
      }
    }

    this._state = GET_INFO;
  }

  /**
   * Handles a control message.
   *
   * @param {Buffer} data Data to handle
   * @return {(Error|RangeError|undefined)} A possible error
   * @private
   */
  controlMessage(data) {
    if (this._opcode === 0x08) {
      this._loop = false;

      if (data.length === 0) {
        this.emit('conclude', 1005, '');
        this.end();
      } else if (data.length === 1) {
        return error(RangeError, 'invalid payload length 1', true, 1002);
      } else {
        const code = data.readUInt16BE(0);

        if (!validation.isValidStatusCode(code)) {
          return error(RangeError, `invalid status code ${code}`, true, 1002);
        }

        const buf = data.slice(2);

        if (!validation.isValidUTF8(buf)) {
          return error(Error, 'invalid UTF-8 sequence', true, 1007);
        }

        this.emit('conclude', code, buf.toString());
        this.end();
      }

      return;
    }

    if (this._opcode === 0x09) this.emit('ping', data);else this.emit('pong', data);

    this._state = GET_INFO;
  }
}

module.exports = Receiver;

/**
 * Builds an error object.
 *
 * @param {(Error|RangeError)} ErrorCtor The error constructor
 * @param {String} message The error message
 * @param {Boolean} prefix Specifies whether or not to add a default prefix to
 *     `message`
 * @param {Number} statusCode The status code
 * @return {(Error|RangeError)} The error
 * @private
 */
function error(ErrorCtor, message, prefix, statusCode) {
  const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);

  Error.captureStackTrace(err, error);
  err[constants.kStatusCode] = statusCode;
  return err;
}

/**
 * Makes a buffer from a list of fragments.
 *
 * @param {Buffer[]} fragments The list of fragments composing the message
 * @param {Number} messageLength The length of the message
 * @return {Buffer}
 * @private
 */
function toBuffer(fragments, messageLength) {
  if (fragments.length === 1) return fragments[0];
  if (fragments.length > 1) return bufferUtil.concat(fragments, messageLength);
  return constants.EMPTY_BUFFER;
}

/**
 * Converts a buffer to an `ArrayBuffer`.
 *
 * @param {Buffer} The buffer to convert
 * @return {ArrayBuffer} Converted buffer
 */
function toArrayBuffer(buf) {
  if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
    return buf.buffer;
  }

  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
}

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


try {
  const isValidUTF8 = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"utf-8-validate\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

  exports.isValidUTF8 = typeof isValidUTF8 === 'object' ? isValidUTF8.Validation.isValidUTF8 // utf-8-validate@<3.0.0
  : isValidUTF8;
} catch (e) /* istanbul ignore next */{
  exports.isValidUTF8 = () => true;
}

/**
 * Checks if a status code is allowed in a close frame.
 *
 * @param {Number} code The status code
 * @return {Boolean} `true` if the status code is valid, else `false`
 * @public
 */
exports.isValidStatusCode = code => {
  return code >= 1000 && code <= 1013 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3000 && code <= 4999;
};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const crypto = __webpack_require__(15);

const PerMessageDeflate = __webpack_require__(30);
const bufferUtil = __webpack_require__(46);
const validation = __webpack_require__(61);
const constants = __webpack_require__(22);

/**
 * HyBi Sender implementation.
 */
class Sender {
  /**
   * Creates a Sender instance.
   *
   * @param {net.Socket} socket The connection socket
   * @param {Object} extensions An object containing the negotiated extensions
   */
  constructor(socket, extensions) {
    this._extensions = extensions || {};
    this._socket = socket;

    this._firstFragment = true;
    this._compress = false;

    this._bufferedBytes = 0;
    this._deflating = false;
    this._queue = [];
  }

  /**
   * Frames a piece of data according to the HyBi WebSocket protocol.
   *
   * @param {Buffer} data The data to frame
   * @param {Object} options Options object
   * @param {Number} options.opcode The opcode
   * @param {Boolean} options.readOnly Specifies whether `data` can be modified
   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
   * @return {Buffer[]} The framed data as a list of `Buffer` instances
   * @public
   */
  static frame(data, options) {
    const merge = data.length < 1024 || options.mask && options.readOnly;
    var offset = options.mask ? 6 : 2;
    var payloadLength = data.length;

    if (data.length >= 65536) {
      offset += 8;
      payloadLength = 127;
    } else if (data.length > 125) {
      offset += 2;
      payloadLength = 126;
    }

    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);

    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
    if (options.rsv1) target[0] |= 0x40;

    if (payloadLength === 126) {
      target.writeUInt16BE(data.length, 2);
    } else if (payloadLength === 127) {
      target.writeUInt32BE(0, 2);
      target.writeUInt32BE(data.length, 6);
    }

    if (!options.mask) {
      target[1] = payloadLength;
      if (merge) {
        data.copy(target, offset);
        return [target];
      }

      return [target, data];
    }

    const mask = crypto.randomBytes(4);

    target[1] = payloadLength | 0x80;
    target[offset - 4] = mask[0];
    target[offset - 3] = mask[1];
    target[offset - 2] = mask[2];
    target[offset - 1] = mask[3];

    if (merge) {
      bufferUtil.mask(data, mask, target, offset, data.length);
      return [target];
    }

    bufferUtil.mask(data, mask, data, 0, data.length);
    return [target, data];
  }

  /**
   * Sends a close message to the other peer.
   *
   * @param {(Number|undefined)} code The status code component of the body
   * @param {String} data The message component of the body
   * @param {Boolean} mask Specifies whether or not to mask the message
   * @param {Function} cb Callback
   * @public
   */
  close(code, data, mask, cb) {
    var buf;

    if (code === undefined) {
      buf = constants.EMPTY_BUFFER;
    } else if (typeof code !== 'number' || !validation.isValidStatusCode(code)) {
      throw new TypeError('First argument must be a valid error code number');
    } else if (data === undefined || data === '') {
      buf = Buffer.allocUnsafe(2);
      buf.writeUInt16BE(code, 0);
    } else {
      buf = Buffer.allocUnsafe(2 + Buffer.byteLength(data));
      buf.writeUInt16BE(code, 0);
      buf.write(data, 2);
    }

    if (this._deflating) {
      this.enqueue([this.doClose, buf, mask, cb]);
    } else {
      this.doClose(buf, mask, cb);
    }
  }

  /**
   * Frames and sends a close message.
   *
   * @param {Buffer} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @private
   */
  doClose(data, mask, cb) {
    this.sendFrame(Sender.frame(data, {
      fin: true,
      rsv1: false,
      opcode: 0x08,
      mask,
      readOnly: false
    }), cb);
  }

  /**
   * Sends a ping message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @public
   */
  ping(data, mask, cb) {
    var readOnly = true;

    if (!Buffer.isBuffer(data)) {
      if (data instanceof ArrayBuffer) {
        data = Buffer.from(data);
      } else if (ArrayBuffer.isView(data)) {
        data = viewToBuffer(data);
      } else {
        data = Buffer.from(data);
        readOnly = false;
      }
    }

    if (this._deflating) {
      this.enqueue([this.doPing, data, mask, readOnly, cb]);
    } else {
      this.doPing(data, mask, readOnly, cb);
    }
  }

  /**
   * Frames and sends a ping message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Boolean} readOnly Specifies whether `data` can be modified
   * @param {Function} cb Callback
   * @private
   */
  doPing(data, mask, readOnly, cb) {
    this.sendFrame(Sender.frame(data, {
      fin: true,
      rsv1: false,
      opcode: 0x09,
      mask,
      readOnly
    }), cb);
  }

  /**
   * Sends a pong message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @public
   */
  pong(data, mask, cb) {
    var readOnly = true;

    if (!Buffer.isBuffer(data)) {
      if (data instanceof ArrayBuffer) {
        data = Buffer.from(data);
      } else if (ArrayBuffer.isView(data)) {
        data = viewToBuffer(data);
      } else {
        data = Buffer.from(data);
        readOnly = false;
      }
    }

    if (this._deflating) {
      this.enqueue([this.doPong, data, mask, readOnly, cb]);
    } else {
      this.doPong(data, mask, readOnly, cb);
    }
  }

  /**
   * Frames and sends a pong message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Boolean} readOnly Specifies whether `data` can be modified
   * @param {Function} cb Callback
   * @private
   */
  doPong(data, mask, readOnly, cb) {
    this.sendFrame(Sender.frame(data, {
      fin: true,
      rsv1: false,
      opcode: 0x0a,
      mask,
      readOnly
    }), cb);
  }

  /**
   * Sends a data message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Object} options Options object
   * @param {Boolean} options.compress Specifies whether or not to compress `data`
   * @param {Boolean} options.binary Specifies whether `data` is binary or text
   * @param {Boolean} options.fin Specifies whether the fragment is the last one
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @public
   */
  send(data, options, cb) {
    var opcode = options.binary ? 2 : 1;
    var rsv1 = options.compress;
    var readOnly = true;

    if (!Buffer.isBuffer(data)) {
      if (data instanceof ArrayBuffer) {
        data = Buffer.from(data);
      } else if (ArrayBuffer.isView(data)) {
        data = viewToBuffer(data);
      } else {
        data = Buffer.from(data);
        readOnly = false;
      }
    }

    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

    if (this._firstFragment) {
      this._firstFragment = false;
      if (rsv1 && perMessageDeflate) {
        rsv1 = data.length >= perMessageDeflate._threshold;
      }
      this._compress = rsv1;
    } else {
      rsv1 = false;
      opcode = 0;
    }

    if (options.fin) this._firstFragment = true;

    if (perMessageDeflate) {
      const opts = {
        fin: options.fin,
        rsv1,
        opcode,
        mask: options.mask,
        readOnly
      };

      if (this._deflating) {
        this.enqueue([this.dispatch, data, this._compress, opts, cb]);
      } else {
        this.dispatch(data, this._compress, opts, cb);
      }
    } else {
      this.sendFrame(Sender.frame(data, {
        fin: options.fin,
        rsv1: false,
        opcode,
        mask: options.mask,
        readOnly
      }), cb);
    }
  }

  /**
   * Dispatches a data message.
   *
   * @param {Buffer} data The message to send
   * @param {Boolean} compress Specifies whether or not to compress `data`
   * @param {Object} options Options object
   * @param {Number} options.opcode The opcode
   * @param {Boolean} options.readOnly Specifies whether `data` can be modified
   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
   * @param {Function} cb Callback
   * @private
   */
  dispatch(data, compress, options, cb) {
    if (!compress) {
      this.sendFrame(Sender.frame(data, options), cb);
      return;
    }

    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

    this._deflating = true;
    perMessageDeflate.compress(data, options.fin, (_, buf) => {
      options.readOnly = false;
      this.sendFrame(Sender.frame(buf, options), cb);
      this._deflating = false;
      this.dequeue();
    });
  }

  /**
   * Executes queued send operations.
   *
   * @private
   */
  dequeue() {
    while (!this._deflating && this._queue.length) {
      const params = this._queue.shift();

      this._bufferedBytes -= params[1].length;
      params[0].apply(this, params.slice(1));
    }
  }

  /**
   * Enqueues a send operation.
   *
   * @param {Array} params Send operation parameters.
   * @private
   */
  enqueue(params) {
    this._bufferedBytes += params[1].length;
    this._queue.push(params);
  }

  /**
   * Sends a frame.
   *
   * @param {Buffer[]} list The frame to send
   * @param {Function} cb Callback
   * @private
   */
  sendFrame(list, cb) {
    if (list.length === 2) {
      this._socket.write(list[0]);
      this._socket.write(list[1], cb);
    } else {
      this._socket.write(list[0], cb);
    }
  }
}

module.exports = Sender;

/**
 * Converts an `ArrayBuffer` view into a buffer.
 *
 * @param {(DataView|TypedArray)} view The view to convert
 * @return {Buffer} Converted view
 * @private
 */
function viewToBuffer(view) {
  const buf = Buffer.from(view.buffer);

  if (view.byteLength !== view.buffer.byteLength) {
    return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);
  }

  return buf;
}

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * depd
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var EventEmitter = __webpack_require__(20).EventEmitter;

/**
 * Module exports.
 * @public
 */

lazyProperty(module.exports, 'callSiteToString', function callSiteToString() {
  var limit = Error.stackTraceLimit;
  var obj = {};
  var prep = Error.prepareStackTrace;

  function prepareObjectStackTrace(obj, stack) {
    return stack;
  }

  Error.prepareStackTrace = prepareObjectStackTrace;
  Error.stackTraceLimit = 2;

  // capture the stack
  Error.captureStackTrace(obj);

  // slice the stack
  var stack = obj.stack.slice();

  Error.prepareStackTrace = prep;
  Error.stackTraceLimit = limit;

  return stack[0].toString ? toString : __webpack_require__(119);
});

lazyProperty(module.exports, 'eventListenerCount', function eventListenerCount() {
  return EventEmitter.listenerCount || __webpack_require__(120);
});

/**
 * Define a lazy property.
 */

function lazyProperty(obj, prop, getter) {
  function get() {
    var val = getter();

    Object.defineProperty(obj, prop, {
      configurable: true,
      enumerable: true,
      value: val
    });

    return val;
  }

  Object.defineProperty(obj, prop, {
    configurable: true,
    enumerable: true,
    get: get
  });
}

/**
 * Call toString() on the obj
 */

function toString(obj) {
  return obj.toString();
}

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

try {
  var util = __webpack_require__(34);
  if (typeof util.inherits !== 'function') throw '';
  module.exports = util.inherits;
} catch (e) {
  module.exports = __webpack_require__(123);
}

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(66);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0,
      i;

  for (i in namespace) {
    hash = (hash << 5) - hash + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

/***/ }),
/* 66 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * depd
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var EventEmitter = __webpack_require__(20).EventEmitter;

/**
 * Module exports.
 * @public
 */

lazyProperty(module.exports, 'callSiteToString', function callSiteToString() {
  var limit = Error.stackTraceLimit;
  var obj = {};
  var prep = Error.prepareStackTrace;

  function prepareObjectStackTrace(obj, stack) {
    return stack;
  }

  Error.prepareStackTrace = prepareObjectStackTrace;
  Error.stackTraceLimit = 2;

  // capture the stack
  Error.captureStackTrace(obj);

  // slice the stack
  var stack = obj.stack.slice();

  Error.prepareStackTrace = prep;
  Error.stackTraceLimit = limit;

  return stack[0].toString ? toString : __webpack_require__(130);
});

lazyProperty(module.exports, 'eventListenerCount', function eventListenerCount() {
  return EventEmitter.listenerCount || __webpack_require__(131);
});

/**
 * Define a lazy property.
 */

function lazyProperty(obj, prop, getter) {
  function get() {
    var val = getter();

    Object.defineProperty(obj, prop, {
      configurable: true,
      enumerable: true,
      value: val
    });

    return val;
  }

  Object.defineProperty(obj, prop, {
    configurable: true,
    enumerable: true,
    get: get
  });
}

/**
 * Call toString() on the obj
 */

function toString(obj) {
  return obj.toString();
}

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Some environments don't have global Buffer (e.g. React Native).
// Solution would be installing npm modules "buffer" and "stream" explicitly.

var Buffer = __webpack_require__(8).Buffer;

var bomHandling = __webpack_require__(133),
    iconv = module.exports;

// All codecs and aliases are kept here, keyed by encoding name/alias.
// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
iconv.encodings = null;

// Characters emitted in case of error.
iconv.defaultCharUnicode = '�';
iconv.defaultCharSingleByte = '?';

// Public API.
iconv.encode = function encode(str, encoding, options) {
    str = "" + (str || ""); // Ensure string.

    var encoder = iconv.getEncoder(encoding, options);

    var res = encoder.write(str);
    var trail = encoder.end();

    return trail && trail.length > 0 ? Buffer.concat([res, trail]) : res;
};

iconv.decode = function decode(buf, encoding, options) {
    if (typeof buf === 'string') {
        if (!iconv.skipDecodeWarning) {
            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
            iconv.skipDecodeWarning = true;
        }

        buf = new Buffer("" + (buf || ""), "binary"); // Ensure buffer.
    }

    var decoder = iconv.getDecoder(encoding, options);

    var res = decoder.write(buf);
    var trail = decoder.end();

    return trail ? res + trail : res;
};

iconv.encodingExists = function encodingExists(enc) {
    try {
        iconv.getCodec(enc);
        return true;
    } catch (e) {
        return false;
    }
};

// Legacy aliases to convert functions
iconv.toEncoding = iconv.encode;
iconv.fromEncoding = iconv.decode;

// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
iconv._codecDataCache = {};
iconv.getCodec = function getCodec(encoding) {
    if (!iconv.encodings) iconv.encodings = __webpack_require__(134); // Lazy load all encoding definitions.

    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
    var enc = ('' + encoding).toLowerCase().replace(/[^0-9a-z]|:\d{4}$/g, "");

    // Traverse iconv.encodings to find actual codec.
    var codecOptions = {};
    while (true) {
        var codec = iconv._codecDataCache[enc];
        if (codec) return codec;

        var codecDef = iconv.encodings[enc];

        switch (typeof codecDef) {
            case "string":
                // Direct alias to other encoding.
                enc = codecDef;
                break;

            case "object":
                // Alias with options. Can be layered.
                for (var key in codecDef) codecOptions[key] = codecDef[key];

                if (!codecOptions.encodingName) codecOptions.encodingName = enc;

                enc = codecDef.type;
                break;

            case "function":
                // Codec itself.
                if (!codecOptions.encodingName) codecOptions.encodingName = enc;

                // The codec function must load all tables and return object with .encoder and .decoder methods.
                // It'll be called only once (for each different options object).
                codec = new codecDef(codecOptions, iconv);

                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
                return codec;

            default:
                throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '" + enc + "')");
        }
    }
};

iconv.getEncoder = function getEncoder(encoding, options) {
    var codec = iconv.getCodec(encoding),
        encoder = new codec.encoder(options, codec);

    if (codec.bomAware && options && options.addBOM) encoder = new bomHandling.PrependBOM(encoder, options);

    return encoder;
};

iconv.getDecoder = function getDecoder(encoding, options) {
    var codec = iconv.getCodec(encoding),
        decoder = new codec.decoder(options, codec);

    if (codec.bomAware && !(options && options.stripBOM === false)) decoder = new bomHandling.StripBOM(decoder, options);

    return decoder;
};

// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.
var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
if (nodeVer) {

    // Load streaming support in Node v0.10+
    var nodeVerArr = nodeVer.split(".").map(Number);
    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
        __webpack_require__(149)(iconv);
    }

    // Load Node primitive extensions.
    __webpack_require__(150)(iconv);
}

if (false) {
    console.error("iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.");
}

/***/ }),
/* 69 */
/***/ (function(module, exports) {

module.exports = [["a140","",62],["a180","",32],["a240","",62],["a280","",32],["a2ab","",5],["a2e3","€"],["a2ef",""],["a2fd",""],["a340","",62],["a380","",31,"　"],["a440","",62],["a480","",32],["a4f4","",10],["a540","",62],["a580","",32],["a5f7","",7],["a640","",62],["a680","",32],["a6b9","",7],["a6d9","",6],["a6ec",""],["a6f3",""],["a6f6","",8],["a740","",62],["a780","",32],["a7c2","",14],["a7f2","",12],["a896","",10],["a8bc",""],["a8bf","ǹ"],["a8c1",""],["a8ea","",20],["a958",""],["a95b",""],["a95d",""],["a989","〾⿰",11],["a997","",12],["a9f0","",14],["aaa1","",93],["aba1","",93],["aca1","",93],["ada1","",93],["aea1","",93],["afa1","",93],["d7fa","",4],["f8a1","",93],["f9a1","",93],["faa1","",93],["fba1","",93],["fca1","",93],["fda1","",93],["fe50","⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],["fe80","䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",6,"䶮",93]]

/***/ }),
/* 70 */
/***/ (function(module, exports) {

module.exports = [["0","\u0000",127],["a140","　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],["a1a1","﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",4,"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],["a240","＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",7,"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],["a2a1","╮╰╯═╞╪╡◢◣◥◤╱╲╳０",9,"Ⅰ",9,"〡",8,"十卄卅Ａ",25,"ａ",21],["a340","ｗｘｙｚΑ",16,"Σ",6,"α",16,"σ",6,"ㄅ",10],["a3a1","ㄐ",25,"˙ˉˊˇˋ"],["a3e1","€"],["a440","一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"],["a4a1","丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"],["a540","世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"],["a5a1","央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"],["a640","共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"],["a6a1","式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"],["a740","作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"],["a7a1","均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"],["a840","杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"],["a8a1","芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"],["a940","咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"],["a9a1","屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"],["aa40","昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"],["aaa1","炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"],["ab40","陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"],["aba1","哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"],["ac40","拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"],["aca1","活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"],["ad40","耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"],["ada1","迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"],["ae40","哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"],["aea1","恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"],["af40","浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"],["afa1","砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"],["b040","虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"],["b0a1","陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"],["b140","娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"],["b1a1","情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"],["b240","毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"],["b2a1","瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"],["b340","莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"],["b3a1","部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"],["b440","婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"],["b4a1","插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"],["b540","溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"],["b5a1","窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"],["b640","詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"],["b6a1","間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"],["b740","媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"],["b7a1","楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"],["b840","睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"],["b8a1","腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"],["b940","辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"],["b9a1","飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"],["ba40","愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"],["baa1","滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"],["bb40","罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"],["bba1","說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"],["bc40","劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"],["bca1","慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"],["bd40","瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"],["bda1","翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"],["be40","輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"],["bea1","鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"],["bf40","濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"],["bfa1","縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"],["c040","錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"],["c0a1","嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"],["c140","瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"],["c1a1","薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"],["c240","駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"],["c2a1","癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"],["c340","鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"],["c3a1","獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"],["c440","願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"],["c4a1","纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"],["c540","護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"],["c5a1","禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"],["c640","讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"],["c940","乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"],["c9a1","氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"],["ca40","汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"],["caa1","吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"],["cb40","杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"],["cba1","芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"],["cc40","坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"],["cca1","怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"],["cd40","泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"],["cda1","矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"],["ce40","哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"],["cea1","峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"],["cf40","柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"],["cfa1","洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"],["d040","穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"],["d0a1","苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"],["d140","唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"],["d1a1","恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"],["d240","毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"],["d2a1","牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"],["d340","笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"],["d3a1","荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"],["d440","酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"],["d4a1","唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"],["d540","崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"],["d5a1","捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"],["d640","淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"],["d6a1","痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"],["d740","耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"],["d7a1","蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"],["d840","釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"],["d8a1","堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"],["d940","惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"],["d9a1","晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"],["da40","湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"],["daa1","琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"],["db40","罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"],["dba1","菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"],["dc40","軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"],["dca1","隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"],["dd40","媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"],["dda1","搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"],["de40","毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"],["dea1","煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"],["df40","稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"],["dfa1","腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"],["e040","觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"],["e0a1","遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"],["e140","凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"],["e1a1","寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"],["e240","榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"],["e2a1","漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"],["e340","禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"],["e3a1","耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"],["e440","裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"],["e4a1","銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"],["e540","噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"],["e5a1","憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"],["e640","澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"],["e6a1","獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"],["e740","膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"],["e7a1","蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"],["e840","踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"],["e8a1","銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"],["e940","噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"],["e9a1","憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"],["ea40","澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"],["eaa1","瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"],["eb40","蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"],["eba1","諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"],["ec40","錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"],["eca1","魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"],["ed40","檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"],["eda1","瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"],["ee40","蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"],["eea1","謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"],["ef40","鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"],["efa1","鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"],["f040","璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"],["f0a1","臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"],["f140","蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"],["f1a1","鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"],["f240","徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"],["f2a1","礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"],["f340","譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"],["f3a1","鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"],["f440","嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"],["f4a1","禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"],["f540","鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"],["f5a1","鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"],["f640","蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"],["f6a1","騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"],["f740","糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"],["f7a1","驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"],["f840","讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"],["f8a1","齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"],["f940","纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"],["f9a1","龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"]]

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * unpipe
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = unpipe;

/**
 * Determine if there are Node.js pipe-like data listeners.
 * @private
 */

function hasPipeDataListeners(stream) {
  var listeners = stream.listeners('data');

  for (var i = 0; i < listeners.length; i++) {
    if (listeners[i].name === 'ondata') {
      return true;
    }
  }

  return false;
}

/**
 * Unpipe a stream from all destinations.
 *
 * @param {object} stream
 * @public
 */

function unpipe(stream) {
  if (!stream) {
    throw new TypeError('argument stream is required');
  }

  if (typeof stream.unpipe === 'function') {
    // new-style
    stream.unpipe();
    return;
  }

  // Node.js 0.8 hack
  if (!hasPipeDataListeners(stream)) {
    return;
  }

  var listener;
  var listeners = stream.listeners('close');

  for (var i = 0; i < listeners.length; i++) {
    listener = listeners[i];

    if (listener.name !== 'cleanup' && listener.name !== 'onclose') {
      continue;
    }

    // invoke the listener
    listener.call(stream);
  }
}

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var db = __webpack_require__(153);
var extname = __webpack_require__(0).extname;

/**
 * Module variables.
 * @private
 */

var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
var TEXT_TYPE_REGEXP = /^text\//i;

/**
 * Module exports.
 * @public
 */

exports.charset = charset;
exports.charsets = { lookup: charset };
exports.contentType = contentType;
exports.extension = extension;
exports.extensions = Object.create(null);
exports.lookup = lookup;
exports.types = Object.create(null);

// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types);

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset(type) {
  if (!type || typeof type !== 'string') {
    return false;
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type);
  var mime = match && db[match[1].toLowerCase()];

  if (mime && mime.charset) {
    return mime.charset;
  }

  // default text/* to utf-8
  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
    return 'UTF-8';
  }

  return false;
}

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */

function contentType(str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false;
  }

  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;

  if (!mime) {
    return false;
  }

  // TODO: use content-type or other module
  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime);
    if (charset) mime += '; charset=' + charset.toLowerCase();
  }

  return mime;
}

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function extension(type) {
  if (!type || typeof type !== 'string') {
    return false;
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type);

  // get extensions
  var exts = match && exports.extensions[match[1].toLowerCase()];

  if (!exts || !exts.length) {
    return false;
  }

  return exts[0];
}

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */

function lookup(path) {
  if (!path || typeof path !== 'string') {
    return false;
  }

  // get the extension ("ext" or ".ext" or full path)
  var extension = extname('x.' + path).toLowerCase().substr(1);

  if (!extension) {
    return false;
  }

  return exports.types[extension] || false;
}

/**
 * Populate the extensions and types maps.
 * @private
 */

function populateMaps(extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana'];

  Object.keys(db).forEach(function forEachMimeType(type) {
    var mime = db[type];
    var exts = mime.extensions;

    if (!exts || !exts.length) {
      return;
    }

    // mime -> extensions
    extensions[type] = exts;

    // extension -> mime
    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i];

      if (types[extension]) {
        var from = preference.indexOf(db[types[extension]].source);
        var to = preference.indexOf(mime.source);

        if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {
          // skip the remapping
          continue;
        }
      }

      // set the extension -> mime
      types[extension] = type;
    }
  });
}

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty;

var hexTable = function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}();

var compactQueue = function compactQueue(queue) {
    var obj;

    while (queue.length) {
        var item = queue.pop();
        obj = item.obj[item.prop];

        if (Array.isArray(obj)) {
            var compacted = [];

            for (var j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j]);
                }
            }

            item.obj[item.prop] = compacted;
        }
    }

    return obj;
};

exports.arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

exports.merge = function merge(target, source, options) {
    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (Array.isArray(target)) {
            target.push(source);
        } else if (typeof target === 'object') {
            if (options.plainObjects || options.allowPrototypes || !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        } else {
            return [target, source];
        }

        return target;
    }

    if (typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (Array.isArray(target) && !Array.isArray(source)) {
        mergeTarget = exports.arrayToObject(target, options);
    }

    if (Array.isArray(target) && Array.isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                if (target[i] && typeof target[i] === 'object') {
                    target[i] = exports.merge(target[i], item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (has.call(acc, key)) {
            acc[key] = exports.merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

exports.assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};

exports.decode = function (str) {
    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
        return str;
    }
};

exports.encode = function encode(str) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = typeof str === 'string' ? str : String(str);

    var out = '';
    for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);

        if (c === 0x2D // -
        || c === 0x2E // .
        || c === 0x5F // _
        || c === 0x7E // ~
        || c >= 0x30 && c <= 0x39 // 0-9
        || c >= 0x41 && c <= 0x5A // a-z
        || c >= 0x61 && c <= 0x7A // A-Z
        ) {
                out += string.charAt(i);
                continue;
            }

        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }

        if (c < 0x800) {
            out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
            continue;
        }

        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
            continue;
        }

        i += 1;
        c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
        out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
    }

    return out;
};

exports.compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: 'o' }];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];

        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
            var key = keys[j];
            var val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                queue.push({ obj: obj, prop: key });
                refs.push(val);
            }
        }
    }

    return compactQueue(queue);
};

exports.isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

exports.isBuffer = function isBuffer(obj) {
    if (obj === null || typeof obj === 'undefined') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var replace = String.prototype.replace;
var percentTwenties = /%20/g;

module.exports = {
    'default': 'RFC3986',
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return value;
        }
    },
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

/***/ }),
/* 75 */
/***/ (function(module, exports) {

module.exports = require("querystring");

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var Route = __webpack_require__(77);
var Layer = __webpack_require__(78);
var methods = __webpack_require__(49);
var mixin = __webpack_require__(40);
var debug = __webpack_require__(6)('express:router');
var deprecate = __webpack_require__(10)('express');
var flatten = __webpack_require__(39);
var parseUrl = __webpack_require__(26);
var setPrototypeOf = __webpack_require__(33);

/**
 * Module variables.
 * @private
 */

var objectRegExp = /^\[object (\S+)\]$/;
var slice = Array.prototype.slice;
var toString = Object.prototype.toString;

/**
 * Initialize a new `Router` with the given `options`.
 *
 * @param {Object} options
 * @return {Router} which is an callable function
 * @public
 */

var proto = module.exports = function (options) {
  var opts = options || {};

  function router(req, res, next) {
    router.handle(req, res, next);
  }

  // mixin Router class functions
  setPrototypeOf(router, proto);

  router.params = {};
  router._params = [];
  router.caseSensitive = opts.caseSensitive;
  router.mergeParams = opts.mergeParams;
  router.strict = opts.strict;
  router.stack = [];

  return router;
};

/**
 * Map the given param placeholder `name`(s) to the given callback.
 *
 * Parameter mapping is used to provide pre-conditions to routes
 * which use normalized placeholders. For example a _:user_id_ parameter
 * could automatically load a user's information from the database without
 * any additional code,
 *
 * The callback uses the same signature as middleware, the only difference
 * being that the value of the placeholder is passed, in this case the _id_
 * of the user. Once the `next()` function is invoked, just like middleware
 * it will continue on to execute the route, or subsequent parameter functions.
 *
 * Just like in middleware, you must either respond to the request or call next
 * to avoid stalling the request.
 *
 *  app.param('user_id', function(req, res, next, id){
 *    User.find(id, function(err, user){
 *      if (err) {
 *        return next(err);
 *      } else if (!user) {
 *        return next(new Error('failed to load user'));
 *      }
 *      req.user = user;
 *      next();
 *    });
 *  });
 *
 * @param {String} name
 * @param {Function} fn
 * @return {app} for chaining
 * @public
 */

proto.param = function param(name, fn) {
  // param logic
  if (typeof name === 'function') {
    deprecate('router.param(fn): Refactor to use path params');
    this._params.push(name);
    return;
  }

  // apply param functions
  var params = this._params;
  var len = params.length;
  var ret;

  if (name[0] === ':') {
    deprecate('router.param(' + JSON.stringify(name) + ', fn): Use router.param(' + JSON.stringify(name.substr(1)) + ', fn) instead');
    name = name.substr(1);
  }

  for (var i = 0; i < len; ++i) {
    if (ret = params[i](name, fn)) {
      fn = ret;
    }
  }

  // ensure we end up with a
  // middleware function
  if ('function' !== typeof fn) {
    throw new Error('invalid param() call for ' + name + ', got ' + fn);
  }

  (this.params[name] = this.params[name] || []).push(fn);
  return this;
};

/**
 * Dispatch a req, res into the router.
 * @private
 */

proto.handle = function handle(req, res, out) {
  var self = this;

  debug('dispatching %s %s', req.method, req.url);

  var idx = 0;
  var protohost = getProtohost(req.url) || '';
  var removed = '';
  var slashAdded = false;
  var paramcalled = {};

  // store options for OPTIONS request
  // only used if OPTIONS request
  var options = [];

  // middleware and routes
  var stack = self.stack;

  // manage inter-router variables
  var parentParams = req.params;
  var parentUrl = req.baseUrl || '';
  var done = restore(out, req, 'baseUrl', 'next', 'params');

  // setup next layer
  req.next = next;

  // for options requests, respond with a default if nothing else responds
  if (req.method === 'OPTIONS') {
    done = wrap(done, function (old, err) {
      if (err || options.length === 0) return old(err);
      sendOptionsResponse(res, options, old);
    });
  }

  // setup basic req values
  req.baseUrl = parentUrl;
  req.originalUrl = req.originalUrl || req.url;

  next();

  function next(err) {
    var layerError = err === 'route' ? null : err;

    // remove added slash
    if (slashAdded) {
      req.url = req.url.substr(1);
      slashAdded = false;
    }

    // restore altered req.url
    if (removed.length !== 0) {
      req.baseUrl = parentUrl;
      req.url = protohost + removed + req.url.substr(protohost.length);
      removed = '';
    }

    // signal to exit router
    if (layerError === 'router') {
      setImmediate(done, null);
      return;
    }

    // no more matching layers
    if (idx >= stack.length) {
      setImmediate(done, layerError);
      return;
    }

    // get pathname of request
    var path = getPathname(req);

    if (path == null) {
      return done(layerError);
    }

    // find next matching layer
    var layer;
    var match;
    var route;

    while (match !== true && idx < stack.length) {
      layer = stack[idx++];
      match = matchLayer(layer, path);
      route = layer.route;

      if (typeof match !== 'boolean') {
        // hold on to layerError
        layerError = layerError || match;
      }

      if (match !== true) {
        continue;
      }

      if (!route) {
        // process non-route handlers normally
        continue;
      }

      if (layerError) {
        // routes do not match with a pending error
        match = false;
        continue;
      }

      var method = req.method;
      var has_method = route._handles_method(method);

      // build up automatic options response
      if (!has_method && method === 'OPTIONS') {
        appendMethods(options, route._options());
      }

      // don't even bother matching route
      if (!has_method && method !== 'HEAD') {
        match = false;
        continue;
      }
    }

    // no match
    if (match !== true) {
      return done(layerError);
    }

    // store route for dispatch on change
    if (route) {
      req.route = route;
    }

    // Capture one-time layer values
    req.params = self.mergeParams ? mergeParams(layer.params, parentParams) : layer.params;
    var layerPath = layer.path;

    // this should be done for the layer
    self.process_params(layer, paramcalled, req, res, function (err) {
      if (err) {
        return next(layerError || err);
      }

      if (route) {
        return layer.handle_request(req, res, next);
      }

      trim_prefix(layer, layerError, layerPath, path);
    });
  }

  function trim_prefix(layer, layerError, layerPath, path) {
    if (layerPath.length !== 0) {
      // Validate path breaks on a path separator
      var c = path[layerPath.length];
      if (c && c !== '/' && c !== '.') return next(layerError);

      // Trim off the part of the url that matches the route
      // middleware (.use stuff) needs to have the path stripped
      debug('trim prefix (%s) from url %s', layerPath, req.url);
      removed = layerPath;
      req.url = protohost + req.url.substr(protohost.length + removed.length);

      // Ensure leading slash
      if (!protohost && req.url[0] !== '/') {
        req.url = '/' + req.url;
        slashAdded = true;
      }

      // Setup base URL (no trailing slash)
      req.baseUrl = parentUrl + (removed[removed.length - 1] === '/' ? removed.substring(0, removed.length - 1) : removed);
    }

    debug('%s %s : %s', layer.name, layerPath, req.originalUrl);

    if (layerError) {
      layer.handle_error(layerError, req, res, next);
    } else {
      layer.handle_request(req, res, next);
    }
  }
};

/**
 * Process any parameters for the layer.
 * @private
 */

proto.process_params = function process_params(layer, called, req, res, done) {
  var params = this.params;

  // captured parameters from the layer, keys and values
  var keys = layer.keys;

  // fast track
  if (!keys || keys.length === 0) {
    return done();
  }

  var i = 0;
  var name;
  var paramIndex = 0;
  var key;
  var paramVal;
  var paramCallbacks;
  var paramCalled;

  // process params in order
  // param callbacks can be async
  function param(err) {
    if (err) {
      return done(err);
    }

    if (i >= keys.length) {
      return done();
    }

    paramIndex = 0;
    key = keys[i++];
    name = key.name;
    paramVal = req.params[name];
    paramCallbacks = params[name];
    paramCalled = called[name];

    if (paramVal === undefined || !paramCallbacks) {
      return param();
    }

    // param previously called with same value or error occurred
    if (paramCalled && (paramCalled.match === paramVal || paramCalled.error && paramCalled.error !== 'route')) {
      // restore value
      req.params[name] = paramCalled.value;

      // next param
      return param(paramCalled.error);
    }

    called[name] = paramCalled = {
      error: null,
      match: paramVal,
      value: paramVal
    };

    paramCallback();
  }

  // single param callbacks
  function paramCallback(err) {
    var fn = paramCallbacks[paramIndex++];

    // store updated value
    paramCalled.value = req.params[key.name];

    if (err) {
      // store error
      paramCalled.error = err;
      param(err);
      return;
    }

    if (!fn) return param();

    try {
      fn(req, res, paramCallback, paramVal, key.name);
    } catch (e) {
      paramCallback(e);
    }
  }

  param();
};

/**
 * Use the given middleware function, with optional path, defaulting to "/".
 *
 * Use (like `.all`) will run for any http METHOD, but it will not add
 * handlers for those methods so OPTIONS requests will not consider `.use`
 * functions even if they could respond.
 *
 * The other difference is that _route_ path is stripped and not visible
 * to the handler function. The main effect of this feature is that mounted
 * handlers can operate without any code changes regardless of the "prefix"
 * pathname.
 *
 * @public
 */

proto.use = function use(fn) {
  var offset = 0;
  var path = '/';

  // default path to '/'
  // disambiguate router.use([fn])
  if (typeof fn !== 'function') {
    var arg = fn;

    while (Array.isArray(arg) && arg.length !== 0) {
      arg = arg[0];
    }

    // first arg is the path
    if (typeof arg !== 'function') {
      offset = 1;
      path = fn;
    }
  }

  var callbacks = flatten(slice.call(arguments, offset));

  if (callbacks.length === 0) {
    throw new TypeError('Router.use() requires a middleware function');
  }

  for (var i = 0; i < callbacks.length; i++) {
    var fn = callbacks[i];

    if (typeof fn !== 'function') {
      throw new TypeError('Router.use() requires a middleware function but got a ' + gettype(fn));
    }

    // add the middleware
    debug('use %o %s', path, fn.name || '<anonymous>');

    var layer = new Layer(path, {
      sensitive: this.caseSensitive,
      strict: false,
      end: false
    }, fn);

    layer.route = undefined;

    this.stack.push(layer);
  }

  return this;
};

/**
 * Create a new Route for the given path.
 *
 * Each route contains a separate middleware stack and VERB handlers.
 *
 * See the Route api documentation for details on adding handlers
 * and middleware to routes.
 *
 * @param {String} path
 * @return {Route}
 * @public
 */

proto.route = function route(path) {
  var route = new Route(path);

  var layer = new Layer(path, {
    sensitive: this.caseSensitive,
    strict: this.strict,
    end: true
  }, route.dispatch.bind(route));

  layer.route = route;

  this.stack.push(layer);
  return route;
};

// create Router#VERB functions
methods.concat('all').forEach(function (method) {
  proto[method] = function (path) {
    var route = this.route(path);
    route[method].apply(route, slice.call(arguments, 1));
    return this;
  };
});

// append methods to a list of methods
function appendMethods(list, addition) {
  for (var i = 0; i < addition.length; i++) {
    var method = addition[i];
    if (list.indexOf(method) === -1) {
      list.push(method);
    }
  }
}

// get pathname of request
function getPathname(req) {
  try {
    return parseUrl(req).pathname;
  } catch (err) {
    return undefined;
  }
}

// Get get protocol + host for a URL
function getProtohost(url) {
  if (typeof url !== 'string' || url.length === 0 || url[0] === '/') {
    return undefined;
  }

  var searchIndex = url.indexOf('?');
  var pathLength = searchIndex !== -1 ? searchIndex : url.length;
  var fqdnIndex = url.substr(0, pathLength).indexOf('://');

  return fqdnIndex !== -1 ? url.substr(0, url.indexOf('/', 3 + fqdnIndex)) : undefined;
}

// get type for error message
function gettype(obj) {
  var type = typeof obj;

  if (type !== 'object') {
    return type;
  }

  // inspect [[Class]] for objects
  return toString.call(obj).replace(objectRegExp, '$1');
}

/**
 * Match path to a layer.
 *
 * @param {Layer} layer
 * @param {string} path
 * @private
 */

function matchLayer(layer, path) {
  try {
    return layer.match(path);
  } catch (err) {
    return err;
  }
}

// merge params with parent params
function mergeParams(params, parent) {
  if (typeof parent !== 'object' || !parent) {
    return params;
  }

  // make copy of parent for base
  var obj = mixin({}, parent);

  // simple non-numeric merging
  if (!(0 in params) || !(0 in parent)) {
    return mixin(obj, params);
  }

  var i = 0;
  var o = 0;

  // determine numeric gaps
  while (i in params) {
    i++;
  }

  while (o in parent) {
    o++;
  }

  // offset numeric indices in params before merge
  for (i--; i >= 0; i--) {
    params[i + o] = params[i];

    // create holes for the merge when necessary
    if (i < o) {
      delete params[i];
    }
  }

  return mixin(obj, params);
}

// restore obj props after function
function restore(fn, obj) {
  var props = new Array(arguments.length - 2);
  var vals = new Array(arguments.length - 2);

  for (var i = 0; i < props.length; i++) {
    props[i] = arguments[i + 2];
    vals[i] = obj[props[i]];
  }

  return function () {
    // restore vals
    for (var i = 0; i < props.length; i++) {
      obj[props[i]] = vals[i];
    }

    return fn.apply(this, arguments);
  };
}

// send an OPTIONS response
function sendOptionsResponse(res, options, next) {
  try {
    var body = options.join(',');
    res.set('Allow', body);
    res.send(body);
  } catch (err) {
    next(err);
  }
}

// wrap a function
function wrap(old, fn) {
  return function proxy() {
    var args = new Array(arguments.length + 1);

    args[0] = old;
    for (var i = 0, len = arguments.length; i < len; i++) {
      args[i + 1] = arguments[i];
    }

    fn.apply(this, args);
  };
}

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var debug = __webpack_require__(6)('express:router:route');
var flatten = __webpack_require__(39);
var Layer = __webpack_require__(78);
var methods = __webpack_require__(49);

/**
 * Module variables.
 * @private
 */

var slice = Array.prototype.slice;
var toString = Object.prototype.toString;

/**
 * Module exports.
 * @public
 */

module.exports = Route;

/**
 * Initialize `Route` with the given `path`,
 *
 * @param {String} path
 * @public
 */

function Route(path) {
  this.path = path;
  this.stack = [];

  debug('new %o', path);

  // route handlers for various http methods
  this.methods = {};
}

/**
 * Determine if the route handles a given method.
 * @private
 */

Route.prototype._handles_method = function _handles_method(method) {
  if (this.methods._all) {
    return true;
  }

  var name = method.toLowerCase();

  if (name === 'head' && !this.methods['head']) {
    name = 'get';
  }

  return Boolean(this.methods[name]);
};

/**
 * @return {Array} supported HTTP methods
 * @private
 */

Route.prototype._options = function _options() {
  var methods = Object.keys(this.methods);

  // append automatic head
  if (this.methods.get && !this.methods.head) {
    methods.push('head');
  }

  for (var i = 0; i < methods.length; i++) {
    // make upper case
    methods[i] = methods[i].toUpperCase();
  }

  return methods;
};

/**
 * dispatch req, res into this route
 * @private
 */

Route.prototype.dispatch = function dispatch(req, res, done) {
  var idx = 0;
  var stack = this.stack;
  if (stack.length === 0) {
    return done();
  }

  var method = req.method.toLowerCase();
  if (method === 'head' && !this.methods['head']) {
    method = 'get';
  }

  req.route = this;

  next();

  function next(err) {
    // signal to exit route
    if (err && err === 'route') {
      return done();
    }

    // signal to exit router
    if (err && err === 'router') {
      return done(err);
    }

    var layer = stack[idx++];
    if (!layer) {
      return done(err);
    }

    if (layer.method && layer.method !== method) {
      return next(err);
    }

    if (err) {
      layer.handle_error(err, req, res, next);
    } else {
      layer.handle_request(req, res, next);
    }
  }
};

/**
 * Add a handler for all HTTP verbs to this route.
 *
 * Behaves just like middleware and can respond or call `next`
 * to continue processing.
 *
 * You can use multiple `.all` call to add multiple handlers.
 *
 *   function check_something(req, res, next){
 *     next();
 *   };
 *
 *   function validate_user(req, res, next){
 *     next();
 *   };
 *
 *   route
 *   .all(validate_user)
 *   .all(check_something)
 *   .get(function(req, res, next){
 *     res.send('hello world');
 *   });
 *
 * @param {function} handler
 * @return {Route} for chaining
 * @api public
 */

Route.prototype.all = function all() {
  var handles = flatten(slice.call(arguments));

  for (var i = 0; i < handles.length; i++) {
    var handle = handles[i];

    if (typeof handle !== 'function') {
      var type = toString.call(handle);
      var msg = 'Route.all() requires a callback function but got a ' + type;
      throw new TypeError(msg);
    }

    var layer = Layer('/', {}, handle);
    layer.method = undefined;

    this.methods._all = true;
    this.stack.push(layer);
  }

  return this;
};

methods.forEach(function (method) {
  Route.prototype[method] = function () {
    var handles = flatten(slice.call(arguments));

    for (var i = 0; i < handles.length; i++) {
      var handle = handles[i];

      if (typeof handle !== 'function') {
        var type = toString.call(handle);
        var msg = 'Route.' + method + '() requires a callback function but got a ' + type;
        throw new Error(msg);
      }

      debug('%s %o', method, this.path);

      var layer = Layer('/', {}, handle);
      layer.method = method;

      this.methods[method] = true;
      this.stack.push(layer);
    }

    return this;
  };
});

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var pathRegexp = __webpack_require__(163);
var debug = __webpack_require__(6)('express:router:layer');

/**
 * Module variables.
 * @private
 */

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Module exports.
 * @public
 */

module.exports = Layer;

function Layer(path, options, fn) {
  if (!(this instanceof Layer)) {
    return new Layer(path, options, fn);
  }

  debug('new %o', path);
  var opts = options || {};

  this.handle = fn;
  this.name = fn.name || '<anonymous>';
  this.params = undefined;
  this.path = undefined;
  this.regexp = pathRegexp(path, this.keys = [], opts);

  // set fast path flags
  this.regexp.fast_star = path === '*';
  this.regexp.fast_slash = path === '/' && opts.end === false;
}

/**
 * Handle the error for the layer.
 *
 * @param {Error} error
 * @param {Request} req
 * @param {Response} res
 * @param {function} next
 * @api private
 */

Layer.prototype.handle_error = function handle_error(error, req, res, next) {
  var fn = this.handle;

  if (fn.length !== 4) {
    // not a standard error handler
    return next(error);
  }

  try {
    fn(error, req, res, next);
  } catch (err) {
    next(err);
  }
};

/**
 * Handle the request for the layer.
 *
 * @param {Request} req
 * @param {Response} res
 * @param {function} next
 * @api private
 */

Layer.prototype.handle_request = function handle(req, res, next) {
  var fn = this.handle;

  if (fn.length > 3) {
    // not a standard request handler
    return next();
  }

  try {
    fn(req, res, next);
  } catch (err) {
    next(err);
  }
};

/**
 * Check if this route matches `path`, if so
 * populate `.params`.
 *
 * @param {String} path
 * @return {Boolean}
 * @api private
 */

Layer.prototype.match = function match(path) {
  var match;

  if (path != null) {
    // fast path non-ending match for / (any path matches)
    if (this.regexp.fast_slash) {
      this.params = {};
      this.path = '';
      return true;
    }

    // fast path for * (everything matched in a param)
    if (this.regexp.fast_star) {
      this.params = { '0': decode_param(path) };
      this.path = path;
      return true;
    }

    // match the path
    match = this.regexp.exec(path);
  }

  if (!match) {
    this.params = undefined;
    this.path = undefined;
    return false;
  }

  // store values
  this.params = {};
  this.path = match[0];

  var keys = this.keys;
  var params = this.params;

  for (var i = 1; i < match.length; i++) {
    var key = keys[i - 1];
    var prop = key.name;
    var val = decode_param(match[i]);

    if (val !== undefined || !hasOwnProperty.call(params, prop)) {
      params[prop] = val;
    }
  }

  return true;
};

/**
 * Decode param value.
 *
 * @param {string} val
 * @return {string}
 * @private
 */

function decode_param(val) {
  if (typeof val !== 'string' || val.length === 0) {
    return val;
  }

  try {
    return decodeURIComponent(val);
  } catch (err) {
    if (err instanceof URIError) {
      err.message = 'Failed to decode param \'' + val + '\'';
      err.status = err.statusCode = 400;
    }

    throw err;
  }
}

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 */

var merge = __webpack_require__(40);
var parseUrl = __webpack_require__(26);
var qs = __webpack_require__(48);

/**
 * @param {Object} options
 * @return {Function}
 * @api public
 */

module.exports = function query(options) {
  var opts = merge({}, options);
  var queryparse = qs.parse;

  if (typeof options === 'function') {
    queryparse = options;
    opts = undefined;
  }

  if (opts !== undefined && opts.allowPrototypes === undefined) {
    // back-compat for qs module
    opts.allowPrototypes = true;
  }

  return function query(req, res, next) {
    if (!req.query) {
      var val = parseUrl(req).query;
      req.query = queryparse(val, opts);
    }

    next();
  };
};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(8);
var Buffer = buffer.Buffer;

// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }
  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  var buf = Buffer(size);
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }
  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return buffer.SlowBuffer(size);
};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * content-disposition
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 */

module.exports = contentDisposition;
module.exports.parse = parse;

/**
 * Module dependencies.
 */

var basename = __webpack_require__(0).basename;

/**
 * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including "%")
 */

var ENCODE_URL_ATTR_CHAR_REGEXP = /[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g; // eslint-disable-line no-control-regex

/**
 * RegExp to match percent encoding escape.
 */

var HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;
var HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;

/**
 * RegExp to match non-latin1 characters.
 */

var NON_LATIN1_REGEXP = /[^\x20-\x7e\xa0-\xff]/g;

/**
 * RegExp to match quoted-pair in RFC 2616
 *
 * quoted-pair = "\" CHAR
 * CHAR        = <any US-ASCII character (octets 0 - 127)>
 */

var QESC_REGEXP = /\\([\u0000-\u007f])/g;

/**
 * RegExp to match chars that must be quoted-pair in RFC 2616
 */

var QUOTE_REGEXP = /([\\"])/g;

/**
 * RegExp for various RFC 2616 grammar
 *
 * parameter     = token "=" ( token | quoted-string )
 * token         = 1*<any CHAR except CTLs or separators>
 * separators    = "(" | ")" | "<" | ">" | "@"
 *               | "," | ";" | ":" | "\" | <">
 *               | "/" | "[" | "]" | "?" | "="
 *               | "{" | "}" | SP | HT
 * quoted-string = ( <"> *(qdtext | quoted-pair ) <"> )
 * qdtext        = <any TEXT except <">>
 * quoted-pair   = "\" CHAR
 * CHAR          = <any US-ASCII character (octets 0 - 127)>
 * TEXT          = <any OCTET except CTLs, but including LWS>
 * LWS           = [CRLF] 1*( SP | HT )
 * CRLF          = CR LF
 * CR            = <US-ASCII CR, carriage return (13)>
 * LF            = <US-ASCII LF, linefeed (10)>
 * SP            = <US-ASCII SP, space (32)>
 * HT            = <US-ASCII HT, horizontal-tab (9)>
 * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
 * OCTET         = <any 8-bit sequence of data>
 */

var PARAM_REGEXP = /;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g; // eslint-disable-line no-control-regex
var TEXT_REGEXP = /^[\x20-\x7e\x80-\xff]+$/;
var TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;

/**
 * RegExp for various RFC 5987 grammar
 *
 * ext-value     = charset  "'" [ language ] "'" value-chars
 * charset       = "UTF-8" / "ISO-8859-1" / mime-charset
 * mime-charset  = 1*mime-charsetc
 * mime-charsetc = ALPHA / DIGIT
 *               / "!" / "#" / "$" / "%" / "&"
 *               / "+" / "-" / "^" / "_" / "`"
 *               / "{" / "}" / "~"
 * language      = ( 2*3ALPHA [ extlang ] )
 *               / 4ALPHA
 *               / 5*8ALPHA
 * extlang       = *3( "-" 3ALPHA )
 * value-chars   = *( pct-encoded / attr-char )
 * pct-encoded   = "%" HEXDIG HEXDIG
 * attr-char     = ALPHA / DIGIT
 *               / "!" / "#" / "$" / "&" / "+" / "-" / "."
 *               / "^" / "_" / "`" / "|" / "~"
 */

var EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;

/**
 * RegExp for various RFC 6266 grammar
 *
 * disposition-type = "inline" | "attachment" | disp-ext-type
 * disp-ext-type    = token
 * disposition-parm = filename-parm | disp-ext-parm
 * filename-parm    = "filename" "=" value
 *                  | "filename*" "=" ext-value
 * disp-ext-parm    = token "=" value
 *                  | ext-token "=" ext-value
 * ext-token        = <the characters in token, followed by "*">
 */

var DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/; // eslint-disable-line no-control-regex

/**
 * Create an attachment Content-Disposition header.
 *
 * @param {string} [filename]
 * @param {object} [options]
 * @param {string} [options.type=attachment]
 * @param {string|boolean} [options.fallback=true]
 * @return {string}
 * @api public
 */

function contentDisposition(filename, options) {
  var opts = options || {};

  // get type
  var type = opts.type || 'attachment';

  // get parameters
  var params = createparams(filename, opts.fallback);

  // format into string
  return format(new ContentDisposition(type, params));
}

/**
 * Create parameters object from filename and fallback.
 *
 * @param {string} [filename]
 * @param {string|boolean} [fallback=true]
 * @return {object}
 * @api private
 */

function createparams(filename, fallback) {
  if (filename === undefined) {
    return;
  }

  var params = {};

  if (typeof filename !== 'string') {
    throw new TypeError('filename must be a string');
  }

  // fallback defaults to true
  if (fallback === undefined) {
    fallback = true;
  }

  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {
    throw new TypeError('fallback must be a string or boolean');
  }

  if (typeof fallback === 'string' && NON_LATIN1_REGEXP.test(fallback)) {
    throw new TypeError('fallback must be ISO-8859-1 string');
  }

  // restrict to file base name
  var name = basename(filename);

  // determine if name is suitable for quoted string
  var isQuotedString = TEXT_REGEXP.test(name);

  // generate fallback name
  var fallbackName = typeof fallback !== 'string' ? fallback && getlatin1(name) : basename(fallback);
  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name;

  // set extended filename parameter
  if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {
    params['filename*'] = name;
  }

  // set filename parameter
  if (isQuotedString || hasFallback) {
    params.filename = hasFallback ? fallbackName : name;
  }

  return params;
}

/**
 * Format object to Content-Disposition header.
 *
 * @param {object} obj
 * @param {string} obj.type
 * @param {object} [obj.parameters]
 * @return {string}
 * @api private
 */

function format(obj) {
  var parameters = obj.parameters;
  var type = obj.type;

  if (!type || typeof type !== 'string' || !TOKEN_REGEXP.test(type)) {
    throw new TypeError('invalid type');
  }

  // start with normalized type
  var string = String(type).toLowerCase();

  // append parameters
  if (parameters && typeof parameters === 'object') {
    var param;
    var params = Object.keys(parameters).sort();

    for (var i = 0; i < params.length; i++) {
      param = params[i];

      var val = param.substr(-1) === '*' ? ustring(parameters[param]) : qstring(parameters[param]);

      string += '; ' + param + '=' + val;
    }
  }

  return string;
}

/**
 * Decode a RFC 6987 field value (gracefully).
 *
 * @param {string} str
 * @return {string}
 * @api private
 */

function decodefield(str) {
  var match = EXT_VALUE_REGEXP.exec(str);

  if (!match) {
    throw new TypeError('invalid extended field value');
  }

  var charset = match[1].toLowerCase();
  var encoded = match[2];
  var value;

  // to binary string
  var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);

  switch (charset) {
    case 'iso-8859-1':
      value = getlatin1(binary);
      break;
    case 'utf-8':
      value = new Buffer(binary, 'binary').toString('utf8');
      break;
    default:
      throw new TypeError('unsupported charset in extended field');
  }

  return value;
}

/**
 * Get ISO-8859-1 version of string.
 *
 * @param {string} val
 * @return {string}
 * @api private
 */

function getlatin1(val) {
  // simple Unicode -> ISO-8859-1 transformation
  return String(val).replace(NON_LATIN1_REGEXP, '?');
}

/**
 * Parse Content-Disposition header string.
 *
 * @param {string} string
 * @return {object}
 * @api private
 */

function parse(string) {
  if (!string || typeof string !== 'string') {
    throw new TypeError('argument string is required');
  }

  var match = DISPOSITION_TYPE_REGEXP.exec(string);

  if (!match) {
    throw new TypeError('invalid type format');
  }

  // normalize type
  var index = match[0].length;
  var type = match[1].toLowerCase();

  var key;
  var names = [];
  var params = {};
  var value;

  // calculate index to start at
  index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ';' ? index - 1 : index;

  // match parameters
  while (match = PARAM_REGEXP.exec(string)) {
    if (match.index !== index) {
      throw new TypeError('invalid parameter format');
    }

    index += match[0].length;
    key = match[1].toLowerCase();
    value = match[2];

    if (names.indexOf(key) !== -1) {
      throw new TypeError('invalid duplicate parameter');
    }

    names.push(key);

    if (key.indexOf('*') + 1 === key.length) {
      // decode extended value
      key = key.slice(0, -1);
      value = decodefield(value);

      // overwrite existing value
      params[key] = value;
      continue;
    }

    if (typeof params[key] === 'string') {
      continue;
    }

    if (value[0] === '"') {
      // remove quotes and escapes
      value = value.substr(1, value.length - 2).replace(QESC_REGEXP, '$1');
    }

    params[key] = value;
  }

  if (index !== -1 && index !== string.length) {
    throw new TypeError('invalid parameter format');
  }

  return new ContentDisposition(type, params);
}

/**
 * Percent decode a single character.
 *
 * @param {string} str
 * @param {string} hex
 * @return {string}
 * @api private
 */

function pdecode(str, hex) {
  return String.fromCharCode(parseInt(hex, 16));
}

/**
 * Percent encode a single character.
 *
 * @param {string} char
 * @return {string}
 * @api private
 */

function pencode(char) {
  var hex = String(char).charCodeAt(0).toString(16).toUpperCase();
  return hex.length === 1 ? '%0' + hex : '%' + hex;
}

/**
 * Quote a string for HTTP.
 *
 * @param {string} val
 * @return {string}
 * @api private
 */

function qstring(val) {
  var str = String(val);

  return '"' + str.replace(QUOTE_REGEXP, '\\$1') + '"';
}

/**
 * Encode a Unicode string for HTTP (RFC 5987).
 *
 * @param {string} val
 * @return {string}
 * @api private
 */

function ustring(val) {
  var str = String(val);

  // percent encode as UTF-8
  var encoded = encodeURIComponent(str).replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);

  return 'UTF-8\'\'' + encoded;
}

/**
 * Class for parsed Content-Disposition header for v8 optimization
 */

function ContentDisposition(type, parameters) {
  this.type = type;
  this.parameters = parameters;
}

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * etag
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = etag;

/**
 * Module dependencies.
 * @private
 */

var crypto = __webpack_require__(15);
var Stats = __webpack_require__(7).Stats;

/**
 * Module variables.
 * @private
 */

var toString = Object.prototype.toString;

/**
 * Generate an entity tag.
 *
 * @param {Buffer|string} entity
 * @return {string}
 * @private
 */

function entitytag(entity) {
  if (entity.length === 0) {
    // fast-path empty
    return '"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"';
  }

  // compute hash of entity
  var hash = crypto.createHash('sha1').update(entity, 'utf8').digest('base64').substring(0, 27);

  // compute length of entity
  var len = typeof entity === 'string' ? Buffer.byteLength(entity, 'utf8') : entity.length;

  return '"' + len.toString(16) + '-' + hash + '"';
}

/**
 * Create a simple ETag.
 *
 * @param {string|Buffer|Stats} entity
 * @param {object} [options]
 * @param {boolean} [options.weak]
 * @return {String}
 * @public
 */

function etag(entity, options) {
  if (entity == null) {
    throw new TypeError('argument entity is required');
  }

  // support fs.Stats object
  var isStats = isstats(entity);
  var weak = options && typeof options.weak === 'boolean' ? options.weak : isStats;

  // validate argument
  if (!isStats && typeof entity !== 'string' && !Buffer.isBuffer(entity)) {
    throw new TypeError('argument entity must be string, Buffer, or fs.Stats');
  }

  // generate entity tag
  var tag = isStats ? stattag(entity) : entitytag(entity);

  return weak ? 'W/' + tag : tag;
}

/**
 * Determine if object is a Stats object.
 *
 * @param {object} obj
 * @return {boolean}
 * @api private
 */

function isstats(obj) {
  // genuine fs.Stats
  if (typeof Stats === 'function' && obj instanceof Stats) {
    return true;
  }

  // quack quack
  return obj && typeof obj === 'object' && 'ctime' in obj && toString.call(obj.ctime) === '[object Date]' && 'mtime' in obj && toString.call(obj.mtime) === '[object Date]' && 'ino' in obj && typeof obj.ino === 'number' && 'size' in obj && typeof obj.size === 'number';
}

/**
 * Generate a tag for a stat.
 *
 * @param {object} stat
 * @return {string}
 * @private
 */

function stattag(stat) {
  var mtime = stat.mtime.getTime().toString(16);
  var size = stat.size.toString(16);

  return '"' + size + '-' + mtime + '"';
}

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * fresh
 * Copyright(c) 2012 TJ Holowaychuk
 * Copyright(c) 2016-2017 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * RegExp to check for no-cache token in Cache-Control.
 * @private
 */

var CACHE_CONTROL_NO_CACHE_REGEXP = /(?:^|,)\s*?no-cache\s*?(?:,|$)/;

/**
 * Module exports.
 * @public
 */

module.exports = fresh;

/**
 * Check freshness of the response using request and response headers.
 *
 * @param {Object} reqHeaders
 * @param {Object} resHeaders
 * @return {Boolean}
 * @public
 */

function fresh(reqHeaders, resHeaders) {
  // fields
  var modifiedSince = reqHeaders['if-modified-since'];
  var noneMatch = reqHeaders['if-none-match'];

  // unconditional request
  if (!modifiedSince && !noneMatch) {
    return false;
  }

  // Always return stale when Cache-Control: no-cache
  // to support end-to-end reload requests
  // https://tools.ietf.org/html/rfc2616#section-14.9.4
  var cacheControl = reqHeaders['cache-control'];
  if (cacheControl && CACHE_CONTROL_NO_CACHE_REGEXP.test(cacheControl)) {
    return false;
  }

  // if-none-match
  if (noneMatch && noneMatch !== '*') {
    var etag = resHeaders['etag'];

    if (!etag) {
      return false;
    }

    var etagStale = true;
    var matches = parseTokenList(noneMatch);
    for (var i = 0; i < matches.length; i++) {
      var match = matches[i];
      if (match === etag || match === 'W/' + etag || 'W/' + match === etag) {
        etagStale = false;
        break;
      }
    }

    if (etagStale) {
      return false;
    }
  }

  // if-modified-since
  if (modifiedSince) {
    var lastModified = resHeaders['last-modified'];
    var modifiedStale = !lastModified || !(parseHttpDate(lastModified) <= parseHttpDate(modifiedSince));

    if (modifiedStale) {
      return false;
    }
  }

  return true;
}

/**
 * Parse an HTTP Date into a number.
 *
 * @param {string} date
 * @private
 */

function parseHttpDate(date) {
  var timestamp = date && Date.parse(date);

  // istanbul ignore next: guard against date.js Date.parse patching
  return typeof timestamp === 'number' ? timestamp : NaN;
}

/**
 * Parse a HTTP token list.
 *
 * @param {string} str
 * @private
 */

function parseTokenList(str) {
  var end = 0;
  var list = [];
  var start = 0;

  // gather tokens
  for (var i = 0, len = str.length; i < len; i++) {
    switch (str.charCodeAt(i)) {
      case 0x20:
        /*   */
        if (start === end) {
          start = end = i + 1;
        }
        break;
      case 0x2c:
        /* , */
        list.push(str.substring(start, end));
        start = end = i + 1;
        break;
      default:
        end = i + 1;
        break;
    }
  }

  // final token
  list.push(str.substring(start, end));

  return list;
}

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * range-parser
 * Copyright(c) 2012-2014 TJ Holowaychuk
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = rangeParser;

/**
 * Parse "Range" header `str` relative to the given file `size`.
 *
 * @param {Number} size
 * @param {String} str
 * @param {Object} [options]
 * @return {Array}
 * @public
 */

function rangeParser(size, str, options) {
  var index = str.indexOf('=');

  if (index === -1) {
    return -2;
  }

  // split the range string
  var arr = str.slice(index + 1).split(',');
  var ranges = [];

  // add ranges type
  ranges.type = str.slice(0, index);

  // parse all ranges
  for (var i = 0; i < arr.length; i++) {
    var range = arr[i].split('-');
    var start = parseInt(range[0], 10);
    var end = parseInt(range[1], 10);

    // -nnn
    if (isNaN(start)) {
      start = size - end;
      end = size - 1;
      // nnn-
    } else if (isNaN(end)) {
      end = size - 1;
    }

    // limit last-byte-pos to current length
    if (end > size - 1) {
      end = size - 1;
    }

    // invalid or unsatisifiable
    if (isNaN(start) || isNaN(end) || start > end || start < 0) {
      continue;
    }

    // add range
    ranges.push({
      start: start,
      end: end
    });
  }

  if (ranges.length < 1) {
    // unsatisifiable
    return -1;
  }

  return options && options.combine ? combineRanges(ranges) : ranges;
}

/**
 * Combine overlapping & adjacent ranges.
 * @private
 */

function combineRanges(ranges) {
  var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart);

  for (var j = 0, i = 1; i < ordered.length; i++) {
    var range = ordered[i];
    var current = ordered[j];

    if (range.start > current.end + 1) {
      // next range
      ordered[++j] = range;
    } else if (range.end > current.end) {
      // extend range
      current.end = range.end;
      current.index = Math.min(current.index, range.index);
    }
  }

  // trim ordered array
  ordered.length = j + 1;

  // generate combined range
  var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex);

  // copy ranges type
  combined.type = ranges.type;

  return combined;
}

/**
 * Map function to add index value to ranges.
 * @private
 */

function mapWithIndex(range, index) {
  return {
    start: range.start,
    end: range.end,
    index: index
  };
}

/**
 * Map function to remove index value from ranges.
 * @private
 */

function mapWithoutIndex(range) {
  return {
    start: range.start,
    end: range.end
  };
}

/**
 * Sort function to sort ranges by index.
 * @private
 */

function sortByRangeIndex(a, b) {
  return a.index - b.index;
}

/**
 * Sort function to sort ranges by start position.
 * @private
 */

function sortByRangeStart(a, b) {
  return a.start - b.start;
}

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * proxy-addr
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = proxyaddr;
module.exports.all = alladdrs;
module.exports.compile = compile;

/**
 * Module dependencies.
 * @private
 */

var forwarded = __webpack_require__(170);
var ipaddr = __webpack_require__(171);

/**
 * Variables.
 * @private
 */

var DIGIT_REGEXP = /^[0-9]+$/;
var isip = ipaddr.isValid;
var parseip = ipaddr.parse;

/**
 * Pre-defined IP ranges.
 * @private
 */

var IP_RANGES = {
  linklocal: ['169.254.0.0/16', 'fe80::/10'],
  loopback: ['127.0.0.1/8', '::1/128'],
  uniquelocal: ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fc00::/7']

  /**
   * Get all addresses in the request, optionally stopping
   * at the first untrusted.
   *
   * @param {Object} request
   * @param {Function|Array|String} [trust]
   * @public
   */

};function alladdrs(req, trust) {
  // get addresses
  var addrs = forwarded(req);

  if (!trust) {
    // Return all addresses
    return addrs;
  }

  if (typeof trust !== 'function') {
    trust = compile(trust);
  }

  for (var i = 0; i < addrs.length - 1; i++) {
    if (trust(addrs[i], i)) continue;

    addrs.length = i + 1;
  }

  return addrs;
}

/**
 * Compile argument into trust function.
 *
 * @param {Array|String} val
 * @private
 */

function compile(val) {
  if (!val) {
    throw new TypeError('argument is required');
  }

  var trust;

  if (typeof val === 'string') {
    trust = [val];
  } else if (Array.isArray(val)) {
    trust = val.slice();
  } else {
    throw new TypeError('unsupported trust argument');
  }

  for (var i = 0; i < trust.length; i++) {
    val = trust[i];

    if (!IP_RANGES.hasOwnProperty(val)) {
      continue;
    }

    // Splice in pre-defined range
    val = IP_RANGES[val];
    trust.splice.apply(trust, [i, 1].concat(val));
    i += val.length - 1;
  }

  return compileTrust(compileRangeSubnets(trust));
}

/**
 * Compile `arr` elements into range subnets.
 *
 * @param {Array} arr
 * @private
 */

function compileRangeSubnets(arr) {
  var rangeSubnets = new Array(arr.length);

  for (var i = 0; i < arr.length; i++) {
    rangeSubnets[i] = parseipNotation(arr[i]);
  }

  return rangeSubnets;
}

/**
 * Compile range subnet array into trust function.
 *
 * @param {Array} rangeSubnets
 * @private
 */

function compileTrust(rangeSubnets) {
  // Return optimized function based on length
  var len = rangeSubnets.length;
  return len === 0 ? trustNone : len === 1 ? trustSingle(rangeSubnets[0]) : trustMulti(rangeSubnets);
}

/**
 * Parse IP notation string into range subnet.
 *
 * @param {String} note
 * @private
 */

function parseipNotation(note) {
  var pos = note.lastIndexOf('/');
  var str = pos !== -1 ? note.substring(0, pos) : note;

  if (!isip(str)) {
    throw new TypeError('invalid IP address: ' + str);
  }

  var ip = parseip(str);

  if (pos === -1 && ip.kind() === 'ipv6' && ip.isIPv4MappedAddress()) {
    // Store as IPv4
    ip = ip.toIPv4Address();
  }

  var max = ip.kind() === 'ipv6' ? 128 : 32;

  var range = pos !== -1 ? note.substring(pos + 1, note.length) : null;

  if (range === null) {
    range = max;
  } else if (DIGIT_REGEXP.test(range)) {
    range = parseInt(range, 10);
  } else if (ip.kind() === 'ipv4' && isip(range)) {
    range = parseNetmask(range);
  } else {
    range = null;
  }

  if (range <= 0 || range > max) {
    throw new TypeError('invalid range on address: ' + note);
  }

  return [ip, range];
}

/**
 * Parse netmask string into CIDR range.
 *
 * @param {String} netmask
 * @private
 */

function parseNetmask(netmask) {
  var ip = parseip(netmask);
  var kind = ip.kind();

  return kind === 'ipv4' ? ip.prefixLengthFromSubnetMask() : null;
}

/**
 * Determine address of proxied request.
 *
 * @param {Object} request
 * @param {Function|Array|String} trust
 * @public
 */

function proxyaddr(req, trust) {
  if (!req) {
    throw new TypeError('req argument is required');
  }

  if (!trust) {
    throw new TypeError('trust argument is required');
  }

  var addrs = alladdrs(req, trust);
  var addr = addrs[addrs.length - 1];

  return addr;
}

/**
 * Static trust function to trust nothing.
 *
 * @private
 */

function trustNone() {
  return false;
}

/**
 * Compile trust function for multiple subnets.
 *
 * @param {Array} subnets
 * @private
 */

function trustMulti(subnets) {
  return function trust(addr) {
    if (!isip(addr)) return false;

    var ip = parseip(addr);
    var ipconv;
    var kind = ip.kind();

    for (var i = 0; i < subnets.length; i++) {
      var subnet = subnets[i];
      var subnetip = subnet[0];
      var subnetkind = subnetip.kind();
      var subnetrange = subnet[1];
      var trusted = ip;

      if (kind !== subnetkind) {
        if (subnetkind === 'ipv4' && !ip.isIPv4MappedAddress()) {
          // Incompatible IP addresses
          continue;
        }

        if (!ipconv) {
          // Convert IP to match subnet IP kind
          ipconv = subnetkind === 'ipv4' ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
        }

        trusted = ipconv;
      }

      if (trusted.match(subnetip, subnetrange)) {
        return true;
      }
    }

    return false;
  };
}

/**
 * Compile trust function for single subnet.
 *
 * @param {Object} subnet
 * @private
 */

function trustSingle(subnet) {
  var subnetip = subnet[0];
  var subnetkind = subnetip.kind();
  var subnetisipv4 = subnetkind === 'ipv4';
  var subnetrange = subnet[1];

  return function trust(addr) {
    if (!isip(addr)) return false;

    var ip = parseip(addr);
    var kind = ip.kind();

    if (kind !== subnetkind) {
      if (subnetisipv4 && !ip.isIPv4MappedAddress()) {
        // Incompatible IP addresses
        return false;
      }

      // Convert IP to match subnet IP kind
      ip = subnetisipv4 ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
    }

    return ip.match(subnetip, subnetrange);
  };
}

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var is = __webpack_require__(27);
/**
 * Predefined error codes.
 */
var ErrorCodes;
(function (ErrorCodes) {
    // Defined by JSON RPC
    ErrorCodes.ParseError = -32700;
    ErrorCodes.InvalidRequest = -32600;
    ErrorCodes.MethodNotFound = -32601;
    ErrorCodes.InvalidParams = -32602;
    ErrorCodes.InternalError = -32603;
    ErrorCodes.serverErrorStart = -32099;
    ErrorCodes.serverErrorEnd = -32000;
    ErrorCodes.ServerNotInitialized = -32002;
    ErrorCodes.UnknownErrorCode = -32001;
    // Defined by the protocol.
    ErrorCodes.RequestCancelled = -32800;
    // Defined by VSCode library.
    ErrorCodes.MessageWriteError = 1;
    ErrorCodes.MessageReadError = 2;
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
/**
 * An error object return in a response in case a request
 * has failed.
 */
var ResponseError = /** @class */function (_super) {
    __extends(ResponseError, _super);
    function ResponseError(code, message, data) {
        var _this = _super.call(this, message) || this;
        _this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
        if (data !== void 0) {
            _this.data = data;
        }
        Object.setPrototypeOf(_this, ResponseError.prototype);
        return _this;
    }
    ResponseError.prototype.toJson = function () {
        var result = {
            code: this.code,
            message: this.message
        };
        if (this.data !== void 0) {
            result.data = this.data;
        }
        ;
        return result;
    };
    return ResponseError;
}(Error);
exports.ResponseError = ResponseError;
/**
 * An abstract implementation of a MessageType.
 */
var AbstractMessageType = /** @class */function () {
    function AbstractMessageType(_method, _numberOfParams) {
        this._method = _method;
        this._numberOfParams = _numberOfParams;
    }
    Object.defineProperty(AbstractMessageType.prototype, "method", {
        get: function () {
            return this._method;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractMessageType.prototype, "numberOfParams", {
        get: function () {
            return this._numberOfParams;
        },
        enumerable: true,
        configurable: true
    });
    return AbstractMessageType;
}();
exports.AbstractMessageType = AbstractMessageType;
/**
 * Classes to type request response pairs
 */
var RequestType0 = /** @class */function (_super) {
    __extends(RequestType0, _super);
    function RequestType0(method) {
        var _this = _super.call(this, method, 0) || this;
        _this._ = undefined;
        return _this;
    }
    return RequestType0;
}(AbstractMessageType);
exports.RequestType0 = RequestType0;
var RequestType = /** @class */function (_super) {
    __extends(RequestType, _super);
    function RequestType(method) {
        var _this = _super.call(this, method, 1) || this;
        _this._ = undefined;
        return _this;
    }
    return RequestType;
}(AbstractMessageType);
exports.RequestType = RequestType;
var RequestType1 = /** @class */function (_super) {
    __extends(RequestType1, _super);
    function RequestType1(method) {
        var _this = _super.call(this, method, 1) || this;
        _this._ = undefined;
        return _this;
    }
    return RequestType1;
}(AbstractMessageType);
exports.RequestType1 = RequestType1;
var RequestType2 = /** @class */function (_super) {
    __extends(RequestType2, _super);
    function RequestType2(method) {
        var _this = _super.call(this, method, 2) || this;
        _this._ = undefined;
        return _this;
    }
    return RequestType2;
}(AbstractMessageType);
exports.RequestType2 = RequestType2;
var RequestType3 = /** @class */function (_super) {
    __extends(RequestType3, _super);
    function RequestType3(method) {
        var _this = _super.call(this, method, 3) || this;
        _this._ = undefined;
        return _this;
    }
    return RequestType3;
}(AbstractMessageType);
exports.RequestType3 = RequestType3;
var RequestType4 = /** @class */function (_super) {
    __extends(RequestType4, _super);
    function RequestType4(method) {
        var _this = _super.call(this, method, 4) || this;
        _this._ = undefined;
        return _this;
    }
    return RequestType4;
}(AbstractMessageType);
exports.RequestType4 = RequestType4;
var RequestType5 = /** @class */function (_super) {
    __extends(RequestType5, _super);
    function RequestType5(method) {
        var _this = _super.call(this, method, 5) || this;
        _this._ = undefined;
        return _this;
    }
    return RequestType5;
}(AbstractMessageType);
exports.RequestType5 = RequestType5;
var RequestType6 = /** @class */function (_super) {
    __extends(RequestType6, _super);
    function RequestType6(method) {
        var _this = _super.call(this, method, 6) || this;
        _this._ = undefined;
        return _this;
    }
    return RequestType6;
}(AbstractMessageType);
exports.RequestType6 = RequestType6;
var RequestType7 = /** @class */function (_super) {
    __extends(RequestType7, _super);
    function RequestType7(method) {
        var _this = _super.call(this, method, 7) || this;
        _this._ = undefined;
        return _this;
    }
    return RequestType7;
}(AbstractMessageType);
exports.RequestType7 = RequestType7;
var RequestType8 = /** @class */function (_super) {
    __extends(RequestType8, _super);
    function RequestType8(method) {
        var _this = _super.call(this, method, 8) || this;
        _this._ = undefined;
        return _this;
    }
    return RequestType8;
}(AbstractMessageType);
exports.RequestType8 = RequestType8;
var RequestType9 = /** @class */function (_super) {
    __extends(RequestType9, _super);
    function RequestType9(method) {
        var _this = _super.call(this, method, 9) || this;
        _this._ = undefined;
        return _this;
    }
    return RequestType9;
}(AbstractMessageType);
exports.RequestType9 = RequestType9;
var NotificationType = /** @class */function (_super) {
    __extends(NotificationType, _super);
    function NotificationType(method) {
        var _this = _super.call(this, method, 1) || this;
        _this._ = undefined;
        return _this;
    }
    return NotificationType;
}(AbstractMessageType);
exports.NotificationType = NotificationType;
var NotificationType0 = /** @class */function (_super) {
    __extends(NotificationType0, _super);
    function NotificationType0(method) {
        var _this = _super.call(this, method, 0) || this;
        _this._ = undefined;
        return _this;
    }
    return NotificationType0;
}(AbstractMessageType);
exports.NotificationType0 = NotificationType0;
var NotificationType1 = /** @class */function (_super) {
    __extends(NotificationType1, _super);
    function NotificationType1(method) {
        var _this = _super.call(this, method, 1) || this;
        _this._ = undefined;
        return _this;
    }
    return NotificationType1;
}(AbstractMessageType);
exports.NotificationType1 = NotificationType1;
var NotificationType2 = /** @class */function (_super) {
    __extends(NotificationType2, _super);
    function NotificationType2(method) {
        var _this = _super.call(this, method, 2) || this;
        _this._ = undefined;
        return _this;
    }
    return NotificationType2;
}(AbstractMessageType);
exports.NotificationType2 = NotificationType2;
var NotificationType3 = /** @class */function (_super) {
    __extends(NotificationType3, _super);
    function NotificationType3(method) {
        var _this = _super.call(this, method, 3) || this;
        _this._ = undefined;
        return _this;
    }
    return NotificationType3;
}(AbstractMessageType);
exports.NotificationType3 = NotificationType3;
var NotificationType4 = /** @class */function (_super) {
    __extends(NotificationType4, _super);
    function NotificationType4(method) {
        var _this = _super.call(this, method, 4) || this;
        _this._ = undefined;
        return _this;
    }
    return NotificationType4;
}(AbstractMessageType);
exports.NotificationType4 = NotificationType4;
var NotificationType5 = /** @class */function (_super) {
    __extends(NotificationType5, _super);
    function NotificationType5(method) {
        var _this = _super.call(this, method, 5) || this;
        _this._ = undefined;
        return _this;
    }
    return NotificationType5;
}(AbstractMessageType);
exports.NotificationType5 = NotificationType5;
var NotificationType6 = /** @class */function (_super) {
    __extends(NotificationType6, _super);
    function NotificationType6(method) {
        var _this = _super.call(this, method, 6) || this;
        _this._ = undefined;
        return _this;
    }
    return NotificationType6;
}(AbstractMessageType);
exports.NotificationType6 = NotificationType6;
var NotificationType7 = /** @class */function (_super) {
    __extends(NotificationType7, _super);
    function NotificationType7(method) {
        var _this = _super.call(this, method, 7) || this;
        _this._ = undefined;
        return _this;
    }
    return NotificationType7;
}(AbstractMessageType);
exports.NotificationType7 = NotificationType7;
var NotificationType8 = /** @class */function (_super) {
    __extends(NotificationType8, _super);
    function NotificationType8(method) {
        var _this = _super.call(this, method, 8) || this;
        _this._ = undefined;
        return _this;
    }
    return NotificationType8;
}(AbstractMessageType);
exports.NotificationType8 = NotificationType8;
var NotificationType9 = /** @class */function (_super) {
    __extends(NotificationType9, _super);
    function NotificationType9(method) {
        var _this = _super.call(this, method, 9) || this;
        _this._ = undefined;
        return _this;
    }
    return NotificationType9;
}(AbstractMessageType);
exports.NotificationType9 = NotificationType9;
/**
 * Tests if the given message is a request message
 */
function isRequestMessage(message) {
    var candidate = message;
    return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
}
exports.isRequestMessage = isRequestMessage;
/**
 * Tests if the given message is a notification message
 */
function isNotificationMessage(message) {
    var candidate = message;
    return candidate && is.string(candidate.method) && message.id === void 0;
}
exports.isNotificationMessage = isNotificationMessage;
/**
 * Tests if the given message is a response message
 */
function isResponseMessage(message) {
    var candidate = message;
    return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
}
exports.isResponseMessage = isResponseMessage;

/***/ }),
/* 87 */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(89));
__export(__webpack_require__(90));
__export(__webpack_require__(194));

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var stream_1 = __webpack_require__(51);
var WebSocketMessageReader = function (_super) {
    __extends(WebSocketMessageReader, _super);
    function WebSocketMessageReader(socket) {
        var _this = _super.call(this) || this;
        _this.socket = socket;
        _this.state = 'initial';
        _this.events = [];
        _this.socket.onMessage(function (message) {
            return _this.readMessage(message);
        });
        _this.socket.onError(function (error) {
            return _this.fireError(error);
        });
        _this.socket.onClose(function (code, reason) {
            if (code !== 1000) {
                var error = {
                    name: '' + code,
                    message: "Error during socket reconnect: code = " + code + ", reason = " + reason
                };
                _this.fireError(error);
            }
            _this.fireClose();
        });
        return _this;
    }
    WebSocketMessageReader.prototype.listen = function (callback) {
        if (this.state === 'initial') {
            if (this.events.length !== 0) {
                var event_1 = this.events.pop();
                if (event_1.message) {
                    _super.prototype.readMessage.call(this, event_1.message, callback);
                } else if (event_1.error) {
                    this.fireError(event_1.error);
                } else {
                    this.fireClose();
                }
            }
            this.callback = callback;
            this.state = 'listening';
        }
    };
    WebSocketMessageReader.prototype.readMessage = function (message) {
        if (this.state === 'initial') {
            this.events.splice(0, 0, { message: message });
        } else if (this.state === 'listening') {
            _super.prototype.readMessage.call(this, message, this.callback);
        }
    };
    WebSocketMessageReader.prototype.fireError = function (error) {
        if (this.state === 'initial') {
            this.events.splice(0, 0, { error: error });
        } else if (this.state === 'listening') {
            _super.prototype.fireError.call(this, error);
        }
    };
    WebSocketMessageReader.prototype.fireClose = function () {
        if (this.state === 'initial') {
            this.events.splice(0, 0, {});
        } else if (this.state === 'listening') {
            _super.prototype.fireClose.call(this);
        }
        this.state = 'closed';
    };
    return WebSocketMessageReader;
}(stream_1.AbstractStreamMessageReader);
exports.WebSocketMessageReader = WebSocketMessageReader;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) 2017 TypeFox GmbH (http://www.typefox.io). All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var stream_1 = __webpack_require__(51);
var WebSocketMessageWriter = function (_super) {
    __extends(WebSocketMessageWriter, _super);
    function WebSocketMessageWriter(socket) {
        var _this = _super.call(this) || this;
        _this.socket = socket;
        return _this;
    }
    WebSocketMessageWriter.prototype.send = function (content) {
        try {
            this.socket.send(content);
        } catch (e) {
            this.fireError(e);
        }
    };
    return WebSocketMessageWriter;
}(stream_1.AbstractStreamMessageWriter);
exports.WebSocketMessageWriter = WebSocketMessageWriter;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var ConsoleLogger = function () {
    function ConsoleLogger() {}
    ConsoleLogger.prototype.error = function (message) {
        console.error(message);
    };
    ConsoleLogger.prototype.warn = function (message) {
        console.warn(message);
    };
    ConsoleLogger.prototype.info = function (message) {
        console.info(message);
    };
    ConsoleLogger.prototype.log = function (message) {
        console.log(message);
    };
    ConsoleLogger.prototype.debug = function (message) {
        console.debug(message);
    };
    return ConsoleLogger;
}();
exports.ConsoleLogger = ConsoleLogger;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
const toString = Object.prototype.toString;
function defined(value) {
    return typeof value !== 'undefined';
}
exports.defined = defined;
function undefined(value) {
    return typeof value === 'undefined';
}
exports.undefined = undefined;
function nil(value) {
    return value === null;
}
exports.nil = nil;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return toString.call(value) === '[object String]';
}
exports.string = string;
function number(value) {
    return toString.call(value) === '[object Number]';
}
exports.number = number;
function error(value) {
    return toString.call(value) === '[object Error]';
}
exports.error = error;
function func(value) {
    return toString.call(value) === '[object Function]';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function thenable(value) {
    return value && func(value.then);
}
exports.thenable = thenable;

/***/ }),
/* 93 */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 93;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var lexer_1 = __webpack_require__(95);
exports.Lexer = lexer_1.Lexer;
exports.Token = lexer_1.Token;
exports.tokenTypeToString = lexer_1.tokenTypeToString;
var parser_1 = __webpack_require__(211);
exports.Parser = parser_1.Parser;
__export(__webpack_require__(212));

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var Token;
(function (Token) {
    function create(type, offset, length, modeStack) {
        return { tokenType: type, offset: offset, length: length, modeStack: modeStack };
    }
    Token.create = create;
})(Token = exports.Token || (exports.Token = {}));
var Lexer;
(function (Lexer) {
    var state;
    function setInput(text, lexerModeStack, position) {
        state = {
            position: position ? position : 0,
            input: text,
            modeStack: lexerModeStack ? lexerModeStack : [0],
            doubleQuoteScannedLength: -1,
            heredocLabel: null
        };
    }
    Lexer.setInput = setInput;
    function lex() {
        if (state.position >= state.input.length) {
            return {
                tokenType: 1,
                offset: state.position,
                length: 0,
                modeStack: state.modeStack
            };
        }
        let t;
        switch (state.modeStack[state.modeStack.length - 1]) {
            case 0:
                t = initial(state);
                break;
            case 1:
                t = scripting(state);
                break;
            case 2:
                t = lookingForProperty(state);
                break;
            case 3:
                t = doubleQuotes(state);
                break;
            case 4:
                t = nowdoc(state);
                break;
            case 5:
                t = heredoc(state);
                break;
            case 6:
                t = endHeredoc(state);
                break;
            case 7:
                t = backtick(state);
                break;
            case 8:
                t = varOffset(state);
                break;
            case 9:
                t = lookingForVarName(state);
                break;
            default:
                throw new Error('Unknown LexerMode');
        }
        return t ? t : lex();
    }
    Lexer.lex = lex;
    function isLabelStart(c) {
        let cp = c.charCodeAt(0);
        return cp > 0x40 && cp < 0x5b || cp > 0x60 && cp < 0x7b || cp === 0x5f || cp > 0x7f;
    }
    function isLabelChar(c) {
        let cp = c.charCodeAt(0);
        return cp > 0x2f && cp < 0x3a || cp > 0x40 && cp < 0x5b || cp > 0x60 && cp < 0x7b || cp === 0x5f || cp > 0x7f;
    }
    function isWhitespace(c) {
        return c === ' ' || c === '\n' || c === '\r' || c === '\t';
    }
    function initial(s) {
        let l = s.input.length;
        let c = s.input[s.position];
        let start = s.position;
        if (c === '<' && s.position + 1 < l && s.input[s.position + 1] === '?') {
            let tokenType = 156;
            if (s.input.substr(s.position, 5).toLowerCase() === '<?php' && s.position + 5 < l && isWhitespace(s.input[s.position + 5])) {
                if (s.input[s.position + 5] === '\r' && s.position + 6 < l && s.input[s.position + 6] === '\n') {
                    s.position += 7;
                } else {
                    s.position += 6;
                }
            } else if (s.position + 2 < l && s.input[s.position + 2] === '=') {
                tokenType = 157;
                s.position += 3;
            } else {
                s.position += 2;
            }
            let t = { tokenType: tokenType, offset: start, length: s.position - start, modeStack: s.modeStack };
            s.modeStack = s.modeStack.slice(0, -1);
            s.modeStack.push(1);
            return t;
        }
        while (++s.position < l) {
            c = s.input[s.position];
            if (c === '<' && s.position + 1 < l && s.input[s.position + 1] === '?') {
                break;
            }
        }
        return { tokenType: 81, offset: start, length: s.position - start, modeStack: s.modeStack };
    }
    function scripting(s) {
        let c = s.input[s.position];
        let start = s.position;
        let l = s.input.length;
        let modeStack = s.modeStack;
        switch (c) {
            case ' ':
            case '\t':
            case '\n':
            case '\r':
                while (++s.position < l && isWhitespace(s.input[s.position])) {}
                return { tokenType: 161, offset: start, length: s.position - start, modeStack: modeStack };
            case '-':
                return scriptingMinus(s);
            case ':':
                if (++s.position < l && s.input[s.position] === ':') {
                    ++s.position;
                    return { tokenType: 133, offset: start, length: 2, modeStack: modeStack };
                }
                return { tokenType: 87, offset: start, length: 1, modeStack: modeStack };
            case '.':
                return scriptingDot(s);
            case '=':
                return scriptingEquals(s);
            case '+':
                return scriptingPlus(s);
            case '!':
                return scriptingExclamation(s);
            case '<':
                return scriptingLessThan(s);
            case '>':
                return scriptingGreaterThan(s);
            case '*':
                return scriptingAsterisk(s);
            case '/':
                return scriptingForwardSlash(s);
            case '%':
                if (++s.position < l && s.input[s.position] === '=') {
                    ++s.position;
                    return { tokenType: 145, offset: start, length: 2, modeStack: modeStack };
                }
                return { tokenType: 92, offset: start, length: 1, modeStack: modeStack };
            case '&':
                return scriptingAmpersand(s);
            case '|':
                return scriptingBar(s);
            case '^':
                if (++s.position < l && s.input[s.position] === '=') {
                    ++s.position;
                    return { tokenType: 105, offset: start, length: 2, modeStack: modeStack };
                }
                return { tokenType: 125, offset: start, length: 1, modeStack: modeStack };
            case ';':
                ++s.position;
                return { tokenType: 88, offset: start, length: 1, modeStack: modeStack };
            case ',':
                ++s.position;
                return { tokenType: 93, offset: start, length: 1, modeStack: modeStack };
            case '[':
                ++s.position;
                return { tokenType: 117, offset: start, length: 1, modeStack: modeStack };
            case ']':
                ++s.position;
                return { tokenType: 120, offset: start, length: 1, modeStack: modeStack };
            case '(':
                return scriptingOpenParenthesis(s);
            case ')':
                ++s.position;
                return { tokenType: 121, offset: start, length: 1, modeStack: modeStack };
            case '~':
                ++s.position;
                return { tokenType: 86, offset: start, length: 1, modeStack: modeStack };
            case '?':
                return scriptingQuestion(s);
            case '@':
                ++s.position;
                return { tokenType: 94, offset: start, length: 1, modeStack: modeStack };
            case '$':
                return scriptingDollar(s);
            case '#':
                ++s.position;
                return scriptingComment(s, start);
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                return scriptingNumeric(s);
            case '{':
                ++s.position;
                s.modeStack = modeStack.slice(0);
                s.modeStack.push(1);
                return { tokenType: 116, offset: start, length: 1, modeStack: modeStack };
            case '}':
                ++s.position;
                if (s.modeStack.length > 1) {
                    s.modeStack = s.modeStack.slice(0, -1);
                }
                return { tokenType: 119, offset: start, length: 1, modeStack: modeStack };
            case '`':
                ++s.position;
                s.modeStack = s.modeStack.slice(0, -1);
                s.modeStack.push(7);
                return { tokenType: 95, offset: start, length: 1, modeStack: modeStack };
            case '\\':
                return scriptingBackslash(s);
            case '\'':
                return scriptingSingleQuote(s, start);
            case '"':
                return scriptingDoubleQuote(s, start);
            default:
                if (isLabelStart(c)) {
                    return scriptingLabelStart(s);
                } else {
                    ++s.position;
                    return { tokenType: 0, offset: start, length: 1, modeStack: s.modeStack };
                }
        }
    }
    function lookingForProperty(s) {
        let start = s.position;
        let c = s.input[s.position];
        let l = s.input.length;
        let modeStack = s.modeStack;
        switch (c) {
            case ' ':
            case '\t':
            case '\n':
            case '\r':
                while (++s.position < l && isWhitespace(s.input[s.position])) {}
                return { tokenType: 161, offset: start, length: s.position - start, modeStack: modeStack };
            default:
                if (isLabelStart(c)) {
                    while (++s.position < l && isLabelChar(s.input[s.position])) {}
                    s.modeStack = s.modeStack.slice(0, -1);
                    return { tokenType: 83, offset: start, length: s.position - start, modeStack: modeStack };
                }
                if (c === '-' && s.position + 1 < l && s.input[s.position + 1] === '>') {
                    s.position += 2;
                    return { tokenType: 115, offset: start, length: 2, modeStack: modeStack };
                }
                s.modeStack = s.modeStack.slice(0, -1);
                return null;
        }
    }
    function doubleQuotes(s) {
        let l = s.input.length;
        let c = s.input[s.position];
        let start = s.position;
        let modeStack = s.modeStack;
        let t;
        switch (c) {
            case '$':
                if (t = encapsulatedDollar(s)) {
                    return t;
                }
                break;
            case '{':
                if (s.position + 1 < l && s.input[s.position + 1] === '$') {
                    s.modeStack = s.modeStack.slice(0);
                    s.modeStack.push(1);
                    ++s.position;
                    return { tokenType: 128, offset: start, length: 1, modeStack: modeStack };
                }
                break;
            case '"':
                s.modeStack = s.modeStack.slice(0, -1);
                s.modeStack.push(1);
                ++s.position;
                return { tokenType: 97, offset: start, length: 1, modeStack: modeStack };
            default:
                break;
        }
        return doubleQuotesAny(s);
    }
    function nowdoc(s) {
        let start = s.position;
        let n = start;
        let l = s.input.length;
        let c;
        let modeStack = s.modeStack;
        while (n < l) {
            c = s.input[n++];
            switch (c) {
                case '\r':
                    if (n < l && s.input[n] === '\n') {
                        ++n;
                    }
                case '\n':
                    if (n < l && s.heredocLabel === s.input.substr(n, s.heredocLabel.length)) {
                        let k = n + s.heredocLabel.length;
                        if (k < l && s.input[k] === ';') {
                            ++k;
                        }
                        if (k < l && (s.input[k] === '\n' || s.input[k] === '\r')) {
                            let nl = s.input.slice(n - 2, n);
                            if (nl === '\r\n') {
                                n -= 2;
                            } else {
                                --n;
                            }
                            s.modeStack = s.modeStack.slice(0, -1);
                            s.modeStack.push(6);
                            break;
                        }
                    }
                default:
                    continue;
            }
            break;
        }
        s.position = n;
        return { tokenType: 80, offset: start, length: s.position - start, modeStack: modeStack };
    }
    function heredoc(s) {
        let l = s.input.length;
        let c = s.input[s.position];
        let start = s.position;
        let modeStack = s.modeStack;
        let t;
        switch (c) {
            case '$':
                if (t = encapsulatedDollar(s)) {
                    return t;
                }
                break;
            case '{':
                if (s.position + 1 < l && s.input[s.position + 1] === '$') {
                    s.modeStack = s.modeStack.slice(0);
                    s.modeStack.push(1);
                    ++s.position;
                    return { tokenType: 128, offset: start, length: 1, modeStack: modeStack };
                }
                break;
            default:
                break;
        }
        return heredocAny(s);
    }
    function backtick(s) {
        let l = s.input.length;
        let c = s.input[s.position];
        let start = s.position;
        let modeStack = s.modeStack;
        let t;
        switch (c) {
            case '$':
                if (t = encapsulatedDollar(s)) {
                    return t;
                }
                break;
            case '{':
                if (s.position + 1 < l && s.input[s.position + 1] === '$') {
                    s.modeStack = s.modeStack.slice(0);
                    s.modeStack.push(1);
                    ++s.position;
                    return { tokenType: 128, offset: start, length: 1, modeStack: modeStack };
                }
                break;
            case '`':
                s.modeStack = s.modeStack.slice(0, -1);
                s.modeStack.push(1);
                ++s.position;
                return { tokenType: 95, offset: start, length: 1, modeStack: modeStack };
            default:
                break;
        }
        return backtickAny(s);
    }
    function varOffset(s) {
        let start = s.position;
        let c = s.input[s.position];
        let l = s.input.length;
        let modeStack = s.modeStack;
        switch (s.input[s.position]) {
            case '$':
                if (s.position + 1 < l && isLabelStart(s.input[s.position + 1])) {
                    ++s.position;
                    while (++s.position < l && isLabelChar(s.input[s.position])) {}
                    return { tokenType: 84, offset: start, length: s.position - start, modeStack: s.modeStack };
                }
                break;
            case '[':
                ++s.position;
                return { tokenType: 117, offset: start, length: 1, modeStack: s.modeStack };
            case ']':
                s.modeStack = s.modeStack.slice(0, -1);
                ++s.position;
                return { tokenType: 120, offset: start, length: 1, modeStack: s.modeStack };
            case '-':
                ++s.position;
                return { tokenType: 143, offset: start, length: 1, modeStack: s.modeStack };
            default:
                if (c >= '0' && c <= '9') {
                    return varOffsetNumeric(s);
                } else if (isLabelStart(c)) {
                    while (++s.position < l && isLabelChar(s.input[s.position])) {}
                    return { tokenType: 83, offset: start, length: s.position - start, modeStack: s.modeStack };
                }
                break;
        }
        s.modeStack = s.modeStack.slice(0, -1);
        ++s.position;
        return { tokenType: 0, offset: start, length: 1, modeStack: modeStack };
    }
    function lookingForVarName(s) {
        let start = s.position;
        let l = s.input.length;
        let modeStack = s.modeStack;
        if (isLabelStart(s.input[s.position])) {
            let k = s.position + 1;
            while (++k < l && isLabelChar(s.input[k])) {}
            if (k < l && (s.input[k] === '[' || s.input[k] === '}')) {
                s.modeStack = s.modeStack.slice(0, -1);
                s.modeStack.push(1);
                s.position = k;
                return { tokenType: 84, offset: start, length: s.position - start, modeStack: modeStack };
            }
        }
        s.modeStack = s.modeStack.slice(0, -1);
        s.modeStack.push(1);
        return null;
    }
    function varOffsetNumeric(s) {
        let start = s.position;
        let c = s.input[s.position];
        let l = s.input.length;
        if (c === '0') {
            let k = s.position + 1;
            if (k < l && s.input[k] === 'b' && ++k < l && (s.input[k] === '1' || s.input[k] === '0')) {
                while (++k < l && (s.input[k] === '1' || s.input[k] === '0')) {}
                s.position = k;
                return { tokenType: 82, offset: start, length: s.position - start, modeStack: s.modeStack };
            }
            if (k < l && s.input[k] === 'x' && ++k < l && isHexDigit(s.input[k])) {
                while (++k < l && isHexDigit(s.input[k])) {}
                s.position = k;
                return { tokenType: 82, offset: start, length: s.position - start, modeStack: s.modeStack };
            }
        }
        while (++s.position < l && s.input[s.position] >= '0' && s.input[s.position] <= '9') {}
        return { tokenType: 82, offset: start, length: s.position - start, modeStack: s.modeStack };
    }
    function backtickAny(s) {
        let n = s.position;
        let c;
        let start = n;
        let l = s.input.length;
        if (s.input[n] === '\\' && n < l) {
            ++n;
        }
        while (n < l) {
            c = s.input[n++];
            switch (c) {
                case '`':
                    break;
                case '$':
                    if (n < l && (isLabelStart(s.input[n]) || s.input[n] === '{')) {
                        break;
                    }
                    continue;
                case '{':
                    if (n < l && s.input[n] === '$') {
                        break;
                    }
                    continue;
                case '\\':
                    if (n < l) {
                        ++n;
                    }
                default:
                    continue;
            }
            --n;
            break;
        }
        s.position = n;
        return { tokenType: 80, offset: start, length: s.position - start, modeStack: s.modeStack };
    }
    function heredocAny(s) {
        let start = s.position;
        let n = start;
        let c;
        let l = s.input.length;
        let modeStack = s.modeStack;
        while (n < l) {
            c = s.input[n++];
            switch (c) {
                case '\r':
                    if (n < l && s.input[n] === '\n') {
                        ++n;
                    }
                case '\n':
                    if (n < l && s.input.slice(n, n + s.heredocLabel.length) === s.heredocLabel) {
                        let k = n + s.heredocLabel.length;
                        if (k < l && s.input[k] === ';') {
                            ++k;
                        }
                        if (k < l && (s.input[k] === '\n' || s.input[k] === '\r')) {
                            let nl = s.input.slice(n - 2, n);
                            if (nl === '\r\n') {
                                n -= 2;
                            } else {
                                --n;
                            }
                            s.position = n;
                            s.modeStack = s.modeStack.slice(0, -1);
                            s.modeStack.push(6);
                            return { tokenType: 80, offset: start, length: s.position - start, modeStack: modeStack };
                        }
                    }
                    continue;
                case '$':
                    if (n < l && (isLabelStart(s.input[n]) || s.input[n] === '{')) {
                        break;
                    }
                    continue;
                case '{':
                    if (n < l && s.input[n] === '$') {
                        break;
                    }
                    continue;
                case '\\':
                    if (n < l && s.input[n] !== '\n' && s.input[n] !== '\r') {
                        ++n;
                    }
                default:
                    continue;
            }
            --n;
            break;
        }
        s.position = n;
        return { tokenType: 80, offset: start, length: s.position - start, modeStack: modeStack };
    }
    function endHeredoc(s) {
        let start = s.position;
        while (++s.position < s.input.length && (s.input[s.position] === '\r' || s.input[s.position] === '\n')) {}
        s.position += s.heredocLabel.length;
        s.heredocLabel = null;
        let t = { tokenType: 27, offset: start, length: s.position - start, modeStack: s.modeStack };
        s.modeStack = s.modeStack.slice(0, -1);
        s.modeStack.push(1);
        return t;
    }
    function doubleQuotesAny(s) {
        let start = s.position;
        if (s.doubleQuoteScannedLength > 0) {
            s.position = s.doubleQuoteScannedLength;
            s.doubleQuoteScannedLength = -1;
        } else {
            let n = s.position;
            let l = s.input.length;
            ++n;
            if (s.input[s.position] === '\\' && n + 1 < l) {
                ++n;
            }
            let c;
            while (n < l) {
                c = s.input[n++];
                switch (c) {
                    case '"':
                        break;
                    case '$':
                        if (n < l && (isLabelStart(s.input[n]) || s.input[n] == '{')) {
                            break;
                        }
                        continue;
                    case '{':
                        if (n < l && s.input[n] === '$') {
                            break;
                        }
                        continue;
                    case '\\':
                        if (n < l) {
                            ++n;
                        }
                    default:
                        continue;
                }
                --n;
                break;
            }
            s.position = n;
        }
        return { tokenType: 80, offset: start, length: s.position - start, modeStack: s.modeStack };
    }
    function encapsulatedDollar(s) {
        let start = s.position;
        let l = s.input.length;
        let k = s.position + 1;
        let modeStack = s.modeStack;
        if (k >= l) {
            return null;
        }
        if (s.input[k] === '{') {
            s.position += 2;
            s.modeStack = s.modeStack.slice(0);
            s.modeStack.push(9);
            return { tokenType: 131, offset: start, length: 2, modeStack: modeStack };
        }
        if (!isLabelStart(s.input[k])) {
            return null;
        }
        while (++k < l && isLabelChar(s.input[k])) {}
        if (k < l && s.input[k] === '[') {
            s.modeStack = s.modeStack.slice(0);
            s.modeStack.push(8);
            s.position = k;
            return { tokenType: 84, offset: start, length: s.position - start, modeStack: modeStack };
        }
        if (k < l && s.input[k] === '-') {
            let n = k + 1;
            if (n < l && s.input[n] === '>' && ++n < l && isLabelStart(s.input[n])) {
                s.modeStack = s.modeStack.slice(0);
                s.modeStack.push(2);
                s.position = k;
                return { tokenType: 84, offset: start, length: s.position - start, modeStack: modeStack };
            }
        }
        s.position = k;
        return { tokenType: 84, offset: start, length: s.position - start, modeStack: modeStack };
    }
    function scriptingDoubleQuote(s, start) {
        ++s.position;
        let n = s.position;
        let c;
        let l = s.input.length;
        while (n < l) {
            c = s.input[n++];
            switch (c) {
                case '"':
                    s.position = n;
                    return { tokenType: 78, offset: start, length: s.position - start, modeStack: s.modeStack };
                case '$':
                    if (n < l && (isLabelStart(s.input[n]) || s.input[n] === '{')) {
                        break;
                    }
                    continue;
                case '{':
                    if (n < l && s.input[n] === '$') {
                        break;
                    }
                    continue;
                case '\\':
                    if (n < l) {
                        ++n;
                    }
                default:
                    continue;
            }
            --n;
            break;
        }
        s.doubleQuoteScannedLength = n;
        let modeStack = s.modeStack;
        s.modeStack = s.modeStack.slice(0, -1);
        s.modeStack.push(3);
        return { tokenType: 97, offset: start, length: s.position - start, modeStack: modeStack };
    }
    function scriptingSingleQuote(s, start) {
        let l = s.input.length;
        ++s.position;
        while (true) {
            if (s.position < l) {
                if (s.input[s.position] === '\'') {
                    ++s.position;
                    break;
                } else if (s.input[s.position++] === '\\' && s.position < l) {
                    ++s.position;
                }
            } else {
                return { tokenType: 80, offset: start, length: s.position - start, modeStack: s.modeStack };
            }
        }
        return { tokenType: 78, offset: start, length: s.position - start, modeStack: s.modeStack };
    }
    function scriptingBackslash(s) {
        let start = s.position;
        ++s.position;
        let t;
        if (s.position < s.input.length) {
            switch (s.input[s.position]) {
                case '\'':
                    return scriptingSingleQuote(s, start);
                case '"':
                    return scriptingDoubleQuote(s, start);
                case '<':
                    t = scriptingHeredoc(s, start);
                    if (t) {
                        return t;
                    }
                default:
                    break;
            }
        }
        return { tokenType: 147, offset: start, length: 1, modeStack: s.modeStack };
    }
    const endHeredocLabelRegExp = /^;?(?:\r\n|\n|\r)/;
    function scriptingHeredoc(s, start) {
        let l = s.input.length;
        let k = s.position;
        let labelStart;
        let labelEnd;
        for (let kPlus3 = k + 3; k < kPlus3; ++k) {
            if (k >= l || s.input[k] !== '<') {
                return null;
            }
        }
        while (k < l && (s.input[k] === ' ' || s.input[k] === '\t')) {
            ++k;
        }
        let quote;
        if (k < l && (s.input[k] === '\'' || s.input[k] === '"')) {
            quote = s.input[k];
            ++k;
        }
        labelStart = k;
        if (k < l && isLabelStart(s.input[k])) {
            while (++k < l && isLabelChar(s.input[k])) {}
        } else {
            return null;
        }
        labelEnd = k;
        if (quote) {
            if (k < l && s.input[k] === quote) {
                ++k;
            } else {
                return null;
            }
        }
        if (k < l) {
            if (s.input[k] === '\r') {
                ++k;
                if (s.input[k] === '\n') {
                    ++k;
                }
            } else if (s.input[k] === '\n') {
                ++k;
            } else {
                return null;
            }
        }
        s.position = k;
        s.heredocLabel = s.input.slice(labelStart, labelEnd);
        let t = { tokenType: 154, offset: start, length: s.position - start, modeStack: s.modeStack };
        s.modeStack = s.modeStack.slice(0, -1);
        if (quote === '\'') {
            s.modeStack.push(4);
        } else {
            s.modeStack.push(5);
        }
        if (s.input.substr(s.position, s.heredocLabel.length) === s.heredocLabel && s.input.substr(s.position + s.heredocLabel.length, 3).search(endHeredocLabelRegExp) >= 0) {
            s.modeStack.pop();
            s.modeStack.push(6);
        }
        return t;
    }
    function scriptingLabelStart(s) {
        let l = s.input.length;
        let start = s.position;
        while (++s.position < l && isLabelChar(s.input[s.position])) {}
        let text = s.input.slice(start, s.position);
        let tokenType = 0;
        if (text[0] === '_') {
            switch (text) {
                case '__CLASS__':
                    tokenType = 10;
                    break;
                case '__TRAIT__':
                    tokenType = 77;
                    break;
                case '__FUNCTION__':
                    tokenType = 74;
                    break;
                case '__METHOD__':
                    tokenType = 75;
                    break;
                case '__LINE__':
                    tokenType = 73;
                    break;
                case '__FILE__':
                    tokenType = 72;
                    break;
                case '__DIR__':
                    tokenType = 71;
                    break;
                case '__NAMESPACE__':
                    tokenType = 76;
                    break;
                default:
                    break;
            }
            if (tokenType > 0) {
                return { tokenType: tokenType, offset: start, length: s.position - start, modeStack: s.modeStack };
            }
        }
        text = text.toLowerCase();
        switch (text) {
            case 'exit':
                tokenType = 29;
                break;
            case 'die':
                tokenType = 29;
                break;
            case 'function':
                tokenType = 35;
                break;
            case 'const':
                tokenType = 12;
                break;
            case 'return':
                tokenType = 59;
                break;
            case 'yield':
                return scriptingYield(s, start);
            case 'try':
                tokenType = 64;
                break;
            case 'catch':
                tokenType = 8;
                break;
            case 'finally':
                tokenType = 32;
                break;
            case 'throw':
                tokenType = 62;
                break;
            case 'if':
                tokenType = 39;
                break;
            case 'elseif':
                tokenType = 19;
                break;
            case 'endif':
                tokenType = 24;
                break;
            case 'else':
                tokenType = 18;
                break;
            case 'while':
                tokenType = 68;
                break;
            case 'endwhile':
                tokenType = 26;
                break;
            case 'do':
                tokenType = 16;
                break;
            case 'for':
                tokenType = 33;
                break;
            case 'endfor':
                tokenType = 22;
                break;
            case 'foreach':
                tokenType = 34;
                break;
            case 'endforeach':
                tokenType = 23;
                break;
            case 'declare':
                tokenType = 14;
                break;
            case 'enddeclare':
                tokenType = 21;
                break;
            case 'instanceof':
                tokenType = 43;
                break;
            case 'as':
                tokenType = 4;
                break;
            case 'switch':
                tokenType = 61;
                break;
            case 'endswitch':
                tokenType = 25;
                break;
            case 'case':
                tokenType = 7;
                break;
            case 'default':
                tokenType = 15;
                break;
            case 'break':
                tokenType = 5;
                break;
            case 'continue':
                tokenType = 13;
                break;
            case 'goto':
                tokenType = 37;
                break;
            case 'echo':
                tokenType = 17;
                break;
            case 'print':
                tokenType = 53;
                break;
            case 'class':
                tokenType = 9;
                break;
            case 'interface':
                tokenType = 45;
                break;
            case 'trait':
                tokenType = 63;
                break;
            case 'extends':
                tokenType = 30;
                break;
            case 'implements':
                tokenType = 40;
                break;
            case 'new':
                tokenType = 52;
                break;
            case 'clone':
                tokenType = 11;
                break;
            case 'var':
                tokenType = 67;
                break;
            case 'eval':
                tokenType = 28;
                break;
            case 'include_once':
                tokenType = 42;
                break;
            case 'include':
                tokenType = 41;
                break;
            case 'require_once':
                tokenType = 58;
                break;
            case 'require':
                tokenType = 57;
                break;
            case 'namespace':
                tokenType = 51;
                break;
            case 'use':
                tokenType = 66;
                break;
            case 'insteadof':
                tokenType = 44;
                break;
            case 'global':
                tokenType = 36;
                break;
            case 'isset':
                tokenType = 46;
                break;
            case 'empty':
                tokenType = 20;
                break;
            case '__halt_compiler':
                tokenType = 38;
                break;
            case 'static':
                tokenType = 60;
                break;
            case 'abstract':
                tokenType = 2;
                break;
            case 'final':
                tokenType = 31;
                break;
            case 'private':
                tokenType = 54;
                break;
            case 'protected':
                tokenType = 56;
                break;
            case 'public':
                tokenType = 55;
                break;
            case 'unset':
                tokenType = 65;
                break;
            case 'list':
                tokenType = 47;
                break;
            case 'array':
                tokenType = 3;
                break;
            case 'callable':
                tokenType = 6;
                break;
            case 'or':
                tokenType = 49;
                break;
            case 'and':
                tokenType = 48;
                break;
            case 'xor':
                tokenType = 50;
                break;
            default:
                break;
        }
        if (tokenType > 0) {
            return { tokenType: tokenType, offset: start, length: s.position - start, modeStack: s.modeStack };
        }
        return { tokenType: 83, offset: start, length: s.position - start, modeStack: s.modeStack };
    }
    function scriptingYield(s, start) {
        let l = s.input.length;
        let k = s.position;
        if (k < l && isWhitespace(s.input[k])) {
            while (++k < l && isWhitespace(s.input[k])) {}
            if (s.input.substr(k, 4).toLowerCase() === 'from') {
                s.position = k + 4;
                return { tokenType: 70, offset: start, length: s.position - start, modeStack: s.modeStack };
            }
        }
        return { tokenType: 69, offset: start, length: s.position - start, modeStack: s.modeStack };
    }
    function scriptingQuestion(s) {
        let l = s.input.length;
        let start = s.position;
        ++s.position;
        if (s.position < l) {
            if (s.input[s.position] === '?') {
                ++s.position;
                return { tokenType: 122, offset: start, length: 2, modeStack: s.modeStack };
            } else if (s.input[s.position] === '>') {
                ++s.position;
                let modeStack = s.modeStack;
                s.modeStack = s.modeStack.slice(0, -1);
                s.modeStack.push(0);
                return { tokenType: 158, offset: start, length: s.position - start, modeStack: modeStack };
            }
        }
        return { tokenType: 96, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingDollar(s) {
        let start = s.position;
        let k = s.position;
        let l = s.input.length;
        ++k;
        if (k < l && isLabelStart(s.input[k])) {
            while (++k < l && isLabelChar(s.input[k])) {}
            s.position = k;
            return { tokenType: 84, offset: start, length: s.position - start, modeStack: s.modeStack };
        }
        ++s.position;
        return { tokenType: 90, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingOpenParenthesis(s) {
        let start = s.position;
        let k = start;
        let l = s.input.length;
        ++k;
        while (k < l && (s.input[k] === ' ' || s.input[k] === '\t')) {
            ++k;
        }
        let keywordStart = k;
        while (k < l && (s.input[k] >= 'A' && s.input <= 'Z' || s.input[k] >= 'a' && s.input <= 'z')) {
            ++k;
        }
        let keywordEnd = k;
        while (k < l && (s.input[k] === ' ' || s.input[k] === '\t')) {
            ++k;
        }
        if (k < l && s.input[k] === ')') {
            let keyword = s.input.slice(keywordStart, keywordEnd).toLowerCase();
            let tokenType = 0;
            switch (keyword) {
                case 'int':
                case 'integer':
                    tokenType = 152;
                    break;
                case 'real':
                case 'float':
                case 'double':
                    tokenType = 153;
                    break;
                case 'string':
                case 'binary':
                    tokenType = 150;
                    break;
                case 'array':
                    tokenType = 155;
                    break;
                case 'object':
                    tokenType = 151;
                    break;
                case 'bool':
                case 'boolean':
                    tokenType = 148;
                    break;
                case 'unset':
                    tokenType = 149;
                    break;
                default:
                    break;
            }
            if (tokenType > 0) {
                s.position = k + 1;
                return { tokenType: tokenType, offset: start, length: s.position - start, modeStack: s.modeStack };
            }
        }
        ++s.position;
        return { tokenType: 118, offset: start, length: 1, modeStack: s.modeStack };
    }
    function isHexDigit(c) {
        return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';
    }
    function scriptingNumeric(s) {
        let start = s.position;
        let l = s.input.length;
        let k = s.position;
        if (s.input[s.position] === '0' && ++k < l) {
            if (s.input[k] === 'b' && ++k < l && (s.input[k] === '0' || s.input[k] === '1')) {
                while (++k < l && (s.input[k] === '0' || s.input[k] === '1')) {}
                s.position = k;
                return { tokenType: 82, offset: start, length: s.position - start, modeStack: s.modeStack };
            }
            k = s.position + 1;
            if (s.input[k] === 'x' && ++k < l && isHexDigit(s.input[k])) {
                while (++k < l && isHexDigit(s.input[k])) {}
                s.position = k;
                return { tokenType: 82, offset: start, length: s.position - start, modeStack: s.modeStack };
            }
        }
        while (++s.position < l && s.input[s.position] >= '0' && s.input[s.position] <= '9') {}
        if (s.input[s.position] === '.') {
            ++s.position;
            return scriptingNumericStartingWithDotOrE(s, start, true);
        } else if (s.input[s.position] === 'e' || s.input[s.position] === 'E') {
            return scriptingNumericStartingWithDotOrE(s, start, false);
        }
        return { tokenType: 82, offset: start, length: s.position - start, modeStack: s.modeStack };
    }
    function scriptingNumericStartingWithDotOrE(s, start, hasDot) {
        let l = s.input.length;
        while (s.position < l && s.input[s.position] >= '0' && s.input[s.position] <= '9') {
            ++s.position;
        }
        if (s.position < l && (s.input[s.position] === 'e' || s.input[s.position] === 'E')) {
            let k = s.position + 1;
            if (k < l && (s.input[k] === '+' || s.input[k] === '-')) {
                ++k;
            }
            if (k < l && s.input[k] >= '0' && s.input[k] <= '9') {
                while (++k < l && s.input[k] >= '0' && s.input[k] <= '9') {}
                s.position = k;
                return { tokenType: 79, offset: start, length: s.position - start, modeStack: s.modeStack };
            }
        }
        return { tokenType: hasDot ? 79 : 82, offset: start, length: s.position - start, modeStack: s.modeStack };
    }
    function scriptingBar(s) {
        let start = s.position;
        ++s.position;
        if (s.position < s.input.length) {
            switch (s.input[s.position]) {
                case '=':
                    ++s.position;
                    return { tokenType: 110, offset: start, length: 2, modeStack: s.modeStack };
                case '|':
                    ++s.position;
                    return { tokenType: 124, offset: start, length: 2, modeStack: s.modeStack };
                default:
                    break;
            }
        }
        return { tokenType: 123, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingAmpersand(s) {
        let start = s.position;
        ++s.position;
        if (s.position < s.input.length) {
            switch (s.input[s.position]) {
                case '=':
                    ++s.position;
                    return { tokenType: 104, offset: start, length: 2, modeStack: s.modeStack };
                case '&':
                    ++s.position;
                    return { tokenType: 102, offset: start, length: 2, modeStack: s.modeStack };
                default:
                    break;
            }
        }
        return { tokenType: 103, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingInlineCommentOrDocBlock(s) {
        let tokenType = 159;
        let start = s.position - 2;
        let l = s.input.length;
        if (s.position < l && s.input[s.position] === '*' && s.position + 1 < l && s.input[s.position + 1] !== '/') {
            ++s.position;
            tokenType = 160;
        }
        while (s.position < l) {
            if (s.input[s.position] === '*' && s.position + 1 < l && s.input[s.position + 1] === '/') {
                s.position += 2;
                break;
            }
            ++s.position;
        }
        return { tokenType: tokenType, offset: start, length: s.position - start, modeStack: s.modeStack };
    }
    function scriptingForwardSlash(s) {
        let start = s.position;
        ++s.position;
        if (s.position < s.input.length) {
            switch (s.input[s.position]) {
                case '=':
                    ++s.position;
                    return { tokenType: 130, offset: start, length: 2, modeStack: s.modeStack };
                case '*':
                    ++s.position;
                    return scriptingInlineCommentOrDocBlock(s);
                case '/':
                    ++s.position;
                    return scriptingComment(s, start);
                default:
                    break;
            }
        }
        return { tokenType: 91, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingComment(s, start) {
        let l = s.input.length;
        let c;
        while (s.position < l) {
            c = s.input[s.position];
            ++s.position;
            if (c === '\n' || c === '\r' || c === '?' && s.position < l && s.input[s.position] === '>') {
                --s.position;
                break;
            }
        }
        return { tokenType: 159, offset: start, length: s.position - start, modeStack: s.modeStack };
    }
    function scriptingAsterisk(s) {
        let start = s.position;
        if (++s.position < s.input.length) {
            switch (s.input[s.position]) {
                case '*':
                    ++s.position;
                    if (s.position < s.input.length && s.input[s.position] === '=') {
                        ++s.position;
                        return { tokenType: 114, offset: start, length: 3, modeStack: s.modeStack };
                    }
                    return { tokenType: 113, offset: start, length: 2, modeStack: s.modeStack };
                case '=':
                    ++s.position;
                    return { tokenType: 146, offset: start, length: 2, modeStack: s.modeStack };
                default:
                    break;
            }
        }
        return { tokenType: 101, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingGreaterThan(s) {
        let start = s.position;
        if (++s.position < s.input.length) {
            switch (s.input[s.position]) {
                case '>':
                    ++s.position;
                    if (s.position < s.input.length && s.input[s.position] === '=') {
                        ++s.position;
                        return { tokenType: 109, offset: start, length: 3, modeStack: s.modeStack };
                    }
                    return { tokenType: 108, offset: start, length: 2, modeStack: s.modeStack };
                case '=':
                    ++s.position;
                    return { tokenType: 137, offset: start, length: 2, modeStack: s.modeStack };
                default:
                    break;
            }
        }
        return { tokenType: 100, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingLessThan(s) {
        let start = s.position;
        if (++s.position < s.input.length) {
            switch (s.input[s.position]) {
                case '>':
                    ++s.position;
                    return { tokenType: 139, offset: start, length: 2, modeStack: s.modeStack };
                case '<':
                    ++s.position;
                    if (s.position < s.input.length) {
                        if (s.input[s.position] === '=') {
                            ++s.position;
                            return { tokenType: 107, offset: start, length: 3, modeStack: s.modeStack };
                        } else if (s.input[s.position] === '<') {
                            s.position -= 2;
                            let heredoc = scriptingHeredoc(s, start);
                            if (heredoc) {
                                return heredoc;
                            } else {
                                s.position += 2;
                            }
                        }
                    }
                    return { tokenType: 106, offset: start, length: 2, modeStack: s.modeStack };
                case '=':
                    ++s.position;
                    if (s.position < s.input.length && s.input[s.position] === '>') {
                        ++s.position;
                        return { tokenType: 142, offset: start, length: 3, modeStack: s.modeStack };
                    }
                    return { tokenType: 141, offset: start, length: 2, modeStack: s.modeStack };
                default:
                    break;
            }
        }
        return { tokenType: 99, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingExclamation(s) {
        let start = s.position;
        if (++s.position < s.input.length && s.input[s.position] === '=') {
            if (++s.position < s.input.length && s.input[s.position] === '=') {
                ++s.position;
                return { tokenType: 140, offset: start, length: 3, modeStack: s.modeStack };
            }
            return { tokenType: 139, offset: start, length: 2, modeStack: s.modeStack };
        }
        return { tokenType: 89, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingPlus(s) {
        let start = s.position;
        if (++s.position < s.input.length) {
            switch (s.input[s.position]) {
                case '=':
                    ++s.position;
                    return { tokenType: 112, offset: start, length: 2, modeStack: s.modeStack };
                case '+':
                    ++s.position;
                    return { tokenType: 135, offset: start, length: 2, modeStack: s.modeStack };
                default:
                    break;
            }
        }
        return { tokenType: 111, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingEquals(s) {
        let start = s.position;
        if (++s.position < s.input.length) {
            switch (s.input[s.position]) {
                case '=':
                    if (++s.position < s.input.length && s.input[s.position] === '=') {
                        ++s.position;
                        return { tokenType: 138, offset: start, length: 3, modeStack: s.modeStack };
                    }
                    return { tokenType: 136, offset: start, length: 2, modeStack: s.modeStack };
                case '>':
                    ++s.position;
                    return { tokenType: 132, offset: start, length: 2, modeStack: s.modeStack };
                default:
                    break;
            }
        }
        return { tokenType: 85, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingDot(s) {
        let start = s.position;
        if (++s.position < s.input.length) {
            let c = s.input[s.position];
            if (c === '=') {
                ++s.position;
                return { tokenType: 127, offset: start, length: 2, modeStack: s.modeStack };
            } else if (c === '.' && s.position + 1 < s.input.length && s.input[s.position + 1] === '.') {
                s.position += 2;
                return { tokenType: 134, offset: start, length: 3, modeStack: s.modeStack };
            } else if (c >= '0' && c <= '9') {
                return scriptingNumericStartingWithDotOrE(s, start, true);
            }
        }
        return { tokenType: 126, offset: start, length: 1, modeStack: s.modeStack };
    }
    function scriptingMinus(s) {
        let start = s.position;
        let modeStack = s.modeStack;
        if (++s.position < s.input.length) {
            switch (s.input[s.position]) {
                case '>':
                    ++s.position;
                    s.modeStack = s.modeStack.slice(0);
                    s.modeStack.push(2);
                    return { tokenType: 115, offset: start, length: 2, modeStack: modeStack };
                case '-':
                    ++s.position;
                    return { tokenType: 129, offset: start, length: 2, modeStack: modeStack };
                case '=':
                    ++s.position;
                    return { tokenType: 144, offset: start, length: 2, modeStack: modeStack };
                default:
                    break;
            }
        }
        return { tokenType: 143, offset: start, length: 1, modeStack: s.modeStack };
    }
})(Lexer = exports.Lexer || (exports.Lexer = {}));
function tokenTypeToString(type) {
    switch (type) {
        case 0:
            return 'Unknown';
        case 1:
            return 'EndOfFile';
        case 2:
            return 'Abstract';
        case 3:
            return 'Array';
        case 4:
            return 'As';
        case 5:
            return 'Break';
        case 6:
            return 'Callable';
        case 7:
            return 'Case';
        case 8:
            return 'Catch';
        case 9:
            return 'Class';
        case 10:
            return 'ClassConstant';
        case 11:
            return 'Clone';
        case 12:
            return 'Const';
        case 13:
            return 'Continue';
        case 14:
            return 'Declare';
        case 15:
            return 'Default';
        case 16:
            return 'Do';
        case 17:
            return 'Echo';
        case 18:
            return 'Else';
        case 19:
            return 'ElseIf';
        case 20:
            return 'Empty';
        case 21:
            return 'EndDeclare';
        case 22:
            return 'EndFor';
        case 23:
            return 'EndForeach';
        case 24:
            return 'EndIf';
        case 25:
            return 'EndSwitch';
        case 26:
            return 'EndWhile';
        case 27:
            return 'EndHeredoc';
        case 28:
            return 'Eval';
        case 29:
            return 'Exit';
        case 30:
            return 'Extends';
        case 31:
            return 'Final';
        case 32:
            return 'Finally';
        case 33:
            return 'For';
        case 34:
            return 'ForEach';
        case 35:
            return 'Function';
        case 36:
            return 'Global';
        case 37:
            return 'Goto';
        case 38:
            return 'HaltCompiler';
        case 39:
            return 'If';
        case 40:
            return 'Implements';
        case 41:
            return 'Include';
        case 42:
            return 'IncludeOnce';
        case 43:
            return 'InstanceOf';
        case 44:
            return 'InsteadOf';
        case 45:
            return 'Interface';
        case 46:
            return 'Isset';
        case 47:
            return 'List';
        case 48:
            return 'And';
        case 49:
            return 'Or';
        case 50:
            return 'Xor';
        case 51:
            return 'Namespace';
        case 52:
            return 'New';
        case 53:
            return 'Print';
        case 54:
            return 'Private';
        case 55:
            return 'Public';
        case 56:
            return 'Protected';
        case 57:
            return 'Require';
        case 58:
            return 'RequireOnce';
        case 59:
            return 'Return';
        case 60:
            return 'Static';
        case 61:
            return 'Switch';
        case 62:
            return 'Throw';
        case 63:
            return 'Trait';
        case 64:
            return 'Try';
        case 65:
            return 'Unset';
        case 66:
            return 'Use';
        case 67:
            return 'Var';
        case 68:
            return 'While';
        case 69:
            return 'Yield';
        case 70:
            return 'YieldFrom';
        case 71:
            return 'DirectoryConstant';
        case 72:
            return 'FileConstant';
        case 73:
            return 'LineConstant';
        case 74:
            return 'FunctionConstant';
        case 75:
            return 'MethodConstant';
        case 76:
            return 'NamespaceConstant';
        case 77:
            return 'TraitConstant';
        case 78:
            return 'StringLiteral';
        case 79:
            return 'FloatingLiteral';
        case 80:
            return 'EncapsulatedAndWhitespace';
        case 81:
            return 'Text';
        case 82:
            return 'IntegerLiteral';
        case 83:
            return 'Name';
        case 84:
            return 'VariableName';
        case 85:
            return 'Equals';
        case 86:
            return 'Tilde';
        case 87:
            return 'Colon';
        case 88:
            return 'Semicolon';
        case 89:
            return 'Exclamation';
        case 90:
            return 'Dollar';
        case 91:
            return 'ForwardSlash';
        case 92:
            return 'Percent';
        case 93:
            return 'Comma';
        case 94:
            return 'AtSymbol';
        case 95:
            return 'Backtick';
        case 96:
            return 'Question';
        case 97:
            return 'DoubleQuote';
        case 98:
            return 'SingleQuote';
        case 99:
            return 'LessThan';
        case 100:
            return 'GreaterThan';
        case 101:
            return 'Asterisk';
        case 102:
            return 'AmpersandAmpersand';
        case 103:
            return 'Ampersand';
        case 104:
            return 'AmpersandEquals';
        case 105:
            return 'CaretEquals';
        case 106:
            return 'LessThanLessThan';
        case 107:
            return 'LessThanLessThanEquals';
        case 108:
            return 'GreaterThanGreaterThan';
        case 109:
            return 'GreaterThanGreaterThanEquals';
        case 110:
            return 'BarEquals';
        case 111:
            return 'Plus';
        case 112:
            return 'PlusEquals';
        case 113:
            return 'AsteriskAsterisk';
        case 114:
            return 'AsteriskAsteriskEquals';
        case 115:
            return 'Arrow';
        case 116:
            return 'OpenBrace';
        case 117:
            return 'OpenBracket';
        case 118:
            return 'OpenParenthesis';
        case 119:
            return 'CloseBrace';
        case 120:
            return 'CloseBracket';
        case 121:
            return 'CloseParenthesis';
        case 122:
            return 'QuestionQuestion';
        case 123:
            return 'Bar';
        case 124:
            return 'BarBar';
        case 125:
            return 'Caret';
        case 126:
            return 'Dot';
        case 127:
            return 'DotEquals';
        case 128:
            return 'CurlyOpen';
        case 129:
            return 'MinusMinus';
        case 130:
            return 'ForwardslashEquals';
        case 131:
            return 'DollarCurlyOpen';
        case 132:
            return 'FatArrow';
        case 133:
            return 'ColonColon';
        case 134:
            return 'Ellipsis';
        case 135:
            return 'PlusPlus';
        case 136:
            return 'EqualsEquals';
        case 137:
            return 'GreaterThanEquals';
        case 138:
            return 'EqualsEqualsEquals';
        case 139:
            return 'ExclamationEquals';
        case 140:
            return 'ExclamationEqualsEquals';
        case 141:
            return 'LessThanEquals';
        case 142:
            return 'Spaceship';
        case 143:
            return 'Minus';
        case 144:
            return 'MinusEquals';
        case 145:
            return 'PercentEquals';
        case 146:
            return 'AsteriskEquals';
        case 147:
            return 'Backslash';
        case 148:
            return 'BooleanCast';
        case 149:
            return 'UnsetCast';
        case 150:
            return 'StringCast';
        case 151:
            return 'ObjectCast';
        case 152:
            return 'IntegerCast';
        case 153:
            return 'FloatCast';
        case 154:
            return 'StartHeredoc';
        case 155:
            return 'ArrayCast';
        case 156:
            return 'OpenTag';
        case 157:
            return 'OpenTagEcho';
        case 158:
            return 'CloseTag';
        case 159:
            return 'Comment';
        case 160:
            return 'DocumentComment';
        case 161:
            return 'Whitespace';
    }
}
exports.tokenTypeToString = tokenTypeToString;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const phpDoc_1 = __webpack_require__(97);
const symbol_1 = __webpack_require__(12);
const typeString_1 = __webpack_require__(29);
const util = __webpack_require__(4);
class SymbolReader {
    constructor(document, nameResolver) {
        this.document = document;
        this.nameResolver = nameResolver;
        this._uriHash = 0;
        this._transformStack = [new FileTransform(this.document.uri, this.document.nodeHashedLocation(this.document.tree))];
        this._uriHash = Math.abs(util.hash32(document.uri));
    }
    get symbol() {
        return this._transformStack[0].symbol;
    }
    preorder(node, spine) {
        let s;
        let parentNode = spine.length ? spine[spine.length - 1] : { phraseType: 0, children: [] };
        let parentTransform = this._transformStack[this._transformStack.length - 1];
        switch (node.phraseType) {
            case 60:
                this._transformStack.push(null);
                return false;
            case 120:
                {
                    let t = new NamespaceDefinitionTransform(this.document.nodeHashedLocation(node));
                    this._transformStack.push(t);
                    this.nameResolver.namespace = t.symbol;
                }
                break;
            case 124:
                this._transformStack.push(new NamespaceUseDeclarationTransform());
                break;
            case 123:
            case 126:
                this._transformStack.push(new NamespaceUseClauseListTransform(node.phraseType));
                break;
            case 122:
            case 125:
                {
                    let t = new NamespaceUseClauseTransform(node.phraseType, this.document.nodeHashedLocation(node));
                    this._transformStack.push(t);
                    this.nameResolver.rules.push(t.symbol);
                }
                break;
            case 119:
                this._transformStack.push(new NamespaceAliasingClause());
                break;
            case 43:
                this._transformStack.push(new ConstElementTransform(this.nameResolver, this.document.nodeHashedLocation(node), this.lastPhpDoc, this.lastPhpDocLocation));
                break;
            case 86:
                this._transformStack.push(new FunctionDeclarationTransform(this.nameResolver, this.document.nodeHashedLocation(node), this.lastPhpDoc, this.lastPhpDocLocation));
                break;
            case 88:
                this._transformStack.push(new FunctionDeclarationHeaderTransform());
                break;
            case 130:
                this._transformStack.push(new DelimiteredListTransform(130));
                break;
            case 129:
                this._transformStack.push(new ParameterDeclarationTransform(this.document.nodeHashedLocation(node), this.lastPhpDoc, this.lastPhpDocLocation, this.nameResolver));
                break;
            case 173:
                this._transformStack.push(new TypeDeclarationTransform());
                break;
            case 149:
                this._transformStack.push(new ReturnTypeTransform());
                break;
            case 87:
            case 114:
                this._transformStack.push(new FunctionDeclarationBodyTransform(node.phraseType));
                break;
            case 28:
                {
                    let t = new ClassDeclarationTransform(this.nameResolver, this.document.nodeHashedLocation(node), this.lastPhpDoc, this.lastPhpDocLocation);
                    this._transformStack.push(t);
                    this.nameResolver.pushClass(t.symbol);
                }
                break;
            case 30:
                this._transformStack.push(new ClassDeclarationHeaderTransform());
                break;
            case 23:
                this._transformStack.push(new ClassBaseClauseTransform());
                break;
            case 31:
                this._transformStack.push(new ClassInterfaceClauseTransform());
                break;
            case 142:
                if (parentTransform) {
                    this._transformStack.push(new DelimiteredListTransform(142));
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 29:
                this._transformStack.push(new TypeDeclarationBodyTransform(29));
                break;
            case 103:
                {
                    let t = new InterfaceDeclarationTransform(this.nameResolver, this.document.nodeHashedLocation(node), this.lastPhpDoc, this.lastPhpDocLocation);
                    this._transformStack.push(t);
                    this.nameResolver.pushClass(t.symbol);
                }
                break;
            case 105:
                this._transformStack.push(new InterfaceDeclarationHeaderTransform());
                break;
            case 102:
                this._transformStack.push(new InterfaceBaseClauseTransform());
                break;
            case 104:
                this._transformStack.push(new TypeDeclarationBodyTransform(104));
                break;
            case 165:
                this._transformStack.push(new TraitDeclarationTransform(this.nameResolver, this.document.nodeHashedLocation(node), this.lastPhpDoc, this.lastPhpDocLocation));
                break;
            case 167:
                this._transformStack.push(new TraitDeclarationHeaderTransform());
                break;
            case 166:
                this._transformStack.push(new TypeDeclarationBodyTransform(166));
                break;
            case 25:
                this._transformStack.push(new FieldDeclarationTransform(25));
                break;
            case 27:
                this._transformStack.push(new DelimiteredListTransform(27));
                break;
            case 26:
                this._transformStack.push(new ClassConstantElementTransform(this.nameResolver, this.document.nodeHashedLocation(node), this.lastPhpDoc, this.lastPhpDocLocation));
                break;
            case 137:
                this._transformStack.push(new FieldDeclarationTransform(137));
                break;
            case 139:
                this._transformStack.push(new DelimiteredListTransform(139));
                break;
            case 138:
                this._transformStack.push(new PropertyElementTransform(this.nameResolver, this.document.nodeHashedLocation(node), this.lastPhpDoc, this.lastPhpDocLocation));
                break;
            case 140:
                this._transformStack.push(new PropertyInitialiserTransform());
                break;
            case 170:
                this._transformStack.push(new TraitUseClauseTransform());
                break;
            case 113:
                this._transformStack.push(new MethodDeclarationTransform(this.nameResolver, this.document.nodeHashedLocation(node), this.lastPhpDoc, this.lastPhpDocLocation));
                break;
            case 115:
                this._transformStack.push(new MethodDeclarationHeaderTransform());
                break;
            case 95:
                if (parentNode.phraseType === 115 || parentNode.phraseType === 26) {
                    this._transformStack.push(new IdentifierTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 110:
                this._transformStack.push(new MemberModifierListTransform());
                break;
            case 2:
                {
                    let t = new AnonymousClassDeclarationTransform(this.document.nodeHashedLocation(node), this.document.createAnonymousName(node));
                    this._transformStack.push(t);
                    this.nameResolver.pushClass(t.symbol);
                }
                break;
            case 3:
                this._transformStack.push(new AnonymousClassDeclarationHeaderTransform());
                break;
            case 4:
                this._transformStack.push(new AnonymousFunctionCreationExpressionTransform(this.document.nodeHashedLocation(node), this.document.createAnonymousName(node)));
                break;
            case 5:
                this._transformStack.push(new AnonymousFunctionHeaderTransform());
                break;
            case 6:
                this._transformStack.push(new AnonymousFunctionUseClauseTransform());
                break;
            case 36:
                this._transformStack.push(new DelimiteredListTransform(36));
                break;
            case 7:
                this._transformStack.push(new AnonymousFunctionUseVariableTransform(this.document.nodeHashedLocation(node)));
                break;
            case 156:
                this._transformStack.push(new SimpleVariableTransform(this.document.nodeHashedLocation(node)));
                break;
            case 85:
                if (node.children.length) {
                    let name = this.document.nodeText(node.children[0]).toLowerCase();
                    if (name === 'define' || name === '\\define') {
                        this._transformStack.push(new DefineFunctionCallExpressionTransform(this.document.nodeHashedLocation(node)));
                        break;
                    }
                }
                this._transformStack.push(null);
                break;
            case 8:
                if (parentNode.phraseType === 85 && parentTransform) {
                    this._transformStack.push(new DelimiteredListTransform(8));
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 84:
                if (parentTransform) {
                    this._transformStack.push(new FullyQualifiedNameTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 144:
                if (parentTransform) {
                    this._transformStack.push(new RelativeQualifiedNameTransform(this.nameResolver));
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 141:
                if (parentTransform) {
                    this._transformStack.push(new QualifiedNameTransform(this.nameResolver));
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 121:
                if (parentTransform) {
                    this._transformStack.push(new NamespaceNameTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case undefined:
                if (node.tokenType === 160) {
                    this.lastPhpDoc = phpDoc_1.PhpDocParser.parse(this.document.nodeText(node));
                    this.lastPhpDocLocation = this.document.nodeHashedLocation(node);
                } else if (node.tokenType === 119) {
                    this.lastPhpDoc = null;
                    this.lastPhpDocLocation = null;
                } else if (node.tokenType === 84 && parentNode.phraseType === 20) {
                    for (let n = this._transformStack.length - 1; n > -1; --n) {
                        if (this._transformStack[n]) {
                            this._transformStack[n].push(new CatchClauseVariableNameTransform(this.document.tokenText(node), this.document.nodeHashedLocation(node)));
                            break;
                        }
                    }
                } else if (parentTransform && node.tokenType > 1 && node.tokenType < 85) {
                    parentTransform.push(new TokenTransform(node, this.document));
                }
                break;
            default:
                if (parentNode.phraseType === 43 || parentNode.phraseType === 26 || parentNode.phraseType === 129 || parentNode.phraseType === 8 && parentTransform) {
                    this._transformStack.push(new DefaultNodeTransform(node.phraseType, this.document.nodeText(node)));
                } else {
                    this._transformStack.push(null);
                }
                break;
        }
        return true;
    }
    postorder(node, spine) {
        if (!node.phraseType) {
            return;
        }
        let transform = this._transformStack.pop();
        if (!transform) {
            return;
        }
        for (let n = this._transformStack.length - 1; n > -1; --n) {
            if (this._transformStack[n]) {
                this._transformStack[n].push(transform);
                break;
            }
        }
        switch (node.phraseType) {
            case 30:
            case 105:
            case 3:
            case 88:
            case 115:
            case 167:
            case 5:
                this.lastPhpDoc = null;
                this.lastPhpDocLocation = null;
                break;
            default:
                break;
        }
    }
}
exports.SymbolReader = SymbolReader;
class UniqueSymbolCollection {
    constructor() {
        this._symbols = [];
        this._varMap = Object.assign({}, UniqueSymbolCollection._inbuilt);
    }
    get length() {
        return this._symbols.length;
    }
    push(s) {
        if (s.kind & (128 | 256)) {
            if (this._varMap[s.name] === undefined) {
                this._varMap[s.name] = true;
                this._symbols.push(s);
            }
        } else {
            this._symbols.push(s);
        }
    }
    pushMany(symbols) {
        for (let n = 0, l = symbols.length; n < l; ++n) {
            this.push(symbols[n]);
        }
    }
    toArray() {
        return this._symbols;
    }
}
UniqueSymbolCollection._inbuilt = {
    '$GLOBALS': true,
    '$_SERVER': true,
    '$_GET': true,
    '$_POST': true,
    '$_FILES': true,
    '$_REQUEST': true,
    '$_SESSION': true,
    '$_ENV': true,
    '$_COOKIE': true,
    '$php_errormsg': true,
    '$HTTP_RAW_POST_DATA': true,
    '$http_response_header': true,
    '$argc': true,
    '$argv': true,
    '$this': true
};
class FileTransform {
    constructor(uri, location) {
        this._symbol = symbol_1.PhpSymbol.create(4096, uri, location);
        this._children = new UniqueSymbolCollection();
    }
    push(transform) {
        let s = transform.symbol;
        if (s) {
            this._children.push(s);
            return;
        }
        let symbols = transform.symbols;
        if (symbols) {
            this._children.pushMany(symbols);
        }
    }
    get symbol() {
        this._symbol.children = this._children.toArray();
        return this._symbol;
    }
}
class DelimiteredListTransform {
    constructor(phraseType) {
        this.phraseType = phraseType;
        this.transforms = [];
    }
    push(transform) {
        this.transforms.push(transform);
    }
}
class TokenTransform {
    constructor(token, doc) {
        this.token = token;
        this.doc = doc;
    }
    push(transform) {}
    get text() {
        return this.doc.tokenText(this.token);
    }
    get tokenType() {
        return this.token.tokenType;
    }
    get location() {
        return this.doc.nodeHashedLocation(this.token);
    }
}
class NamespaceNameTransform {
    constructor() {
        this.phraseType = 121;
        this._parts = [];
    }
    push(transform) {
        if (transform.tokenType === 83) {
            this._parts.push(transform.text);
        }
    }
    get text() {
        return this._parts.join('\\');
    }
}
class QualifiedNameTransform {
    constructor(nameResolver) {
        this.nameResolver = nameResolver;
        this.phraseType = 141;
        this.name = '';
        this.unresolved = '';
    }
    push(transform) {
        if (transform.phraseType === 121) {
            this.unresolved = transform.text;
            this.name = this.nameResolver.resolveNotFullyQualified(this.unresolved);
        }
    }
}
class RelativeQualifiedNameTransform {
    constructor(nameResolver) {
        this.nameResolver = nameResolver;
        this.phraseType = 144;
        this.name = '';
        this.unresolved = '';
    }
    push(transform) {
        if (transform.phraseType === 121) {
            this.unresolved = transform.text;
            this.name = this.nameResolver.resolveRelative(this.unresolved);
        }
    }
}
class FullyQualifiedNameTransform {
    constructor() {
        this.phraseType = 84;
        this.name = '';
        this.unresolved = '';
    }
    push(transform) {
        if (transform.phraseType === 121) {
            this.name = this.unresolved = transform.text;
        }
    }
}
class CatchClauseVariableNameTransform {
    constructor(name, location) {
        this.tokenType = 84;
        this.symbol = symbol_1.PhpSymbol.create(256, name, location);
    }
    push(transform) {}
}
class ParameterDeclarationTransform {
    constructor(location, doc, docLocation, nameResolver) {
        this.phraseType = 129;
        this.symbol = symbol_1.PhpSymbol.create(128, '', location);
        this._doc = doc;
        this._docLocation = docLocation;
        this._nameResolver = nameResolver;
    }
    push(transform) {
        if (transform.phraseType === 173) {
            this.symbol.type = transform.type;
        } else if (transform.tokenType === 103) {
            this.symbol.modifiers |= 1024;
        } else if (transform.tokenType === 134) {
            this.symbol.modifiers |= 2048;
        } else if (transform.tokenType === 84) {
            this.symbol.name = transform.text;
            SymbolReader.assignPhpDocInfoToSymbol(this.symbol, this._doc, this._docLocation, this._nameResolver);
        } else {
            this.symbol.value = transform.text;
        }
    }
}
class DefineFunctionCallExpressionTransform {
    constructor(location) {
        this.phraseType = 85;
        this.symbol = symbol_1.PhpSymbol.create(8, '', location);
    }
    push(transform) {
        if (transform.phraseType === 8) {
            let arg1, arg2;
            [arg1, arg2] = transform.transforms;
            if (arg1 && arg1.tokenType === 78) {
                this.symbol.name = arg1.text.slice(1, -1);
            }
            if (arg2 && (arg2.tokenType === 79 || arg2.tokenType === 82 || arg2.tokenType === 78)) {
                this.symbol.value = arg2.text;
            }
            if (this.symbol.name && this.symbol.name[0] === '\\') {
                this.symbol.name = this.symbol.name.slice(1);
            }
        }
    }
}
class SimpleVariableTransform {
    constructor(location) {
        this.phraseType = 156;
        this.symbol = symbol_1.PhpSymbol.create(256, '', location);
    }
    push(transform) {
        if (transform.tokenType === 84) {
            this.symbol.name = transform.text;
        }
    }
}
class AnonymousClassDeclarationTransform {
    constructor(location, name) {
        this.phraseType = 2;
        this.symbol = symbol_1.PhpSymbol.create(1, name, location);
        this.symbol.modifiers = 512;
        this.symbol.children = [];
        this.symbol.associated = [];
    }
    push(transform) {
        if (transform.phraseType === 3) {
            if (transform.base) {
                this.symbol.associated.push(transform.base);
            }
            Array.prototype.push.apply(this.symbol.associated, transform.interfaces);
        } else if (transform.phraseType === 29) {
            Array.prototype.push.apply(this.symbol.children, symbol_1.PhpSymbol.setScope(transform.declarations, this.symbol.name));
            Array.prototype.push.apply(this.symbol.associated, transform.useTraits);
        }
    }
}
class TypeDeclarationBodyTransform {
    constructor(phraseType) {
        this.phraseType = phraseType;
        this.declarations = [];
        this.useTraits = [];
    }
    push(transform) {
        switch (transform.phraseType) {
            case 25:
            case 137:
                Array.prototype.push.apply(this.declarations, transform.symbols);
                break;
            case 113:
                this.declarations.push(transform.symbol);
                break;
            case 170:
                Array.prototype.push.apply(this.useTraits, transform.symbols);
                break;
            default:
                break;
        }
    }
}
class AnonymousClassDeclarationHeaderTransform {
    constructor() {
        this.phraseType = 3;
        this.interfaces = [];
    }
    push(transform) {
        if (transform.phraseType === 23) {
            this.base = transform.symbol;
        } else if (transform.phraseType === 31) {
            this.interfaces = transform.symbols;
        }
    }
}
class AnonymousFunctionCreationExpressionTransform {
    constructor(location, name) {
        this.phraseType = 4;
        this._symbol = symbol_1.PhpSymbol.create(64, name, location);
        this._symbol.modifiers = 512;
        this._children = new UniqueSymbolCollection();
    }
    push(transform) {
        if (transform.phraseType === 5) {
            this._symbol.modifiers |= transform.modifier;
            this._children.pushMany(transform.parameters);
            this._children.pushMany(transform.uses);
            this._symbol.type = transform.returnType;
        } else if (transform.phraseType === 87) {
            this._children.pushMany(transform.symbols);
        }
    }
    get symbol() {
        this._symbol.children = symbol_1.PhpSymbol.setScope(this._children.toArray(), this._symbol.name);
        return this._symbol;
    }
}
class AnonymousFunctionHeaderTransform {
    constructor() {
        this.phraseType = 5;
        this.modifier = 0;
        this.returnType = '';
        this.parameters = [];
        this.uses = [];
    }
    push(transform) {
        if (transform.tokenType === 103) {
            this.modifier |= 1024;
        } else if (transform.tokenType === 60) {
            this.modifier |= 32;
        } else if (transform.phraseType === 130) {
            let transforms = transform.transforms;
            for (let n = 0; n < transforms.length; ++n) {
                this.parameters.push(transforms[n].symbol);
            }
        } else if (transform.phraseType === 6) {
            let symbols = transform.symbols;
            for (let n = 0; n < symbols.length; ++n) {
                this.uses.push(symbols[n]);
            }
        } else if (transform.phraseType === 149) {
            this.returnType = transform.type;
        }
    }
}
class FunctionDeclarationBodyTransform {
    constructor(phraseType) {
        this.phraseType = phraseType;
        this._value = new UniqueSymbolCollection();
    }
    push(transform) {
        switch (transform.phraseType) {
            case 156:
            case 4:
            case 2:
            case 85:
                this._value.push(transform.symbol);
                break;
            case undefined:
                if (transform instanceof CatchClauseVariableNameTransform) {
                    this._value.push(transform.symbol);
                }
                break;
            default:
                break;
        }
    }
    get symbols() {
        return this._value.toArray();
    }
}
class AnonymousFunctionUseClauseTransform {
    constructor() {
        this.phraseType = 6;
        this.symbols = [];
    }
    push(transform) {
        if (transform.phraseType === 36) {
            let transforms = transform.transforms;
            for (let n = 0; n < transforms.length; ++n) {
                this.symbols.push(transforms[n].symbol);
            }
        }
    }
}
class AnonymousFunctionUseVariableTransform {
    constructor(location) {
        this.phraseType = 7;
        this.symbol = symbol_1.PhpSymbol.create(256, '', location);
        this.symbol.modifiers = 4096;
    }
    push(transform) {
        if (transform.tokenType === 84) {
            this.symbol.name = transform.text;
        } else if (transform.tokenType === 103) {
            this.symbol.modifiers |= 1024;
        }
    }
}
class InterfaceDeclarationTransform {
    constructor(nameResolver, location, doc, docLocation) {
        this.nameResolver = nameResolver;
        this.phraseType = 103;
        this.symbol = symbol_1.PhpSymbol.create(2, '', location);
        SymbolReader.assignPhpDocInfoToSymbol(this.symbol, doc, docLocation, nameResolver);
        this.symbol.children = [];
        this.symbol.associated = [];
    }
    push(transform) {
        if (transform.phraseType === 105) {
            this.symbol.name = this.nameResolver.resolveRelative(transform.name);
            this.symbol.associated = transform.extends;
        } else if (transform.phraseType === 104) {
            Array.prototype.push.apply(this.symbol.children, symbol_1.PhpSymbol.setScope(transform.declarations, this.symbol.name));
        }
    }
}
class ConstElementTransform {
    constructor(nameResolver, location, doc, docLocation) {
        this.nameResolver = nameResolver;
        this.phraseType = 43;
        this.symbol = symbol_1.PhpSymbol.create(8, '', location);
        this.symbol.scope = this.nameResolver.namespaceName;
        this._doc = doc;
        this._docLocation = docLocation;
    }
    push(transform) {
        if (transform.tokenType === 83) {
            this.symbol.name = this.nameResolver.resolveRelative(transform.text);
            SymbolReader.assignPhpDocInfoToSymbol(this.symbol, this._doc, this._docLocation, this.nameResolver);
        } else {
            this.symbol.value = transform.text;
        }
    }
}
class TraitDeclarationTransform {
    constructor(nameResolver, location, doc, docLocation) {
        this.nameResolver = nameResolver;
        this.phraseType = 165;
        this.symbol = symbol_1.PhpSymbol.create(4, '', location);
        SymbolReader.assignPhpDocInfoToSymbol(this.symbol, doc, docLocation, nameResolver);
        this.symbol.children = [];
        this.symbol.associated = [];
    }
    push(transform) {
        if (transform.phraseType === 167) {
            this.symbol.name = this.nameResolver.resolveRelative(transform.name);
        } else if (transform.phraseType === 166) {
            Array.prototype.push.apply(this.symbol.children, symbol_1.PhpSymbol.setScope(transform.declarations, this.symbol.name));
            Array.prototype.push.apply(this.symbol.associated, transform.useTraits);
        }
    }
}
class TraitDeclarationHeaderTransform {
    constructor() {
        this.phraseType = 167;
        this.name = '';
    }
    push(transform) {
        if (transform.tokenType === 83) {
            this.name = transform.text;
        }
    }
}
class InterfaceBaseClauseTransform {
    constructor() {
        this.phraseType = 102;
        this.symbols = [];
    }
    push(transform) {
        if (transform.phraseType === 142) {
            let transforms = transform.transforms;
            for (let n = 0; n < transforms.length; ++n) {
                this.symbols.push(symbol_1.PhpSymbol.create(2, transforms[n].name));
            }
        }
    }
}
class InterfaceDeclarationHeaderTransform {
    constructor() {
        this.phraseType = 105;
        this.name = '';
        this.extends = [];
    }
    push(transform) {
        if (transform.tokenType === 83) {
            this.name = transform.text;
        } else if (transform.phraseType === 102) {
            this.extends = transform.symbols;
        }
    }
}
class TraitUseClauseTransform {
    constructor() {
        this.phraseType = 170;
        this.symbols = [];
    }
    push(transform) {
        if (transform.phraseType === 142) {
            let transforms = transform.transforms;
            for (let n = 0; n < transforms.length; ++n) {
                this.symbols.push(symbol_1.PhpSymbol.create(4, transforms[n].name));
            }
        }
    }
}
class ClassInterfaceClauseTransform {
    constructor() {
        this.phraseType = 31;
        this.symbols = [];
    }
    push(transform) {
        if (transform.phraseType === 142) {
            let transforms = transform.transforms;
            for (let n = 0; n < transforms.length; ++n) {
                this.symbols.push(symbol_1.PhpSymbol.create(2, transforms[n].name));
            }
        }
    }
}
class NamespaceDefinitionTransform {
    constructor(location) {
        this.phraseType = 120;
        this._symbol = symbol_1.PhpSymbol.create(512, '', location);
        this._children = new UniqueSymbolCollection();
    }
    push(transform) {
        if (transform.phraseType === 121) {
            this._symbol.name = transform.text;
        } else {
            let s = transform.symbol;
            if (s) {
                this._children.push(s);
                return;
            }
            let symbols = transform.symbols;
            if (symbols) {
                this._children.pushMany(symbols);
            }
        }
    }
    get symbol() {
        if (this._children.length > 0) {
            this._symbol.children = this._children.toArray();
        }
        return this._symbol;
    }
}
class ClassDeclarationTransform {
    constructor(nameResolver, location, doc, docLocation) {
        this.nameResolver = nameResolver;
        this.phraseType = 28;
        this.symbol = symbol_1.PhpSymbol.create(1, '', location);
        this.symbol.children = [];
        this.symbol.associated = [];
        SymbolReader.assignPhpDocInfoToSymbol(this.symbol, doc, docLocation, nameResolver);
    }
    push(transform) {
        if (transform instanceof ClassDeclarationHeaderTransform) {
            this.symbol.modifiers = transform.modifier;
            this.symbol.name = this.nameResolver.resolveRelative(transform.name);
            if (transform.extends) {
                this.symbol.associated.push(transform.extends);
            }
            Array.prototype.push.apply(this.symbol.associated, transform.implements);
        } else if (transform.phraseType === 29) {
            Array.prototype.push.apply(this.symbol.children, symbol_1.PhpSymbol.setScope(transform.declarations, this.symbol.name));
            Array.prototype.push.apply(this.symbol.associated, transform.useTraits);
        }
    }
}
class ClassDeclarationHeaderTransform {
    constructor() {
        this.phraseType = 30;
        this.modifier = 0;
        this.name = '';
        this.implements = [];
    }
    push(transform) {
        if (transform.tokenType === 2) {
            this.modifier = 16;
        } else if (transform.tokenType === 31) {
            this.modifier = 8;
        } else if (transform.tokenType === 83) {
            this.name = transform.text;
        } else if (transform.phraseType === 23) {
            this.extends = transform.symbol;
        } else if (transform.phraseType === 31) {
            this.implements = transform.symbols;
        }
    }
}
class ClassBaseClauseTransform {
    constructor() {
        this.phraseType = 23;
        this.symbol = symbol_1.PhpSymbol.create(1, '');
    }
    push(transform) {
        switch (transform.phraseType) {
            case 84:
            case 144:
            case 141:
                this.symbol.name = transform.name;
                break;
            default:
                break;
        }
    }
}
class MemberModifierListTransform {
    constructor() {
        this.phraseType = 110;
        this.modifiers = 0;
    }
    push(transform) {
        switch (transform.tokenType) {
            case 55:
                this.modifiers |= 1;
                break;
            case 56:
                this.modifiers |= 2;
                break;
            case 54:
                this.modifiers |= 4;
                break;
            case 2:
                this.modifiers |= 16;
                break;
            case 31:
                this.modifiers |= 8;
                break;
            case 60:
                this.modifiers |= 32;
                break;
            default:
                break;
        }
    }
}
class ClassConstantElementTransform {
    constructor(nameResolver, location, doc, docLocation) {
        this.nameResolver = nameResolver;
        this.phraseType = 26;
        this.symbol = symbol_1.PhpSymbol.create(1024, '', location);
        this.symbol.modifiers = 32;
        this._doc = doc;
        this._docLocation = docLocation;
    }
    push(transform) {
        if (transform.phraseType === 95) {
            this.symbol.name = transform.text;
            SymbolReader.assignPhpDocInfoToSymbol(this.symbol, this._doc, this._docLocation, this.nameResolver);
        } else {
            this.symbol.value = transform.text;
        }
    }
}
class MethodDeclarationTransform {
    constructor(nameResolver, location, doc, docLocation) {
        this.nameResolver = nameResolver;
        this.phraseType = 113;
        this._symbol = symbol_1.PhpSymbol.create(32, '', location);
        SymbolReader.assignPhpDocInfoToSymbol(this._symbol, doc, docLocation, nameResolver);
        this._children = new UniqueSymbolCollection();
    }
    push(transform) {
        if (transform instanceof MethodDeclarationHeaderTransform) {
            this._symbol.modifiers = transform.modifiers;
            this._symbol.name = transform.name;
            this._children.pushMany(transform.parameters);
            this._symbol.type = transform.returnType;
        } else if (transform.phraseType === 114) {
            this._children.pushMany(transform.symbols);
        }
    }
    get symbol() {
        this._symbol.children = symbol_1.PhpSymbol.setScope(this._children.toArray(), this._symbol.name);
        return this._symbol;
    }
}
class ReturnTypeTransform {
    constructor() {
        this.phraseType = 149;
        this.type = '';
    }
    push(transform) {
        if (transform.phraseType === 173) {
            this.type = transform.type;
        }
    }
}
class TypeDeclarationTransform {
    constructor() {
        this.phraseType = 173;
        this.type = '';
    }
    push(transform) {
        switch (transform.phraseType) {
            case 84:
            case 144:
            case 141:
                if (TypeDeclarationTransform._scalarTypes[transform.unresolved.toLowerCase()] === 1) {
                    this.type = transform.unresolved;
                } else {
                    this.type = transform.name;
                }
                break;
            case undefined:
                if (transform.tokenType === 6 || transform.tokenType === 3) {
                    this.type = transform.text;
                }
                break;
            default:
                break;
        }
    }
}
TypeDeclarationTransform._scalarTypes = { 'int': 1, 'string': 1, 'bool': 1, 'float': 1, 'iterable': 1 };
class IdentifierTransform {
    constructor() {
        this.phraseType = 95;
        this.text = '';
    }
    push(transform) {
        this.text = transform.text;
    }
}
class MethodDeclarationHeaderTransform {
    constructor() {
        this.phraseType = 115;
        this.modifiers = 1;
        this.name = '';
        this.returnType = '';
        this.parameters = [];
    }
    push(transform) {
        switch (transform.phraseType) {
            case 110:
                this.modifiers = transform.modifiers;
                if (!(this.modifiers & (1 | 2 | 4))) {
                    this.modifiers |= 1;
                }
                break;
            case 95:
                this.name = transform.text;
                break;
            case 130:
                {
                    let transforms = transform.transforms;
                    for (let n = 0; n < transforms.length; ++n) {
                        this.parameters.push(transforms[n].symbol);
                    }
                }
                break;
            case 149:
                this.returnType = transform.type;
                break;
            default:
                break;
        }
    }
}
class PropertyInitialiserTransform {
    constructor() {
        this.phraseType = 140;
        this.text = '';
    }
    push(transform) {
        this.text = transform.text;
    }
}
class PropertyElementTransform {
    constructor(nameResolver, location, doc, docLocation) {
        this.nameResolver = nameResolver;
        this.phraseType = 138;
        this.symbol = symbol_1.PhpSymbol.create(16, '', location);
        this._doc = doc;
        this._docLocation = docLocation;
    }
    push(transform) {
        if (transform.tokenType === 84) {
            this.symbol.name = transform.text;
            SymbolReader.assignPhpDocInfoToSymbol(this.symbol, this._doc, this._docLocation, this.nameResolver);
        } else if (transform.phraseType === 140) {
            this.symbol.value = transform.text;
        }
    }
}
class FieldDeclarationTransform {
    constructor(phraseType) {
        this.phraseType = phraseType;
        this._modifier = 1;
        this.symbols = [];
    }
    push(transform) {
        if (transform.phraseType === 110) {
            this._modifier = transform.modifiers;
        } else if (transform.phraseType === 139 || transform.phraseType === 27) {
            let transforms = transform.transforms;
            let s;
            for (let n = 0; n < transforms.length; ++n) {
                s = transforms[n].symbol;
                if (s) {
                    s.modifiers |= this._modifier;
                    this.symbols.push(s);
                }
            }
        }
    }
}
class FunctionDeclarationTransform {
    constructor(nameResolver, location, phpDoc, phpDocLocation) {
        this.nameResolver = nameResolver;
        this.phraseType = 86;
        this._symbol = symbol_1.PhpSymbol.create(64, '', location);
        SymbolReader.assignPhpDocInfoToSymbol(this._symbol, phpDoc, phpDocLocation, nameResolver);
        this._children = new UniqueSymbolCollection();
    }
    push(transform) {
        if (transform instanceof FunctionDeclarationHeaderTransform) {
            this._symbol.name = this.nameResolver.resolveRelative(transform.name);
            this._children.pushMany(transform.parameters);
            this._symbol.type = transform.returnType;
        } else if (transform.phraseType === 87) {
            this._children.pushMany(transform.symbols);
        }
    }
    get symbol() {
        this._symbol.children = symbol_1.PhpSymbol.setScope(this._children.toArray(), this._symbol.name);
        return this._symbol;
    }
}
class FunctionDeclarationHeaderTransform {
    constructor() {
        this.phraseType = 88;
        this.name = '';
        this.returnType = '';
        this.parameters = [];
    }
    push(transform) {
        if (transform.tokenType === 83) {
            this.name = transform.text;
        } else if (transform.phraseType === 130) {
            let transforms = transform.transforms;
            for (let n = 0; n < transforms.length; ++n) {
                this.parameters.push(transforms[n].symbol);
            }
        } else if (transform.phraseType === 149) {
            this.returnType = transform.type;
        }
    }
}
class DefaultNodeTransform {
    constructor(phraseType, text) {
        this.phraseType = phraseType;
        this.text = text;
    }
    push(transform) {}
}
(function (SymbolReader) {
    function assignPhpDocInfoToSymbol(s, doc, docLocation, nameResolver) {
        if (!doc) {
            return s;
        }
        let tag;
        switch (s.kind) {
            case 16:
            case 1024:
                tag = doc.findVarTag(s.name);
                if (tag) {
                    s.doc = symbol_1.PhpSymbolDoc.create(tag.description, typeString_1.TypeString.nameResolve(tag.typeString, nameResolver));
                }
                break;
            case 32:
            case 64:
                tag = doc.returnTag;
                s.doc = symbol_1.PhpSymbolDoc.create(doc.text);
                if (tag) {
                    s.doc.type = typeString_1.TypeString.nameResolve(tag.typeString, nameResolver);
                }
                break;
            case 128:
                tag = doc.findParamTag(s.name);
                if (tag) {
                    s.doc = symbol_1.PhpSymbolDoc.create(tag.description, typeString_1.TypeString.nameResolve(tag.typeString, nameResolver));
                }
                break;
            case 1:
            case 4:
            case 2:
                s.doc = symbol_1.PhpSymbolDoc.create(doc.text);
                if (!s.children) {
                    s.children = [];
                }
                Array.prototype.push.apply(s.children, phpDocMembers(doc, docLocation, nameResolver));
                break;
            default:
                break;
        }
        return s;
    }
    SymbolReader.assignPhpDocInfoToSymbol = assignPhpDocInfoToSymbol;
    function phpDocMembers(phpDoc, phpDocLoc, nameResolver) {
        let magic = phpDoc.propertyTags;
        let symbols = [];
        for (let n = 0, l = magic.length; n < l; ++n) {
            symbols.push(propertyTagToSymbol(magic[n], phpDocLoc, nameResolver));
        }
        magic = phpDoc.methodTags;
        for (let n = 0, l = magic.length; n < l; ++n) {
            symbols.push(methodTagToSymbol(magic[n], phpDocLoc, nameResolver));
        }
        return symbols;
    }
    SymbolReader.phpDocMembers = phpDocMembers;
    function methodTagToSymbol(tag, phpDocLoc, nameResolver) {
        let s = symbol_1.PhpSymbol.create(32, tag.name, phpDocLoc);
        s.modifiers = 256 | 1;
        s.doc = symbol_1.PhpSymbolDoc.create(tag.description, typeString_1.TypeString.nameResolve(tag.typeString, nameResolver));
        s.children = [];
        if (tag.isStatic) {
            s.modifiers |= 32;
        }
        if (!tag.parameters) {
            return s;
        }
        for (let n = 0, l = tag.parameters.length; n < l; ++n) {
            s.children.push(magicMethodParameterToSymbol(tag.parameters[n], phpDocLoc, nameResolver));
        }
        return s;
    }
    function magicMethodParameterToSymbol(p, phpDocLoc, nameResolver) {
        let s = symbol_1.PhpSymbol.create(128, p.name, phpDocLoc);
        s.modifiers = 256;
        s.doc = symbol_1.PhpSymbolDoc.create(undefined, typeString_1.TypeString.nameResolve(p.typeString, nameResolver));
        return s;
    }
    function propertyTagToSymbol(t, phpDocLoc, nameResolver) {
        let s = symbol_1.PhpSymbol.create(16, t.name, phpDocLoc);
        s.modifiers = magicPropertyModifier(t) | 256 | 1;
        s.doc = symbol_1.PhpSymbolDoc.create(t.description, typeString_1.TypeString.nameResolve(t.typeString, nameResolver));
        return s;
    }
    function magicPropertyModifier(t) {
        switch (t.tagName) {
            case '@property-read':
                return 64;
            case '@property-write':
                return 128;
            default:
                return 0;
        }
    }
    function modifierListToSymbolModifier(phrase) {
        if (!phrase) {
            return 0;
        }
        let flag = 0;
        let tokens = phrase.children || [];
        for (let n = 0, l = tokens.length; n < l; ++n) {
            flag |= modifierTokenToSymbolModifier(tokens[n]);
        }
        return flag;
    }
    SymbolReader.modifierListToSymbolModifier = modifierListToSymbolModifier;
    function modifierTokenToSymbolModifier(t) {
        switch (t.tokenType) {
            case 55:
                return 1;
            case 56:
                return 2;
            case 54:
                return 4;
            case 2:
                return 16;
            case 31:
                return 8;
            case 60:
                return 32;
            default:
                return 0;
        }
    }
    SymbolReader.modifierTokenToSymbolModifier = modifierTokenToSymbolModifier;
})(SymbolReader = exports.SymbolReader || (exports.SymbolReader = {}));
class NamespaceUseClauseListTransform {
    constructor(phraseType) {
        this.phraseType = phraseType;
        this.symbols = [];
    }
    push(transform) {
        if (transform.phraseType === 122 || transform.phraseType === 125) {
            this.symbols.push(transform.symbol);
        }
    }
}
class NamespaceUseDeclarationTransform {
    constructor() {
        this.phraseType = 124;
        this._kind = 1;
        this._prefix = '';
        this.symbols = [];
    }
    push(transform) {
        if (transform.tokenType === 12) {
            this._kind = 8;
        } else if (transform.tokenType === 35) {
            this._kind = 64;
        } else if (transform.phraseType === 121) {
            this._prefix = transform.text;
        } else if (transform.phraseType === 126) {
            this.symbols = transform.symbols;
            let s;
            let prefix = this._prefix ? this._prefix + '\\' : '';
            for (let n = 0; n < this.symbols.length; ++n) {
                s = this.symbols[n];
                s.associated[0].name = prefix + s.associated[0].name;
                if (!s.kind) {
                    s.kind = s.associated[0].kind = this._kind;
                }
            }
        } else if (transform.phraseType === 123) {
            this.symbols = transform.symbols;
            let s;
            for (let n = 0; n < this.symbols.length; ++n) {
                s = this.symbols[n];
                s.kind = s.associated[0].kind = this._kind;
            }
        }
    }
}
class NamespaceUseClauseTransform {
    constructor(phraseType, location) {
        this.phraseType = phraseType;
        this.symbol = symbol_1.PhpSymbol.create(0, '', location);
        this.symbol.modifiers = 4096;
        this.symbol.associated = [];
    }
    push(transform) {
        if (transform.tokenType === 35) {
            this.symbol.kind = 64;
        } else if (transform.tokenType === 12) {
            this.symbol.kind = 8;
        } else if (transform.phraseType === 121) {
            let text = transform.text;
            this.symbol.name = symbol_1.PhpSymbol.notFqn(text);
            this.symbol.associated.push(symbol_1.PhpSymbol.create(this.symbol.kind, text));
        } else if (transform.phraseType === 119) {
            this.symbol.name = transform.text;
            this.symbol.location = transform.location;
        }
    }
}
class NamespaceAliasingClause {
    constructor() {
        this.phraseType = 119;
        this.text = '';
    }
    push(transform) {
        if (transform.tokenType === 83) {
            this.text = transform.text;
            this.location = transform.location;
        }
    }
}

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var PhpDocParser;
(function (PhpDocParser) {
    const stripPattern = /^\/\*\*[ \t]*|\s*\*\/$|^[ \t]*\*[ \t]*/mg;
    const tagBoundaryPattern = /(?:\r\n|\r|\n)(?=@)/;
    const summaryBoundaryPattern = /\.(?:\r\n|\r|\n)|(?:\r\n|\r|\n){2}/;
    const whitespacePattern = /\s+/;
    const paramOrPropertyPattern = /^(@param|@property|@property-read|@property-write)\s+(\S+)\s+(\$\S+)\s*([^]*)$/;
    const varPattern = /^(@var)\s+(\S+)(?:\s+(\$\S+))?\s*([^]*)$/;
    const returnPattern = /^(@return)\s+(\S+)\s*([^]*)$/;
    const methodPattern = /^(@method)\s+(?:(static)\s+)?(?:(\S+)\s+)?(\S+)\(\s*([^)]*)\s*\)\s*([^]*)$/;
    function parse(input) {
        if (!input) {
            return null;
        }
        let stripped = input.replace(stripPattern, '');
        let split = stripped.split(tagBoundaryPattern);
        let text = '';
        if (split.length && split[0].indexOf('@') !== 0) {
            text = split.shift().trim();
        }
        let match;
        let tagString;
        let tags = [];
        let tag;
        while (tagString = split.shift()) {
            tag = parseTag(tagString);
            if (tag) {
                tags.push(tag);
            }
        }
        if (!text && !tags.length) {
            return null;
        }
        return new PhpDoc(text, tags);
    }
    PhpDocParser.parse = parse;
    function parseTag(text) {
        let substring = text.slice(0, 4);
        let match;
        switch (substring) {
            case '@par':
            case '@pro':
                if (match = text.match(paramOrPropertyPattern)) {
                    return typeTag(match[1], match[2], match[3], match[4]);
                }
                return null;
            case '@var':
                if (match = text.match(varPattern)) {
                    return typeTag(match[1], match[2], match[3], match[4]);
                }
                return null;
            case '@ret':
                if (match = text.match(returnPattern)) {
                    return typeTag(match[1], match[2], '', match[3]);
                }
                return null;
            case '@met':
                if (match = text.match(methodPattern)) {
                    return methodTag(match[1], match[2], match[3], match[4], methodParameters(match[5]), match[6]);
                }
                return null;
            default:
                return null;
        }
    }
    function typeTag(tagName, typeString, name, description) {
        return {
            tagName: tagName,
            typeString: typeString,
            name: name ? name : '',
            description: description ? description : ''
        };
    }
    function methodTag(tagName, visibility, returnTypeString, name, parameters, description) {
        return {
            tagName: tagName,
            isStatic: visibility === 'static',
            typeString: returnTypeString ? returnTypeString : 'void',
            name: name,
            parameters: parameters,
            description: description ? description : ''
        };
    }
    function methodParameters(input) {
        if (!input) {
            return [];
        }
        let params = [];
        let paramSplit = input.split(',');
        let typeString, name;
        let param;
        while (paramSplit.length) {
            param = paramSplit.pop().trim().split(whitespacePattern);
            if (param.length === 1) {
                typeString = 'mixed';
                name = param[0];
            } else if (param.length === 2) {
                typeString = param[0];
                name = param[1];
            } else {
                name = '';
            }
            if (name) {
                params.push({
                    typeString: typeString,
                    name: name
                });
            }
        }
        return params.reverse();
    }
})(PhpDocParser = exports.PhpDocParser || (exports.PhpDocParser = {}));
class PhpDoc {
    constructor(text, tags) {
        this.text = text;
        this.tags = tags;
    }
    get returnTag() {
        return this.tags.find(PhpDoc.isReturnTag);
    }
    get propertyTags() {
        return this.tags.filter(PhpDoc.isPropertyTag);
    }
    get methodTags() {
        return this.tags.filter(PhpDoc.isMethodTag);
    }
    get varTags() {
        return this.tags.filter(PhpDoc.isVarTag);
    }
    findParamTag(name) {
        let fn = x => {
            return x.tagName === '@param' && x.name === name;
        };
        return this.tags.find(fn);
    }
    findVarTag(name) {
        let fn = x => {
            return x.tagName === '@var' && (!x.name || name === x.name);
        };
        return this.tags.find(fn);
    }
}
exports.PhpDoc = PhpDoc;
(function (PhpDoc) {
    function isPropertyTag(t) {
        return t.tagName.indexOf('@property') === 0;
    }
    PhpDoc.isPropertyTag = isPropertyTag;
    function isReturnTag(t) {
        return t.tagName === '@return';
    }
    PhpDoc.isReturnTag = isReturnTag;
    function isMethodTag(t) {
        return t.tagName === '@method';
    }
    PhpDoc.isMethodTag = isMethodTag;
    function isVarTag(t) {
        return t.tagName === '@var';
    }
    PhpDoc.isVarTag = isVarTag;
})(PhpDoc = exports.PhpDoc || (exports.PhpDoc = {}));

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
class NameResolver {
    constructor() {
        this.rules = [];
        this._classStack = [];
    }
    get class() {
        return this._classStack.length ? this._classStack[this._classStack.length - 1] : undefined;
    }
    get namespaceName() {
        return this.namespace ? this.namespace.name : '';
    }
    get className() {
        return this._classStack.length ? this._classStack[this._classStack.length - 1].name : '';
    }
    get classBaseName() {
        let s = this.class;
        if (!s || !s.associated) {
            return '';
        }
        let base = s.associated.find(x => {
            return x.kind === 1;
        });
        return base ? base.name : '';
    }
    pushClass(symbol) {
        this._classStack.push(symbol);
    }
    popClass() {
        this._classStack.pop();
    }
    resolveRelative(relativeName) {
        return this.concatNamespaceName(this.namespaceName, relativeName);
    }
    resolveNotFullyQualified(notFqn, kind, resolveStatic) {
        if (!notFqn) {
            return '';
        }
        let lcNotFqn = notFqn.toLowerCase();
        switch (lcNotFqn) {
            case 'self':
                return this.className;
            case 'static':
            case '$this':
                return resolveStatic ? this.className : lcNotFqn;
            case 'parent':
                return this.classBaseName;
            default:
                break;
        }
        let pos = notFqn.indexOf('\\');
        return pos < 0 ? this._resolveUnqualified(notFqn, kind ? kind : 1) : this._resolveQualified(notFqn, pos);
    }
    concatNamespaceName(prefix, suffix) {
        if (!suffix || !prefix) {
            return suffix;
        } else {
            return prefix + '\\' + suffix;
        }
    }
    matchImportedSymbol(text, kind) {
        if (kind !== 8) {
            text = text.toLowerCase();
        }
        let s;
        for (let n = 0, l = this.rules.length; n < l; ++n) {
            s = this.rules[n];
            if (s.name && s.kind === kind && (kind === 8 && text === s.name || kind !== 8 && text === s.name.toLowerCase())) {
                return s;
            }
        }
        return null;
    }
    _resolveQualified(name, pos) {
        let s = this.matchImportedSymbol(name.slice(0, pos), 1);
        return s ? s.associated[0].name + name.slice(pos) : this.resolveRelative(name);
    }
    _resolveUnqualified(name, kind) {
        if (kind === 2048) {
            kind = 1;
        }
        let s = this.matchImportedSymbol(name, kind);
        return s ? s.associated[0].name : this.resolveRelative(name);
    }
}
exports.NameResolver = NameResolver;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const parsedDocument_1 = __webpack_require__(18);
const vscode_languageserver_types_1 = __webpack_require__(3);
const util = __webpack_require__(4);
class UseDeclarationHelper {
    constructor(doc, table, cursor) {
        this.doc = doc;
        this.table = table;
        this._useDeclarations = table.filter(this._isUseDeclarationSymbol);
        this._cursor = cursor;
    }
    insertDeclarationTextEdit(symbol, alias) {
        let afterNode = this._insertAfterNode();
        let text = '\n';
        if (afterNode.phraseType === 120) {
            text += '\n';
        }
        text += util.whitespace(this._insertAfterNodeRange().start.character);
        text += 'use ';
        switch (symbol.kind) {
            case 8:
                text += 'const ';
                break;
            case 64:
                text += 'function ';
                break;
            default:
                break;
        }
        text += symbol.name;
        if (alias) {
            text += ' as ' + alias;
        }
        text += ';';
        if (afterNode.phraseType !== 124) {
            text += '\n';
        }
        return vscode_languageserver_types_1.TextEdit.insert(this._insertPosition(), text);
    }
    replaceDeclarationTextEdit(symbol, alias) {
        let useSymbol = this.findUseSymbolByFqn(symbol.name);
        let node = this.findNamespaceUseClauseByRange(useSymbol.location.range);
        let aliasingClause = parsedDocument_1.ParsedDocument.findChild(node, this._isNamespaceAliasingClause);
        if (aliasingClause) {
            return vscode_languageserver_types_1.TextEdit.replace(this.doc.nodeRange(aliasingClause), `as ${alias}`);
        } else {
            return vscode_languageserver_types_1.TextEdit.insert(this.doc.nodeRange(node).end, ` as ${alias}`);
        }
    }
    deleteDeclarationTextEdit(fqn) {}
    findUseSymbolByFqn(fqn) {
        let lcFqn = fqn.toLowerCase();
        let fn = x => {
            return x.associated && x.associated.length > 0 && x.associated[0].name.toLowerCase() === lcFqn;
        };
        return this._useDeclarations.find(fn);
    }
    findUseSymbolByName(name) {
        let lcName = name.toLowerCase();
        let fn = x => {
            return x.name.toLowerCase() === lcName;
        };
        return this._useDeclarations.find(fn);
    }
    findNamespaceUseClauseByRange(range) {
        let fn = x => {
            return (x.phraseType === 122 || x.phraseType === 125) && util.rangeEquality(range, this.doc.nodeRange(x));
        };
        return this.doc.find(fn);
    }
    _isUseDeclarationSymbol(s) {
        const mask = 1 | 64 | 8;
        return (s.modifiers & 4096) > 0 && (s.kind & mask) > 0;
    }
    _insertAfterNode() {
        if (this._afterNode) {
            return this._afterNode;
        }
        let visitor = new InsertAfterNodeVisitor(this.doc, this.doc.offsetAtPosition(this._cursor));
        this.doc.traverse(visitor);
        return this._afterNode = visitor.lastNamespaceUseDeclaration || visitor.namespaceDefinition || visitor.openingInlineText;
    }
    _insertAfterNodeRange() {
        if (this._afterNodeRange) {
            return this._afterNodeRange;
        }
        return this._afterNodeRange = this.doc.nodeRange(this._insertAfterNode());
    }
    _insertPosition() {
        return this._insertAfterNodeRange().end;
    }
    _isNamespaceAliasingClause(node) {
        return node.phraseType === 119;
    }
}
exports.UseDeclarationHelper = UseDeclarationHelper;
class InsertAfterNodeVisitor {
    constructor(document, offset) {
        this.document = document;
        this.haltTraverse = false;
        this.haltAtOffset = -1;
        this.haltAtOffset = offset;
    }
    get openingInlineText() {
        return this._openingInlineText;
    }
    get lastNamespaceUseDeclaration() {
        return this._lastNamespaceUseDeclaration;
    }
    get namespaceDefinition() {
        return this._namespaceDefinition;
    }
    preorder(node, spine) {
        switch (node.phraseType) {
            case 99:
                if (!this._openingInlineText) {
                    this._openingInlineText = node;
                }
                break;
            case 120:
                if (!parsedDocument_1.ParsedDocument.findChild(node, this._isStatementList)) {
                    this._namespaceDefinition = node;
                }
                break;
            case 124:
                this._lastNamespaceUseDeclaration = node;
                break;
            case undefined:
                if (this.haltAtOffset > -1 && parsedDocument_1.ParsedDocument.isOffsetInToken(this.haltAtOffset, node)) {
                    this.haltTraverse = true;
                    return false;
                }
                break;
            default:
                break;
        }
        return true;
    }
    _isStatementList(node) {
        return node.phraseType === 157;
    }
}

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

// This is adapted from https://github.com/normalize/mz
// Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors
const u = __webpack_require__(2).fromCallback;
const fs = __webpack_require__(1);

const api = ['access', 'appendFile', 'chmod', 'chown', 'close', 'copyFile', 'fchmod', 'fchown', 'fdatasync', 'fstat', 'fsync', 'ftruncate', 'futimes', 'lchown', 'link', 'lstat', 'mkdir', 'mkdtemp', 'open', 'readFile', 'readdir', 'readlink', 'realpath', 'rename', 'rmdir', 'stat', 'symlink', 'truncate', 'unlink', 'utimes', 'writeFile'].filter(key => {
  // Some commands are not available on some systems. Ex:
  // fs.copyFile was added in Node.js v8.5.0
  // fs.mkdtemp was added in Node.js v5.10.0
  // fs.lchown is not available on at least some Linux
  return typeof fs[key] === 'function';
});

// Export all keys:
Object.keys(fs).forEach(key => {
  exports[key] = fs[key];
});

// Universalify async methods:
api.forEach(method => {
  exports[method] = u(fs[method]);
});

// We differ from mz/fs in that we still ship the old, broken, fs.exists()
// since we are a drop-in replacement for the native module
exports.exists = function (filename, callback) {
  if (typeof callback === 'function') {
    return fs.exists(filename, callback);
  }
  return new Promise(resolve => {
    return fs.exists(filename, resolve);
  });
};

// fs.read() & fs.write need special treatment due to multiple callback args

exports.read = function (fd, buffer, offset, length, position, callback) {
  if (typeof callback === 'function') {
    return fs.read(fd, buffer, offset, length, position, callback);
  }
  return new Promise((resolve, reject) => {
    fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer) => {
      if (err) return reject(err);
      resolve({ bytesRead, buffer });
    });
  });
};

// Function signature can be
// fs.write(fd, buffer[, offset[, length[, position]]], callback)
// OR
// fs.write(fd, string[, position[, encoding]], callback)
// so we need to handle both cases
exports.write = function (fd, buffer, a, b, c, callback) {
  if (typeof arguments[arguments.length - 1] === 'function') {
    return fs.write(fd, buffer, a, b, c, callback);
  }

  // Check for old, depricated fs.write(fd, string[, position[, encoding]], callback)
  if (typeof buffer === 'string') {
    return new Promise((resolve, reject) => {
      fs.write(fd, buffer, a, b, (err, bytesWritten, buffer) => {
        if (err) return reject(err);
        resolve({ bytesWritten, buffer });
      });
    });
  }

  return new Promise((resolve, reject) => {
    fs.write(fd, buffer, a, b, c, (err, bytesWritten, buffer) => {
      if (err) return reject(err);
      resolve({ bytesWritten, buffer });
    });
  });
};

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fs = __webpack_require__(7);

module.exports = clone(fs);

function clone(obj) {
  if (obj === null || typeof obj !== 'object') return obj;

  if (obj instanceof Object) var copy = { __proto__: obj.__proto__ };else var copy = Object.create(null);

  Object.getOwnPropertyNames(obj).forEach(function (key) {
    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
  });

  return copy;
}

/***/ }),
/* 102 */
/***/ (function(module, exports) {

module.exports = require("assert");

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1);
const path = __webpack_require__(0);
const mkdirp = __webpack_require__(5).mkdirs;
const pathExists = __webpack_require__(13).pathExists;
const utimes = __webpack_require__(105).utimesMillis;

const notExist = Symbol('notExist');
const existsReg = Symbol('existsReg');

function copy(src, dest, opts, cb) {
  if (typeof opts === 'function' && !cb) {
    cb = opts;
    opts = {};
  } else if (typeof opts === 'function') {
    opts = { filter: opts };
  }

  cb = cb || function () {};
  opts = opts || {};

  opts.clobber = 'clobber' in opts ? !!opts.clobber : true; // default to true for now
  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber; // overwrite falls back to clobber

  // Warn about using preserveTimestamps on 32-bit node
  if (opts.preserveTimestamps && process.arch === 'ia32') {
    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
  }

  src = path.resolve(src);
  dest = path.resolve(dest);

  // don't allow src and dest to be the same
  if (src === dest) return cb(new Error('Source and destination must not be the same.'));

  if (opts.filter) return handleFilter(checkParentDir, src, dest, opts, cb);
  return checkParentDir(src, dest, opts, cb);
}

function checkParentDir(src, dest, opts, cb) {
  const destParent = path.dirname(dest);
  pathExists(destParent, (err, dirExists) => {
    if (err) return cb(err);
    if (dirExists) return startCopy(src, dest, opts, cb);
    mkdirp(destParent, err => {
      if (err) return cb(err);
      return startCopy(src, dest, opts, cb);
    });
  });
}

function startCopy(src, dest, opts, cb) {
  if (opts.filter) return handleFilter(getStats, src, dest, opts, cb);
  return getStats(src, dest, opts, cb);
}

function handleFilter(onInclude, src, dest, opts, cb) {
  Promise.resolve(opts.filter(src, dest)).then(include => {
    if (include) return onInclude(src, dest, opts, cb);
    return cb();
  }, error => cb(error));
}

function getStats(src, dest, opts, cb) {
  const stat = opts.dereference ? fs.stat : fs.lstat;
  stat(src, (err, st) => {
    if (err) return cb(err);

    if (st.isDirectory()) return onDir(st, src, dest, opts, cb);else if (st.isFile() || st.isCharacterDevice() || st.isBlockDevice()) return onFile(st, src, dest, opts, cb);else if (st.isSymbolicLink()) return onLink(src, dest, opts, cb);
  });
}

function onFile(srcStat, src, dest, opts, cb) {
  checkDest(dest, (err, resolvedPath) => {
    if (err) return cb(err);
    if (resolvedPath === notExist) {
      return copyFile(srcStat, src, dest, opts, cb);
    } else if (resolvedPath === existsReg) {
      return mayCopyFile(srcStat, src, dest, opts, cb);
    } else {
      if (src === resolvedPath) return cb();
      return mayCopyFile(srcStat, src, dest, opts, cb);
    }
  });
}

function mayCopyFile(srcStat, src, dest, opts, cb) {
  if (opts.overwrite) {
    fs.unlink(dest, err => {
      if (err) return cb(err);
      return copyFile(srcStat, src, dest, opts, cb);
    });
  } else if (opts.errorOnExist) {
    return cb(new Error(`'${dest}' already exists`));
  } else return cb();
}

function copyFile(srcStat, src, dest, opts, cb) {
  if (typeof fs.copyFile === 'function') {
    return fs.copyFile(src, dest, err => {
      if (err) return cb(err);
      return setDestModeAndTimestamps(srcStat, dest, opts, cb);
    });
  }
  return copyFileFallback(srcStat, src, dest, opts, cb);
}

function copyFileFallback(srcStat, src, dest, opts, cb) {
  const rs = fs.createReadStream(src);
  rs.on('error', err => cb(err)).once('open', () => {
    const ws = fs.createWriteStream(dest, { mode: srcStat.mode });
    ws.on('error', err => cb(err)).on('open', () => rs.pipe(ws)).once('close', () => setDestModeAndTimestamps(srcStat, dest, opts, cb));
  });
}

function setDestModeAndTimestamps(srcStat, dest, opts, cb) {
  fs.chmod(dest, srcStat.mode, err => {
    if (err) return cb(err);
    if (opts.preserveTimestamps) {
      return utimes(dest, srcStat.atime, srcStat.mtime, cb);
    }
    return cb();
  });
}

function onDir(srcStat, src, dest, opts, cb) {
  checkDest(dest, (err, resolvedPath) => {
    if (err) return cb(err);
    if (resolvedPath === notExist) {
      if (isSrcSubdir(src, dest)) {
        return cb(new Error(`Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`));
      }
      return mkDirAndCopy(srcStat, src, dest, opts, cb);
    } else if (resolvedPath === existsReg) {
      if (isSrcSubdir(src, dest)) {
        return cb(new Error(`Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`));
      }
      return mayCopyDir(src, dest, opts, cb);
    } else {
      if (src === resolvedPath) return cb();
      return copyDir(src, dest, opts, cb);
    }
  });
}

function mayCopyDir(src, dest, opts, cb) {
  fs.stat(dest, (err, st) => {
    if (err) return cb(err);
    if (!st.isDirectory()) {
      return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`));
    }
    return copyDir(src, dest, opts, cb);
  });
}

function mkDirAndCopy(srcStat, src, dest, opts, cb) {
  fs.mkdir(dest, srcStat.mode, err => {
    if (err) return cb(err);
    fs.chmod(dest, srcStat.mode, err => {
      if (err) return cb(err);
      return copyDir(src, dest, opts, cb);
    });
  });
}

function copyDir(src, dest, opts, cb) {
  fs.readdir(src, (err, items) => {
    if (err) return cb(err);
    return copyDirItems(items, src, dest, opts, cb);
  });
}

function copyDirItems(items, src, dest, opts, cb) {
  const item = items.pop();
  if (!item) return cb();
  startCopy(path.join(src, item), path.join(dest, item), opts, err => {
    if (err) return cb(err);
    return copyDirItems(items, src, dest, opts, cb);
  });
}

function onLink(src, dest, opts, cb) {
  fs.readlink(src, (err, resolvedSrcPath) => {
    if (err) return cb(err);

    if (opts.dereference) {
      resolvedSrcPath = path.resolve(process.cwd(), resolvedSrcPath);
    }

    checkDest(dest, (err, resolvedDestPath) => {
      if (err) return cb(err);

      if (resolvedDestPath === notExist || resolvedDestPath === existsReg) {
        // if dest already exists, fs throws error anyway,
        // so no need to guard against it here.
        return fs.symlink(resolvedSrcPath, dest, cb);
      } else {
        if (opts.dereference) {
          resolvedDestPath = path.resolve(process.cwd(), resolvedDestPath);
        }
        if (resolvedDestPath === resolvedSrcPath) return cb();

        // prevent copy if src is a subdir of dest since unlinking
        // dest in this case would result in removing src contents
        // and therefore a broken symlink would be created.
        fs.stat(dest, (err, st) => {
          if (err) return cb(err);
          if (st.isDirectory() && isSrcSubdir(resolvedDestPath, resolvedSrcPath)) {
            return cb(new Error(`Cannot overwrite '${resolvedDestPath}' with '${resolvedSrcPath}'.`));
          }
          return copyLink(resolvedSrcPath, dest, cb);
        });
      }
    });
  });
}

function copyLink(resolvedSrcPath, dest, cb) {
  fs.unlink(dest, err => {
    if (err) return cb(err);
    return fs.symlink(resolvedSrcPath, dest, cb);
  });
}

// check if dest exists and/or is a symlink
function checkDest(dest, cb) {
  fs.readlink(dest, (err, resolvedPath) => {
    if (err) {
      if (err.code === 'ENOENT') return cb(null, notExist);

      // dest exists and is a regular file or directory, Windows may throw UNKNOWN error.
      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return cb(null, existsReg);

      return cb(err);
    }
    return cb(null, resolvedPath); // dest exists and is a symlink
  });
}

// return true if dest is a subdir of src, otherwise false.
// extract dest base dir and check if that is the same as src basename
function isSrcSubdir(src, dest) {
  const baseDir = dest.split(path.dirname(src) + path.sep)[1];
  if (baseDir) {
    const destBasename = baseDir.split(path.sep)[0];
    if (destBasename) {
      return src !== dest && dest.indexOf(src) > -1 && destBasename === path.basename(src);
    }
    return false;
  }
  return false;
}

module.exports = copy;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const path = __webpack_require__(0);

// get drive on windows
function getRootPath(p) {
  p = path.normalize(path.resolve(p)).split(path.sep);
  if (p.length > 0) return p[0];
  return null;
}

// http://stackoverflow.com/a/62888/10333 contains more accurate
// TODO: expand to include the rest
const INVALID_PATH_CHARS = /[<>:"|?*]/;

function invalidWin32Path(p) {
  const rp = getRootPath(p);
  p = p.replace(rp, '');
  return INVALID_PATH_CHARS.test(p);
}

module.exports = {
  getRootPath,
  invalidWin32Path
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1);
const os = __webpack_require__(87);
const path = __webpack_require__(0);

// HFS, ext{2,3}, FAT do not, Node.js v0.10 does not
function hasMillisResSync() {
  let tmpfile = path.join('millis-test-sync' + Date.now().toString() + Math.random().toString().slice(2));
  tmpfile = path.join(os.tmpdir(), tmpfile);

  // 550 millis past UNIX epoch
  const d = new Date(1435410243862);
  fs.writeFileSync(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141');
  const fd = fs.openSync(tmpfile, 'r+');
  fs.futimesSync(fd, d, d);
  fs.closeSync(fd);
  return fs.statSync(tmpfile).mtime > 1435410243000;
}

function hasMillisRes(callback) {
  let tmpfile = path.join('millis-test' + Date.now().toString() + Math.random().toString().slice(2));
  tmpfile = path.join(os.tmpdir(), tmpfile);

  // 550 millis past UNIX epoch
  const d = new Date(1435410243862);
  fs.writeFile(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141', err => {
    if (err) return callback(err);
    fs.open(tmpfile, 'r+', (err, fd) => {
      if (err) return callback(err);
      fs.futimes(fd, d, d, err => {
        if (err) return callback(err);
        fs.close(fd, err => {
          if (err) return callback(err);
          fs.stat(tmpfile, (err, stats) => {
            if (err) return callback(err);
            callback(null, stats.mtime > 1435410243000);
          });
        });
      });
    });
  });
}

function timeRemoveMillis(timestamp) {
  if (typeof timestamp === 'number') {
    return Math.floor(timestamp / 1000) * 1000;
  } else if (timestamp instanceof Date) {
    return new Date(Math.floor(timestamp.getTime() / 1000) * 1000);
  } else {
    throw new Error('fs-extra: timeRemoveMillis() unknown parameter type');
  }
}

function utimesMillis(path, atime, mtime, callback) {
  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)
  fs.open(path, 'r+', (err, fd) => {
    if (err) return callback(err);
    fs.futimes(fd, atime, mtime, futimesErr => {
      fs.close(fd, closeErr => {
        if (callback) callback(futimesErr || closeErr);
      });
    });
  });
}

function utimesMillisSync(path, atime, mtime) {
  const fd = fs.openSync(path, 'r+');
  fs.futimesSync(fd, atime, mtime);
  return fs.closeSync(fd);
}

module.exports = {
  hasMillisRes,
  hasMillisResSync,
  timeRemoveMillis,
  utimesMillis,
  utimesMillisSync
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  copySync: __webpack_require__(234)
};

/***/ }),
/* 107 */
/***/ (function(module, exports) {

/* eslint-disable node/no-deprecated-api */
module.exports = function (size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    try {
      return Buffer.allocUnsafe(size);
    } catch (e) {
      return new Buffer(size);
    }
  }
  return new Buffer(size);
};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(109);


/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(__dirname) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ws__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ws___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_ws__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_url__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_url___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_url__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_express__ = __webpack_require__(116);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_express___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_express__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__php_server_launch__ = __webpack_require__(185);






process.on('uncaughtException', err => {
  console.error('Uncaught Exception: ', err.toString());
  if (err.stack) {
    console.error(err.stack);
  }
});

const app = __WEBPACK_IMPORTED_MODULE_2_express___default()();

app.use(__WEBPACK_IMPORTED_MODULE_2_express___default.a.static(__dirname));

const server = app.listen(4000);

const wss = new __WEBPACK_IMPORTED_MODULE_0_ws___default.a.Server({
  noServer: true,
  perMessageDeflate: false
});

server.on('upgrade', (request, socket, head) => {
  const pathname = request.url ? __WEBPACK_IMPORTED_MODULE_1_url___default.a.parse(request.url).pathname : undefined;
  if (pathname === '/php-language-server') {
    wss.handleUpgrade(request, socket, head, webSocket => {
      const socketconnect = {
        send: content => webSocket.send(content, error => {
          if (error) {
            throw error;
          }
        }),
        onMessage: cb => webSocket.on('message', cb),
        onError: cb => webSocket.on('error', cb),
        onClose: cb => webSocket.on('close', cb),
        dispose: () => webSocket.close()
      };
      // launch the server when the web socket is opened
      if (webSocket.readyState === webSocket.OPEN) {
        Object(__WEBPACK_IMPORTED_MODULE_3__php_server_launch__["a" /* default */])(socketconnect);
      } else {
        webSocket.on('open', () => Object(__WEBPACK_IMPORTED_MODULE_3__php_server_launch__["a" /* default */])(socket));
      }
    });
  }
});

// if (module.hot) {
//   module.hot.accept('./php-server-launch', () => {
//     require('./php-server-launch');
//   });
// }
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, "/"))

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const WebSocket = __webpack_require__(57);

WebSocket.Server = __webpack_require__(115);
WebSocket.Receiver = __webpack_require__(60);
WebSocket.Sender = __webpack_require__(62);

module.exports = WebSocket;

/***/ }),
/* 111 */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),
/* 112 */
/***/ (function(module, exports) {

module.exports = require("tls");

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function Queue(options) {
  if (!(this instanceof Queue)) {
    return new Queue(options);
  }

  options = options || {};
  this.concurrency = options.concurrency || Infinity;
  this.pending = 0;
  this.jobs = [];
  this.cbs = [];
  this._done = done.bind(this);
}

var arrayAddMethods = ['push', 'unshift', 'splice'];

arrayAddMethods.forEach(function (method) {
  Queue.prototype[method] = function () {
    var methodResult = Array.prototype[method].apply(this.jobs, arguments);
    this._run();
    return methodResult;
  };
});

Object.defineProperty(Queue.prototype, 'length', {
  get: function () {
    return this.pending + this.jobs.length;
  }
});

Queue.prototype._run = function () {
  if (this.pending === this.concurrency) {
    return;
  }
  if (this.jobs.length) {
    var job = this.jobs.shift();
    this.pending++;
    job(this._done);
    this._run();
  }

  if (this.pending === 0) {
    while (this.cbs.length !== 0) {
      var cb = this.cbs.pop();
      process.nextTick(cb);
    }
  }
};

Queue.prototype.onDone = function (cb) {
  if (typeof cb === 'function') {
    this.cbs.push(cb);
    this._run();
  }
};

function done() {
  this.pending--;
  this._run();
}

module.exports = Queue;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Class representing an event.
 *
 * @private
 */

class Event {
  /**
   * Create a new `Event`.
   *
   * @param {String} type The name of the event
   * @param {Object} target A reference to the target to which the event was dispatched
   */
  constructor(type, target) {
    this.target = target;
    this.type = type;
  }
}

/**
 * Class representing a message event.
 *
 * @extends Event
 * @private
 */
class MessageEvent extends Event {
  /**
   * Create a new `MessageEvent`.
   *
   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor(data, target) {
    super('message', target);

    this.data = data;
  }
}

/**
 * Class representing a close event.
 *
 * @extends Event
 * @private
 */
class CloseEvent extends Event {
  /**
   * Create a new `CloseEvent`.
   *
   * @param {Number} code The status code explaining why the connection is being closed
   * @param {String} reason A human-readable string explaining why the connection is closing
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor(code, reason, target) {
    super('close', target);

    this.wasClean = target._closeFrameReceived && target._closeFrameSent;
    this.reason = reason;
    this.code = code;
  }
}

/**
 * Class representing an open event.
 *
 * @extends Event
 * @private
 */
class OpenEvent extends Event {
  /**
   * Create a new `OpenEvent`.
   *
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor(target) {
    super('open', target);
  }
}

/**
 * Class representing an error event.
 *
 * @extends Event
 * @private
 */
class ErrorEvent extends Event {
  /**
   * Create a new `ErrorEvent`.
   *
   * @param {Object} error The error that generated this event
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor(error, target) {
    super('error', target);

    this.message = error.message;
    this.error = error;
  }
}

/**
 * This provides methods for emulating the `EventTarget` interface. It's not
 * meant to be used directly.
 *
 * @mixin
 */
const EventTarget = {
  /**
   * Register an event listener.
   *
   * @param {String} method A string representing the event type to listen for
   * @param {Function} listener The listener to add
   * @public
   */
  addEventListener(method, listener) {
    if (typeof listener !== 'function') return;

    function onMessage(data) {
      listener.call(this, new MessageEvent(data, this));
    }

    function onClose(code, message) {
      listener.call(this, new CloseEvent(code, message, this));
    }

    function onError(error) {
      listener.call(this, new ErrorEvent(error, this));
    }

    function onOpen() {
      listener.call(this, new OpenEvent(this));
    }

    if (method === 'message') {
      onMessage._listener = listener;
      this.on(method, onMessage);
    } else if (method === 'close') {
      onClose._listener = listener;
      this.on(method, onClose);
    } else if (method === 'error') {
      onError._listener = listener;
      this.on(method, onError);
    } else if (method === 'open') {
      onOpen._listener = listener;
      this.on(method, onOpen);
    } else {
      this.on(method, listener);
    }
  },

  /**
   * Remove an event listener.
   *
   * @param {String} method A string representing the event type to remove
   * @param {Function} listener The listener to remove
   * @public
   */
  removeEventListener(method, listener) {
    const listeners = this.listeners(method);

    for (var i = 0; i < listeners.length; i++) {
      if (listeners[i] === listener || listeners[i]._listener === listener) {
        this.removeListener(method, listeners[i]);
      }
    }
  }
};

module.exports = EventTarget;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(20);
const crypto = __webpack_require__(15);
const http = __webpack_require__(16);
const url = __webpack_require__(17);

const PerMessageDeflate = __webpack_require__(30);
const extension = __webpack_require__(59);
const constants = __webpack_require__(22);
const WebSocket = __webpack_require__(57);

/**
 * Class representing a WebSocket server.
 *
 * @extends EventEmitter
 */
class WebSocketServer extends EventEmitter {
  /**
   * Create a `WebSocketServer` instance.
   *
   * @param {Object} options Configuration options
   * @param {String} options.host The hostname where to bind the server
   * @param {Number} options.port The port where to bind the server
   * @param {http.Server} options.server A pre-created HTTP/S server to use
   * @param {Function} options.verifyClient An hook to reject connections
   * @param {Function} options.handleProtocols An hook to handle protocols
   * @param {String} options.path Accept only connections matching this path
   * @param {Boolean} options.noServer Enable no server mode
   * @param {Boolean} options.clientTracking Specifies whether or not to track clients
   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate
   * @param {Number} options.maxPayload The maximum allowed message size
   * @param {Function} callback A listener for the `listening` event
   */
  constructor(options, callback) {
    super();

    options = Object.assign({
      maxPayload: 100 * 1024 * 1024,
      perMessageDeflate: false,
      handleProtocols: null,
      clientTracking: true,
      verifyClient: null,
      noServer: false,
      backlog: null, // use default (511 as implemented in net.js)
      server: null,
      host: null,
      path: null,
      port: null
    }, options);

    if (options.port == null && !options.server && !options.noServer) {
      throw new TypeError('One of the "port", "server", or "noServer" options must be specified');
    }

    if (options.port != null) {
      this._server = http.createServer((req, res) => {
        const body = http.STATUS_CODES[426];

        res.writeHead(426, {
          'Content-Length': body.length,
          'Content-Type': 'text/plain'
        });
        res.end(body);
      });
      this._server.listen(options.port, options.host, options.backlog, callback);
    } else if (options.server) {
      this._server = options.server;
    }

    if (this._server) {
      this._removeListeners = addListeners(this._server, {
        listening: this.emit.bind(this, 'listening'),
        error: this.emit.bind(this, 'error'),
        upgrade: (req, socket, head) => {
          this.handleUpgrade(req, socket, head, ws => {
            this.emit('connection', ws, req);
          });
        }
      });
    }

    if (options.perMessageDeflate === true) options.perMessageDeflate = {};
    if (options.clientTracking) this.clients = new Set();
    this.options = options;
  }

  /**
   * Returns the bound address, the address family name, and port of the server
   * as reported by the operating system if listening on an IP socket.
   * If the server is listening on a pipe or UNIX domain socket, the name is
   * returned as a string.
   *
   * @return {(Object|String|null)} The address of the server
   * @public
   */
  address() {
    if (this.options.noServer) {
      throw new Error('The server is operating in "noServer" mode');
    }

    if (!this._server) return null;
    return this._server.address();
  }

  /**
   * Close the server.
   *
   * @param {Function} cb Callback
   * @public
   */
  close(cb) {
    //
    // Terminate all associated clients.
    //
    if (this.clients) {
      for (const client of this.clients) client.terminate();
    }

    const server = this._server;

    if (server) {
      this._removeListeners();
      this._removeListeners = this._server = null;

      //
      // Close the http server if it was internally created.
      //
      if (this.options.port != null) return server.close(cb);
    }

    if (cb) cb();
  }

  /**
   * See if a given request should be handled by this server instance.
   *
   * @param {http.IncomingMessage} req Request object to inspect
   * @return {Boolean} `true` if the request is valid, else `false`
   * @public
   */
  shouldHandle(req) {
    if (this.options.path && url.parse(req.url).pathname !== this.options.path) {
      return false;
    }

    return true;
  }

  /**
   * Handle a HTTP Upgrade request.
   *
   * @param {http.IncomingMessage} req The request object
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @public
   */
  handleUpgrade(req, socket, head, cb) {
    socket.on('error', socketOnError);

    const version = +req.headers['sec-websocket-version'];
    const extensions = {};

    if (req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' || !req.headers['sec-websocket-key'] || version !== 8 && version !== 13 || !this.shouldHandle(req)) {
      return abortHandshake(socket, 400);
    }

    if (this.options.perMessageDeflate) {
      const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);

      try {
        const offers = extension.parse(req.headers['sec-websocket-extensions']);

        if (offers[PerMessageDeflate.extensionName]) {
          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
        }
      } catch (err) {
        return abortHandshake(socket, 400);
      }
    }

    //
    // Optionally call external client verification handler.
    //
    if (this.options.verifyClient) {
      const info = {
        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
        secure: !!(req.connection.authorized || req.connection.encrypted),
        req
      };

      if (this.options.verifyClient.length === 2) {
        this.options.verifyClient(info, (verified, code, message) => {
          if (!verified) return abortHandshake(socket, code || 401, message);

          this.completeUpgrade(extensions, req, socket, head, cb);
        });
        return;
      }

      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
    }

    this.completeUpgrade(extensions, req, socket, head, cb);
  }

  /**
   * Upgrade the connection to WebSocket.
   *
   * @param {Object} extensions The accepted extensions
   * @param {http.IncomingMessage} req The request object
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @private
   */
  completeUpgrade(extensions, req, socket, head, cb) {
    //
    // Destroy the socket if the client has already sent a FIN packet.
    //
    if (!socket.readable || !socket.writable) return socket.destroy();

    const key = crypto.createHash('sha1').update(req.headers['sec-websocket-key'] + constants.GUID, 'binary').digest('base64');

    const headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: websocket', 'Connection: Upgrade', `Sec-WebSocket-Accept: ${key}`];

    const ws = new WebSocket(null);
    var protocol = req.headers['sec-websocket-protocol'];

    if (protocol) {
      protocol = protocol.trim().split(/ *, */);

      //
      // Optionally call external protocol selection handler.
      //
      if (this.options.handleProtocols) {
        protocol = this.options.handleProtocols(protocol, req);
      } else {
        protocol = protocol[0];
      }

      if (protocol) {
        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
        ws.protocol = protocol;
      }
    }

    if (extensions[PerMessageDeflate.extensionName]) {
      const params = extensions[PerMessageDeflate.extensionName].params;
      const value = extension.format({
        [PerMessageDeflate.extensionName]: [params]
      });
      headers.push(`Sec-WebSocket-Extensions: ${value}`);
      ws._extensions = extensions;
    }

    //
    // Allow external modification/inspection of handshake headers.
    //
    this.emit('headers', headers, req);

    socket.write(headers.concat('\r\n').join('\r\n'));
    socket.removeListener('error', socketOnError);

    ws.setSocket(socket, head, this.options.maxPayload);

    if (this.clients) {
      this.clients.add(ws);
      ws.on('close', () => this.clients.delete(ws));
    }

    cb(ws);
  }
}

module.exports = WebSocketServer;

/**
 * Add event listeners on an `EventEmitter` using a map of <event, listener>
 * pairs.
 *
 * @param {EventEmitter} server The event emitter
 * @param {Object.<String, Function>} map The listeners to add
 * @return {Function} A function that will remove the added listeners when called
 * @private
 */
function addListeners(server, map) {
  for (const event of Object.keys(map)) server.on(event, map[event]);

  return function removeListeners() {
    for (const event of Object.keys(map)) {
      server.removeListener(event, map[event]);
    }
  };
}

/**
 * Handle premature socket errors.
 *
 * @private
 */
function socketOnError() {
  this.destroy();
}

/**
 * Close the connection when preconditions are not fulfilled.
 *
 * @param {net.Socket} socket The socket of the upgrade request
 * @param {Number} code The HTTP response status code
 * @param {String} [message] The HTTP response body
 * @private
 */
function abortHandshake(socket, code, message) {
  if (socket.writable) {
    message = message || http.STATUS_CODES[code];
    socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n` + 'Connection: close\r\n' + 'Content-type: text/html\r\n' + `Content-Length: ${Buffer.byteLength(message)}\r\n` + '\r\n' + message);
  }

  socket.removeListener('error', socketOnError);
  socket.destroy();
}

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



module.exports = __webpack_require__(117);

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 */

var bodyParser = __webpack_require__(118);
var EventEmitter = __webpack_require__(20).EventEmitter;
var mixin = __webpack_require__(160);
var proto = __webpack_require__(161);
var Route = __webpack_require__(77);
var Router = __webpack_require__(76);
var req = __webpack_require__(173);
var res = __webpack_require__(180);

/**
 * Expose `createApplication()`.
 */

exports = module.exports = createApplication;

/**
 * Create an express application.
 *
 * @return {Function}
 * @api public
 */

function createApplication() {
  var app = function (req, res, next) {
    app.handle(req, res, next);
  };

  mixin(app, EventEmitter.prototype, false);
  mixin(app, proto, false);

  // expose the prototype that will get set on requests
  app.request = Object.create(req, {
    app: { configurable: true, enumerable: true, writable: true, value: app }
  });

  // expose the prototype that will get set on responses
  app.response = Object.create(res, {
    app: { configurable: true, enumerable: true, writable: true, value: app }
  });

  app.init();
  return app;
}

/**
 * Expose the prototypes.
 */

exports.application = proto;
exports.request = req;
exports.response = res;

/**
 * Expose constructors.
 */

exports.Route = Route;
exports.Router = Router;

/**
 * Expose middleware
 */

exports.json = bodyParser.json;
exports.query = __webpack_require__(79);
exports.static = __webpack_require__(184);
exports.urlencoded = bodyParser.urlencoded

/**
 * Replace removed middleware with an appropriate error message.
 */

;['bodyParser', 'compress', 'cookieSession', 'session', 'logger', 'cookieParser', 'favicon', 'responseTime', 'errorHandler', 'timeout', 'methodOverride', 'vhost', 'csrf', 'directory', 'limit', 'multipart', 'staticCache'].forEach(function (name) {
  Object.defineProperty(exports, name, {
    get: function () {
      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');
    },
    configurable: true
  });
});

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var deprecate = __webpack_require__(10)('body-parser');

/**
 * Cache of loaded parsers.
 * @private
 */

var parsers = Object.create(null);

/**
 * @typedef Parsers
 * @type {function}
 * @property {function} json
 * @property {function} raw
 * @property {function} text
 * @property {function} urlencoded
 */

/**
 * Module exports.
 * @type {Parsers}
 */

exports = module.exports = deprecate.function(bodyParser, 'bodyParser: use individual json/urlencoded middlewares');

/**
 * JSON parser.
 * @public
 */

Object.defineProperty(exports, 'json', {
  configurable: true,
  enumerable: true,
  get: createParserGetter('json')
});

/**
 * Raw parser.
 * @public
 */

Object.defineProperty(exports, 'raw', {
  configurable: true,
  enumerable: true,
  get: createParserGetter('raw')
});

/**
 * Text parser.
 * @public
 */

Object.defineProperty(exports, 'text', {
  configurable: true,
  enumerable: true,
  get: createParserGetter('text')
});

/**
 * URL-encoded parser.
 * @public
 */

Object.defineProperty(exports, 'urlencoded', {
  configurable: true,
  enumerable: true,
  get: createParserGetter('urlencoded')
});

/**
 * Create a middleware to parse json and urlencoded bodies.
 *
 * @param {object} [options]
 * @return {function}
 * @deprecated
 * @public
 */

function bodyParser(options) {
  var opts = {};

  // exclude type option
  if (options) {
    for (var prop in options) {
      if (prop !== 'type') {
        opts[prop] = options[prop];
      }
    }
  }

  var _urlencoded = exports.urlencoded(opts);
  var _json = exports.json(opts);

  return function bodyParser(req, res, next) {
    _json(req, res, function (err) {
      if (err) return next(err);
      _urlencoded(req, res, next);
    });
  };
}

/**
 * Create a getter for loading a parser.
 * @private
 */

function createParserGetter(name) {
  return function get() {
    return loadParser(name);
  };
}

/**
 * Load a parser module.
 * @private
 */

function loadParser(parserName) {
  var parser = parsers[parserName];

  if (parser !== undefined) {
    return parser;
  }

  // this uses a switch for static require analysis
  switch (parserName) {
    case 'json':
      parser = __webpack_require__(121);
      break;
    case 'raw':
      parser = __webpack_require__(155);
      break;
    case 'text':
      parser = __webpack_require__(156);
      break;
    case 'urlencoded':
      parser = __webpack_require__(157);
      break;
  }

  // store to prevent invoking require()
  return parsers[parserName] = parser;
}

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * depd
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 */

module.exports = callSiteToString;

/**
 * Format a CallSite file location to a string.
 */

function callSiteFileLocation(callSite) {
  var fileName;
  var fileLocation = '';

  if (callSite.isNative()) {
    fileLocation = 'native';
  } else if (callSite.isEval()) {
    fileName = callSite.getScriptNameOrSourceURL();
    if (!fileName) {
      fileLocation = callSite.getEvalOrigin();
    }
  } else {
    fileName = callSite.getFileName();
  }

  if (fileName) {
    fileLocation += fileName;

    var lineNumber = callSite.getLineNumber();
    if (lineNumber != null) {
      fileLocation += ':' + lineNumber;

      var columnNumber = callSite.getColumnNumber();
      if (columnNumber) {
        fileLocation += ':' + columnNumber;
      }
    }
  }

  return fileLocation || 'unknown source';
}

/**
 * Format a CallSite to a string.
 */

function callSiteToString(callSite) {
  var addSuffix = true;
  var fileLocation = callSiteFileLocation(callSite);
  var functionName = callSite.getFunctionName();
  var isConstructor = callSite.isConstructor();
  var isMethodCall = !(callSite.isToplevel() || isConstructor);
  var line = '';

  if (isMethodCall) {
    var methodName = callSite.getMethodName();
    var typeName = getConstructorName(callSite);

    if (functionName) {
      if (typeName && functionName.indexOf(typeName) !== 0) {
        line += typeName + '.';
      }

      line += functionName;

      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {
        line += ' [as ' + methodName + ']';
      }
    } else {
      line += typeName + '.' + (methodName || '<anonymous>');
    }
  } else if (isConstructor) {
    line += 'new ' + (functionName || '<anonymous>');
  } else if (functionName) {
    line += functionName;
  } else {
    addSuffix = false;
    line += fileLocation;
  }

  if (addSuffix) {
    line += ' (' + fileLocation + ')';
  }

  return line;
}

/**
 * Get constructor name of reviver.
 */

function getConstructorName(obj) {
  var receiver = obj.receiver;
  return receiver.constructor && receiver.constructor.name || null;
}

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = eventListenerCount;

/**
 * Get the count of listeners on an event emitter of a specific type.
 */

function eventListenerCount(emitter, type) {
  return emitter.listeners(type).length;
}

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * body-parser
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var bytes = __webpack_require__(23);
var contentType = __webpack_require__(31);
var createError = __webpack_require__(32);
var debug = __webpack_require__(6)('body-parser:json');
var read = __webpack_require__(35);
var typeis = __webpack_require__(25);

/**
 * Module exports.
 */

module.exports = json;

/**
 * RegExp to match the first non-space in a string.
 *
 * Allowed whitespace is defined in RFC 7159:
 *
 *    ws = *(
 *            %x20 /              ; Space
 *            %x09 /              ; Horizontal tab
 *            %x0A /              ; Line feed or New line
 *            %x0D )              ; Carriage return
 */

var FIRST_CHAR_REGEXP = /^[\x20\x09\x0a\x0d]*(.)/; // eslint-disable-line no-control-regex

/**
 * Create a middleware to parse JSON bodies.
 *
 * @param {object} [options]
 * @return {function}
 * @public
 */

function json(options) {
  var opts = options || {};

  var limit = typeof opts.limit !== 'number' ? bytes.parse(opts.limit || '100kb') : opts.limit;
  var inflate = opts.inflate !== false;
  var reviver = opts.reviver;
  var strict = opts.strict !== false;
  var type = opts.type || 'application/json';
  var verify = opts.verify || false;

  if (verify !== false && typeof verify !== 'function') {
    throw new TypeError('option verify must be function');
  }

  // create the appropriate type checking function
  var shouldParse = typeof type !== 'function' ? typeChecker(type) : type;

  function parse(body) {
    if (body.length === 0) {
      // special-case empty json body, as it's a common client-side mistake
      // TODO: maybe make this configurable or part of "strict" option
      return {};
    }

    if (strict) {
      var first = firstchar(body);

      if (first !== '{' && first !== '[') {
        debug('strict violation');
        throw createStrictSyntaxError(body, first);
      }
    }

    try {
      debug('parse json');
      return JSON.parse(body, reviver);
    } catch (e) {
      throw normalizeJsonSyntaxError(e, {
        stack: e.stack
      });
    }
  }

  return function jsonParser(req, res, next) {
    if (req._body) {
      debug('body already parsed');
      next();
      return;
    }

    req.body = req.body || {};

    // skip requests without bodies
    if (!typeis.hasBody(req)) {
      debug('skip empty body');
      next();
      return;
    }

    debug('content-type %j', req.headers['content-type']);

    // determine if request should be parsed
    if (!shouldParse(req)) {
      debug('skip parsing');
      next();
      return;
    }

    // assert charset per RFC 7159 sec 8.1
    var charset = getCharset(req) || 'utf-8';
    if (charset.substr(0, 4) !== 'utf-') {
      debug('invalid charset');
      next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
        charset: charset,
        type: 'charset.unsupported'
      }));
      return;
    }

    // read
    read(req, res, next, parse, debug, {
      encoding: charset,
      inflate: inflate,
      limit: limit,
      verify: verify
    });
  };
}

/**
 * Create strict violation syntax error matching native error.
 *
 * @param {string} str
 * @param {string} char
 * @return {Error}
 * @private
 */

function createStrictSyntaxError(str, char) {
  var index = str.indexOf(char);
  var partial = str.substring(0, index) + '#';

  try {
    JSON.parse(partial); /* istanbul ignore next */throw new SyntaxError('strict violation');
  } catch (e) {
    return normalizeJsonSyntaxError(e, {
      message: e.message.replace('#', char),
      stack: e.stack
    });
  }
}

/**
 * Get the first non-whitespace character in a string.
 *
 * @param {string} str
 * @return {function}
 * @private
 */

function firstchar(str) {
  return FIRST_CHAR_REGEXP.exec(str)[1];
}

/**
 * Get the charset of a request.
 *
 * @param {object} req
 * @api private
 */

function getCharset(req) {
  try {
    return (contentType.parse(req).parameters.charset || '').toLowerCase();
  } catch (e) {
    return undefined;
  }
}

/**
 * Normalize a SyntaxError for JSON.parse.
 *
 * @param {SyntaxError} error
 * @param {object} obj
 * @return {SyntaxError}
 */

function normalizeJsonSyntaxError(error, obj) {
  var keys = Object.getOwnPropertyNames(error);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (key !== 'stack' && key !== 'message') {
      delete error[key];
    }
  }

  var props = Object.keys(obj);

  for (var j = 0; j < props.length; j++) {
    var prop = props[j];
    error[prop] = obj[prop];
  }

  return error;
}

/**
 * Get the simple type checker.
 *
 * @param {string} type
 * @return {function}
 */

function typeChecker(type) {
  return function checkType(req) {
    return Boolean(typeis(req, type));
  };
}

/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = {"100":"Continue","101":"Switching Protocols","102":"Processing","200":"OK","201":"Created","202":"Accepted","203":"Non-Authoritative Information","204":"No Content","205":"Reset Content","206":"Partial Content","207":"Multi-Status","208":"Already Reported","226":"IM Used","300":"Multiple Choices","301":"Moved Permanently","302":"Found","303":"See Other","304":"Not Modified","305":"Use Proxy","306":"(Unused)","307":"Temporary Redirect","308":"Permanent Redirect","400":"Bad Request","401":"Unauthorized","402":"Payment Required","403":"Forbidden","404":"Not Found","405":"Method Not Allowed","406":"Not Acceptable","407":"Proxy Authentication Required","408":"Request Timeout","409":"Conflict","410":"Gone","411":"Length Required","412":"Precondition Failed","413":"Payload Too Large","414":"URI Too Long","415":"Unsupported Media Type","416":"Range Not Satisfiable","417":"Expectation Failed","418":"I'm a teapot","421":"Misdirected Request","422":"Unprocessable Entity","423":"Locked","424":"Failed Dependency","425":"Unordered Collection","426":"Upgrade Required","428":"Precondition Required","429":"Too Many Requests","431":"Request Header Fields Too Large","451":"Unavailable For Legal Reasons","500":"Internal Server Error","501":"Not Implemented","502":"Bad Gateway","503":"Service Unavailable","504":"Gateway Timeout","505":"HTTP Version Not Supported","506":"Variant Also Negotiates","507":"Insufficient Storage","508":"Loop Detected","509":"Bandwidth Limit Exceeded","510":"Not Extended","511":"Network Authentication Required"}

/***/ }),
/* 123 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(65);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

/**
 * Colors.
 */

exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
  // is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
  // is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
  // double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit');

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch (e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch (e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var tty = __webpack_require__(126);
var util = __webpack_require__(34);

/**
 * This is the Node.js implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(65);
exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;

/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(function (key) {
  return (/^debug_/i.test(key)
  );
}).reduce(function (obj, key) {
  // camel-case
  var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {
    return k.toUpperCase();
  });

  // coerce string value into JS value
  var val = process.env[key];
  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;else if (/^(no|off|false|disabled)$/i.test(val)) val = false;else if (val === 'null') val = null;else val = Number(val);

  obj[prop] = val;
  return obj;
}, {});

/**
 * The file descriptor to write the `debug()` calls to.
 * Set the `DEBUG_FD` env variable to override with another value. i.e.:
 *
 *   $ DEBUG_FD=3 node script.js 3>debug.log
 */

var fd = parseInt(process.env.DEBUG_FD, 10) || 2;

if (1 !== fd && 2 !== fd) {
  util.deprecate(function () {}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')();
}

var stream = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);
}

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

exports.formatters.o = function (v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts).split('\n').map(function (str) {
    return str.trim();
  }).join(' ');
};

/**
 * Map %o to `util.inspect()`, allowing multiple lines if needed.
 */

exports.formatters.O = function (v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts);
};

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var name = this.namespace;
  var useColors = this.useColors;

  if (useColors) {
    var c = this.color;
    var prefix = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m';

    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    args.push('\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
  } else {
    args[0] = new Date().toUTCString() + ' ' + name + ' ' + args[0];
  }
}

/**
 * Invokes `util.format()` with the specified arguments and writes to `stream`.
 */

function log() {
  return stream.write(util.format.apply(util, arguments) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  if (null == namespaces) {
    // If you set a process.env field to null or undefined, it gets cast to the
    // string 'null' or 'undefined'. Just delete instead.
    delete process.env.DEBUG;
  } else {
    process.env.DEBUG = namespaces;
  }
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  return process.env.DEBUG;
}

/**
 * Copied from `node/src/node.js`.
 *
 * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
 * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
 */

function createWritableStdioStream(fd) {
  var stream;
  var tty_wrap = process.binding('tty_wrap');

  // Note stream._type is used for test-module-load-list.js

  switch (tty_wrap.guessHandleType(fd)) {
    case 'TTY':
      stream = new tty.WriteStream(fd);
      stream._type = 'tty';

      // Hack to have stream not keep the event loop alive.
      // See https://github.com/joyent/node/issues/1726
      if (stream._handle && stream._handle.unref) {
        stream._handle.unref();
      }
      break;

    case 'FILE':
      var fs = __webpack_require__(7);
      stream = new fs.SyncWriteStream(fd, { autoClose: false });
      stream._type = 'fs';
      break;

    case 'PIPE':
    case 'TCP':
      var net = __webpack_require__(21);
      stream = new net.Socket({
        fd: fd,
        readable: false,
        writable: true
      });

      // FIXME Should probably have an option in net.Socket to create a
      // stream from an existing fd which is writable only. But for now
      // we'll just add this hack and set the `readable` member to false.
      // Test: ./node test/fixtures/echo.js < /etc/passwd
      stream.readable = false;
      stream.read = null;
      stream._type = 'pipe';

      // FIXME Hack to have stream not keep the event loop alive.
      // See https://github.com/joyent/node/issues/1726
      if (stream._handle && stream._handle.unref) {
        stream._handle.unref();
      }
      break;

    default:
      // Probably an error on in uv_guess_handle()
      throw new Error('Implement me. Unknown stream file type!');
  }

  // For supporting legacy API we put the FD here.
  stream.fd = fd;

  stream._isStdio = true;

  return stream;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init(debug) {
  debug.inspectOpts = {};

  var keys = Object.keys(exports.inspectOpts);
  for (var i = 0; i < keys.length; i++) {
    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
  }
}

/**
 * Enable namespaces listed in `process.env.DEBUG` initially.
 */

exports.enable(load());

/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = require("tty");

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * raw-body
 * Copyright(c) 2013-2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var bytes = __webpack_require__(23);
var createError = __webpack_require__(128);
var iconv = __webpack_require__(68);
var unpipe = __webpack_require__(71);

/**
 * Module exports.
 * @public
 */

module.exports = getRawBody;

/**
 * Module variables.
 * @private
 */

var ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /;

/**
 * Get the decoder for a given encoding.
 *
 * @param {string} encoding
 * @private
 */

function getDecoder(encoding) {
  if (!encoding) return null;

  try {
    return iconv.getDecoder(encoding);
  } catch (e) {
    // error getting decoder
    if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message)) throw e;

    // the encoding was not found
    throw createError(415, 'specified encoding unsupported', {
      encoding: encoding,
      type: 'encoding.unsupported'
    });
  }
}

/**
 * Get the raw body of a stream (typically HTTP).
 *
 * @param {object} stream
 * @param {object|string|function} [options]
 * @param {function} [callback]
 * @public
 */

function getRawBody(stream, options, callback) {
  var done = callback;
  var opts = options || {};

  if (options === true || typeof options === 'string') {
    // short cut for encoding
    opts = {
      encoding: options
    };
  }

  if (typeof options === 'function') {
    done = options;
    opts = {};
  }

  // validate callback is a function, if provided
  if (done !== undefined && typeof done !== 'function') {
    throw new TypeError('argument callback must be a function');
  }

  // require the callback without promises
  if (!done && !global.Promise) {
    throw new TypeError('argument callback is required');
  }

  // get encoding
  var encoding = opts.encoding !== true ? opts.encoding : 'utf-8';

  // convert the limit to an integer
  var limit = bytes.parse(opts.limit);

  // convert the expected length to an integer
  var length = opts.length != null && !isNaN(opts.length) ? parseInt(opts.length, 10) : null;

  if (done) {
    // classic callback style
    return readStream(stream, encoding, length, limit, done);
  }

  return new Promise(function executor(resolve, reject) {
    readStream(stream, encoding, length, limit, function onRead(err, buf) {
      if (err) return reject(err);
      resolve(buf);
    });
  });
}

/**
 * Halt a stream.
 *
 * @param {Object} stream
 * @private
 */

function halt(stream) {
  // unpipe everything from the stream
  unpipe(stream);

  // pause stream
  if (typeof stream.pause === 'function') {
    stream.pause();
  }
}

/**
 * Read the data from the stream.
 *
 * @param {object} stream
 * @param {string} encoding
 * @param {number} length
 * @param {number} limit
 * @param {function} callback
 * @public
 */

function readStream(stream, encoding, length, limit, callback) {
  var complete = false;
  var sync = true;

  // check the length and limit options.
  // note: we intentionally leave the stream paused,
  // so users should handle the stream themselves.
  if (limit !== null && length !== null && length > limit) {
    return done(createError(413, 'request entity too large', {
      expected: length,
      length: length,
      limit: limit,
      type: 'entity.too.large'
    }));
  }

  // streams1: assert request encoding is buffer.
  // streams2+: assert the stream encoding is buffer.
  //   stream._decoder: streams1
  //   state.encoding: streams2
  //   state.decoder: streams2, specifically < 0.10.6
  var state = stream._readableState;
  if (stream._decoder || state && (state.encoding || state.decoder)) {
    // developer error
    return done(createError(500, 'stream encoding should not be set', {
      type: 'stream.encoding.set'
    }));
  }

  var received = 0;
  var decoder;

  try {
    decoder = getDecoder(encoding);
  } catch (err) {
    return done(err);
  }

  var buffer = decoder ? '' : [];

  // attach listeners
  stream.on('aborted', onAborted);
  stream.on('close', cleanup);
  stream.on('data', onData);
  stream.on('end', onEnd);
  stream.on('error', onEnd);

  // mark sync section complete
  sync = false;

  function done() {
    var args = new Array(arguments.length);

    // copy arguments
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    // mark complete
    complete = true;

    if (sync) {
      process.nextTick(invokeCallback);
    } else {
      invokeCallback();
    }

    function invokeCallback() {
      cleanup();

      if (args[0]) {
        // halt the stream on error
        halt(stream);
      }

      callback.apply(null, args);
    }
  }

  function onAborted() {
    if (complete) return;

    done(createError(400, 'request aborted', {
      code: 'ECONNABORTED',
      expected: length,
      length: length,
      received: received,
      type: 'request.aborted'
    }));
  }

  function onData(chunk) {
    if (complete) return;

    received += chunk.length;

    if (limit !== null && received > limit) {
      done(createError(413, 'request entity too large', {
        limit: limit,
        received: received,
        type: 'entity.too.large'
      }));
    } else if (decoder) {
      buffer += decoder.write(chunk);
    } else {
      buffer.push(chunk);
    }
  }

  function onEnd(err) {
    if (complete) return;
    if (err) return done(err);

    if (length !== null && received !== length) {
      done(createError(400, 'request size did not match content length', {
        expected: length,
        length: length,
        received: received,
        type: 'request.size.invalid'
      }));
    } else {
      var string = decoder ? buffer + (decoder.end() || '') : Buffer.concat(buffer);
      done(null, string);
    }
  }

  function cleanup() {
    buffer = null;

    stream.removeListener('aborted', onAborted);
    stream.removeListener('data', onData);
    stream.removeListener('end', onEnd);
    stream.removeListener('error', onEnd);
    stream.removeListener('close', cleanup);
  }
}

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var deprecate = __webpack_require__(129)('http-errors');
var setPrototypeOf = __webpack_require__(132);
var statuses = __webpack_require__(24);
var inherits = __webpack_require__(64);

/**
 * Module exports.
 * @public
 */

module.exports = createError;
module.exports.HttpError = createHttpErrorConstructor();

// Populate exports for all constructors
populateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);

/**
 * Get the code class of a status code.
 * @private
 */

function codeClass(status) {
  return Number(String(status).charAt(0) + '00');
}

/**
 * Create a new HTTP Error.
 *
 * @returns {Error}
 * @public
 */

function createError() {
  // so much arity going on ~_~
  var err;
  var msg;
  var status = 500;
  var props = {};
  for (var i = 0; i < arguments.length; i++) {
    var arg = arguments[i];
    if (arg instanceof Error) {
      err = arg;
      status = err.status || err.statusCode || status;
      continue;
    }
    switch (typeof arg) {
      case 'string':
        msg = arg;
        break;
      case 'number':
        status = arg;
        if (i !== 0) {
          deprecate('non-first-argument status code; replace with createError(' + arg + ', ...)');
        }
        break;
      case 'object':
        props = arg;
        break;
    }
  }

  if (typeof status === 'number' && (status < 400 || status >= 600)) {
    deprecate('non-error status code; use only 4xx or 5xx status codes');
  }

  if (typeof status !== 'number' || !statuses[status] && (status < 400 || status >= 600)) {
    status = 500;
  }

  // constructor
  var HttpError = createError[status] || createError[codeClass(status)];

  if (!err) {
    // create error
    err = HttpError ? new HttpError(msg) : new Error(msg || statuses[status]);
    Error.captureStackTrace(err, createError);
  }

  if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
    // add properties to generic error
    err.expose = status < 500;
    err.status = err.statusCode = status;
  }

  for (var key in props) {
    if (key !== 'status' && key !== 'statusCode') {
      err[key] = props[key];
    }
  }

  return err;
}

/**
 * Create HTTP error abstract base class.
 * @private
 */

function createHttpErrorConstructor() {
  function HttpError() {
    throw new TypeError('cannot construct abstract class');
  }

  inherits(HttpError, Error);

  return HttpError;
}

/**
 * Create a constructor for a client error.
 * @private
 */

function createClientErrorConstructor(HttpError, name, code) {
  var className = name.match(/Error$/) ? name : name + 'Error';

  function ClientError(message) {
    // create the error object
    var msg = message != null ? message : statuses[code];
    var err = new Error(msg);

    // capture a stack trace to the construction point
    Error.captureStackTrace(err, ClientError);

    // adjust the [[Prototype]]
    setPrototypeOf(err, ClientError.prototype);

    // redefine the error message
    Object.defineProperty(err, 'message', {
      enumerable: true,
      configurable: true,
      value: msg,
      writable: true
    });

    // redefine the error name
    Object.defineProperty(err, 'name', {
      enumerable: false,
      configurable: true,
      value: className,
      writable: true
    });

    return err;
  }

  inherits(ClientError, HttpError);

  ClientError.prototype.status = code;
  ClientError.prototype.statusCode = code;
  ClientError.prototype.expose = true;

  return ClientError;
}

/**
 * Create a constructor for a server error.
 * @private
 */

function createServerErrorConstructor(HttpError, name, code) {
  var className = name.match(/Error$/) ? name : name + 'Error';

  function ServerError(message) {
    // create the error object
    var msg = message != null ? message : statuses[code];
    var err = new Error(msg);

    // capture a stack trace to the construction point
    Error.captureStackTrace(err, ServerError);

    // adjust the [[Prototype]]
    setPrototypeOf(err, ServerError.prototype);

    // redefine the error message
    Object.defineProperty(err, 'message', {
      enumerable: true,
      configurable: true,
      value: msg,
      writable: true
    });

    // redefine the error name
    Object.defineProperty(err, 'name', {
      enumerable: false,
      configurable: true,
      value: className,
      writable: true
    });

    return err;
  }

  inherits(ServerError, HttpError);

  ServerError.prototype.status = code;
  ServerError.prototype.statusCode = code;
  ServerError.prototype.expose = false;

  return ServerError;
}

/**
 * Populate the exports object with constructors for every error class.
 * @private
 */

function populateConstructorExports(exports, codes, HttpError) {
  codes.forEach(function forEachCode(code) {
    var CodeError;
    var name = toIdentifier(statuses[code]);

    switch (codeClass(code)) {
      case 400:
        CodeError = createClientErrorConstructor(HttpError, name, code);
        break;
      case 500:
        CodeError = createServerErrorConstructor(HttpError, name, code);
        break;
    }

    if (CodeError) {
      // export the constructor
      exports[code] = CodeError;
      exports[name] = CodeError;
    }
  });

  // backwards-compatibility
  exports["I'mateapot"] = deprecate.function(exports.ImATeapot, '"I\'mateapot"; use "ImATeapot" instead');
}

/**
 * Convert a string of words to a JavaScript identifier.
 * @private
 */

function toIdentifier(str) {
  return str.split(' ').map(function (token) {
    return token.slice(0, 1).toUpperCase() + token.slice(1);
  }).join('').replace(/[^ _0-9a-z]/gi, '');
}

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * depd
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var callSiteToString = __webpack_require__(67).callSiteToString;
var eventListenerCount = __webpack_require__(67).eventListenerCount;
var relative = __webpack_require__(0).relative;

/**
 * Module exports.
 */

module.exports = depd;

/**
 * Get the path to base files on.
 */

var basePath = process.cwd();

/**
 * Determine if namespace is contained in the string.
 */

function containsNamespace(str, namespace) {
  var val = str.split(/[ ,]+/);

  namespace = String(namespace).toLowerCase();

  for (var i = 0; i < val.length; i++) {
    if (!(str = val[i])) continue;

    // namespace contained
    if (str === '*' || str.toLowerCase() === namespace) {
      return true;
    }
  }

  return false;
}

/**
 * Convert a data descriptor to accessor descriptor.
 */

function convertDataDescriptorToAccessor(obj, prop, message) {
  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
  var value = descriptor.value;

  descriptor.get = function getter() {
    return value;
  };

  if (descriptor.writable) {
    descriptor.set = function setter(val) {
      return value = val;
    };
  }

  delete descriptor.value;
  delete descriptor.writable;

  Object.defineProperty(obj, prop, descriptor);

  return descriptor;
}

/**
 * Create arguments string to keep arity.
 */

function createArgumentsString(arity) {
  var str = '';

  for (var i = 0; i < arity; i++) {
    str += ', arg' + i;
  }

  return str.substr(2);
}

/**
 * Create stack string from stack.
 */

function createStackString(stack) {
  var str = this.name + ': ' + this.namespace;

  if (this.message) {
    str += ' deprecated ' + this.message;
  }

  for (var i = 0; i < stack.length; i++) {
    str += '\n    at ' + callSiteToString(stack[i]);
  }

  return str;
}

/**
 * Create deprecate for namespace in caller.
 */

function depd(namespace) {
  if (!namespace) {
    throw new TypeError('argument namespace is required');
  }

  var stack = getStack();
  var site = callSiteLocation(stack[1]);
  var file = site[0];

  function deprecate(message) {
    // call to self as log
    log.call(deprecate, message);
  }

  deprecate._file = file;
  deprecate._ignored = isignored(namespace);
  deprecate._namespace = namespace;
  deprecate._traced = istraced(namespace);
  deprecate._warned = Object.create(null);

  deprecate.function = wrapfunction;
  deprecate.property = wrapproperty;

  return deprecate;
}

/**
 * Determine if namespace is ignored.
 */

function isignored(namespace) {
  /* istanbul ignore next: tested in a child processs */
  if (process.noDeprecation) {
    // --no-deprecation support
    return true;
  }

  var str = process.env.NO_DEPRECATION || '';

  // namespace ignored
  return containsNamespace(str, namespace);
}

/**
 * Determine if namespace is traced.
 */

function istraced(namespace) {
  /* istanbul ignore next: tested in a child processs */
  if (process.traceDeprecation) {
    // --trace-deprecation support
    return true;
  }

  var str = process.env.TRACE_DEPRECATION || '';

  // namespace traced
  return containsNamespace(str, namespace);
}

/**
 * Display deprecation message.
 */

function log(message, site) {
  var haslisteners = eventListenerCount(process, 'deprecation') !== 0;

  // abort early if no destination
  if (!haslisteners && this._ignored) {
    return;
  }

  var caller;
  var callFile;
  var callSite;
  var i = 0;
  var seen = false;
  var stack = getStack();
  var file = this._file;

  if (site) {
    // provided site
    callSite = callSiteLocation(stack[1]);
    callSite.name = site.name;
    file = callSite[0];
  } else {
    // get call site
    i = 2;
    site = callSiteLocation(stack[i]);
    callSite = site;
  }

  // get caller of deprecated thing in relation to file
  for (; i < stack.length; i++) {
    caller = callSiteLocation(stack[i]);
    callFile = caller[0];

    if (callFile === file) {
      seen = true;
    } else if (callFile === this._file) {
      file = this._file;
    } else if (seen) {
      break;
    }
  }

  var key = caller ? site.join(':') + '__' + caller.join(':') : undefined;

  if (key !== undefined && key in this._warned) {
    // already warned
    return;
  }

  this._warned[key] = true;

  // generate automatic message from call site
  if (!message) {
    message = callSite === site || !callSite.name ? defaultMessage(site) : defaultMessage(callSite);
  }

  // emit deprecation if listeners exist
  if (haslisteners) {
    var err = DeprecationError(this._namespace, message, stack.slice(i));
    process.emit('deprecation', err);
    return;
  }

  // format and write message
  var format = process.stderr.isTTY ? formatColor : formatPlain;
  var msg = format.call(this, message, caller, stack.slice(i));
  process.stderr.write(msg + '\n', 'utf8');
}

/**
 * Get call site location as array.
 */

function callSiteLocation(callSite) {
  var file = callSite.getFileName() || '<anonymous>';
  var line = callSite.getLineNumber();
  var colm = callSite.getColumnNumber();

  if (callSite.isEval()) {
    file = callSite.getEvalOrigin() + ', ' + file;
  }

  var site = [file, line, colm];

  site.callSite = callSite;
  site.name = callSite.getFunctionName();

  return site;
}

/**
 * Generate a default message from the site.
 */

function defaultMessage(site) {
  var callSite = site.callSite;
  var funcName = site.name;

  // make useful anonymous name
  if (!funcName) {
    funcName = '<anonymous@' + formatLocation(site) + '>';
  }

  var context = callSite.getThis();
  var typeName = context && callSite.getTypeName();

  // ignore useless type name
  if (typeName === 'Object') {
    typeName = undefined;
  }

  // make useful type name
  if (typeName === 'Function') {
    typeName = context.name || typeName;
  }

  return typeName && callSite.getMethodName() ? typeName + '.' + funcName : funcName;
}

/**
 * Format deprecation message without color.
 */

function formatPlain(msg, caller, stack) {
  var timestamp = new Date().toUTCString();

  var formatted = timestamp + ' ' + this._namespace + ' deprecated ' + msg;

  // add stack trace
  if (this._traced) {
    for (var i = 0; i < stack.length; i++) {
      formatted += '\n    at ' + callSiteToString(stack[i]);
    }

    return formatted;
  }

  if (caller) {
    formatted += ' at ' + formatLocation(caller);
  }

  return formatted;
}

/**
 * Format deprecation message with color.
 */

function formatColor(msg, caller, stack) {
  var formatted = '\x1b[36;1m' + this._namespace + '\x1b[22;39m' + // bold cyan
  ' \x1b[33;1mdeprecated\x1b[22;39m' + // bold yellow
  ' \x1b[0m' + msg + '\x1b[39m'; // reset

  // add stack trace
  if (this._traced) {
    for (var i = 0; i < stack.length; i++) {
      formatted += '\n    \x1b[36mat ' + callSiteToString(stack[i]) + '\x1b[39m'; // cyan
    }

    return formatted;
  }

  if (caller) {
    formatted += ' \x1b[36m' + formatLocation(caller) + '\x1b[39m'; // cyan
  }

  return formatted;
}

/**
 * Format call site location.
 */

function formatLocation(callSite) {
  return relative(basePath, callSite[0]) + ':' + callSite[1] + ':' + callSite[2];
}

/**
 * Get the stack as array of call sites.
 */

function getStack() {
  var limit = Error.stackTraceLimit;
  var obj = {};
  var prep = Error.prepareStackTrace;

  Error.prepareStackTrace = prepareObjectStackTrace;
  Error.stackTraceLimit = Math.max(10, limit);

  // capture the stack
  Error.captureStackTrace(obj);

  // slice this function off the top
  var stack = obj.stack.slice(1);

  Error.prepareStackTrace = prep;
  Error.stackTraceLimit = limit;

  return stack;
}

/**
 * Capture call site stack from v8.
 */

function prepareObjectStackTrace(obj, stack) {
  return stack;
}

/**
 * Return a wrapped function in a deprecation message.
 */

function wrapfunction(fn, message) {
  if (typeof fn !== 'function') {
    throw new TypeError('argument fn must be a function');
  }

  var args = createArgumentsString(fn.length);
  var deprecate = this; // eslint-disable-line no-unused-vars
  var stack = getStack();
  var site = callSiteLocation(stack[1]);

  site.name = fn.name;

  // eslint-disable-next-line no-eval
  var deprecatedfn = eval('(function (' + args + ') {\n' + '"use strict"\n' + 'log.call(deprecate, message, site)\n' + 'return fn.apply(this, arguments)\n' + '})');

  return deprecatedfn;
}

/**
 * Wrap property in a deprecation message.
 */

function wrapproperty(obj, prop, message) {
  if (!obj || typeof obj !== 'object' && typeof obj !== 'function') {
    throw new TypeError('argument obj must be object');
  }

  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);

  if (!descriptor) {
    throw new TypeError('must call property on owner object');
  }

  if (!descriptor.configurable) {
    throw new TypeError('property must be configurable');
  }

  var deprecate = this;
  var stack = getStack();
  var site = callSiteLocation(stack[1]);

  // set site name
  site.name = prop;

  // convert data descriptor
  if ('value' in descriptor) {
    descriptor = convertDataDescriptorToAccessor(obj, prop, message);
  }

  var get = descriptor.get;
  var set = descriptor.set;

  // wrap getter
  if (typeof get === 'function') {
    descriptor.get = function getter() {
      log.call(deprecate, message, site);
      return get.apply(this, arguments);
    };
  }

  // wrap setter
  if (typeof set === 'function') {
    descriptor.set = function setter() {
      log.call(deprecate, message, site);
      return set.apply(this, arguments);
    };
  }

  Object.defineProperty(obj, prop, descriptor);
}

/**
 * Create DeprecationError for deprecation
 */

function DeprecationError(namespace, message, stack) {
  var error = new Error();
  var stackString;

  Object.defineProperty(error, 'constructor', {
    value: DeprecationError
  });

  Object.defineProperty(error, 'message', {
    configurable: true,
    enumerable: false,
    value: message,
    writable: true
  });

  Object.defineProperty(error, 'name', {
    enumerable: false,
    configurable: true,
    value: 'DeprecationError',
    writable: true
  });

  Object.defineProperty(error, 'namespace', {
    configurable: true,
    enumerable: false,
    value: namespace,
    writable: true
  });

  Object.defineProperty(error, 'stack', {
    configurable: true,
    enumerable: false,
    get: function () {
      if (stackString !== undefined) {
        return stackString;
      }

      // prepare stack trace
      return stackString = createStackString.call(this, stack);
    },
    set: function setter(val) {
      stackString = val;
    }
  });

  return error;
}

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * depd
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 */

module.exports = callSiteToString;

/**
 * Format a CallSite file location to a string.
 */

function callSiteFileLocation(callSite) {
  var fileName;
  var fileLocation = '';

  if (callSite.isNative()) {
    fileLocation = 'native';
  } else if (callSite.isEval()) {
    fileName = callSite.getScriptNameOrSourceURL();
    if (!fileName) {
      fileLocation = callSite.getEvalOrigin();
    }
  } else {
    fileName = callSite.getFileName();
  }

  if (fileName) {
    fileLocation += fileName;

    var lineNumber = callSite.getLineNumber();
    if (lineNumber != null) {
      fileLocation += ':' + lineNumber;

      var columnNumber = callSite.getColumnNumber();
      if (columnNumber) {
        fileLocation += ':' + columnNumber;
      }
    }
  }

  return fileLocation || 'unknown source';
}

/**
 * Format a CallSite to a string.
 */

function callSiteToString(callSite) {
  var addSuffix = true;
  var fileLocation = callSiteFileLocation(callSite);
  var functionName = callSite.getFunctionName();
  var isConstructor = callSite.isConstructor();
  var isMethodCall = !(callSite.isToplevel() || isConstructor);
  var line = '';

  if (isMethodCall) {
    var methodName = callSite.getMethodName();
    var typeName = getConstructorName(callSite);

    if (functionName) {
      if (typeName && functionName.indexOf(typeName) !== 0) {
        line += typeName + '.';
      }

      line += functionName;

      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {
        line += ' [as ' + methodName + ']';
      }
    } else {
      line += typeName + '.' + (methodName || '<anonymous>');
    }
  } else if (isConstructor) {
    line += 'new ' + (functionName || '<anonymous>');
  } else if (functionName) {
    line += functionName;
  } else {
    addSuffix = false;
    line += fileLocation;
  }

  if (addSuffix) {
    line += ' (' + fileLocation + ')';
  }

  return line;
}

/**
 * Get constructor name of reviver.
 */

function getConstructorName(obj) {
  var receiver = obj.receiver;
  return receiver.constructor && receiver.constructor.name || null;
}

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = eventListenerCount;

/**
 * Get the count of listeners on an event emitter of a specific type.
 */

function eventListenerCount(emitter, type) {
  return emitter.listeners(type).length;
}

/***/ }),
/* 132 */
/***/ (function(module, exports) {

module.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);

function setProtoOf(obj, proto) {
	obj.__proto__ = proto;
	return obj;
}

function mixinProperties(obj, proto) {
	for (var prop in proto) {
		if (!obj.hasOwnProperty(prop)) {
			obj[prop] = proto[prop];
		}
	}
	return obj;
}

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BOMChar = '\uFEFF';

exports.PrependBOM = PrependBOMWrapper;
function PrependBOMWrapper(encoder, options) {
    this.encoder = encoder;
    this.addBOM = true;
}

PrependBOMWrapper.prototype.write = function (str) {
    if (this.addBOM) {
        str = BOMChar + str;
        this.addBOM = false;
    }

    return this.encoder.write(str);
};

PrependBOMWrapper.prototype.end = function () {
    return this.encoder.end();
};

//------------------------------------------------------------------------------

exports.StripBOM = StripBOMWrapper;
function StripBOMWrapper(decoder, options) {
    this.decoder = decoder;
    this.pass = false;
    this.options = options || {};
}

StripBOMWrapper.prototype.write = function (buf) {
    var res = this.decoder.write(buf);
    if (this.pass || !res) return res;

    if (res[0] === BOMChar) {
        res = res.slice(1);
        if (typeof this.options.stripBOM === 'function') this.options.stripBOM();
    }

    this.pass = true;
    return res;
};

StripBOMWrapper.prototype.end = function () {
    return this.decoder.end();
};

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Update this array if you add/rename/remove files in this directory.
// We support Browserify by skipping automatic module discovery and requiring modules directly.

var modules = [__webpack_require__(135), __webpack_require__(137), __webpack_require__(138), __webpack_require__(139), __webpack_require__(140), __webpack_require__(141), __webpack_require__(142), __webpack_require__(143)];

// Put all encoding/alias/codec definitions to single object and export it. 
for (var i = 0; i < modules.length; i++) {
    var module = modules[i];
    for (var enc in module) if (Object.prototype.hasOwnProperty.call(module, enc)) exports[enc] = module[enc];
}

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(8).Buffer;

// Export Node.js internal encodings.

module.exports = {
    // Encodings
    utf8: { type: "_internal", bomAware: true },
    cesu8: { type: "_internal", bomAware: true },
    unicode11utf8: "utf8",

    ucs2: { type: "_internal", bomAware: true },
    utf16le: "ucs2",

    binary: { type: "_internal" },
    base64: { type: "_internal" },
    hex: { type: "_internal" },

    // Codec.
    _internal: InternalCodec
};

//------------------------------------------------------------------------------

function InternalCodec(codecOptions, iconv) {
    this.enc = codecOptions.encodingName;
    this.bomAware = codecOptions.bomAware;

    if (this.enc === "base64") this.encoder = InternalEncoderBase64;else if (this.enc === "cesu8") {
        this.enc = "utf8"; // Use utf8 for decoding.
        this.encoder = InternalEncoderCesu8;

        // Add decoder for versions of Node not supporting CESU-8
        if (new Buffer('eda0bdedb2a9', 'hex').toString() !== '💩') {
            this.decoder = InternalDecoderCesu8;
            this.defaultCharUnicode = iconv.defaultCharUnicode;
        }
    }
}

InternalCodec.prototype.encoder = InternalEncoder;
InternalCodec.prototype.decoder = InternalDecoder;

//------------------------------------------------------------------------------

// We use node.js internal decoder. Its signature is the same as ours.
var StringDecoder = __webpack_require__(136).StringDecoder;

if (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.
    StringDecoder.prototype.end = function () {};

function InternalDecoder(options, codec) {
    StringDecoder.call(this, codec.enc);
}

InternalDecoder.prototype = StringDecoder.prototype;

//------------------------------------------------------------------------------
// Encoder is mostly trivial

function InternalEncoder(options, codec) {
    this.enc = codec.enc;
}

InternalEncoder.prototype.write = function (str) {
    return new Buffer(str, this.enc);
};

InternalEncoder.prototype.end = function () {};

//------------------------------------------------------------------------------
// Except base64 encoder, which must keep its state.

function InternalEncoderBase64(options, codec) {
    this.prevStr = '';
}

InternalEncoderBase64.prototype.write = function (str) {
    str = this.prevStr + str;
    var completeQuads = str.length - str.length % 4;
    this.prevStr = str.slice(completeQuads);
    str = str.slice(0, completeQuads);

    return new Buffer(str, "base64");
};

InternalEncoderBase64.prototype.end = function () {
    return new Buffer(this.prevStr, "base64");
};

//------------------------------------------------------------------------------
// CESU-8 encoder is also special.

function InternalEncoderCesu8(options, codec) {}

InternalEncoderCesu8.prototype.write = function (str) {
    var buf = new Buffer(str.length * 3),
        bufIdx = 0;
    for (var i = 0; i < str.length; i++) {
        var charCode = str.charCodeAt(i);
        // Naive implementation, but it works because CESU-8 is especially easy
        // to convert from UTF-16 (which all JS strings are encoded in).
        if (charCode < 0x80) buf[bufIdx++] = charCode;else if (charCode < 0x800) {
            buf[bufIdx++] = 0xC0 + (charCode >>> 6);
            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
        } else {
            // charCode will always be < 0x10000 in javascript.
            buf[bufIdx++] = 0xE0 + (charCode >>> 12);
            buf[bufIdx++] = 0x80 + (charCode >>> 6 & 0x3f);
            buf[bufIdx++] = 0x80 + (charCode & 0x3f);
        }
    }
    return buf.slice(0, bufIdx);
};

InternalEncoderCesu8.prototype.end = function () {};

//------------------------------------------------------------------------------
// CESU-8 decoder is not implemented in Node v4.0+

function InternalDecoderCesu8(options, codec) {
    this.acc = 0;
    this.contBytes = 0;
    this.accBytes = 0;
    this.defaultCharUnicode = codec.defaultCharUnicode;
}

InternalDecoderCesu8.prototype.write = function (buf) {
    var acc = this.acc,
        contBytes = this.contBytes,
        accBytes = this.accBytes,
        res = '';
    for (var i = 0; i < buf.length; i++) {
        var curByte = buf[i];
        if ((curByte & 0xC0) !== 0x80) {
            // Leading byte
            if (contBytes > 0) {
                // Previous code is invalid
                res += this.defaultCharUnicode;
                contBytes = 0;
            }

            if (curByte < 0x80) {
                // Single-byte code
                res += String.fromCharCode(curByte);
            } else if (curByte < 0xE0) {
                // Two-byte code
                acc = curByte & 0x1F;
                contBytes = 1;accBytes = 1;
            } else if (curByte < 0xF0) {
                // Three-byte code
                acc = curByte & 0x0F;
                contBytes = 2;accBytes = 1;
            } else {
                // Four or more are not supported for CESU-8.
                res += this.defaultCharUnicode;
            }
        } else {
            // Continuation byte
            if (contBytes > 0) {
                // We're waiting for it.
                acc = acc << 6 | curByte & 0x3f;
                contBytes--;accBytes++;
                if (contBytes === 0) {
                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
                    if (accBytes === 2 && acc < 0x80 && acc > 0) res += this.defaultCharUnicode;else if (accBytes === 3 && acc < 0x800) res += this.defaultCharUnicode;else
                        // Actually add character.
                        res += String.fromCharCode(acc);
                }
            } else {
                // Unexpected continuation byte
                res += this.defaultCharUnicode;
            }
        }
    }
    this.acc = acc;this.contBytes = contBytes;this.accBytes = accBytes;
    return res;
};

InternalDecoderCesu8.prototype.end = function () {
    var res = 0;
    if (this.contBytes > 0) res += this.defaultCharUnicode;
    return res;
};

/***/ }),
/* 136 */
/***/ (function(module, exports) {

module.exports = require("string_decoder");

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(8).Buffer;

// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

// == UTF16-BE codec. ==========================================================

exports.utf16be = Utf16BECodec;
function Utf16BECodec() {}

Utf16BECodec.prototype.encoder = Utf16BEEncoder;
Utf16BECodec.prototype.decoder = Utf16BEDecoder;
Utf16BECodec.prototype.bomAware = true;

// -- Encoding

function Utf16BEEncoder() {}

Utf16BEEncoder.prototype.write = function (str) {
    var buf = new Buffer(str, 'ucs2');
    for (var i = 0; i < buf.length; i += 2) {
        var tmp = buf[i];buf[i] = buf[i + 1];buf[i + 1] = tmp;
    }
    return buf;
};

Utf16BEEncoder.prototype.end = function () {};

// -- Decoding

function Utf16BEDecoder() {
    this.overflowByte = -1;
}

Utf16BEDecoder.prototype.write = function (buf) {
    if (buf.length == 0) return '';

    var buf2 = new Buffer(buf.length + 1),
        i = 0,
        j = 0;

    if (this.overflowByte !== -1) {
        buf2[0] = buf[0];
        buf2[1] = this.overflowByte;
        i = 1;j = 2;
    }

    for (; i < buf.length - 1; i += 2, j += 2) {
        buf2[j] = buf[i + 1];
        buf2[j + 1] = buf[i];
    }

    this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;

    return buf2.slice(0, j).toString('ucs2');
};

Utf16BEDecoder.prototype.end = function () {};

// == UTF-16 codec =============================================================
// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
// Defaults to UTF-16LE, as it's prevalent and default in Node.
// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

exports.utf16 = Utf16Codec;
function Utf16Codec(codecOptions, iconv) {
    this.iconv = iconv;
}

Utf16Codec.prototype.encoder = Utf16Encoder;
Utf16Codec.prototype.decoder = Utf16Decoder;

// -- Encoding (pass-through)

function Utf16Encoder(options, codec) {
    options = options || {};
    if (options.addBOM === undefined) options.addBOM = true;
    this.encoder = codec.iconv.getEncoder('utf-16le', options);
}

Utf16Encoder.prototype.write = function (str) {
    return this.encoder.write(str);
};

Utf16Encoder.prototype.end = function () {
    return this.encoder.end();
};

// -- Decoding

function Utf16Decoder(options, codec) {
    this.decoder = null;
    this.initialBytes = [];
    this.initialBytesLen = 0;

    this.options = options || {};
    this.iconv = codec.iconv;
}

Utf16Decoder.prototype.write = function (buf) {
    if (!this.decoder) {
        // Codec is not chosen yet. Accumulate initial bytes.
        this.initialBytes.push(buf);
        this.initialBytesLen += buf.length;

        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)
            return '';

        // We have enough bytes -> detect endianness.
        var buf = Buffer.concat(this.initialBytes),
            encoding = detectEncoding(buf, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);
        this.initialBytes.length = this.initialBytesLen = 0;
    }

    return this.decoder.write(buf);
};

Utf16Decoder.prototype.end = function () {
    if (!this.decoder) {
        var buf = Buffer.concat(this.initialBytes),
            encoding = detectEncoding(buf, this.options.defaultEncoding);
        this.decoder = this.iconv.getDecoder(encoding, this.options);

        var res = this.decoder.write(buf),
            trail = this.decoder.end();

        return trail ? res + trail : res;
    }
    return this.decoder.end();
};

function detectEncoding(buf, defaultEncoding) {
    var enc = defaultEncoding || 'utf-16le';

    if (buf.length >= 2) {
        // Check BOM.
        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM
            enc = 'utf-16be';else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM
            enc = 'utf-16le';else {
            // No BOM found. Try to deduce encoding from initial content.
            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
            // So, we count ASCII as if it was LE or BE, and decide from that.
            var asciiCharsLE = 0,
                asciiCharsBE = 0,
                // Counts of chars in both positions
            _len = Math.min(buf.length - buf.length % 2, 64); // Len is always even.

            for (var i = 0; i < _len; i += 2) {
                if (buf[i] === 0 && buf[i + 1] !== 0) asciiCharsBE++;
                if (buf[i] !== 0 && buf[i + 1] === 0) asciiCharsLE++;
            }

            if (asciiCharsBE > asciiCharsLE) enc = 'utf-16be';else if (asciiCharsBE < asciiCharsLE) enc = 'utf-16le';
        }
    }

    return enc;
}

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(8).Buffer;

// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

exports.utf7 = Utf7Codec;
exports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
function Utf7Codec(codecOptions, iconv) {
    this.iconv = iconv;
};

Utf7Codec.prototype.encoder = Utf7Encoder;
Utf7Codec.prototype.decoder = Utf7Decoder;
Utf7Codec.prototype.bomAware = true;

// -- Encoding

var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;

function Utf7Encoder(options, codec) {
    this.iconv = codec.iconv;
}

Utf7Encoder.prototype.write = function (str) {
    // Naive implementation.
    // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
    return new Buffer(str.replace(nonDirectChars, function (chunk) {
        return "+" + (chunk === '+' ? '' : this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) + "-";
    }.bind(this)));
};

Utf7Encoder.prototype.end = function () {};

// -- Decoding

function Utf7Decoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = '';
}

var base64Regex = /[A-Za-z0-9\/+]/;
var base64Chars = [];
for (var i = 0; i < 256; i++) base64Chars[i] = base64Regex.test(String.fromCharCode(i));

var plusChar = '+'.charCodeAt(0),
    minusChar = '-'.charCodeAt(0),
    andChar = '&'.charCodeAt(0);

Utf7Decoder.prototype.write = function (buf) {
    var res = "",
        lastI = 0,
        inBase64 = this.inBase64,
        base64Accum = this.base64Accum;

    // The decoder is more involved as we must handle chunks in stream.

    for (var i = 0; i < buf.length; i++) {
        if (!inBase64) {
            // We're in direct mode.
            // Write direct chars until '+'
            if (buf[i] == plusChar) {
                res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                lastI = i + 1;
                inBase64 = true;
            }
        } else {
            // We decode base64.
            if (!base64Chars[buf[i]]) {
                // Base64 ended.
                if (i == lastI && buf[i] == minusChar) {
                    // "+-" -> "+"
                    res += "+";
                } else {
                    var b64str = base64Accum + buf.slice(lastI, i).toString();
                    res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
                }

                if (buf[i] != minusChar) // Minus is absorbed after base64.
                    i--;

                lastI = i + 1;
                inBase64 = false;
                base64Accum = '';
            }
        }
    }

    if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
    } else {
        var b64str = base64Accum + buf.slice(lastI).toString();

        var canBeDecoded = b64str.length - b64str.length % 8; // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
        b64str = b64str.slice(0, canBeDecoded);

        res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
    }

    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;

    return res;
};

Utf7Decoder.prototype.end = function () {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0) res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), "utf16-be");

    this.inBase64 = false;
    this.base64Accum = '';
    return res;
};

// UTF-7-IMAP codec.
// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
// Differences:
//  * Base64 part is started by "&" instead of "+"
//  * Direct characters are 0x20-0x7E, except "&" (0x26)
//  * In Base64, "," is used instead of "/"
//  * Base64 must not be used to represent direct characters.
//  * No implicit shift back from Base64 (should always end with '-')
//  * String must end in non-shifted position.
//  * "-&" while in base64 is not allowed.


exports.utf7imap = Utf7IMAPCodec;
function Utf7IMAPCodec(codecOptions, iconv) {
    this.iconv = iconv;
};

Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
Utf7IMAPCodec.prototype.bomAware = true;

// -- Encoding

function Utf7IMAPEncoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = new Buffer(6);
    this.base64AccumIdx = 0;
}

Utf7IMAPEncoder.prototype.write = function (str) {
    var inBase64 = this.inBase64,
        base64Accum = this.base64Accum,
        base64AccumIdx = this.base64AccumIdx,
        buf = new Buffer(str.length * 5 + 10),
        bufIdx = 0;

    for (var i = 0; i < str.length; i++) {
        var uChar = str.charCodeAt(i);
        if (0x20 <= uChar && uChar <= 0x7E) {
            // Direct character or '&'.
            if (inBase64) {
                if (base64AccumIdx > 0) {
                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                    base64AccumIdx = 0;
                }

                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
                inBase64 = false;
            }

            if (!inBase64) {
                buf[bufIdx++] = uChar; // Write direct character

                if (uChar === andChar) // Ampersand -> '&-'
                    buf[bufIdx++] = minusChar;
            }
        } else {
            // Non-direct character
            if (!inBase64) {
                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.
                inBase64 = true;
            }
            if (inBase64) {
                base64Accum[base64AccumIdx++] = uChar >> 8;
                base64Accum[base64AccumIdx++] = uChar & 0xFF;

                if (base64AccumIdx == base64Accum.length) {
                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
                    base64AccumIdx = 0;
                }
            }
        }
    }

    this.inBase64 = inBase64;
    this.base64AccumIdx = base64AccumIdx;

    return buf.slice(0, bufIdx);
};

Utf7IMAPEncoder.prototype.end = function () {
    var buf = new Buffer(10),
        bufIdx = 0;
    if (this.inBase64) {
        if (this.base64AccumIdx > 0) {
            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
            this.base64AccumIdx = 0;
        }

        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
        this.inBase64 = false;
    }

    return buf.slice(0, bufIdx);
};

// -- Decoding

function Utf7IMAPDecoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = '';
}

var base64IMAPChars = base64Chars.slice();
base64IMAPChars[','.charCodeAt(0)] = true;

Utf7IMAPDecoder.prototype.write = function (buf) {
    var res = "",
        lastI = 0,
        inBase64 = this.inBase64,
        base64Accum = this.base64Accum;

    // The decoder is more involved as we must handle chunks in stream.
    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

    for (var i = 0; i < buf.length; i++) {
        if (!inBase64) {
            // We're in direct mode.
            // Write direct chars until '&'
            if (buf[i] == andChar) {
                res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                lastI = i + 1;
                inBase64 = true;
            }
        } else {
            // We decode base64.
            if (!base64IMAPChars[buf[i]]) {
                // Base64 ended.
                if (i == lastI && buf[i] == minusChar) {
                    // "&-" -> "&"
                    res += "&";
                } else {
                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');
                    res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
                }

                if (buf[i] != minusChar) // Minus may be absorbed after base64.
                    i--;

                lastI = i + 1;
                inBase64 = false;
                base64Accum = '';
            }
        }
    }

    if (!inBase64) {
        res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
    } else {
        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');

        var canBeDecoded = b64str.length - b64str.length % 8; // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
        b64str = b64str.slice(0, canBeDecoded);

        res += this.iconv.decode(new Buffer(b64str, 'base64'), "utf16-be");
    }

    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;

    return res;
};

Utf7IMAPDecoder.prototype.end = function () {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0) res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), "utf16-be");

    this.inBase64 = false;
    this.base64Accum = '';
    return res;
};

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(8).Buffer;

// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
// correspond to encoded bytes (if 128 - then lower half is ASCII). 

exports._sbcs = SBCSCodec;
function SBCSCodec(codecOptions, iconv) {
    if (!codecOptions) throw new Error("SBCS codec is called without the data.");

    // Prepare char buffer for decoding.
    if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256) throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");

    if (codecOptions.chars.length === 128) {
        var asciiString = "";
        for (var i = 0; i < 128; i++) asciiString += String.fromCharCode(i);
        codecOptions.chars = asciiString + codecOptions.chars;
    }

    this.decodeBuf = new Buffer(codecOptions.chars, 'ucs2');

    // Encoding buffer.
    var encodeBuf = new Buffer(65536);
    encodeBuf.fill(iconv.defaultCharSingleByte.charCodeAt(0));

    for (var i = 0; i < codecOptions.chars.length; i++) encodeBuf[codecOptions.chars.charCodeAt(i)] = i;

    this.encodeBuf = encodeBuf;
}

SBCSCodec.prototype.encoder = SBCSEncoder;
SBCSCodec.prototype.decoder = SBCSDecoder;

function SBCSEncoder(options, codec) {
    this.encodeBuf = codec.encodeBuf;
}

SBCSEncoder.prototype.write = function (str) {
    var buf = new Buffer(str.length);
    for (var i = 0; i < str.length; i++) buf[i] = this.encodeBuf[str.charCodeAt(i)];

    return buf;
};

SBCSEncoder.prototype.end = function () {};

function SBCSDecoder(options, codec) {
    this.decodeBuf = codec.decodeBuf;
}

SBCSDecoder.prototype.write = function (buf) {
    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
    var decodeBuf = this.decodeBuf;
    var newBuf = new Buffer(buf.length * 2);
    var idx1 = 0,
        idx2 = 0;
    for (var i = 0; i < buf.length; i++) {
        idx1 = buf[i] * 2;idx2 = i * 2;
        newBuf[idx2] = decodeBuf[idx1];
        newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
    }
    return newBuf.toString('ucs2');
};

SBCSDecoder.prototype.end = function () {};

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Manually added data to be used by sbcs codec in addition to generated one.

module.exports = {
    // Not supported by iconv, not sure why.
    "10029": "maccenteuro",
    "maccenteuro": {
        "type": "_sbcs",
        "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
    },

    "808": "cp808",
    "ibm808": "cp808",
    "cp808": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
    },

    // Aliases of generated encodings.
    "ascii8bit": "ascii",
    "usascii": "ascii",
    "ansix34": "ascii",
    "ansix341968": "ascii",
    "ansix341986": "ascii",
    "csascii": "ascii",
    "cp367": "ascii",
    "ibm367": "ascii",
    "isoir6": "ascii",
    "iso646us": "ascii",
    "iso646irv": "ascii",
    "us": "ascii",

    "latin1": "iso88591",
    "latin2": "iso88592",
    "latin3": "iso88593",
    "latin4": "iso88594",
    "latin5": "iso88599",
    "latin6": "iso885910",
    "latin7": "iso885913",
    "latin8": "iso885914",
    "latin9": "iso885915",
    "latin10": "iso885916",

    "csisolatin1": "iso88591",
    "csisolatin2": "iso88592",
    "csisolatin3": "iso88593",
    "csisolatin4": "iso88594",
    "csisolatincyrillic": "iso88595",
    "csisolatinarabic": "iso88596",
    "csisolatingreek": "iso88597",
    "csisolatinhebrew": "iso88598",
    "csisolatin5": "iso88599",
    "csisolatin6": "iso885910",

    "l1": "iso88591",
    "l2": "iso88592",
    "l3": "iso88593",
    "l4": "iso88594",
    "l5": "iso88599",
    "l6": "iso885910",
    "l7": "iso885913",
    "l8": "iso885914",
    "l9": "iso885915",
    "l10": "iso885916",

    "isoir14": "iso646jp",
    "isoir57": "iso646cn",
    "isoir100": "iso88591",
    "isoir101": "iso88592",
    "isoir109": "iso88593",
    "isoir110": "iso88594",
    "isoir144": "iso88595",
    "isoir127": "iso88596",
    "isoir126": "iso88597",
    "isoir138": "iso88598",
    "isoir148": "iso88599",
    "isoir157": "iso885910",
    "isoir166": "tis620",
    "isoir179": "iso885913",
    "isoir199": "iso885914",
    "isoir203": "iso885915",
    "isoir226": "iso885916",

    "cp819": "iso88591",
    "ibm819": "iso88591",

    "cyrillic": "iso88595",

    "arabic": "iso88596",
    "arabic8": "iso88596",
    "ecma114": "iso88596",
    "asmo708": "iso88596",

    "greek": "iso88597",
    "greek8": "iso88597",
    "ecma118": "iso88597",
    "elot928": "iso88597",

    "hebrew": "iso88598",
    "hebrew8": "iso88598",

    "turkish": "iso88599",
    "turkish8": "iso88599",

    "thai": "iso885911",
    "thai8": "iso885911",

    "celtic": "iso885914",
    "celtic8": "iso885914",
    "isoceltic": "iso885914",

    "tis6200": "tis620",
    "tis62025291": "tis620",
    "tis62025330": "tis620",

    "10000": "macroman",
    "10006": "macgreek",
    "10007": "maccyrillic",
    "10079": "maciceland",
    "10081": "macturkish",

    "cspc8codepage437": "cp437",
    "cspc775baltic": "cp775",
    "cspc850multilingual": "cp850",
    "cspcp852": "cp852",
    "cspc862latinhebrew": "cp862",
    "cpgr": "cp869",

    "msee": "cp1250",
    "mscyrl": "cp1251",
    "msansi": "cp1252",
    "msgreek": "cp1253",
    "msturk": "cp1254",
    "mshebr": "cp1255",
    "msarab": "cp1256",
    "winbaltrim": "cp1257",

    "cp20866": "koi8r",
    "20866": "koi8r",
    "ibm878": "koi8r",
    "cskoi8r": "koi8r",

    "cp21866": "koi8u",
    "21866": "koi8u",
    "ibm1168": "koi8u",

    "strk10482002": "rk1048",

    "tcvn5712": "tcvn",
    "tcvn57121": "tcvn",

    "gb198880": "iso646cn",
    "cn": "iso646cn",

    "csiso14jisc6220ro": "iso646jp",
    "jisc62201969ro": "iso646jp",
    "jp": "iso646jp",

    "cshproman8": "hproman8",
    "r8": "hproman8",
    "roman8": "hproman8",
    "xroman8": "hproman8",
    "ibm1051": "hproman8",

    "mac": "macintosh",
    "csmacintosh": "macintosh"
};

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.

module.exports = {
  "437": "cp437",
  "737": "cp737",
  "775": "cp775",
  "850": "cp850",
  "852": "cp852",
  "855": "cp855",
  "856": "cp856",
  "857": "cp857",
  "858": "cp858",
  "860": "cp860",
  "861": "cp861",
  "862": "cp862",
  "863": "cp863",
  "864": "cp864",
  "865": "cp865",
  "866": "cp866",
  "869": "cp869",
  "874": "windows874",
  "922": "cp922",
  "1046": "cp1046",
  "1124": "cp1124",
  "1125": "cp1125",
  "1129": "cp1129",
  "1133": "cp1133",
  "1161": "cp1161",
  "1162": "cp1162",
  "1163": "cp1163",
  "1250": "windows1250",
  "1251": "windows1251",
  "1252": "windows1252",
  "1253": "windows1253",
  "1254": "windows1254",
  "1255": "windows1255",
  "1256": "windows1256",
  "1257": "windows1257",
  "1258": "windows1258",
  "28591": "iso88591",
  "28592": "iso88592",
  "28593": "iso88593",
  "28594": "iso88594",
  "28595": "iso88595",
  "28596": "iso88596",
  "28597": "iso88597",
  "28598": "iso88598",
  "28599": "iso88599",
  "28600": "iso885910",
  "28601": "iso885911",
  "28603": "iso885913",
  "28604": "iso885914",
  "28605": "iso885915",
  "28606": "iso885916",
  "windows874": {
    "type": "_sbcs",
    "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "win874": "windows874",
  "cp874": "windows874",
  "windows1250": {
    "type": "_sbcs",
    "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
  },
  "win1250": "windows1250",
  "cp1250": "windows1250",
  "windows1251": {
    "type": "_sbcs",
    "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "win1251": "windows1251",
  "cp1251": "windows1251",
  "windows1252": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "win1252": "windows1252",
  "cp1252": "windows1252",
  "windows1253": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
  },
  "win1253": "windows1253",
  "cp1253": "windows1253",
  "windows1254": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
  },
  "win1254": "windows1254",
  "cp1254": "windows1254",
  "windows1255": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
  },
  "win1255": "windows1255",
  "cp1255": "windows1255",
  "windows1256": {
    "type": "_sbcs",
    "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
  },
  "win1256": "windows1256",
  "cp1256": "windows1256",
  "windows1257": {
    "type": "_sbcs",
    "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
  },
  "win1257": "windows1257",
  "cp1257": "windows1257",
  "windows1258": {
    "type": "_sbcs",
    "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "win1258": "windows1258",
  "cp1258": "windows1258",
  "iso88591": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "cp28591": "iso88591",
  "iso88592": {
    "type": "_sbcs",
    "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
  },
  "cp28592": "iso88592",
  "iso88593": {
    "type": "_sbcs",
    "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
  },
  "cp28593": "iso88593",
  "iso88594": {
    "type": "_sbcs",
    "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
  },
  "cp28594": "iso88594",
  "iso88595": {
    "type": "_sbcs",
    "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
  },
  "cp28595": "iso88595",
  "iso88596": {
    "type": "_sbcs",
    "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
  },
  "cp28596": "iso88596",
  "iso88597": {
    "type": "_sbcs",
    "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
  },
  "cp28597": "iso88597",
  "iso88598": {
    "type": "_sbcs",
    "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
  },
  "cp28598": "iso88598",
  "iso88599": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
  },
  "cp28599": "iso88599",
  "iso885910": {
    "type": "_sbcs",
    "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
  },
  "cp28600": "iso885910",
  "iso885911": {
    "type": "_sbcs",
    "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "cp28601": "iso885911",
  "iso885913": {
    "type": "_sbcs",
    "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
  },
  "cp28603": "iso885913",
  "iso885914": {
    "type": "_sbcs",
    "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
  },
  "cp28604": "iso885914",
  "iso885915": {
    "type": "_sbcs",
    "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "cp28605": "iso885915",
  "iso885916": {
    "type": "_sbcs",
    "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
  },
  "cp28606": "iso885916",
  "cp437": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm437": "cp437",
  "csibm437": "cp437",
  "cp737": {
    "type": "_sbcs",
    "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
  },
  "ibm737": "cp737",
  "csibm737": "cp737",
  "cp775": {
    "type": "_sbcs",
    "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
  },
  "ibm775": "cp775",
  "csibm775": "cp775",
  "cp850": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm850": "cp850",
  "csibm850": "cp850",
  "cp852": {
    "type": "_sbcs",
    "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
  },
  "ibm852": "cp852",
  "csibm852": "cp852",
  "cp855": {
    "type": "_sbcs",
    "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
  },
  "ibm855": "cp855",
  "csibm855": "cp855",
  "cp856": {
    "type": "_sbcs",
    "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm856": "cp856",
  "csibm856": "cp856",
  "cp857": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
  },
  "ibm857": "cp857",
  "csibm857": "cp857",
  "cp858": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
  },
  "ibm858": "cp858",
  "csibm858": "cp858",
  "cp860": {
    "type": "_sbcs",
    "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm860": "cp860",
  "csibm860": "cp860",
  "cp861": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm861": "cp861",
  "csibm861": "cp861",
  "cp862": {
    "type": "_sbcs",
    "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm862": "cp862",
  "csibm862": "cp862",
  "cp863": {
    "type": "_sbcs",
    "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm863": "cp863",
  "csibm863": "cp863",
  "cp864": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
  },
  "ibm864": "cp864",
  "csibm864": "cp864",
  "cp865": {
    "type": "_sbcs",
    "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
  },
  "ibm865": "cp865",
  "csibm865": "cp865",
  "cp866": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
  },
  "ibm866": "cp866",
  "csibm866": "cp866",
  "cp869": {
    "type": "_sbcs",
    "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
  },
  "ibm869": "cp869",
  "csibm869": "cp869",
  "cp922": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
  },
  "ibm922": "cp922",
  "csibm922": "cp922",
  "cp1046": {
    "type": "_sbcs",
    "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
  },
  "ibm1046": "cp1046",
  "csibm1046": "cp1046",
  "cp1124": {
    "type": "_sbcs",
    "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
  },
  "ibm1124": "cp1124",
  "csibm1124": "cp1124",
  "cp1125": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
  },
  "ibm1125": "cp1125",
  "csibm1125": "cp1125",
  "cp1129": {
    "type": "_sbcs",
    "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "ibm1129": "cp1129",
  "csibm1129": "cp1129",
  "cp1133": {
    "type": "_sbcs",
    "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
  },
  "ibm1133": "cp1133",
  "csibm1133": "cp1133",
  "cp1161": {
    "type": "_sbcs",
    "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
  },
  "ibm1161": "cp1161",
  "csibm1161": "cp1161",
  "cp1162": {
    "type": "_sbcs",
    "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  },
  "ibm1162": "cp1162",
  "csibm1162": "cp1162",
  "cp1163": {
    "type": "_sbcs",
    "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
  },
  "ibm1163": "cp1163",
  "csibm1163": "cp1163",
  "maccroatian": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
  },
  "maccyrillic": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
  },
  "macgreek": {
    "type": "_sbcs",
    "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
  },
  "maciceland": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macroman": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macromania": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macthai": {
    "type": "_sbcs",
    "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
  },
  "macturkish": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "macukraine": {
    "type": "_sbcs",
    "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
  },
  "koi8r": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8u": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8ru": {
    "type": "_sbcs",
    "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "koi8t": {
    "type": "_sbcs",
    "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
  },
  "armscii8": {
    "type": "_sbcs",
    "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
  },
  "rk1048": {
    "type": "_sbcs",
    "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "tcvn": {
    "type": "_sbcs",
    "chars": "\u0000ÚỤ\u0003ỪỬỮ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
  },
  "georgianacademy": {
    "type": "_sbcs",
    "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "georgianps": {
    "type": "_sbcs",
    "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
  },
  "pt154": {
    "type": "_sbcs",
    "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
  },
  "viscii": {
    "type": "_sbcs",
    "chars": "\u0000\u0001Ẳ\u0003\u0004ẴẪ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
  },
  "iso646cn": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
  },
  "iso646jp": {
    "type": "_sbcs",
    "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
  },
  "hproman8": {
    "type": "_sbcs",
    "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
  },
  "macintosh": {
    "type": "_sbcs",
    "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
  },
  "ascii": {
    "type": "_sbcs",
    "chars": "��������������������������������������������������������������������������������������������������������������������������������"
  },
  "tis620": {
    "type": "_sbcs",
    "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
  }
};

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(8).Buffer;

// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
// To save memory and loading time, we read table files only when requested.

exports._dbcs = DBCSCodec;

var UNASSIGNED = -1,
    GB18030_CODE = -2,
    SEQ_START = -10,
    NODE_START = -1000,
    UNASSIGNED_NODE = new Array(0x100),
    DEF_CHAR = -1;

for (var i = 0; i < 0x100; i++) UNASSIGNED_NODE[i] = UNASSIGNED;

// Class DBCSCodec reads and initializes mapping tables.
function DBCSCodec(codecOptions, iconv) {
    this.encodingName = codecOptions.encodingName;
    if (!codecOptions) throw new Error("DBCS codec is called without the data.");
    if (!codecOptions.table) throw new Error("Encoding '" + this.encodingName + "' has no data.");

    // Load tables.
    var mappingTable = codecOptions.table();

    // Decode tables: MBCS -> Unicode.

    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
    // Trie root is decodeTables[0].
    // Values: >=  0 -> unicode character code. can be > 0xFFFF
    //         == UNASSIGNED -> unknown/unassigned sequence.
    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
    //         <= NODE_START -> index of the next node in our trie to process next byte.
    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
    this.decodeTables = [];
    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.

    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 
    this.decodeTableSeq = [];

    // Actual mapping tables consist of chunks. Use them to fill up decode tables.
    for (var i = 0; i < mappingTable.length; i++) this._addDecodeChunk(mappingTable[i]);

    this.defaultCharUnicode = iconv.defaultCharUnicode;

    // Encode tables: Unicode -> DBCS.

    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
    //         == UNASSIGNED -> no conversion found. Output a default char.
    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
    this.encodeTable = [];

    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
    // means end of sequence (needed when one sequence is a strict subsequence of another).
    // Objects are kept separately from encodeTable to increase performance.
    this.encodeTableSeq = [];

    // Some chars can be decoded, but need not be encoded.
    var skipEncodeChars = {};
    if (codecOptions.encodeSkipVals) for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
        var val = codecOptions.encodeSkipVals[i];
        if (typeof val === 'number') skipEncodeChars[val] = true;else for (var j = val.from; j <= val.to; j++) skipEncodeChars[j] = true;
    }

    // Use decode trie to recursively fill out encode tables.
    this._fillEncodeTable(0, 0, skipEncodeChars);

    // Add more encoding pairs when needed.
    if (codecOptions.encodeAdd) {
        for (var uChar in codecOptions.encodeAdd) if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar)) this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
    }

    this.defCharSB = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];
    if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);

    // Load & create GB18030 tables when needed.
    if (typeof codecOptions.gb18030 === 'function') {
        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.

        // Add GB18030 decode tables.
        var thirdByteNodeIdx = this.decodeTables.length;
        var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);

        var fourthByteNodeIdx = this.decodeTables.length;
        var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);

        for (var i = 0x81; i <= 0xFE; i++) {
            var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];
            var secondByteNode = this.decodeTables[secondByteNodeIdx];
            for (var j = 0x30; j <= 0x39; j++) secondByteNode[j] = NODE_START - thirdByteNodeIdx;
        }
        for (var i = 0x81; i <= 0xFE; i++) thirdByteNode[i] = NODE_START - fourthByteNodeIdx;
        for (var i = 0x30; i <= 0x39; i++) fourthByteNode[i] = GB18030_CODE;
    }
}

DBCSCodec.prototype.encoder = DBCSEncoder;
DBCSCodec.prototype.decoder = DBCSDecoder;

// Decoder helpers
DBCSCodec.prototype._getDecodeTrieNode = function (addr) {
    var bytes = [];
    for (; addr > 0; addr >>= 8) bytes.push(addr & 0xFF);
    if (bytes.length == 0) bytes.push(0);

    var node = this.decodeTables[0];
    for (var i = bytes.length - 1; i > 0; i--) {
        // Traverse nodes deeper into the trie.
        var val = node[bytes[i]];

        if (val == UNASSIGNED) {
            // Create new node.
            node[bytes[i]] = NODE_START - this.decodeTables.length;
            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
        } else if (val <= NODE_START) {
            // Existing node.
            node = this.decodeTables[NODE_START - val];
        } else throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
    }
    return node;
};

DBCSCodec.prototype._addDecodeChunk = function (chunk) {
    // First element of chunk is the hex mbcs code where we start.
    var curAddr = parseInt(chunk[0], 16);

    // Choose the decoding node where we'll write our chars.
    var writeTable = this._getDecodeTrieNode(curAddr);
    curAddr = curAddr & 0xFF;

    // Write all other elements of the chunk to the table.
    for (var k = 1; k < chunk.length; k++) {
        var part = chunk[k];
        if (typeof part === "string") {
            // String, write as-is.
            for (var l = 0; l < part.length;) {
                var code = part.charCodeAt(l++);
                if (0xD800 <= code && code < 0xDC00) {
                    // Decode surrogate
                    var codeTrail = part.charCodeAt(l++);
                    if (0xDC00 <= codeTrail && codeTrail < 0xE000) writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);else throw new Error("Incorrect surrogate pair in " + this.encodingName + " at chunk " + chunk[0]);
                } else if (0x0FF0 < code && code <= 0x0FFF) {
                    // Character sequence (our own encoding used)
                    var len = 0xFFF - code + 2;
                    var seq = [];
                    for (var m = 0; m < len; m++) seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.

                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
                    this.decodeTableSeq.push(seq);
                } else writeTable[curAddr++] = code; // Basic char
            }
        } else if (typeof part === "number") {
            // Integer, meaning increasing sequence starting with prev character.
            var charCode = writeTable[curAddr - 1] + 1;
            for (var l = 0; l < part; l++) writeTable[curAddr++] = charCode++;
        } else throw new Error("Incorrect type '" + typeof part + "' given in " + this.encodingName + " at chunk " + chunk[0]);
    }
    if (curAddr > 0xFF) throw new Error("Incorrect chunk in " + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
};

// Encoder helpers
DBCSCodec.prototype._getEncodeBucket = function (uCode) {
    var high = uCode >> 8; // This could be > 0xFF because of astral characters.
    if (this.encodeTable[high] === undefined) this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.
    return this.encodeTable[high];
};

DBCSCodec.prototype._setEncodeChar = function (uCode, dbcsCode) {
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 0xFF;
    if (bucket[low] <= SEQ_START) this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
    else if (bucket[low] == UNASSIGNED) bucket[low] = dbcsCode;
};

DBCSCodec.prototype._setEncodeSequence = function (seq, dbcsCode) {

    // Get the root of character tree according to first character of the sequence.
    var uCode = seq[0];
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 0xFF;

    var node;
    if (bucket[low] <= SEQ_START) {
        // There's already a sequence with  - use it.
        node = this.encodeTableSeq[SEQ_START - bucket[low]];
    } else {
        // There was no sequence object - allocate a new one.
        node = {};
        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.
        bucket[low] = SEQ_START - this.encodeTableSeq.length;
        this.encodeTableSeq.push(node);
    }

    // Traverse the character tree, allocating new nodes as needed.
    for (var j = 1; j < seq.length - 1; j++) {
        var oldVal = node[uCode];
        if (typeof oldVal === 'object') node = oldVal;else {
            node = node[uCode] = {};
            if (oldVal !== undefined) node[DEF_CHAR] = oldVal;
        }
    }

    // Set the leaf to given dbcsCode.
    uCode = seq[seq.length - 1];
    node[uCode] = dbcsCode;
};

DBCSCodec.prototype._fillEncodeTable = function (nodeIdx, prefix, skipEncodeChars) {
    var node = this.decodeTables[nodeIdx];
    for (var i = 0; i < 0x100; i++) {
        var uCode = node[i];
        var mbCode = prefix + i;
        if (skipEncodeChars[mbCode]) continue;

        if (uCode >= 0) this._setEncodeChar(uCode, mbCode);else if (uCode <= NODE_START) this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);else if (uCode <= SEQ_START) this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
    }
};

// == Encoder ==================================================================

function DBCSEncoder(options, codec) {
    // Encoder state
    this.leadSurrogate = -1;
    this.seqObj = undefined;

    // Static data
    this.encodeTable = codec.encodeTable;
    this.encodeTableSeq = codec.encodeTableSeq;
    this.defaultCharSingleByte = codec.defCharSB;
    this.gb18030 = codec.gb18030;
}

DBCSEncoder.prototype.write = function (str) {
    var newBuf = new Buffer(str.length * (this.gb18030 ? 4 : 3)),
        leadSurrogate = this.leadSurrogate,
        seqObj = this.seqObj,
        nextChar = -1,
        i = 0,
        j = 0;

    while (true) {
        // 0. Get next character.
        if (nextChar === -1) {
            if (i == str.length) break;
            var uCode = str.charCodeAt(i++);
        } else {
            var uCode = nextChar;
            nextChar = -1;
        }

        // 1. Handle surrogates.
        if (0xD800 <= uCode && uCode < 0xE000) {
            // Char is one of surrogates.
            if (uCode < 0xDC00) {
                // We've got lead surrogate.
                if (leadSurrogate === -1) {
                    leadSurrogate = uCode;
                    continue;
                } else {
                    leadSurrogate = uCode;
                    // Double lead surrogate found.
                    uCode = UNASSIGNED;
                }
            } else {
                // We've got trail surrogate.
                if (leadSurrogate !== -1) {
                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
                    leadSurrogate = -1;
                } else {
                    // Incomplete surrogate pair - only trail surrogate found.
                    uCode = UNASSIGNED;
                }
            }
        } else if (leadSurrogate !== -1) {
            // Incomplete surrogate pair - only lead surrogate found.
            nextChar = uCode;uCode = UNASSIGNED; // Write an error, then current char.
            leadSurrogate = -1;
        }

        // 2. Convert uCode character.
        var dbcsCode = UNASSIGNED;
        if (seqObj !== undefined && uCode != UNASSIGNED) {
            // We are in the middle of the sequence
            var resCode = seqObj[uCode];
            if (typeof resCode === 'object') {
                // Sequence continues.
                seqObj = resCode;
                continue;
            } else if (typeof resCode == 'number') {
                // Sequence finished. Write it.
                dbcsCode = resCode;
            } else if (resCode == undefined) {
                // Current character is not part of the sequence.

                // Try default character for this sequence
                resCode = seqObj[DEF_CHAR];
                if (resCode !== undefined) {
                    dbcsCode = resCode; // Found. Write it.
                    nextChar = uCode; // Current character will be written too in the next iteration.
                } else {
                        // TODO: What if we have no default? (resCode == undefined)
                        // Then, we should write first char of the sequence as-is and try the rest recursively.
                        // Didn't do it for now because no encoding has this situation yet.
                        // Currently, just skip the sequence and write current char.
                    }
            }
            seqObj = undefined;
        } else if (uCode >= 0) {
            // Regular character
            var subtable = this.encodeTable[uCode >> 8];
            if (subtable !== undefined) dbcsCode = subtable[uCode & 0xFF];

            if (dbcsCode <= SEQ_START) {
                // Sequence start
                seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];
                continue;
            }

            if (dbcsCode == UNASSIGNED && this.gb18030) {
                // Use GB18030 algorithm to find character(s) to write.
                var idx = findIdx(this.gb18030.uChars, uCode);
                if (idx != -1) {
                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600);dbcsCode = dbcsCode % 12600;
                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260);dbcsCode = dbcsCode % 1260;
                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10);dbcsCode = dbcsCode % 10;
                    newBuf[j++] = 0x30 + dbcsCode;
                    continue;
                }
            }
        }

        // 3. Write dbcsCode character.
        if (dbcsCode === UNASSIGNED) dbcsCode = this.defaultCharSingleByte;

        if (dbcsCode < 0x100) {
            newBuf[j++] = dbcsCode;
        } else if (dbcsCode < 0x10000) {
            newBuf[j++] = dbcsCode >> 8; // high byte
            newBuf[j++] = dbcsCode & 0xFF; // low byte
        } else {
            newBuf[j++] = dbcsCode >> 16;
            newBuf[j++] = dbcsCode >> 8 & 0xFF;
            newBuf[j++] = dbcsCode & 0xFF;
        }
    }

    this.seqObj = seqObj;
    this.leadSurrogate = leadSurrogate;
    return newBuf.slice(0, j);
};

DBCSEncoder.prototype.end = function () {
    if (this.leadSurrogate === -1 && this.seqObj === undefined) return; // All clean. Most often case.

    var newBuf = new Buffer(10),
        j = 0;

    if (this.seqObj) {
        // We're in the sequence.
        var dbcsCode = this.seqObj[DEF_CHAR];
        if (dbcsCode !== undefined) {
            // Write beginning of the sequence.
            if (dbcsCode < 0x100) {
                newBuf[j++] = dbcsCode;
            } else {
                newBuf[j++] = dbcsCode >> 8; // high byte
                newBuf[j++] = dbcsCode & 0xFF; // low byte
            }
        } else {
                // See todo above.
            }
        this.seqObj = undefined;
    }

    if (this.leadSurrogate !== -1) {
        // Incomplete surrogate pair - only lead surrogate found.
        newBuf[j++] = this.defaultCharSingleByte;
        this.leadSurrogate = -1;
    }

    return newBuf.slice(0, j);
};

// Export for testing
DBCSEncoder.prototype.findIdx = findIdx;

// == Decoder ==================================================================

function DBCSDecoder(options, codec) {
    // Decoder state
    this.nodeIdx = 0;
    this.prevBuf = new Buffer(0);

    // Static data
    this.decodeTables = codec.decodeTables;
    this.decodeTableSeq = codec.decodeTableSeq;
    this.defaultCharUnicode = codec.defaultCharUnicode;
    this.gb18030 = codec.gb18030;
}

DBCSDecoder.prototype.write = function (buf) {
    var newBuf = new Buffer(buf.length * 2),
        nodeIdx = this.nodeIdx,
        prevBuf = this.prevBuf,
        prevBufOffset = this.prevBuf.length,
        seqStart = -this.prevBuf.length,
        // idx of the start of current parsed sequence.
    uCode;

    if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.
        prevBuf = Buffer.concat([prevBuf, buf.slice(0, 10)]);

    for (var i = 0, j = 0; i < buf.length; i++) {
        var curByte = i >= 0 ? buf[i] : prevBuf[i + prevBufOffset];

        // Lookup in current trie node.
        var uCode = this.decodeTables[nodeIdx][curByte];

        if (uCode >= 0) {
            // Normal character, just use it.
        } else if (uCode === UNASSIGNED) {
            // Unknown char.
            // TODO: Callback with seq.
            //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
            i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).
            uCode = this.defaultCharUnicode.charCodeAt(0);
        } else if (uCode === GB18030_CODE) {
            var curSeq = seqStart >= 0 ? buf.slice(seqStart, i + 1) : prevBuf.slice(seqStart + prevBufOffset, i + 1 + prevBufOffset);
            var ptr = (curSeq[0] - 0x81) * 12600 + (curSeq[1] - 0x30) * 1260 + (curSeq[2] - 0x81) * 10 + (curSeq[3] - 0x30);
            var idx = findIdx(this.gb18030.gbChars, ptr);
            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
        } else if (uCode <= NODE_START) {
            // Go to next trie node.
            nodeIdx = NODE_START - uCode;
            continue;
        } else if (uCode <= SEQ_START) {
            // Output a sequence of chars.
            var seq = this.decodeTableSeq[SEQ_START - uCode];
            for (var k = 0; k < seq.length - 1; k++) {
                uCode = seq[k];
                newBuf[j++] = uCode & 0xFF;
                newBuf[j++] = uCode >> 8;
            }
            uCode = seq[seq.length - 1];
        } else throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);

        // Write the character to buffer, handling higher planes using surrogate pair.
        if (uCode > 0xFFFF) {
            uCode -= 0x10000;
            var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);
            newBuf[j++] = uCodeLead & 0xFF;
            newBuf[j++] = uCodeLead >> 8;

            uCode = 0xDC00 + uCode % 0x400;
        }
        newBuf[j++] = uCode & 0xFF;
        newBuf[j++] = uCode >> 8;

        // Reset trie node.
        nodeIdx = 0;seqStart = i + 1;
    }

    this.nodeIdx = nodeIdx;
    this.prevBuf = seqStart >= 0 ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
    return newBuf.slice(0, j).toString('ucs2');
};

DBCSDecoder.prototype.end = function () {
    var ret = '';

    // Try to parse all remaining chars.
    while (this.prevBuf.length > 0) {
        // Skip 1 character in the buffer.
        ret += this.defaultCharUnicode;
        var buf = this.prevBuf.slice(1);

        // Parse remaining as usual.
        this.prevBuf = new Buffer(0);
        this.nodeIdx = 0;
        if (buf.length > 0) ret += this.write(buf);
    }

    this.nodeIdx = 0;
    return ret;
};

// Binary search for GB18030. Returns largest i such that table[i] <= val.
function findIdx(table, val) {
    if (table[0] > val) return -1;

    var l = 0,
        r = table.length;
    while (l < r - 1) {
        // always table[l] <= val < table[r]
        var mid = l + Math.floor((r - l + 1) / 2);
        if (table[mid] <= val) l = mid;else r = mid;
    }
    return l;
}

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Description of supported double byte encodings and aliases.
// Tables are not require()-d until they are needed to speed up library load.
// require()-s are direct to support Browserify.

module.exports = {

    // == Japanese/ShiftJIS ====================================================
    // All japanese encodings are based on JIS X set of standards:
    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
    //              Has several variations in 1978, 1983, 1990 and 1997.
    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
    //              2 planes, first is superset of 0208, second - revised 0212.
    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

    // Byte encodings are:
    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
    //               0x00-0x7F       - lower part of 0201
    //               0x8E, 0xA1-0xDF - upper part of 0201
    //               (0xA1-0xFE)x2   - 0208 plane (94x94).
    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
    //               Used as-is in ISO2022 family.
    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
    //                0201-1976 Roman, 0208-1978, 0208-1983.
    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
    //
    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
    //
    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

    'shiftjis': {
        type: '_dbcs',
        table: function () {
            return __webpack_require__(144);
        },
        encodeAdd: { '\u00a5': 0x5C, '\u203E': 0x7E },
        encodeSkipVals: [{ from: 0xED40, to: 0xF940 }]
    },
    'csshiftjis': 'shiftjis',
    'mskanji': 'shiftjis',
    'sjis': 'shiftjis',
    'windows31j': 'shiftjis',
    'ms31j': 'shiftjis',
    'xsjis': 'shiftjis',
    'windows932': 'shiftjis',
    'ms932': 'shiftjis',
    '932': 'shiftjis',
    'cp932': 'shiftjis',

    'eucjp': {
        type: '_dbcs',
        table: function () {
            return __webpack_require__(145);
        },
        encodeAdd: { '\u00a5': 0x5C, '\u203E': 0x7E }
    },

    // TODO: KDDI extension to Shift_JIS
    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.


    // == Chinese/GBK ==========================================================
    // http://en.wikipedia.org/wiki/GBK
    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
    'gb2312': 'cp936',
    'gb231280': 'cp936',
    'gb23121980': 'cp936',
    'csgb2312': 'cp936',
    'csiso58gb231280': 'cp936',
    'euccn': 'cp936',

    // Microsoft's CP936 is a subset and approximation of GBK.
    'windows936': 'cp936',
    'ms936': 'cp936',
    '936': 'cp936',
    'cp936': {
        type: '_dbcs',
        table: function () {
            return __webpack_require__(47);
        }
    },

    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
    'gbk': {
        type: '_dbcs',
        table: function () {
            return __webpack_require__(47).concat(__webpack_require__(69));
        }
    },
    'xgbk': 'gbk',
    'isoir58': 'gbk',

    // GB18030 is an algorithmic extension of GBK.
    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
    // http://icu-project.org/docs/papers/gb18030.html
    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
    'gb18030': {
        type: '_dbcs',
        table: function () {
            return __webpack_require__(47).concat(__webpack_require__(69));
        },
        gb18030: function () {
            return __webpack_require__(146);
        },
        encodeSkipVals: [0x80],
        encodeAdd: { '€': 0xA2E3 }
    },

    'chinese': 'gb18030',

    // == Korean ===============================================================
    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
    'windows949': 'cp949',
    'ms949': 'cp949',
    '949': 'cp949',
    'cp949': {
        type: '_dbcs',
        table: function () {
            return __webpack_require__(147);
        }
    },

    'cseuckr': 'cp949',
    'csksc56011987': 'cp949',
    'euckr': 'cp949',
    'isoir149': 'cp949',
    'korean': 'cp949',
    'ksc56011987': 'cp949',
    'ksc56011989': 'cp949',
    'ksc5601': 'cp949',

    // == Big5/Taiwan/Hong Kong ================================================
    // There are lots of tables for Big5 and cp950. Please see the following links for history:
    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
    // Variations, in roughly number of defined chars:
    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
    //  * Big5-2003 (Taiwan standard) almost superset of cp950.
    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
    //    Plus, it has 4 combining sequences.
    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
    //    Implementations are not consistent within browsers; sometimes labeled as just big5.
    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
    // 
    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

    'windows950': 'cp950',
    'ms950': 'cp950',
    '950': 'cp950',
    'cp950': {
        type: '_dbcs',
        table: function () {
            return __webpack_require__(70);
        }
    },

    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
    'big5': 'big5hkscs',
    'big5hkscs': {
        type: '_dbcs',
        table: function () {
            return __webpack_require__(70).concat(__webpack_require__(148));
        },
        encodeSkipVals: [0xa2cc]
    },

    'cnbig5': 'big5hkscs',
    'csbig5': 'big5hkscs',
    'xxbig5': 'big5hkscs'
};

/***/ }),
/* 144 */
/***/ (function(module, exports) {

module.exports = [["0","\u0000",128],["a1","｡",62],["8140","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×"],["8180","÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],["81b8","∈∋⊆⊇⊂⊃∪∩"],["81c8","∧∨￢⇒⇔∀∃"],["81da","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["81f0","Å‰♯♭♪†‡¶"],["81fc","◯"],["824f","０",9],["8260","Ａ",25],["8281","ａ",25],["829f","ぁ",82],["8340","ァ",62],["8380","ム",22],["839f","Α",16,"Σ",6],["83bf","α",16,"σ",6],["8440","А",5,"ЁЖ",25],["8470","а",5,"ёж",7],["8480","о",17],["849f","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["8740","①",19,"Ⅰ",9],["875f","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["877e","㍻"],["8780","〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["889f","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["8940","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],["8980","園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["8a40","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],["8a80","橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["8b40","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],["8b80","朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["8c40","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],["8c80","劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["8d40","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],["8d80","項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["8e40","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],["8e80","死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["8f40","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],["8f80","準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["9040","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],["9080","逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["9140","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],["9180","操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["9240","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],["9280","逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["9340","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],["9380","凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["9440","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],["9480","楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["9540","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],["9580","斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["9640","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],["9680","摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["9740","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],["9780","沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["9840","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["989f","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["9940","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],["9980","凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["9a40","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],["9a80","噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["9b40","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],["9b80","它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["9c40","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],["9c80","怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["9d40","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],["9d80","捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["9e40","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],["9e80","梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["9f40","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],["9f80","麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["e040","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],["e080","烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e140","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],["e180","痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e240","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],["e280","窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e340","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],["e380","縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e440","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],["e480","艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e540","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],["e580","蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["e640","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],["e680","諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["e740","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],["e780","轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["e840","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],["e880","閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["e940","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],["e980","騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["ea40","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],["ea80","黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],["ed40","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],["ed80","塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["ee40","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],["ee80","蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["eeef","ⅰ",9,"￢￤＇＂"],["f040","",62],["f080","",124],["f140","",62],["f180","",124],["f240","",62],["f280","",124],["f340","",62],["f380","",124],["f440","",62],["f480","",124],["f540","",62],["f580","",124],["f640","",62],["f680","",124],["f740","",62],["f780","",124],["f840","",62],["f880","",124],["f940",""],["fa40","ⅰ",9,"Ⅰ",9,"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],["fa80","兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],["fb40","涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],["fb80","祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],["fc40","髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]]

/***/ }),
/* 145 */
/***/ (function(module, exports) {

module.exports = [["0","\u0000",127],["8ea1","｡",62],["a1a1","　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",9,"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],["a2a1","◆□■△▲▽▼※〒→←↑↓〓"],["a2ba","∈∋⊆⊇⊂⊃∪∩"],["a2ca","∧∨￢⇒⇔∀∃"],["a2dc","∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],["a2f2","Å‰♯♭♪†‡¶"],["a2fe","◯"],["a3b0","０",9],["a3c1","Ａ",25],["a3e1","ａ",25],["a4a1","ぁ",82],["a5a1","ァ",85],["a6a1","Α",16,"Σ",6],["a6c1","α",16,"σ",6],["a7a1","А",5,"ЁЖ",25],["a7d1","а",5,"ёж",25],["a8a1","─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],["ada1","①",19,"Ⅰ",9],["adc0","㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],["addf","㍻〝〟№㏍℡㊤",4,"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],["b0a1","亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],["b1a1","院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],["b2a1","押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],["b3a1","魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],["b4a1","粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],["b5a1","機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],["b6a1","供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],["b7a1","掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],["b8a1","検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],["b9a1","后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],["baa1","此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],["bba1","察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],["bca1","次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],["bda1","宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],["bea1","勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],["bfa1","拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],["c0a1","澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],["c1a1","繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],["c2a1","臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],["c3a1","叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],["c4a1","帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],["c5a1","邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],["c6a1","董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],["c7a1","如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],["c8a1","函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],["c9a1","鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],["caa1","福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],["cba1","法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],["cca1","漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],["cda1","諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],["cea1","痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],["cfa1","蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],["d0a1","弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],["d1a1","僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],["d2a1","辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],["d3a1","咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],["d4a1","圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],["d5a1","奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],["d6a1","屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],["d7a1","廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],["d8a1","悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],["d9a1","戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],["daa1","據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],["dba1","曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],["dca1","棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],["dda1","檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],["dea1","沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],["dfa1","漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],["e0a1","燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],["e1a1","瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],["e2a1","癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],["e3a1","磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],["e4a1","筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],["e5a1","紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],["e6a1","罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],["e7a1","隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],["e8a1","茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],["e9a1","蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],["eaa1","蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],["eba1","襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],["eca1","譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],["eda1","蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],["eea1","遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],["efa1","錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],["f0a1","陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],["f1a1","顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],["f2a1","髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],["f3a1","鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],["f4a1","堯槇遙瑤凜熙"],["f9a1","纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],["faa1","忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],["fba1","犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],["fca1","釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],["fcf1","ⅰ",9,"￢￤＇＂"],["8fa2af","˘ˇ¸˙˝¯˛˚～΄΅"],["8fa2c2","¡¦¿"],["8fa2eb","ºª©®™¤№"],["8fa6e1","ΆΈΉΊΪ"],["8fa6e7","Ό"],["8fa6e9","ΎΫ"],["8fa6ec","Ώ"],["8fa6f1","άέήίϊΐόςύϋΰώ"],["8fa7c2","Ђ",10,"ЎЏ"],["8fa7f2","ђ",10,"ўџ"],["8fa9a1","ÆĐ"],["8fa9a4","Ħ"],["8fa9a6","Ĳ"],["8fa9a8","ŁĿ"],["8fa9ab","ŊØŒ"],["8fa9af","ŦÞ"],["8fa9c1","æđðħıĳĸłŀŉŋøœßŧþ"],["8faaa1","ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],["8faaba","ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],["8faba1","áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],["8fabbd","ġĥíìïîǐ"],["8fabc5","īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],["8fb0a1","丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],["8fb1a1","侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],["8fb2a1","傒傓傔傖傛傜傞",4,"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],["8fb3a1","凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],["8fb4a1","匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],["8fb5a1","咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],["8fb6a1","嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",5,"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",4,"囱囫园"],["8fb7a1","囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",4,"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],["8fb8a1","堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],["8fb9a1","奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],["8fbaa1","嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",4,"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],["8fbba1","屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],["8fbca1","巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",4,"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],["8fbda1","彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",4,"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],["8fbea1","悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",4,"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],["8fbfa1","懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],["8fc0a1","捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],["8fc1a1","擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],["8fc2a1","昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],["8fc3a1","杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",4,"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],["8fc4a1","棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],["8fc5a1","樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],["8fc6a1","歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],["8fc7a1","泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],["8fc8a1","湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],["8fc9a1","濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",4,"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",4,"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],["8fcaa1","煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],["8fcba1","狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],["8fcca1","珿琀琁琄琇琊琑琚琛琤琦琨",9,"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],["8fcda1","甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",5,"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],["8fcea1","瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",6,"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],["8fcfa1","睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],["8fd0a1","碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],["8fd1a1","秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],["8fd2a1","笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",5],["8fd3a1","籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],["8fd4a1","綞綦綧綪綳綶綷綹緂",4,"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],["8fd5a1","罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],["8fd6a1","胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],["8fd7a1","艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],["8fd8a1","荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],["8fd9a1","蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",4,"蕖蕙蕜",6,"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],["8fdaa1","藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",4,"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],["8fdba1","蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",6,"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],["8fdca1","蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",4,"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],["8fdda1","襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",4,"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],["8fdea1","誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",4,"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],["8fdfa1","貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],["8fe0a1","踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],["8fe1a1","轃轇轏轑",4,"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],["8fe2a1","郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],["8fe3a1","釂釃釅釓釔釗釙釚釞釤釥釩釪釬",5,"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",4,"鉻鉼鉽鉿銈銉銊銍銎銒銗"],["8fe4a1","銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",4,"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],["8fe5a1","鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",4,"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],["8fe6a1","镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],["8fe7a1","霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],["8fe8a1","頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",4,"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],["8fe9a1","馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",4],["8feaa1","鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",4,"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],["8feba1","鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",4,"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],["8feca1","鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],["8feda1","黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",4,"齓齕齖齗齘齚齝齞齨齩齭",4,"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]]

/***/ }),
/* 146 */
/***/ (function(module, exports) {

module.exports = {"uChars":[128,165,169,178,184,216,226,235,238,244,248,251,253,258,276,284,300,325,329,334,364,463,465,467,469,471,473,475,477,506,594,610,712,716,730,930,938,962,970,1026,1104,1106,8209,8215,8218,8222,8231,8241,8244,8246,8252,8365,8452,8454,8458,8471,8482,8556,8570,8596,8602,8713,8720,8722,8726,8731,8737,8740,8742,8748,8751,8760,8766,8777,8781,8787,8802,8808,8816,8854,8858,8870,8896,8979,9322,9372,9548,9588,9616,9622,9634,9652,9662,9672,9676,9680,9702,9735,9738,9793,9795,11906,11909,11913,11917,11928,11944,11947,11951,11956,11960,11964,11979,12284,12292,12312,12319,12330,12351,12436,12447,12535,12543,12586,12842,12850,12964,13200,13215,13218,13253,13263,13267,13270,13384,13428,13727,13839,13851,14617,14703,14801,14816,14964,15183,15471,15585,16471,16736,17208,17325,17330,17374,17623,17997,18018,18212,18218,18301,18318,18760,18811,18814,18820,18823,18844,18848,18872,19576,19620,19738,19887,40870,59244,59336,59367,59413,59417,59423,59431,59437,59443,59452,59460,59478,59493,63789,63866,63894,63976,63986,64016,64018,64021,64025,64034,64037,64042,65074,65093,65107,65112,65127,65132,65375,65510,65536],"gbChars":[0,36,38,45,50,81,89,95,96,100,103,104,105,109,126,133,148,172,175,179,208,306,307,308,309,310,311,312,313,341,428,443,544,545,558,741,742,749,750,805,819,820,7922,7924,7925,7927,7934,7943,7944,7945,7950,8062,8148,8149,8152,8164,8174,8236,8240,8262,8264,8374,8380,8381,8384,8388,8390,8392,8393,8394,8396,8401,8406,8416,8419,8424,8437,8439,8445,8482,8485,8496,8521,8603,8936,8946,9046,9050,9063,9066,9076,9092,9100,9108,9111,9113,9131,9162,9164,9218,9219,11329,11331,11334,11336,11346,11361,11363,11366,11370,11372,11375,11389,11682,11686,11687,11692,11694,11714,11716,11723,11725,11730,11736,11982,11989,12102,12336,12348,12350,12384,12393,12395,12397,12510,12553,12851,12962,12973,13738,13823,13919,13933,14080,14298,14585,14698,15583,15847,16318,16434,16438,16481,16729,17102,17122,17315,17320,17402,17418,17859,17909,17911,17915,17916,17936,17939,17961,18664,18703,18814,18962,19043,33469,33470,33471,33484,33485,33490,33497,33501,33505,33513,33520,33536,33550,37845,37921,37948,38029,38038,38064,38065,38066,38069,38075,38076,38078,39108,39109,39113,39114,39115,39116,39265,39394,189000]}

/***/ }),
/* 147 */
/***/ (function(module, exports) {

module.exports = [["0","\u0000",127],["8141","갂갃갅갆갋",4,"갘갞갟갡갢갣갥",6,"갮갲갳갴"],["8161","갵갶갷갺갻갽갾갿걁",9,"걌걎",5,"걕"],["8181","걖걗걙걚걛걝",18,"걲걳걵걶걹걻",4,"겂겇겈겍겎겏겑겒겓겕",6,"겞겢",5,"겫겭겮겱",6,"겺겾겿곀곂곃곅곆곇곉곊곋곍",7,"곖곘",7,"곢곣곥곦곩곫곭곮곲곴곷",4,"곾곿괁괂괃괅괇",4,"괎괐괒괓"],["8241","괔괕괖괗괙괚괛괝괞괟괡",7,"괪괫괮",5],["8261","괶괷괹괺괻괽",6,"굆굈굊",5,"굑굒굓굕굖굗"],["8281","굙",7,"굢굤",7,"굮굯굱굲굷굸굹굺굾궀궃",4,"궊궋궍궎궏궑",10,"궞",5,"궥",17,"궸",7,"귂귃귅귆귇귉",6,"귒귔",7,"귝귞귟귡귢귣귥",18],["8341","귺귻귽귾긂",5,"긊긌긎",5,"긕",7],["8361","긝",18,"긲긳긵긶긹긻긼"],["8381","긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",4,"깞깢깣깤깦깧깪깫깭깮깯깱",6,"깺깾",5,"꺆",5,"꺍",46,"꺿껁껂껃껅",6,"껎껒",5,"껚껛껝",8],["8441","껦껧껩껪껬껮",5,"껵껶껷껹껺껻껽",8],["8461","꼆꼉꼊꼋꼌꼎꼏꼑",18],["8481","꼤",7,"꼮꼯꼱꼳꼵",6,"꼾꽀꽄꽅꽆꽇꽊",5,"꽑",10,"꽞",5,"꽦",18,"꽺",5,"꾁꾂꾃꾅꾆꾇꾉",6,"꾒꾓꾔꾖",5,"꾝",26,"꾺꾻꾽꾾"],["8541","꾿꿁",5,"꿊꿌꿏",4,"꿕",6,"꿝",4],["8561","꿢",5,"꿪",5,"꿲꿳꿵꿶꿷꿹",6,"뀂뀃"],["8581","뀅",6,"뀍뀎뀏뀑뀒뀓뀕",6,"뀞",9,"뀩",26,"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",29,"끾끿낁낂낃낅",6,"낎낐낒",5,"낛낝낞낣낤"],["8641","낥낦낧낪낰낲낶낷낹낺낻낽",6,"냆냊",5,"냒"],["8661","냓냕냖냗냙",6,"냡냢냣냤냦",10],["8681","냱",22,"넊넍넎넏넑넔넕넖넗넚넞",4,"넦넧넩넪넫넭",6,"넶넺",5,"녂녃녅녆녇녉",6,"녒녓녖녗녙녚녛녝녞녟녡",22,"녺녻녽녾녿놁놃",4,"놊놌놎놏놐놑놕놖놗놙놚놛놝"],["8741","놞",9,"놩",15],["8761","놹",18,"뇍뇎뇏뇑뇒뇓뇕"],["8781","뇖",5,"뇞뇠",7,"뇪뇫뇭뇮뇯뇱",7,"뇺뇼뇾",5,"눆눇눉눊눍",6,"눖눘눚",5,"눡",18,"눵",6,"눽",26,"뉙뉚뉛뉝뉞뉟뉡",6,"뉪",4],["8841","뉯",4,"뉶",5,"뉽",6,"늆늇늈늊",4],["8861","늏늒늓늕늖늗늛",4,"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"],["8881","늸",15,"닊닋닍닎닏닑닓",4,"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",6,"댒댖",5,"댝",54,"덗덙덚덝덠덡덢덣"],["8941","덦덨덪덬덭덯덲덳덵덶덷덹",6,"뎂뎆",5,"뎍"],["8961","뎎뎏뎑뎒뎓뎕",10,"뎢",5,"뎩뎪뎫뎭"],["8981","뎮",21,"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",18,"돽",18,"됑",6,"됙됚됛됝됞됟됡",6,"됪됬",7,"됵",15],["8a41","둅",10,"둒둓둕둖둗둙",6,"둢둤둦"],["8a61","둧",4,"둭",18,"뒁뒂"],["8a81","뒃",4,"뒉",19,"뒞",5,"뒥뒦뒧뒩뒪뒫뒭",7,"뒶뒸뒺",5,"듁듂듃듅듆듇듉",6,"듑듒듓듔듖",5,"듞듟듡듢듥듧",4,"듮듰듲",5,"듹",26,"딖딗딙딚딝"],["8b41","딞",5,"딦딫",4,"딲딳딵딶딷딹",6,"땂땆"],["8b61","땇땈땉땊땎땏땑땒땓땕",6,"땞땢",8],["8b81","땫",52,"떢떣떥떦떧떩떬떭떮떯떲떶",4,"떾떿뗁뗂뗃뗅",6,"뗎뗒",5,"뗙",18,"뗭",18],["8c41","똀",15,"똒똓똕똖똗똙",4],["8c61","똞",6,"똦",5,"똭",6,"똵",5],["8c81","똻",12,"뙉",26,"뙥뙦뙧뙩",50,"뚞뚟뚡뚢뚣뚥",5,"뚭뚮뚯뚰뚲",16],["8d41","뛃",16,"뛕",8],["8d61","뛞",17,"뛱뛲뛳뛵뛶뛷뛹뛺"],["8d81","뛻",4,"뜂뜃뜄뜆",33,"뜪뜫뜭뜮뜱",6,"뜺뜼",7,"띅띆띇띉띊띋띍",6,"띖",9,"띡띢띣띥띦띧띩",6,"띲띴띶",5,"띾띿랁랂랃랅",6,"랎랓랔랕랚랛랝랞"],["8e41","랟랡",6,"랪랮",5,"랶랷랹",8],["8e61","럂",4,"럈럊",19],["8e81","럞",13,"럮럯럱럲럳럵",6,"럾렂",4,"렊렋렍렎렏렑",6,"렚렜렞",5,"렦렧렩렪렫렭",6,"렶렺",5,"롁롂롃롅",11,"롒롔",7,"롞롟롡롢롣롥",6,"롮롰롲",5,"롹롺롻롽",7],["8f41","뢅",7,"뢎",17],["8f61","뢠",7,"뢩",6,"뢱뢲뢳뢵뢶뢷뢹",4],["8f81","뢾뢿룂룄룆",5,"룍룎룏룑룒룓룕",7,"룞룠룢",5,"룪룫룭룮룯룱",6,"룺룼룾",5,"뤅",18,"뤙",6,"뤡",26,"뤾뤿륁륂륃륅",6,"륍륎륐륒",5],["9041","륚륛륝륞륟륡",6,"륪륬륮",5,"륶륷륹륺륻륽"],["9061","륾",5,"릆릈릋릌릏",15],["9081","릟",12,"릮릯릱릲릳릵",6,"릾맀맂",5,"맊맋맍맓",4,"맚맜맟맠맢맦맧맩맪맫맭",6,"맶맻",4,"먂",5,"먉",11,"먖",33,"먺먻먽먾먿멁멃멄멅멆"],["9141","멇멊멌멏멐멑멒멖멗멙멚멛멝",6,"멦멪",5],["9161","멲멳멵멶멷멹",9,"몆몈몉몊몋몍",5],["9181","몓",20,"몪몭몮몯몱몳",4,"몺몼몾",5,"뫅뫆뫇뫉",14,"뫚",33,"뫽뫾뫿묁묂묃묅",7,"묎묐묒",5,"묙묚묛묝묞묟묡",6],["9241","묨묪묬",7,"묷묹묺묿",4,"뭆뭈뭊뭋뭌뭎뭑뭒"],["9261","뭓뭕뭖뭗뭙",7,"뭢뭤",7,"뭭",4],["9281","뭲",21,"뮉뮊뮋뮍뮎뮏뮑",18,"뮥뮦뮧뮩뮪뮫뮭",6,"뮵뮶뮸",7,"믁믂믃믅믆믇믉",6,"믑믒믔",35,"믺믻믽믾밁"],["9341","밃",4,"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"],["9361","밶밷밹",6,"뱂뱆뱇뱈뱊뱋뱎뱏뱑",8],["9381","뱚뱛뱜뱞",37,"벆벇벉벊벍벏",4,"벖벘벛",4,"벢벣벥벦벩",6,"벲벶",5,"벾벿볁볂볃볅",7,"볎볒볓볔볖볗볙볚볛볝",22,"볷볹볺볻볽"],["9441","볾",5,"봆봈봊",5,"봑봒봓봕",8],["9461","봞",5,"봥",6,"봭",12],["9481","봺",5,"뵁",6,"뵊뵋뵍뵎뵏뵑",6,"뵚",9,"뵥뵦뵧뵩",22,"붂붃붅붆붋",4,"붒붔붖붗붘붛붝",6,"붥",10,"붱",6,"붹",24],["9541","뷒뷓뷖뷗뷙뷚뷛뷝",11,"뷪",5,"뷱"],["9561","뷲뷳뷵뷶뷷뷹",6,"븁븂븄븆",5,"븎븏븑븒븓"],["9581","븕",6,"븞븠",35,"빆빇빉빊빋빍빏",4,"빖빘빜빝빞빟빢빣빥빦빧빩빫",4,"빲빶",4,"빾빿뺁뺂뺃뺅",6,"뺎뺒",5,"뺚",13,"뺩",14],["9641","뺸",23,"뻒뻓"],["9661","뻕뻖뻙",6,"뻡뻢뻦",5,"뻭",8],["9681","뻶",10,"뼂",5,"뼊",13,"뼚뼞",33,"뽂뽃뽅뽆뽇뽉",6,"뽒뽓뽔뽖",44],["9741","뾃",16,"뾕",8],["9761","뾞",17,"뾱",7],["9781","뾹",11,"뿆",5,"뿎뿏뿑뿒뿓뿕",6,"뿝뿞뿠뿢",89,"쀽쀾쀿"],["9841","쁀",16,"쁒",5,"쁙쁚쁛"],["9861","쁝쁞쁟쁡",6,"쁪",15],["9881","쁺",21,"삒삓삕삖삗삙",6,"삢삤삦",5,"삮삱삲삷",4,"삾샂샃샄샆샇샊샋샍샎샏샑",6,"샚샞",5,"샦샧샩샪샫샭",6,"샶샸샺",5,"섁섂섃섅섆섇섉",6,"섑섒섓섔섖",5,"섡섢섥섨섩섪섫섮"],["9941","섲섳섴섵섷섺섻섽섾섿셁",6,"셊셎",5,"셖셗"],["9961","셙셚셛셝",6,"셦셪",5,"셱셲셳셵셶셷셹셺셻"],["9981","셼",8,"솆",5,"솏솑솒솓솕솗",4,"솞솠솢솣솤솦솧솪솫솭솮솯솱",11,"솾",5,"쇅쇆쇇쇉쇊쇋쇍",6,"쇕쇖쇙",6,"쇡쇢쇣쇥쇦쇧쇩",6,"쇲쇴",7,"쇾쇿숁숂숃숅",6,"숎숐숒",5,"숚숛숝숞숡숢숣"],["9a41","숤숥숦숧숪숬숮숰숳숵",16],["9a61","쉆쉇쉉",6,"쉒쉓쉕쉖쉗쉙",6,"쉡쉢쉣쉤쉦"],["9a81","쉧",4,"쉮쉯쉱쉲쉳쉵",6,"쉾슀슂",5,"슊",5,"슑",6,"슙슚슜슞",5,"슦슧슩슪슫슮",5,"슶슸슺",33,"싞싟싡싢싥",5,"싮싰싲싳싴싵싷싺싽싾싿쌁",6,"쌊쌋쌎쌏"],["9b41","쌐쌑쌒쌖쌗쌙쌚쌛쌝",6,"쌦쌧쌪",8],["9b61","쌳",17,"썆",7],["9b81","썎",25,"썪썫썭썮썯썱썳",4,"썺썻썾",5,"쎅쎆쎇쎉쎊쎋쎍",50,"쏁",22,"쏚"],["9c41","쏛쏝쏞쏡쏣",4,"쏪쏫쏬쏮",5,"쏶쏷쏹",5],["9c61","쏿",8,"쐉",6,"쐑",9],["9c81","쐛",8,"쐥",6,"쐭쐮쐯쐱쐲쐳쐵",6,"쐾",9,"쑉",26,"쑦쑧쑩쑪쑫쑭",6,"쑶쑷쑸쑺",5,"쒁",18,"쒕",6,"쒝",12],["9d41","쒪",13,"쒹쒺쒻쒽",8],["9d61","쓆",25],["9d81","쓠",8,"쓪",5,"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",9,"씍씎씏씑씒씓씕",6,"씝",10,"씪씫씭씮씯씱",6,"씺씼씾",5,"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",6,"앲앶",5,"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"],["9e41","얖얙얚얛얝얞얟얡",7,"얪",9,"얶"],["9e61","얷얺얿",4,"엋엍엏엒엓엕엖엗엙",6,"엢엤엦엧"],["9e81","엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",6,"옚옝",6,"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",6,"왒왖",5,"왞왟왡",10,"왭왮왰왲",5,"왺왻왽왾왿욁",6,"욊욌욎",5,"욖욗욙욚욛욝",6,"욦"],["9f41","욨욪",5,"욲욳욵욶욷욻",4,"웂웄웆",5,"웎"],["9f61","웏웑웒웓웕",6,"웞웟웢",5,"웪웫웭웮웯웱웲"],["9f81","웳",4,"웺웻웼웾",5,"윆윇윉윊윋윍",6,"윖윘윚",5,"윢윣윥윦윧윩",6,"윲윴윶윸윹윺윻윾윿읁읂읃읅",4,"읋읎읐읙읚읛읝읞읟읡",6,"읩읪읬",7,"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",4,"잢잧",4,"잮잯잱잲잳잵잶잷"],["a041","잸잹잺잻잾쟂",5,"쟊쟋쟍쟏쟑",6,"쟙쟚쟛쟜"],["a061","쟞",5,"쟥쟦쟧쟩쟪쟫쟭",13],["a081","쟻",4,"젂젃젅젆젇젉젋",4,"젒젔젗",4,"젞젟젡젢젣젥",6,"젮젰젲",5,"젹젺젻젽젾젿졁",6,"졊졋졎",5,"졕",26,"졲졳졵졶졷졹졻",4,"좂좄좈좉좊좎",5,"좕",7,"좞좠좢좣좤"],["a141","좥좦좧좩",18,"좾좿죀죁"],["a161","죂죃죅죆죇죉죊죋죍",6,"죖죘죚",5,"죢죣죥"],["a181","죦",14,"죶",5,"죾죿줁줂줃줇",4,"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",9,"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],["a241","줐줒",5,"줙",18],["a261","줭",6,"줵",18],["a281","쥈",7,"쥒쥓쥕쥖쥗쥙",6,"쥢쥤",7,"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"],["a341","쥱쥲쥳쥵",6,"쥽",10,"즊즋즍즎즏"],["a361","즑",6,"즚즜즞",16],["a381","즯",16,"짂짃짅짆짉짋",4,"짒짔짗짘짛！",58,"￦］",32,"￣"],["a441","짞짟짡짣짥짦짨짩짪짫짮짲",5,"짺짻짽짾짿쨁쨂쨃쨄"],["a461","쨅쨆쨇쨊쨎",5,"쨕쨖쨗쨙",12],["a481","쨦쨧쨨쨪",28,"ㄱ",93],["a541","쩇",4,"쩎쩏쩑쩒쩓쩕",6,"쩞쩢",5,"쩩쩪"],["a561","쩫",17,"쩾",5,"쪅쪆"],["a581","쪇",16,"쪙",14,"ⅰ",9],["a5b0","Ⅰ",9],["a5c1","Α",16,"Σ",6],["a5e1","α",16,"σ",6],["a641","쪨",19,"쪾쪿쫁쫂쫃쫅"],["a661","쫆",5,"쫎쫐쫒쫔쫕쫖쫗쫚",5,"쫡",6],["a681","쫨쫩쫪쫫쫭",6,"쫵",18,"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",7],["a741","쬋",4,"쬑쬒쬓쬕쬖쬗쬙",6,"쬢",7],["a761","쬪",22,"쭂쭃쭄"],["a781","쭅쭆쭇쭊쭋쭍쭎쭏쭑",6,"쭚쭛쭜쭞",5,"쭥",7,"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",9,"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",9,"㎀",4,"㎺",5,"㎐",4,"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"],["a841","쭭",10,"쭺",14],["a861","쮉",18,"쮝",6],["a881","쮤",19,"쮹",11,"ÆÐªĦ"],["a8a6","Ĳ"],["a8a8","ĿŁØŒºÞŦŊ"],["a8b1","㉠",27,"ⓐ",25,"①",14,"½⅓⅔¼¾⅛⅜⅝⅞"],["a941","쯅",14,"쯕",10],["a961","쯠쯡쯢쯣쯥쯦쯨쯪",18],["a981","쯽",14,"찎찏찑찒찓찕",6,"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",27,"⒜",25,"⑴",14,"¹²³⁴ⁿ₁₂₃₄"],["aa41","찥찦찪찫찭찯찱",6,"찺찿",4,"챆챇챉챊챋챍챎"],["aa61","챏",4,"챖챚",5,"챡챢챣챥챧챩",6,"챱챲"],["aa81","챳챴챶",29,"ぁ",82],["ab41","첔첕첖첗첚첛첝첞첟첡",6,"첪첮",5,"첶첷첹"],["ab61","첺첻첽",6,"쳆쳈쳊",5,"쳑쳒쳓쳕",5],["ab81","쳛",8,"쳥",6,"쳭쳮쳯쳱",12,"ァ",85],["ac41","쳾쳿촀촂",5,"촊촋촍촎촏촑",6,"촚촜촞촟촠"],["ac61","촡촢촣촥촦촧촩촪촫촭",11,"촺",4],["ac81","촿",28,"쵝쵞쵟А",5,"ЁЖ",25],["acd1","а",5,"ёж",25],["ad41","쵡쵢쵣쵥",6,"쵮쵰쵲",5,"쵹",7],["ad61","춁",6,"춉",10,"춖춗춙춚춛춝춞춟"],["ad81","춠춡춢춣춦춨춪",5,"춱",18,"췅"],["ae41","췆",5,"췍췎췏췑",16],["ae61","췢",5,"췩췪췫췭췮췯췱",6,"췺췼췾",4],["ae81","츃츅츆츇츉츊츋츍",6,"츕츖츗츘츚",5,"츢츣츥츦츧츩츪츫"],["af41","츬츭츮츯츲츴츶",19],["af61","칊",13,"칚칛칝칞칢",5,"칪칬"],["af81","칮",5,"칶칷칹칺칻칽",6,"캆캈캊",5,"캒캓캕캖캗캙"],["b041","캚",5,"캢캦",5,"캮",12],["b061","캻",5,"컂",19],["b081","컖",13,"컦컧컩컪컭",6,"컶컺",5,"가각간갇갈갉갊감",7,"같",4,"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"],["b141","켂켃켅켆켇켉",6,"켒켔켖",5,"켝켞켟켡켢켣"],["b161","켥",6,"켮켲",5,"켹",11],["b181","콅",14,"콖콗콙콚콛콝",6,"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"],["b241","콭콮콯콲콳콵콶콷콹",6,"쾁쾂쾃쾄쾆",5,"쾍"],["b261","쾎",18,"쾢",5,"쾩"],["b281","쾪",5,"쾱",18,"쿅",6,"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"],["b341","쿌",19,"쿢쿣쿥쿦쿧쿩"],["b361","쿪",5,"쿲쿴쿶",5,"쿽쿾쿿퀁퀂퀃퀅",5],["b381","퀋",5,"퀒",5,"퀙",19,"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",4,"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"],["b441","퀮",5,"퀶퀷퀹퀺퀻퀽",6,"큆큈큊",5],["b461","큑큒큓큕큖큗큙",6,"큡",10,"큮큯"],["b481","큱큲큳큵",6,"큾큿킀킂",18,"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",4,"닳담답닷",4,"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"],["b541","킕",14,"킦킧킩킪킫킭",5],["b561","킳킶킸킺",5,"탂탃탅탆탇탊",5,"탒탖",4],["b581","탛탞탟탡탢탣탥",6,"탮탲",5,"탹",11,"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"],["b641","턅",7,"턎",17],["b661","턠",15,"턲턳턵턶턷턹턻턼턽턾"],["b681","턿텂텆",5,"텎텏텑텒텓텕",6,"텞텠텢",5,"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"],["b741","텮",13,"텽",6,"톅톆톇톉톊"],["b761","톋",20,"톢톣톥톦톧"],["b781","톩",6,"톲톴톶톷톸톹톻톽톾톿퇁",14,"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"],["b841","퇐",7,"퇙",17],["b861","퇫",8,"퇵퇶퇷퇹",13],["b881","툈툊",5,"툑",24,"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",4,"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"],["b941","툪툫툮툯툱툲툳툵",6,"툾퉀퉂",5,"퉉퉊퉋퉌"],["b961","퉍",14,"퉝",6,"퉥퉦퉧퉨"],["b981","퉩",22,"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",4,"받",4,"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"],["ba41","튍튎튏튒튓튔튖",5,"튝튞튟튡튢튣튥",6,"튭"],["ba61","튮튯튰튲",5,"튺튻튽튾틁틃",4,"틊틌",5],["ba81","틒틓틕틖틗틙틚틛틝",6,"틦",9,"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"],["bb41","틻",4,"팂팄팆",5,"팏팑팒팓팕팗",4,"팞팢팣"],["bb61","팤팦팧팪팫팭팮팯팱",6,"팺팾",5,"퍆퍇퍈퍉"],["bb81","퍊",31,"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"],["bc41","퍪",17,"퍾퍿펁펂펃펅펆펇"],["bc61","펈펉펊펋펎펒",5,"펚펛펝펞펟펡",6,"펪펬펮"],["bc81","펯",4,"펵펶펷펹펺펻펽",6,"폆폇폊",5,"폑",5,"샥샨샬샴샵샷샹섀섄섈섐섕서",4,"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"],["bd41","폗폙",7,"폢폤",7,"폮폯폱폲폳폵폶폷"],["bd61","폸폹폺폻폾퐀퐂",5,"퐉",13],["bd81","퐗",5,"퐞",25,"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"],["be41","퐸",7,"푁푂푃푅",14],["be61","푔",7,"푝푞푟푡푢푣푥",7,"푮푰푱푲"],["be81","푳",4,"푺푻푽푾풁풃",4,"풊풌풎",5,"풕",8,"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",6,"엌엎"],["bf41","풞",10,"풪",14],["bf61","풹",18,"퓍퓎퓏퓑퓒퓓퓕"],["bf81","퓖",5,"퓝퓞퓠",7,"퓩퓪퓫퓭퓮퓯퓱",6,"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",5,"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"],["c041","퓾",5,"픅픆픇픉픊픋픍",6,"픖픘",5],["c061","픞",25],["c081","픸픹픺픻픾픿핁핂핃핅",6,"핎핐핒",5,"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",7,"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"],["c141","핤핦핧핪핬핮",5,"핶핷핹핺핻핽",6,"햆햊햋"],["c161","햌햍햎햏햑",19,"햦햧"],["c181","햨",31,"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"],["c241","헊헋헍헎헏헑헓",4,"헚헜헞",5,"헦헧헩헪헫헭헮"],["c261","헯",4,"헶헸헺",5,"혂혃혅혆혇혉",6,"혒"],["c281","혖",5,"혝혞혟혡혢혣혥",7,"혮",9,"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"],["c341","혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",4],["c361","홢",4,"홨홪",5,"홲홳홵",11],["c381","횁횂횄횆",5,"횎횏횑횒횓횕",7,"횞횠횢",5,"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"],["c441","횫횭횮횯횱",7,"횺횼",7,"훆훇훉훊훋"],["c461","훍훎훏훐훒훓훕훖훘훚",5,"훡훢훣훥훦훧훩",4],["c481","훮훯훱훲훳훴훶",5,"훾훿휁휂휃휅",11,"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"],["c541","휕휖휗휚휛휝휞휟휡",6,"휪휬휮",5,"휶휷휹"],["c561","휺휻휽",6,"흅흆흈흊",5,"흒흓흕흚",4],["c581","흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",6,"흾흿힀힂",5,"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"],["c641","힍힎힏힑",6,"힚힜힞",5],["c6a1","퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"],["c7a1","퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"],["c8a1","혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"],["caa1","伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"],["cba1","匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"],["cca1","瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"],["cda1","棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"],["cea1","科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"],["cfa1","區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"],["d0a1","鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"],["d1a1","朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",5,"那樂",4,"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"],["d2a1","納臘蠟衲囊娘廊",4,"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",5,"駑魯",10,"濃籠聾膿農惱牢磊腦賂雷尿壘",7,"嫩訥杻紐勒",5,"能菱陵尼泥匿溺多茶"],["d3a1","丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"],["d4a1","棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"],["d5a1","蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"],["d6a1","煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"],["d7a1","遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"],["d8a1","立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"],["d9a1","蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"],["daa1","汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"],["dba1","發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"],["dca1","碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"],["dda1","孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"],["dea1","脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"],["dfa1","傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"],["e0a1","胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"],["e1a1","聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"],["e2a1","戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"],["e3a1","嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"],["e4a1","沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"],["e5a1","櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"],["e6a1","旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"],["e7a1","簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"],["e8a1","烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"],["e9a1","窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"],["eaa1","運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"],["eba1","濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"],["eca1","議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"],["eda1","立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"],["eea1","障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"],["efa1","煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"],["f0a1","靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"],["f1a1","踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"],["f2a1","咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"],["f3a1","鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"],["f4a1","責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"],["f5a1","椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"],["f6a1","贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"],["f7a1","鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"],["f8a1","阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"],["f9a1","品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"],["faa1","行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"],["fba1","形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"],["fca1","禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"],["fda1","爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"]]

/***/ }),
/* 148 */
/***/ (function(module, exports) {

module.exports = [["8740","䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"],["8767","綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"],["87a1","𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"],["8840","㇀",4,"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"],["88a1","ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"],["8940","𪎩𡅅"],["8943","攊"],["8946","丽滝鵎釟"],["894c","𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"],["89a1","琑糼緍楆竉刧"],["89ab","醌碸酞肼"],["89b0","贋胶𠧧"],["89b5","肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"],["89c1","溚舾甙"],["89c5","䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"],["8a40","𧶄唥"],["8a43","𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"],["8a64","𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"],["8a76","䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"],["8aa1","𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"],["8aac","䠋𠆩㿺塳𢶍"],["8ab2","𤗈𠓼𦂗𠽌𠶖啹䂻䎺"],["8abb","䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"],["8ac9","𪘁𠸉𢫏𢳉"],["8ace","𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"],["8adf","𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"],["8af6","𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"],["8b40","𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"],["8b55","𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"],["8ba1","𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"],["8bde","𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"],["8c40","倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"],["8ca1","𣏹椙橃𣱣泿"],["8ca7","爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"],["8cc9","顨杫䉶圽"],["8cce","藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"],["8ce6","峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"],["8d40","𠮟"],["8d42","𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"],["8da1","㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"],["8e40","𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"],["8ea1","繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"],["8f40","蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"],["8fa1","𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"],["9040","趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"],["90a1","𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"],["9140","𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"],["91a1","鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"],["9240","𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"],["92a1","働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"],["9340","媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"],["93a1","摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"],["9440","銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"],["94a1","㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"],["9540","𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"],["95a1","衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"],["9640","桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"],["96a1","𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"],["9740","愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"],["97a1","𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"],["9840","𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"],["98a1","咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"],["9940","䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"],["99a1","䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"],["9a40","鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"],["9aa1","黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"],["9b40","𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"],["9b62","𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"],["9ba1","椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"],["9c40","嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"],["9ca1","㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"],["9d40","𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"],["9da1","辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"],["9e40","𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"],["9ea1","鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"],["9ead","𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"],["9ec5","㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"],["9ef5","噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"],["9f40","籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"],["9f4f","凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"],["9fa1","椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"],["9fae","酙隁酜"],["9fb2","酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"],["9fc1","𤤙盖鮝个𠳔莾衂"],["9fc9","届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"],["9fdb","歒酼龥鮗頮颴骺麨麄煺笔"],["9fe7","毺蠘罸"],["9feb","嘠𪙊蹷齓"],["9ff0","跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"],["a040","𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"],["a055","𡠻𦸅"],["a058","詾𢔛"],["a05b","惽癧髗鵄鍮鮏蟵"],["a063","蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"],["a073","坟慯抦戹拎㩜懢厪𣏵捤栂㗒"],["a0a1","嵗𨯂迚𨸹"],["a0a6","僙𡵆礆匲阸𠼻䁥"],["a0ae","矾"],["a0b0","糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"],["a0d4","覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"],["a0e2","罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"],["a3c0","␀",31,"␡"],["c6a1","①",9,"⑴",9,"ⅰ",9,"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",23],["c740","す",58,"ァアィイ"],["c7a1","ゥ",81,"А",5,"ЁЖ",4],["c840","Л",26,"ёж",25,"⇧↸↹㇏𠃌乚𠂊刂䒑"],["c8a1","龰冈龱𧘇"],["c8cd","￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"],["c8f5","ʃɐɛɔɵœøŋʊɪ"],["f9fe","￭"],["fa40","𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"],["faa1","鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"],["fb40","𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"],["fba1","𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"],["fc40","廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"],["fca1","𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"],["fd40","𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"],["fda1","𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"],["fe40","鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"],["fea1","𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"]]

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(8).Buffer,
    Transform = __webpack_require__(9).Transform;

// == Exports ==================================================================
module.exports = function (iconv) {

    // Additional Public API.
    iconv.encodeStream = function encodeStream(encoding, options) {
        return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
    };

    iconv.decodeStream = function decodeStream(encoding, options) {
        return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
    };

    iconv.supportsStreams = true;

    // Not published yet.
    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
    iconv._collect = IconvLiteDecoderStream.prototype.collect;
};

// == Encoder stream =======================================================
function IconvLiteEncoderStream(conv, options) {
    this.conv = conv;
    options = options || {};
    options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
    Transform.call(this, options);
}

IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
    constructor: { value: IconvLiteEncoderStream }
});

IconvLiteEncoderStream.prototype._transform = function (chunk, encoding, done) {
    if (typeof chunk != 'string') return done(new Error("Iconv encoding stream needs strings as its input."));
    try {
        var res = this.conv.write(chunk);
        if (res && res.length) this.push(res);
        done();
    } catch (e) {
        done(e);
    }
};

IconvLiteEncoderStream.prototype._flush = function (done) {
    try {
        var res = this.conv.end();
        if (res && res.length) this.push(res);
        done();
    } catch (e) {
        done(e);
    }
};

IconvLiteEncoderStream.prototype.collect = function (cb) {
    var chunks = [];
    this.on('error', cb);
    this.on('data', function (chunk) {
        chunks.push(chunk);
    });
    this.on('end', function () {
        cb(null, Buffer.concat(chunks));
    });
    return this;
};

// == Decoder stream =======================================================
function IconvLiteDecoderStream(conv, options) {
    this.conv = conv;
    options = options || {};
    options.encoding = this.encoding = 'utf8'; // We output strings.
    Transform.call(this, options);
}

IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
    constructor: { value: IconvLiteDecoderStream }
});

IconvLiteDecoderStream.prototype._transform = function (chunk, encoding, done) {
    if (!Buffer.isBuffer(chunk)) return done(new Error("Iconv decoding stream needs buffers as its input."));
    try {
        var res = this.conv.write(chunk);
        if (res && res.length) this.push(res, this.encoding);
        done();
    } catch (e) {
        done(e);
    }
};

IconvLiteDecoderStream.prototype._flush = function (done) {
    try {
        var res = this.conv.end();
        if (res && res.length) this.push(res, this.encoding);
        done();
    } catch (e) {
        done(e);
    }
};

IconvLiteDecoderStream.prototype.collect = function (cb) {
    var res = '';
    this.on('error', cb);
    this.on('data', function (chunk) {
        res += chunk;
    });
    this.on('end', function () {
        cb(null, res);
    });
    return this;
};

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(8).Buffer;

// == Extend Node primitives to use iconv-lite =================================

module.exports = function (iconv) {
    var original = undefined; // Place to keep original methods.

    // Node authors rewrote Buffer internals to make it compatible with
    // Uint8Array and we cannot patch key functions since then.
    iconv.supportsNodeEncodingsExtension = !(new Buffer(0) instanceof Uint8Array);

    iconv.extendNodeEncodings = function extendNodeEncodings() {
        if (original) return;
        original = {};

        if (!iconv.supportsNodeEncodingsExtension) {
            console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
            console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
            return;
        }

        var nodeNativeEncodings = {
            'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true,
            'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true
        };

        Buffer.isNativeEncoding = function (enc) {
            return enc && nodeNativeEncodings[enc.toLowerCase()];
        };

        // -- SlowBuffer -----------------------------------------------------------
        var SlowBuffer = __webpack_require__(8).SlowBuffer;

        original.SlowBufferToString = SlowBuffer.prototype.toString;
        SlowBuffer.prototype.toString = function (encoding, start, end) {
            encoding = String(encoding || 'utf8').toLowerCase();

            // Use native conversion when possible
            if (Buffer.isNativeEncoding(encoding)) return original.SlowBufferToString.call(this, encoding, start, end);

            // Otherwise, use our decoding method.
            if (typeof start == 'undefined') start = 0;
            if (typeof end == 'undefined') end = this.length;
            return iconv.decode(this.slice(start, end), encoding);
        };

        original.SlowBufferWrite = SlowBuffer.prototype.write;
        SlowBuffer.prototype.write = function (string, offset, length, encoding) {
            // Support both (string, offset, length, encoding)
            // and the legacy (string, encoding, offset, length)
            if (isFinite(offset)) {
                if (!isFinite(length)) {
                    encoding = length;
                    length = undefined;
                }
            } else {
                // legacy
                var swap = encoding;
                encoding = offset;
                offset = length;
                length = swap;
            }

            offset = +offset || 0;
            var remaining = this.length - offset;
            if (!length) {
                length = remaining;
            } else {
                length = +length;
                if (length > remaining) {
                    length = remaining;
                }
            }
            encoding = String(encoding || 'utf8').toLowerCase();

            // Use native conversion when possible
            if (Buffer.isNativeEncoding(encoding)) return original.SlowBufferWrite.call(this, string, offset, length, encoding);

            if (string.length > 0 && (length < 0 || offset < 0)) throw new RangeError('attempt to write beyond buffer bounds');

            // Otherwise, use our encoding method.
            var buf = iconv.encode(string, encoding);
            if (buf.length < length) length = buf.length;
            buf.copy(this, offset, 0, length);
            return length;
        };

        // -- Buffer ---------------------------------------------------------------

        original.BufferIsEncoding = Buffer.isEncoding;
        Buffer.isEncoding = function (encoding) {
            return Buffer.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
        };

        original.BufferByteLength = Buffer.byteLength;
        Buffer.byteLength = SlowBuffer.byteLength = function (str, encoding) {
            encoding = String(encoding || 'utf8').toLowerCase();

            // Use native conversion when possible
            if (Buffer.isNativeEncoding(encoding)) return original.BufferByteLength.call(this, str, encoding);

            // Slow, I know, but we don't have a better way yet.
            return iconv.encode(str, encoding).length;
        };

        original.BufferToString = Buffer.prototype.toString;
        Buffer.prototype.toString = function (encoding, start, end) {
            encoding = String(encoding || 'utf8').toLowerCase();

            // Use native conversion when possible
            if (Buffer.isNativeEncoding(encoding)) return original.BufferToString.call(this, encoding, start, end);

            // Otherwise, use our decoding method.
            if (typeof start == 'undefined') start = 0;
            if (typeof end == 'undefined') end = this.length;
            return iconv.decode(this.slice(start, end), encoding);
        };

        original.BufferWrite = Buffer.prototype.write;
        Buffer.prototype.write = function (string, offset, length, encoding) {
            var _offset = offset,
                _length = length,
                _encoding = encoding;
            // Support both (string, offset, length, encoding)
            // and the legacy (string, encoding, offset, length)
            if (isFinite(offset)) {
                if (!isFinite(length)) {
                    encoding = length;
                    length = undefined;
                }
            } else {
                // legacy
                var swap = encoding;
                encoding = offset;
                offset = length;
                length = swap;
            }

            encoding = String(encoding || 'utf8').toLowerCase();

            // Use native conversion when possible
            if (Buffer.isNativeEncoding(encoding)) return original.BufferWrite.call(this, string, _offset, _length, _encoding);

            offset = +offset || 0;
            var remaining = this.length - offset;
            if (!length) {
                length = remaining;
            } else {
                length = +length;
                if (length > remaining) {
                    length = remaining;
                }
            }

            if (string.length > 0 && (length < 0 || offset < 0)) throw new RangeError('attempt to write beyond buffer bounds');

            // Otherwise, use our encoding method.
            var buf = iconv.encode(string, encoding);
            if (buf.length < length) length = buf.length;
            buf.copy(this, offset, 0, length);
            return length;

            // TODO: Set _charsWritten.
        };

        // -- Readable -------------------------------------------------------------
        if (iconv.supportsStreams) {
            var Readable = __webpack_require__(9).Readable;

            original.ReadableSetEncoding = Readable.prototype.setEncoding;
            Readable.prototype.setEncoding = function setEncoding(enc, options) {
                // Use our own decoder, it has the same interface.
                // We cannot use original function as it doesn't handle BOM-s.
                this._readableState.decoder = iconv.getDecoder(enc, options);
                this._readableState.encoding = enc;
            };

            Readable.prototype.collect = iconv._collect;
        }
    };

    // Remove iconv-lite Node primitive extensions.
    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
        if (!iconv.supportsNodeEncodingsExtension) return;
        if (!original) throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.");

        delete Buffer.isNativeEncoding;

        var SlowBuffer = __webpack_require__(8).SlowBuffer;

        SlowBuffer.prototype.toString = original.SlowBufferToString;
        SlowBuffer.prototype.write = original.SlowBufferWrite;

        Buffer.isEncoding = original.BufferIsEncoding;
        Buffer.byteLength = original.BufferByteLength;
        Buffer.prototype.toString = original.BufferToString;
        Buffer.prototype.write = original.BufferWrite;

        if (iconv.supportsStreams) {
            var Readable = __webpack_require__(9).Readable;

            Readable.prototype.setEncoding = original.ReadableSetEncoding;
            delete Readable.prototype.collect;
        }

        original = undefined;
    };
};

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * ee-first
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = first;

/**
 * Get the first event in a set of event emitters and event pairs.
 *
 * @param {array} stuff
 * @param {function} done
 * @public
 */

function first(stuff, done) {
  if (!Array.isArray(stuff)) throw new TypeError('arg must be an array of [ee, events...] arrays');

  var cleanups = [];

  for (var i = 0; i < stuff.length; i++) {
    var arr = stuff[i];

    if (!Array.isArray(arr) || arr.length < 2) throw new TypeError('each array member must be [ee, events...]');

    var ee = arr[0];

    for (var j = 1; j < arr.length; j++) {
      var event = arr[j];
      var fn = listener(event, callback);

      // listen to the event
      ee.on(event, fn);
      // push this listener to the list of cleanups
      cleanups.push({
        ee: ee,
        event: event,
        fn: fn
      });
    }
  }

  function callback() {
    cleanup();
    done.apply(null, arguments);
  }

  function cleanup() {
    var x;
    for (var i = 0; i < cleanups.length; i++) {
      x = cleanups[i];
      x.ee.removeListener(x.event, x.fn);
    }
  }

  function thunk(fn) {
    done = fn;
  }

  thunk.cancel = cleanup;

  return thunk;
}

/**
 * Create the event listener.
 * @private
 */

function listener(event, done) {
  return function onevent(arg1) {
    var args = new Array(arguments.length);
    var ee = this;
    var err = event === 'error' ? arg1 : null;

    // copy args to prevent arguments escaping scope
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    done(err, ee, event, args);
  };
}

/***/ }),
/* 152 */
/***/ (function(module, exports) {

/*!
 * media-typer
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * RegExp to match *( ";" parameter ) in RFC 2616 sec 3.7
 *
 * parameter     = token "=" ( token | quoted-string )
 * token         = 1*<any CHAR except CTLs or separators>
 * separators    = "(" | ")" | "<" | ">" | "@"
 *               | "," | ";" | ":" | "\" | <">
 *               | "/" | "[" | "]" | "?" | "="
 *               | "{" | "}" | SP | HT
 * quoted-string = ( <"> *(qdtext | quoted-pair ) <"> )
 * qdtext        = <any TEXT except <">>
 * quoted-pair   = "\" CHAR
 * CHAR          = <any US-ASCII character (octets 0 - 127)>
 * TEXT          = <any OCTET except CTLs, but including LWS>
 * LWS           = [CRLF] 1*( SP | HT )
 * CRLF          = CR LF
 * CR            = <US-ASCII CR, carriage return (13)>
 * LF            = <US-ASCII LF, linefeed (10)>
 * SP            = <US-ASCII SP, space (32)>
 * SHT           = <US-ASCII HT, horizontal-tab (9)>
 * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
 * OCTET         = <any 8-bit sequence of data>
 */
var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
var textRegExp = /^[\u0020-\u007e\u0080-\u00ff]+$/;
var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/;

/**
 * RegExp to match quoted-pair in RFC 2616
 *
 * quoted-pair = "\" CHAR
 * CHAR        = <any US-ASCII character (octets 0 - 127)>
 */
var qescRegExp = /\\([\u0000-\u007f])/g;

/**
 * RegExp to match chars that must be quoted-pair in RFC 2616
 */
var quoteRegExp = /([\\"])/g;

/**
 * RegExp to match type in RFC 6838
 *
 * type-name = restricted-name
 * subtype-name = restricted-name
 * restricted-name = restricted-name-first *126restricted-name-chars
 * restricted-name-first  = ALPHA / DIGIT
 * restricted-name-chars  = ALPHA / DIGIT / "!" / "#" /
 *                          "$" / "&" / "-" / "^" / "_"
 * restricted-name-chars =/ "." ; Characters before first dot always
 *                              ; specify a facet name
 * restricted-name-chars =/ "+" ; Characters after last plus always
 *                              ; specify a structured syntax suffix
 * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z
 * DIGIT =  %x30-39             ; 0-9
 */
var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;
var typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;
var typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;

/**
 * Module exports.
 */

exports.format = format;
exports.parse = parse;

/**
 * Format object to media type.
 *
 * @param {object} obj
 * @return {string}
 * @api public
 */

function format(obj) {
  if (!obj || typeof obj !== 'object') {
    throw new TypeError('argument obj is required');
  }

  var parameters = obj.parameters;
  var subtype = obj.subtype;
  var suffix = obj.suffix;
  var type = obj.type;

  if (!type || !typeNameRegExp.test(type)) {
    throw new TypeError('invalid type');
  }

  if (!subtype || !subtypeNameRegExp.test(subtype)) {
    throw new TypeError('invalid subtype');
  }

  // format as type/subtype
  var string = type + '/' + subtype;

  // append +suffix
  if (suffix) {
    if (!typeNameRegExp.test(suffix)) {
      throw new TypeError('invalid suffix');
    }

    string += '+' + suffix;
  }

  // append parameters
  if (parameters && typeof parameters === 'object') {
    var param;
    var params = Object.keys(parameters).sort();

    for (var i = 0; i < params.length; i++) {
      param = params[i];

      if (!tokenRegExp.test(param)) {
        throw new TypeError('invalid parameter name');
      }

      string += '; ' + param + '=' + qstring(parameters[param]);
    }
  }

  return string;
}

/**
 * Parse media type to object.
 *
 * @param {string|object} string
 * @return {Object}
 * @api public
 */

function parse(string) {
  if (!string) {
    throw new TypeError('argument string is required');
  }

  // support req/res-like objects as argument
  if (typeof string === 'object') {
    string = getcontenttype(string);
  }

  if (typeof string !== 'string') {
    throw new TypeError('argument string is required to be a string');
  }

  var index = string.indexOf(';');
  var type = index !== -1 ? string.substr(0, index) : string;

  var key;
  var match;
  var obj = splitType(type);
  var params = {};
  var value;

  paramRegExp.lastIndex = index;

  while (match = paramRegExp.exec(string)) {
    if (match.index !== index) {
      throw new TypeError('invalid parameter format');
    }

    index += match[0].length;
    key = match[1].toLowerCase();
    value = match[2];

    if (value[0] === '"') {
      // remove quotes and escapes
      value = value.substr(1, value.length - 2).replace(qescRegExp, '$1');
    }

    params[key] = value;
  }

  if (index !== -1 && index !== string.length) {
    throw new TypeError('invalid parameter format');
  }

  obj.parameters = params;

  return obj;
}

/**
 * Get content-type from req/res objects.
 *
 * @param {object}
 * @return {Object}
 * @api private
 */

function getcontenttype(obj) {
  if (typeof obj.getHeader === 'function') {
    // res-like
    return obj.getHeader('content-type');
  }

  if (typeof obj.headers === 'object') {
    // req-like
    return obj.headers && obj.headers['content-type'];
  }
}

/**
 * Quote a string if necessary.
 *
 * @param {string} val
 * @return {string}
 * @api private
 */

function qstring(val) {
  var str = String(val);

  // no need to quote tokens
  if (tokenRegExp.test(str)) {
    return str;
  }

  if (str.length > 0 && !textRegExp.test(str)) {
    throw new TypeError('invalid parameter value');
  }

  return '"' + str.replace(quoteRegExp, '\\$1') + '"';
}

/**
 * Simply "type/subtype+siffx" into parts.
 *
 * @param {string} string
 * @return {Object}
 * @api private
 */

function splitType(string) {
  var match = typeRegExp.exec(string.toLowerCase());

  if (!match) {
    throw new TypeError('invalid media type');
  }

  var type = match[1];
  var subtype = match[2];
  var suffix;

  // suffix after last +
  var index = subtype.lastIndexOf('+');
  if (index !== -1) {
    suffix = subtype.substr(index + 1);
    subtype = subtype.substr(0, index);
  }

  var obj = {
    type: type,
    subtype: subtype,
    suffix: suffix
  };

  return obj;
}

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

/**
 * Module exports.
 */

module.exports = __webpack_require__(154);

/***/ }),
/* 154 */
/***/ (function(module, exports) {

module.exports = {"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana"},"application/3gpp-ims+xml":{"source":"iana"},"application/a2l":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana"},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","extensions":["atomsvc"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana"},"application/bacnet-xdd+zip":{"source":"iana"},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana"},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana"},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/cbor":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana"},"application/ccxml+xml":{"source":"iana","extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana"},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana"},"application/cellml+xml":{"source":"iana"},"application/cfw":{"source":"iana"},"application/clue_info+xml":{"source":"iana"},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana"},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana"},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana"},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana"},"application/cstadata+xml":{"source":"iana"},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","extensions":["mpd"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana"},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana"},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/docbook+xml":{"source":"apache","extensions":["dbk"]},"application/dskpp+xml":{"source":"iana"},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["ecma"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/emergencycalldata.comment+xml":{"source":"iana"},"application/emergencycalldata.control+xml":{"source":"iana"},"application/emergencycalldata.deviceinfo+xml":{"source":"iana"},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana"},"application/emergencycalldata.serviceinfo+xml":{"source":"iana"},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana"},"application/emergencycalldata.veds+xml":{"source":"iana"},"application/emma+xml":{"source":"iana","extensions":["emma"]},"application/emotionml+xml":{"source":"iana"},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana"},"application/epub+zip":{"source":"iana","extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana"},"application/fhir+xml":{"source":"iana"},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false,"extensions":["woff"]},"application/framework-attributes+xml":{"source":"iana"},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geoxacml+xml":{"source":"iana"},"application/gml+xml":{"source":"iana","extensions":["gml"]},"application/gpx+xml":{"source":"apache","extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana"},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana"},"application/ibe-pkg-reply+xml":{"source":"iana"},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana"},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana"},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana"},"application/kpml-response+xml":{"source":"iana"},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana"},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana"},"application/lost+xml":{"source":"iana","extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana"},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","extensions":["mads"]},"application/manifest+json":{"charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana"},"application/mathml-presentation+xml":{"source":"iana"},"application/mbms-associated-procedure-description+xml":{"source":"iana"},"application/mbms-deregister+xml":{"source":"iana"},"application/mbms-envelope+xml":{"source":"iana"},"application/mbms-msk+xml":{"source":"iana"},"application/mbms-msk-response+xml":{"source":"iana"},"application/mbms-protection-description+xml":{"source":"iana"},"application/mbms-reception-report+xml":{"source":"iana"},"application/mbms-register+xml":{"source":"iana"},"application/mbms-register-response+xml":{"source":"iana"},"application/mbms-schedule+xml":{"source":"iana"},"application/mbms-user-service-description+xml":{"source":"iana"},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana"},"application/media_control+xml":{"source":"iana"},"application/mediaservercontrol+xml":{"source":"iana","extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","extensions":["meta4"]},"application/mets+xml":{"source":"iana","extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mmt-usd+xml":{"source":"iana"},"application/mods+xml":{"source":"iana","extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana"},"application/mrb-publish+xml":{"source":"iana"},"application/msc-ivr+xml":{"source":"iana"},"application/msc-mixer+xml":{"source":"iana"},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana"},"application/n-triples":{"source":"iana"},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana"},"application/news-groupinfo":{"source":"iana"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana"},"application/node":{"source":"iana"},"application/nss":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p2p-overlay+xml":{"source":"iana"},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana"},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana"},"application/pidf-diff+xml":{"source":"iana"},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","extensions":["pls"]},"application/poc-settings+xml":{"source":"iana"},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana"},"application/provenance+xml":{"source":"iana"},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.hpub+zip":{"source":"iana"},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana"},"application/pskc+xml":{"source":"iana","extensions":["pskcxml"]},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf"]},"application/reginfo+xml":{"source":"iana","extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","extensions":["rld"]},"application/rfc+xml":{"source":"iana"},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana"},"application/rls-services+xml":{"source":"iana","extensions":["rs"]},"application/route-apd+xml":{"source":"iana"},"application/route-s-tsid+xml":{"source":"iana"},"application/route-usd+xml":{"source":"iana"},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana"},"application/samlmetadata+xml":{"source":"iana"},"application/sbml+xml":{"source":"iana","extensions":["sbml"]},"application/scaip+xml":{"source":"iana"},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/sep+xml":{"source":"iana"},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","extensions":["shf"]},"application/sieve":{"source":"iana"},"application/simple-filter+xml":{"source":"iana"},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","extensions":["srx"]},"application/spirits-event+xml":{"source":"iana"},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","extensions":["grxml"]},"application/sru+xml":{"source":"iana","extensions":["sru"]},"application/ssdl+xml":{"source":"apache","extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","extensions":["ssml"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/tei+xml":{"source":"iana","extensions":["tei","teicorpus"]},"application/thraud+xml":{"source":"iana","extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tnauthlist":{"source":"iana"},"application/trig":{"source":"iana"},"application/ttml+xml":{"source":"iana"},"application/tve-trigger":{"source":"iana"},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana"},"application/urc-ressheet+xml":{"source":"iana"},"application/urc-targetdesc+xml":{"source":"iana"},"application/urc-uisocketdesc+xml":{"source":"iana"},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana"},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana"},"application/vnd.3gpp-prose+xml":{"source":"iana"},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana"},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana"},"application/vnd.3gpp.bsf+xml":{"source":"iana"},"application/vnd.3gpp.gmop+xml":{"source":"iana"},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana"},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana"},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana"},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana"},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana"},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana"},"application/vnd.3gpp.mid-call+xml":{"source":"iana"},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana"},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana"},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana"},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana"},"application/vnd.3gpp.ussd+xml":{"source":"iana"},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana"},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","extensions":["mpkg"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana"},"application/vnd.balsamiq.bmml+xml":{"source":"iana"},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana"},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana"},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana"},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","extensions":["wbs"]},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana"},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana"},"application/vnd.cybank":{"source":"iana"},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana"},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume-movie":{"source":"iana"},"application/vnd.desmume.movie":{"source":"apache"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana"},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana"},"application/vnd.dvb.notif-container+xml":{"source":"iana"},"application/vnd.dvb.notif-generic+xml":{"source":"iana"},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana"},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana"},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana"},"application/vnd.dvb.notif-init+xml":{"source":"iana"},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana"},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana"},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana"},"application/vnd.eszigno3+xml":{"source":"iana","extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana"},"application/vnd.etsi.asic-e+zip":{"source":"iana"},"application/vnd.etsi.asic-s+zip":{"source":"iana"},"application/vnd.etsi.cug+xml":{"source":"iana"},"application/vnd.etsi.iptvcommand+xml":{"source":"iana"},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana"},"application/vnd.etsi.iptvprofile+xml":{"source":"iana"},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana"},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana"},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana"},"application/vnd.etsi.iptvservice+xml":{"source":"iana"},"application/vnd.etsi.iptvsync+xml":{"source":"iana"},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana"},"application/vnd.etsi.mcid+xml":{"source":"iana"},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana"},"application/vnd.etsi.pstn+xml":{"source":"iana"},"application/vnd.etsi.sci+xml":{"source":"iana"},"application/vnd.etsi.simservs+xml":{"source":"iana"},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana"},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana"},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana"},"application/vnd.gov.sk.e-form+zip":{"source":"iana"},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana"},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana"},"application/vnd.imagemeter.image+zip":{"source":"iana"},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana"},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana"},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana"},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana"},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana"},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana"},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana"},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana"},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana"},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","extensions":["lasxml"]},"application/vnd.liberty-request+xml":{"source":"iana"},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","extensions":["lbe"]},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana"},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana"},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana"},"application/vnd.marlin.drm.license+xml":{"source":"iana"},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana"},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana"},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana"},"application/vnd.ms-printing.printticket+xml":{"source":"apache"},"application/vnd.ms-printschematicket+xml":{"source":"iana"},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana"},"application/vnd.nokia.iptv.config+xml":{"source":"iana"},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana"},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana"},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana"},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana"},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana"},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana"},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana"},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana"},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana"},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana"},"application/vnd.oipf.spdlist+xml":{"source":"iana"},"application/vnd.oipf.ueprofile+xml":{"source":"iana"},"application/vnd.oipf.userprofile+xml":{"source":"iana"},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana"},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana"},"application/vnd.oma.bcast.imd+xml":{"source":"iana"},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana"},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana"},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana"},"application/vnd.oma.bcast.sprov+xml":{"source":"iana"},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana"},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana"},"application/vnd.oma.cab-pcc+xml":{"source":"iana"},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana"},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana"},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana"},"application/vnd.oma.group-usage-list+xml":{"source":"iana"},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana"},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana"},"application/vnd.oma.poc.final-report+xml":{"source":"iana"},"application/vnd.oma.poc.groups+xml":{"source":"iana"},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana"},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana"},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana"},"application/vnd.oma.xcap-directory+xml":{"source":"iana"},"application/vnd.omads-email+xml":{"source":"iana"},"application/vnd.omads-file+xml":{"source":"iana"},"application/vnd.omads-folder+xml":{"source":"iana"},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana"},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana"},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana"},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana"},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana"},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana"},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos+xml":{"source":"iana"},"application/vnd.paos.xml":{"source":"apache"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana"},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana"},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana"},"application/vnd.radisys.msml+xml":{"source":"iana"},"application/vnd.radisys.msml-audit+xml":{"source":"iana"},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana"},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana"},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana"},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana"},"application/vnd.radisys.msml-conf+xml":{"source":"iana"},"application/vnd.radisys.msml-dialog+xml":{"source":"iana"},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana"},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana"},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana"},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana"},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana"},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana"},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana"},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.software602.filler.form+xml":{"source":"iana"},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana"},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana"},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana"},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana"},"application/vnd.wv.ssp+xml":{"source":"iana"},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana"},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana"},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"apache","extensions":["der","crt","pem"]},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana"},"application/xaml+xml":{"source":"apache","extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana"},"application/xcap-caps+xml":{"source":"iana"},"application/xcap-diff+xml":{"source":"iana","extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana"},"application/xcap-error+xml":{"source":"iana"},"application/xcap-ns+xml":{"source":"iana"},"application/xcon-conference-info+xml":{"source":"iana"},"application/xcon-conference-info-diff+xml":{"source":"iana"},"application/xenc+xml":{"source":"iana","extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache"},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana"},"application/xmpp+xml":{"source":"iana"},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","extensions":["xpl"]},"application/xslt+xml":{"source":"iana","extensions":["xslt"]},"application/xspf+xml":{"source":"apache","extensions":["xspf"]},"application/xv+xml":{"source":"iana","extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana"},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana"},"application/yin+xml":{"source":"iana","extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana"},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana"},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana"},"image/apng":{"compressible":false,"extensions":["apng"]},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana"},"image/emf":{"source":"iana"},"image/fits":{"source":"iana"},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana"},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana"},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana"},"image/tiff":{"source":"iana","compressible":false,"extensions":["tiff","tif"]},"image/tiff-fx":{"source":"iana"},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana"},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana"},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana"},"image/vnd.valve.source.texture":{"source":"iana"},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana"},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana"},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/vnd.collada+xml":{"source":"iana","extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana"},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana"},"model/vnd.parasolid.transmit.binary":{"source":"iana"},"model/vnd.parasolid.transmit.text":{"source":"iana"},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.valve.source.compiled-map":{"source":"iana"},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana"},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana"},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana","compressible":false},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shex":{"extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana"},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vp8":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 */

var bytes = __webpack_require__(23);
var debug = __webpack_require__(6)('body-parser:raw');
var read = __webpack_require__(35);
var typeis = __webpack_require__(25);

/**
 * Module exports.
 */

module.exports = raw;

/**
 * Create a middleware to parse raw bodies.
 *
 * @param {object} [options]
 * @return {function}
 * @api public
 */

function raw(options) {
  var opts = options || {};

  var inflate = opts.inflate !== false;
  var limit = typeof opts.limit !== 'number' ? bytes.parse(opts.limit || '100kb') : opts.limit;
  var type = opts.type || 'application/octet-stream';
  var verify = opts.verify || false;

  if (verify !== false && typeof verify !== 'function') {
    throw new TypeError('option verify must be function');
  }

  // create the appropriate type checking function
  var shouldParse = typeof type !== 'function' ? typeChecker(type) : type;

  function parse(buf) {
    return buf;
  }

  return function rawParser(req, res, next) {
    if (req._body) {
      debug('body already parsed');
      next();
      return;
    }

    req.body = req.body || {};

    // skip requests without bodies
    if (!typeis.hasBody(req)) {
      debug('skip empty body');
      next();
      return;
    }

    debug('content-type %j', req.headers['content-type']);

    // determine if request should be parsed
    if (!shouldParse(req)) {
      debug('skip parsing');
      next();
      return;
    }

    // read
    read(req, res, next, parse, debug, {
      encoding: null,
      inflate: inflate,
      limit: limit,
      verify: verify
    });
  };
}

/**
 * Get the simple type checker.
 *
 * @param {string} type
 * @return {function}
 */

function typeChecker(type) {
  return function checkType(req) {
    return Boolean(typeis(req, type));
  };
}

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * body-parser
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 */

var bytes = __webpack_require__(23);
var contentType = __webpack_require__(31);
var debug = __webpack_require__(6)('body-parser:text');
var read = __webpack_require__(35);
var typeis = __webpack_require__(25);

/**
 * Module exports.
 */

module.exports = text;

/**
 * Create a middleware to parse text bodies.
 *
 * @param {object} [options]
 * @return {function}
 * @api public
 */

function text(options) {
  var opts = options || {};

  var defaultCharset = opts.defaultCharset || 'utf-8';
  var inflate = opts.inflate !== false;
  var limit = typeof opts.limit !== 'number' ? bytes.parse(opts.limit || '100kb') : opts.limit;
  var type = opts.type || 'text/plain';
  var verify = opts.verify || false;

  if (verify !== false && typeof verify !== 'function') {
    throw new TypeError('option verify must be function');
  }

  // create the appropriate type checking function
  var shouldParse = typeof type !== 'function' ? typeChecker(type) : type;

  function parse(buf) {
    return buf;
  }

  return function textParser(req, res, next) {
    if (req._body) {
      debug('body already parsed');
      next();
      return;
    }

    req.body = req.body || {};

    // skip requests without bodies
    if (!typeis.hasBody(req)) {
      debug('skip empty body');
      next();
      return;
    }

    debug('content-type %j', req.headers['content-type']);

    // determine if request should be parsed
    if (!shouldParse(req)) {
      debug('skip parsing');
      next();
      return;
    }

    // get charset
    var charset = getCharset(req) || defaultCharset;

    // read
    read(req, res, next, parse, debug, {
      encoding: charset,
      inflate: inflate,
      limit: limit,
      verify: verify
    });
  };
}

/**
 * Get the charset of a request.
 *
 * @param {object} req
 * @api private
 */

function getCharset(req) {
  try {
    return (contentType.parse(req).parameters.charset || '').toLowerCase();
  } catch (e) {
    return undefined;
  }
}

/**
 * Get the simple type checker.
 *
 * @param {string} type
 * @return {function}
 */

function typeChecker(type) {
  return function checkType(req) {
    return Boolean(typeis(req, type));
  };
}

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * body-parser
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var bytes = __webpack_require__(23);
var contentType = __webpack_require__(31);
var createError = __webpack_require__(32);
var debug = __webpack_require__(6)('body-parser:urlencoded');
var deprecate = __webpack_require__(10)('body-parser');
var read = __webpack_require__(35);
var typeis = __webpack_require__(25);

/**
 * Module exports.
 */

module.exports = urlencoded;

/**
 * Cache of parser modules.
 */

var parsers = Object.create(null);

/**
 * Create a middleware to parse urlencoded bodies.
 *
 * @param {object} [options]
 * @return {function}
 * @public
 */

function urlencoded(options) {
  var opts = options || {};

  // notice because option default will flip in next major
  if (opts.extended === undefined) {
    deprecate('undefined extended: provide extended option');
  }

  var extended = opts.extended !== false;
  var inflate = opts.inflate !== false;
  var limit = typeof opts.limit !== 'number' ? bytes.parse(opts.limit || '100kb') : opts.limit;
  var type = opts.type || 'application/x-www-form-urlencoded';
  var verify = opts.verify || false;

  if (verify !== false && typeof verify !== 'function') {
    throw new TypeError('option verify must be function');
  }

  // create the appropriate query parser
  var queryparse = extended ? extendedparser(opts) : simpleparser(opts);

  // create the appropriate type checking function
  var shouldParse = typeof type !== 'function' ? typeChecker(type) : type;

  function parse(body) {
    return body.length ? queryparse(body) : {};
  }

  return function urlencodedParser(req, res, next) {
    if (req._body) {
      debug('body already parsed');
      next();
      return;
    }

    req.body = req.body || {};

    // skip requests without bodies
    if (!typeis.hasBody(req)) {
      debug('skip empty body');
      next();
      return;
    }

    debug('content-type %j', req.headers['content-type']);

    // determine if request should be parsed
    if (!shouldParse(req)) {
      debug('skip parsing');
      next();
      return;
    }

    // assert charset
    var charset = getCharset(req) || 'utf-8';
    if (charset !== 'utf-8') {
      debug('invalid charset');
      next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
        charset: charset,
        type: 'charset.unsupported'
      }));
      return;
    }

    // read
    read(req, res, next, parse, debug, {
      debug: debug,
      encoding: charset,
      inflate: inflate,
      limit: limit,
      verify: verify
    });
  };
}

/**
 * Get the extended query parser.
 *
 * @param {object} options
 */

function extendedparser(options) {
  var parameterLimit = options.parameterLimit !== undefined ? options.parameterLimit : 1000;
  var parse = parser('qs');

  if (isNaN(parameterLimit) || parameterLimit < 1) {
    throw new TypeError('option parameterLimit must be a positive number');
  }

  if (isFinite(parameterLimit)) {
    parameterLimit = parameterLimit | 0;
  }

  return function queryparse(body) {
    var paramCount = parameterCount(body, parameterLimit);

    if (paramCount === undefined) {
      debug('too many parameters');
      throw createError(413, 'too many parameters', {
        type: 'parameters.too.many'
      });
    }

    var arrayLimit = Math.max(100, paramCount);

    debug('parse extended urlencoding');
    return parse(body, {
      allowPrototypes: true,
      arrayLimit: arrayLimit,
      depth: Infinity,
      parameterLimit: parameterLimit
    });
  };
}

/**
 * Get the charset of a request.
 *
 * @param {object} req
 * @api private
 */

function getCharset(req) {
  try {
    return (contentType.parse(req).parameters.charset || '').toLowerCase();
  } catch (e) {
    return undefined;
  }
}

/**
 * Count the number of parameters, stopping once limit reached
 *
 * @param {string} body
 * @param {number} limit
 * @api private
 */

function parameterCount(body, limit) {
  var count = 0;
  var index = 0;

  while ((index = body.indexOf('&', index)) !== -1) {
    count++;
    index++;

    if (count === limit) {
      return undefined;
    }
  }

  return count;
}

/**
 * Get parser for module name dynamically.
 *
 * @param {string} name
 * @return {function}
 * @api private
 */

function parser(name) {
  var mod = parsers[name];

  if (mod !== undefined) {
    return mod.parse;
  }

  // this uses a switch for static require analysis
  switch (name) {
    case 'qs':
      mod = __webpack_require__(48);
      break;
    case 'querystring':
      mod = __webpack_require__(75);
      break;
  }

  // store to prevent invoking require()
  parsers[name] = mod;

  return mod.parse;
}

/**
 * Get the simple query parser.
 *
 * @param {object} options
 */

function simpleparser(options) {
  var parameterLimit = options.parameterLimit !== undefined ? options.parameterLimit : 1000;
  var parse = parser('querystring');

  if (isNaN(parameterLimit) || parameterLimit < 1) {
    throw new TypeError('option parameterLimit must be a positive number');
  }

  if (isFinite(parameterLimit)) {
    parameterLimit = parameterLimit | 0;
  }

  return function queryparse(body) {
    var paramCount = parameterCount(body, parameterLimit);

    if (paramCount === undefined) {
      debug('too many parameters');
      throw createError(413, 'too many parameters', {
        type: 'parameters.too.many'
      });
    }

    debug('parse urlencoding');
    return parse(body, undefined, undefined, { maxKeys: parameterLimit });
  };
}

/**
 * Get the simple type checker.
 *
 * @param {string} type
 * @return {function}
 */

function typeChecker(type) {
  return function checkType(req) {
    return Boolean(typeis(req, type));
  };
}

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(73);
var formats = __webpack_require__(74);

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        // eslint-disable-line func-name-matching
        return prefix + '[]';
    },
    indices: function indices(prefix, key) {
        // eslint-disable-line func-name-matching
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
        // eslint-disable-line func-name-matching
        return prefix;
    }
};

var toISO = Date.prototype.toISOString;

var defaults = {
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    serializeDate: function serializeDate(date) {
        // eslint-disable-line func-name-matching
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var stringify = function stringify( // eslint-disable-line func-name-matching
object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly) {
    var obj = object;
    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder) : prefix;
        }

        obj = '';
    }

    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder);
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (Array.isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        if (Array.isArray(obj)) {
            values = values.concat(stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
        } else {
            values = values.concat(stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
        }
    }

    return values;
};

module.exports = function (object, opts) {
    var obj = object;
    var options = opts ? utils.assign({}, opts) : {};

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
    var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;
    if (typeof options.format === 'undefined') {
        options.format = formats['default'];
    } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) {
        throw new TypeError('Unknown format option provided.');
    }
    var formatter = formats.formatters[options.format];
    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (Array.isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    } else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (sort) {
        objKeys.sort(sort);
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        keys = keys.concat(stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode ? encoder : null, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
    }

    var joined = keys.join(delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    return joined.length > 0 ? prefix + joined : '';
};

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(73);

var has = Object.prototype.hasOwnProperty;

var defaults = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    parameterLimit: 1000,
    plainObjects: false,
    strictNullHandling: false
};

var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);

    for (var i = 0; i < parts.length; ++i) {
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder);
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder);
            val = options.decoder(part.slice(pos + 1), defaults.decoder);
        }
        if (has.call(obj, key)) {
            obj[key] = [].concat(obj[key]).concat(val);
        } else {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function (chain, val, options) {
    var leaf = val;

    for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];

        if (root === '[]') {
            obj = [];
            obj = obj.concat(leaf);
        } else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var index = parseInt(cleanRoot, 10);
            if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
                obj = [];
                obj[index] = leaf;
            } else {
                obj[cleanRoot] = leaf;
            }
        }

        leaf = obj;
    }

    return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys
        // that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(parent);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options);
};

module.exports = function (str, opts) {
    var options = opts ? utils.assign({}, opts) : {};

    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;
    options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = utils.merge(obj, newObj, options);
    }

    return utils.compact(obj);
};

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * merge-descriptors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = merge;

/**
 * Module variables.
 * @private
 */

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Merge the property descriptors of `src` into `dest`
 *
 * @param {object} dest Object to add descriptors to
 * @param {object} src Object to clone descriptors from
 * @param {boolean} [redefine=true] Redefine `dest` properties with `src` properties
 * @returns {object} Reference to dest
 * @public
 */

function merge(dest, src, redefine) {
  if (!dest) {
    throw new TypeError('argument dest is required');
  }

  if (!src) {
    throw new TypeError('argument src is required');
  }

  if (redefine === undefined) {
    // Default to true
    redefine = true;
  }

  Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
    if (!redefine && hasOwnProperty.call(dest, name)) {
      // Skip desriptor
      return;
    }

    // Copy descriptor
    var descriptor = Object.getOwnPropertyDescriptor(src, name);
    Object.defineProperty(dest, name, descriptor);
  });

  return dest;
}

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var finalhandler = __webpack_require__(162);
var Router = __webpack_require__(76);
var methods = __webpack_require__(49);
var middleware = __webpack_require__(164);
var query = __webpack_require__(79);
var debug = __webpack_require__(6)('express:application');
var View = __webpack_require__(165);
var http = __webpack_require__(16);
var compileETag = __webpack_require__(14).compileETag;
var compileQueryParser = __webpack_require__(14).compileQueryParser;
var compileTrust = __webpack_require__(14).compileTrust;
var deprecate = __webpack_require__(10)('express');
var flatten = __webpack_require__(39);
var merge = __webpack_require__(40);
var resolve = __webpack_require__(0).resolve;
var setPrototypeOf = __webpack_require__(33);
var slice = Array.prototype.slice;

/**
 * Application prototype.
 */

var app = exports = module.exports = {};

/**
 * Variable for trust proxy inheritance back-compat
 * @private
 */

var trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';

/**
 * Initialize the server.
 *
 *   - setup default configuration
 *   - setup default middleware
 *   - setup route reflection methods
 *
 * @private
 */

app.init = function init() {
  this.cache = {};
  this.engines = {};
  this.settings = {};

  this.defaultConfiguration();
};

/**
 * Initialize application configuration.
 * @private
 */

app.defaultConfiguration = function defaultConfiguration() {
  var env = process.env.NODE_ENV || 'development';

  // default settings
  this.enable('x-powered-by');
  this.set('etag', 'weak');
  this.set('env', env);
  this.set('query parser', 'extended');
  this.set('subdomain offset', 2);
  this.set('trust proxy', false);

  // trust proxy inherit back-compat
  Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
    configurable: true,
    value: true
  });

  debug('booting in %s mode', env);

  this.on('mount', function onmount(parent) {
    // inherit trust proxy
    if (this.settings[trustProxyDefaultSymbol] === true && typeof parent.settings['trust proxy fn'] === 'function') {
      delete this.settings['trust proxy'];
      delete this.settings['trust proxy fn'];
    }

    // inherit protos
    setPrototypeOf(this.request, parent.request);
    setPrototypeOf(this.response, parent.response);
    setPrototypeOf(this.engines, parent.engines);
    setPrototypeOf(this.settings, parent.settings);
  });

  // setup locals
  this.locals = Object.create(null);

  // top-most app is mounted at /
  this.mountpath = '/';

  // default locals
  this.locals.settings = this.settings;

  // default configuration
  this.set('view', View);
  this.set('views', resolve('views'));
  this.set('jsonp callback name', 'callback');

  if (env === 'production') {
    this.enable('view cache');
  }

  Object.defineProperty(this, 'router', {
    get: function () {
      throw new Error('\'app.router\' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');
    }
  });
};

/**
 * lazily adds the base router if it has not yet been added.
 *
 * We cannot add the base router in the defaultConfiguration because
 * it reads app settings which might be set after that has run.
 *
 * @private
 */
app.lazyrouter = function lazyrouter() {
  if (!this._router) {
    this._router = new Router({
      caseSensitive: this.enabled('case sensitive routing'),
      strict: this.enabled('strict routing')
    });

    this._router.use(query(this.get('query parser fn')));
    this._router.use(middleware.init(this));
  }
};

/**
 * Dispatch a req, res pair into the application. Starts pipeline processing.
 *
 * If no callback is provided, then default error handlers will respond
 * in the event of an error bubbling through the stack.
 *
 * @private
 */

app.handle = function handle(req, res, callback) {
  var router = this._router;

  // final handler
  var done = callback || finalhandler(req, res, {
    env: this.get('env'),
    onerror: logerror.bind(this)
  });

  // no routes
  if (!router) {
    debug('no routes defined on app');
    done();
    return;
  }

  router.handle(req, res, done);
};

/**
 * Proxy `Router#use()` to add middleware to the app router.
 * See Router#use() documentation for details.
 *
 * If the _fn_ parameter is an express app, then it will be
 * mounted at the _route_ specified.
 *
 * @public
 */

app.use = function use(fn) {
  var offset = 0;
  var path = '/';

  // default path to '/'
  // disambiguate app.use([fn])
  if (typeof fn !== 'function') {
    var arg = fn;

    while (Array.isArray(arg) && arg.length !== 0) {
      arg = arg[0];
    }

    // first arg is the path
    if (typeof arg !== 'function') {
      offset = 1;
      path = fn;
    }
  }

  var fns = flatten(slice.call(arguments, offset));

  if (fns.length === 0) {
    throw new TypeError('app.use() requires a middleware function');
  }

  // setup router
  this.lazyrouter();
  var router = this._router;

  fns.forEach(function (fn) {
    // non-express app
    if (!fn || !fn.handle || !fn.set) {
      return router.use(path, fn);
    }

    debug('.use app under %s', path);
    fn.mountpath = path;
    fn.parent = this;

    // restore .app property on req and res
    router.use(path, function mounted_app(req, res, next) {
      var orig = req.app;
      fn.handle(req, res, function (err) {
        setPrototypeOf(req, orig.request);
        setPrototypeOf(res, orig.response);
        next(err);
      });
    });

    // mounted an app
    fn.emit('mount', this);
  }, this);

  return this;
};

/**
 * Proxy to the app `Router#route()`
 * Returns a new `Route` instance for the _path_.
 *
 * Routes are isolated middleware stacks for specific paths.
 * See the Route api docs for details.
 *
 * @public
 */

app.route = function route(path) {
  this.lazyrouter();
  return this._router.route(path);
};

/**
 * Register the given template engine callback `fn`
 * as `ext`.
 *
 * By default will `require()` the engine based on the
 * file extension. For example if you try to render
 * a "foo.ejs" file Express will invoke the following internally:
 *
 *     app.engine('ejs', require('ejs').__express);
 *
 * For engines that do not provide `.__express` out of the box,
 * or if you wish to "map" a different extension to the template engine
 * you may use this method. For example mapping the EJS template engine to
 * ".html" files:
 *
 *     app.engine('html', require('ejs').renderFile);
 *
 * In this case EJS provides a `.renderFile()` method with
 * the same signature that Express expects: `(path, options, callback)`,
 * though note that it aliases this method as `ejs.__express` internally
 * so if you're using ".ejs" extensions you dont need to do anything.
 *
 * Some template engines do not follow this convention, the
 * [Consolidate.js](https://github.com/tj/consolidate.js)
 * library was created to map all of node's popular template
 * engines to follow this convention, thus allowing them to
 * work seamlessly within Express.
 *
 * @param {String} ext
 * @param {Function} fn
 * @return {app} for chaining
 * @public
 */

app.engine = function engine(ext, fn) {
  if (typeof fn !== 'function') {
    throw new Error('callback function required');
  }

  // get file extension
  var extension = ext[0] !== '.' ? '.' + ext : ext;

  // store engine
  this.engines[extension] = fn;

  return this;
};

/**
 * Proxy to `Router#param()` with one added api feature. The _name_ parameter
 * can be an array of names.
 *
 * See the Router#param() docs for more details.
 *
 * @param {String|Array} name
 * @param {Function} fn
 * @return {app} for chaining
 * @public
 */

app.param = function param(name, fn) {
  this.lazyrouter();

  if (Array.isArray(name)) {
    for (var i = 0; i < name.length; i++) {
      this.param(name[i], fn);
    }

    return this;
  }

  this._router.param(name, fn);

  return this;
};

/**
 * Assign `setting` to `val`, or return `setting`'s value.
 *
 *    app.set('foo', 'bar');
 *    app.set('foo');
 *    // => "bar"
 *
 * Mounted servers inherit their parent server's settings.
 *
 * @param {String} setting
 * @param {*} [val]
 * @return {Server} for chaining
 * @public
 */

app.set = function set(setting, val) {
  if (arguments.length === 1) {
    // app.get(setting)
    return this.settings[setting];
  }

  debug('set "%s" to %o', setting, val);

  // set value
  this.settings[setting] = val;

  // trigger matched settings
  switch (setting) {
    case 'etag':
      this.set('etag fn', compileETag(val));
      break;
    case 'query parser':
      this.set('query parser fn', compileQueryParser(val));
      break;
    case 'trust proxy':
      this.set('trust proxy fn', compileTrust(val));

      // trust proxy inherit back-compat
      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
        configurable: true,
        value: false
      });

      break;
  }

  return this;
};

/**
 * Return the app's absolute pathname
 * based on the parent(s) that have
 * mounted it.
 *
 * For example if the application was
 * mounted as "/admin", which itself
 * was mounted as "/blog" then the
 * return value would be "/blog/admin".
 *
 * @return {String}
 * @private
 */

app.path = function path() {
  return this.parent ? this.parent.path() + this.mountpath : '';
};

/**
 * Check if `setting` is enabled (truthy).
 *
 *    app.enabled('foo')
 *    // => false
 *
 *    app.enable('foo')
 *    app.enabled('foo')
 *    // => true
 *
 * @param {String} setting
 * @return {Boolean}
 * @public
 */

app.enabled = function enabled(setting) {
  return Boolean(this.set(setting));
};

/**
 * Check if `setting` is disabled.
 *
 *    app.disabled('foo')
 *    // => true
 *
 *    app.enable('foo')
 *    app.disabled('foo')
 *    // => false
 *
 * @param {String} setting
 * @return {Boolean}
 * @public
 */

app.disabled = function disabled(setting) {
  return !this.set(setting);
};

/**
 * Enable `setting`.
 *
 * @param {String} setting
 * @return {app} for chaining
 * @public
 */

app.enable = function enable(setting) {
  return this.set(setting, true);
};

/**
 * Disable `setting`.
 *
 * @param {String} setting
 * @return {app} for chaining
 * @public
 */

app.disable = function disable(setting) {
  return this.set(setting, false);
};

/**
 * Delegate `.VERB(...)` calls to `router.VERB(...)`.
 */

methods.forEach(function (method) {
  app[method] = function (path) {
    if (method === 'get' && arguments.length === 1) {
      // app.get(setting)
      return this.set(path);
    }

    this.lazyrouter();

    var route = this._router.route(path);
    route[method].apply(route, slice.call(arguments, 1));
    return this;
  };
});

/**
 * Special-cased "all" method, applying the given route `path`,
 * middleware, and callback to _every_ HTTP method.
 *
 * @param {String} path
 * @param {Function} ...
 * @return {app} for chaining
 * @public
 */

app.all = function all(path) {
  this.lazyrouter();

  var route = this._router.route(path);
  var args = slice.call(arguments, 1);

  for (var i = 0; i < methods.length; i++) {
    route[methods[i]].apply(route, args);
  }

  return this;
};

// del -> delete alias

app.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');

/**
 * Render the given view `name` name with `options`
 * and a callback accepting an error and the
 * rendered template string.
 *
 * Example:
 *
 *    app.render('email', { name: 'Tobi' }, function(err, html){
 *      // ...
 *    })
 *
 * @param {String} name
 * @param {Object|Function} options or fn
 * @param {Function} callback
 * @public
 */

app.render = function render(name, options, callback) {
  var cache = this.cache;
  var done = callback;
  var engines = this.engines;
  var opts = options;
  var renderOptions = {};
  var view;

  // support callback function as second arg
  if (typeof options === 'function') {
    done = options;
    opts = {};
  }

  // merge app.locals
  merge(renderOptions, this.locals);

  // merge options._locals
  if (opts._locals) {
    merge(renderOptions, opts._locals);
  }

  // merge options
  merge(renderOptions, opts);

  // set .cache unless explicitly provided
  if (renderOptions.cache == null) {
    renderOptions.cache = this.enabled('view cache');
  }

  // primed cache
  if (renderOptions.cache) {
    view = cache[name];
  }

  // view
  if (!view) {
    var View = this.get('view');

    view = new View(name, {
      defaultEngine: this.get('view engine'),
      root: this.get('views'),
      engines: engines
    });

    if (!view.path) {
      var dirs = Array.isArray(view.root) && view.root.length > 1 ? 'directories "' + view.root.slice(0, -1).join('", "') + '" or "' + view.root[view.root.length - 1] + '"' : 'directory "' + view.root + '"';
      var err = new Error('Failed to lookup view "' + name + '" in views ' + dirs);
      err.view = view;
      return done(err);
    }

    // prime the cache
    if (renderOptions.cache) {
      cache[name] = view;
    }
  }

  // render
  tryRender(view, renderOptions, done);
};

/**
 * Listen for connections.
 *
 * A node `http.Server` is returned, with this
 * application (which is a `Function`) as its
 * callback. If you wish to create both an HTTP
 * and HTTPS server you may do so with the "http"
 * and "https" modules as shown here:
 *
 *    var http = require('http')
 *      , https = require('https')
 *      , express = require('express')
 *      , app = express();
 *
 *    http.createServer(app).listen(80);
 *    https.createServer({ ... }, app).listen(443);
 *
 * @return {http.Server}
 * @public
 */

app.listen = function listen() {
  var server = http.createServer(this);
  return server.listen.apply(server, arguments);
};

/**
 * Log error using console.error.
 *
 * @param {Error} err
 * @private
 */

function logerror(err) {
  /* istanbul ignore next */
  if (this.get('env') !== 'test') console.error(err.stack || err.toString());
}

/**
 * Try rendering a view.
 * @private
 */

function tryRender(view, options, callback) {
  try {
    view.render(options, callback);
  } catch (err) {
    callback(err);
  }
}

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * finalhandler
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var debug = __webpack_require__(6)('finalhandler');
var encodeUrl = __webpack_require__(37);
var escapeHtml = __webpack_require__(38);
var onFinished = __webpack_require__(36);
var parseUrl = __webpack_require__(26);
var statuses = __webpack_require__(24);
var unpipe = __webpack_require__(71);

/**
 * Module variables.
 * @private
 */

var DOUBLE_SPACE_REGEXP = /\x20{2}/g;
var NEWLINE_REGEXP = /\n/g;

/* istanbul ignore next */
var defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {
  process.nextTick(fn.bind.apply(fn, arguments));
};
var isFinished = onFinished.isFinished;

/**
 * Create a minimal HTML document.
 *
 * @param {string} message
 * @private
 */

function createHtmlDocument(message) {
  var body = escapeHtml(message).replace(NEWLINE_REGEXP, '<br>').replace(DOUBLE_SPACE_REGEXP, ' &nbsp;');

  return '<!DOCTYPE html>\n' + '<html lang="en">\n' + '<head>\n' + '<meta charset="utf-8">\n' + '<title>Error</title>\n' + '</head>\n' + '<body>\n' + '<pre>' + body + '</pre>\n' + '</body>\n' + '</html>\n';
}

/**
 * Module exports.
 * @public
 */

module.exports = finalhandler;

/**
 * Create a function to handle the final response.
 *
 * @param {Request} req
 * @param {Response} res
 * @param {Object} [options]
 * @return {Function}
 * @public
 */

function finalhandler(req, res, options) {
  var opts = options || {};

  // get environment
  var env = opts.env || process.env.NODE_ENV || 'development';

  // get error callback
  var onerror = opts.onerror;

  return function (err) {
    var headers;
    var msg;
    var status;

    // ignore 404 on in-flight response
    if (!err && headersSent(res)) {
      debug('cannot 404 after headers sent');
      return;
    }

    // unhandled error
    if (err) {
      // respect status code from error
      status = getErrorStatusCode(err);

      if (status === undefined) {
        // fallback to status code on response
        status = getResponseStatusCode(res);
      } else {
        // respect headers from error
        headers = getErrorHeaders(err);
      }

      // get error message
      msg = getErrorMessage(err, status, env);
    } else {
      // not found
      status = 404;
      msg = 'Cannot ' + req.method + ' ' + encodeUrl(getResourceName(req));
    }

    debug('default %s', status);

    // schedule onerror callback
    if (err && onerror) {
      defer(onerror, err, req, res);
    }

    // cannot actually respond
    if (headersSent(res)) {
      debug('cannot %d after headers sent', status);
      req.socket.destroy();
      return;
    }

    // send response
    send(req, res, status, headers, msg);
  };
}

/**
 * Get headers from Error object.
 *
 * @param {Error} err
 * @return {object}
 * @private
 */

function getErrorHeaders(err) {
  if (!err.headers || typeof err.headers !== 'object') {
    return undefined;
  }

  var headers = Object.create(null);
  var keys = Object.keys(err.headers);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    headers[key] = err.headers[key];
  }

  return headers;
}

/**
 * Get message from Error object, fallback to status message.
 *
 * @param {Error} err
 * @param {number} status
 * @param {string} env
 * @return {string}
 * @private
 */

function getErrorMessage(err, status, env) {
  var msg;

  if (env !== 'production') {
    // use err.stack, which typically includes err.message
    msg = err.stack;

    // fallback to err.toString() when possible
    if (!msg && typeof err.toString === 'function') {
      msg = err.toString();
    }
  }

  return msg || statuses[status];
}

/**
 * Get status code from Error object.
 *
 * @param {Error} err
 * @return {number}
 * @private
 */

function getErrorStatusCode(err) {
  // check err.status
  if (typeof err.status === 'number' && err.status >= 400 && err.status < 600) {
    return err.status;
  }

  // check err.statusCode
  if (typeof err.statusCode === 'number' && err.statusCode >= 400 && err.statusCode < 600) {
    return err.statusCode;
  }

  return undefined;
}

/**
 * Get resource name for the request.
 *
 * This is typically just the original pathname of the request
 * but will fallback to "resource" is that cannot be determined.
 *
 * @param {IncomingMessage} req
 * @return {string}
 * @private
 */

function getResourceName(req) {
  try {
    return parseUrl.original(req).pathname;
  } catch (e) {
    return 'resource';
  }
}

/**
 * Get status code from response.
 *
 * @param {OutgoingMessage} res
 * @return {number}
 * @private
 */

function getResponseStatusCode(res) {
  var status = res.statusCode;

  // default status code to 500 if outside valid range
  if (typeof status !== 'number' || status < 400 || status > 599) {
    status = 500;
  }

  return status;
}

/**
 * Determine if the response headers have been sent.
 *
 * @param {object} res
 * @returns {boolean}
 * @private
 */

function headersSent(res) {
  return typeof res.headersSent !== 'boolean' ? Boolean(res._header) : res.headersSent;
}

/**
 * Send response.
 *
 * @param {IncomingMessage} req
 * @param {OutgoingMessage} res
 * @param {number} status
 * @param {object} headers
 * @param {string} message
 * @private
 */

function send(req, res, status, headers, message) {
  function write() {
    // response body
    var body = createHtmlDocument(message);

    // response status
    res.statusCode = status;
    res.statusMessage = statuses[status];

    // response headers
    setHeaders(res, headers);

    // security headers
    res.setHeader('Content-Security-Policy', "default-src 'self'");
    res.setHeader('X-Content-Type-Options', 'nosniff');

    // standard headers
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'));

    if (req.method === 'HEAD') {
      res.end();
      return;
    }

    res.end(body, 'utf8');
  }

  if (isFinished(req)) {
    write();
    return;
  }

  // unpipe everything from the request
  unpipe(req);

  // flush the request
  onFinished(req, write);
  req.resume();
}

/**
 * Set response headers from an object.
 *
 * @param {OutgoingMessage} res
 * @param {object} headers
 * @private
 */

function setHeaders(res, headers) {
  if (!headers) {
    return;
  }

  var keys = Object.keys(headers);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    res.setHeader(key, headers[key]);
  }
}

/***/ }),
/* 163 */
/***/ (function(module, exports) {

/**
 * Expose `pathtoRegexp`.
 */

module.exports = pathtoRegexp;

/**
 * Match matching groups in a regular expression.
 */
var MATCHING_GROUP_REGEXP = /\((?!\?)/g;

/**
 * Normalize the given path string,
 * returning a regular expression.
 *
 * An empty array should be passed,
 * which will contain the placeholder
 * key names. For example "/user/:id" will
 * then contain ["id"].
 *
 * @param  {String|RegExp|Array} path
 * @param  {Array} keys
 * @param  {Object} options
 * @return {RegExp}
 * @api private
 */

function pathtoRegexp(path, keys, options) {
  options = options || {};
  keys = keys || [];
  var strict = options.strict;
  var end = options.end !== false;
  var flags = options.sensitive ? '' : 'i';
  var extraOffset = 0;
  var keysOffset = keys.length;
  var i = 0;
  var name = 0;
  var m;

  if (path instanceof RegExp) {
    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {
      keys.push({
        name: name++,
        optional: false,
        offset: m.index
      });
    }

    return path;
  }

  if (Array.isArray(path)) {
    // Map array parts into regexps and return their source. We also pass
    // the same keys and options instance into every generation to get
    // consistent matching groups before we join the sources together.
    path = path.map(function (value) {
      return pathtoRegexp(value, keys, options).source;
    });

    return new RegExp('(?:' + path.join('|') + ')', flags);
  }

  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?')).replace(/\/\(/g, '/(?:').replace(/([\/\.])/g, '\\$1').replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {
    slash = slash || '';
    format = format || '';
    capture = capture || '([^\\/' + format + ']+?)';
    optional = optional || '';

    keys.push({
      name: key,
      optional: !!optional,
      offset: offset + extraOffset
    });

    var result = '' + (optional ? '' : slash) + '(?:' + format + (optional ? slash : '') + capture + (star ? '((?:[\\/' + format + '].+?)?)' : '') + ')' + optional;

    extraOffset += result.length - match.length;

    return result;
  }).replace(/\*/g, function (star, index) {
    var len = keys.length;

    while (len-- > keysOffset && keys[len].offset > index) {
      keys[len].offset += 3; // Replacement length minus asterisk length.
    }

    return '(.*)';
  });

  // This is a workaround for handling unnamed matching groups.
  while (m = MATCHING_GROUP_REGEXP.exec(path)) {
    var escapeCount = 0;
    var index = m.index;

    while (path.charAt(--index) === '\\') {
      escapeCount++;
    }

    // It's possible to escape the bracket.
    if (escapeCount % 2 === 1) {
      continue;
    }

    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
      keys.splice(keysOffset + i, 0, {
        name: name++, // Unnamed matching groups must be consistently linear.
        optional: false,
        offset: m.index
      });
    }

    i++;
  }

  // If the path is non-ending, match until the end or a slash.
  path += end ? '$' : path[path.length - 1] === '/' ? '' : '(?=\\/|$)';

  return new RegExp(path, flags);
};

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var setPrototypeOf = __webpack_require__(33);

/**
 * Initialization middleware, exposing the
 * request and response to each other, as well
 * as defaulting the X-Powered-By header field.
 *
 * @param {Function} app
 * @return {Function}
 * @api private
 */

exports.init = function (app) {
  return function expressInit(req, res, next) {
    if (app.enabled('x-powered-by')) res.setHeader('X-Powered-By', 'Express');
    req.res = res;
    res.req = req;
    req.next = next;

    setPrototypeOf(req, app.request);
    setPrototypeOf(res, app.response);

    res.locals = res.locals || Object.create(null);

    next();
  };
};

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var debug = __webpack_require__(6)('express:view');
var path = __webpack_require__(0);
var fs = __webpack_require__(7);

/**
 * Module variables.
 * @private
 */

var dirname = path.dirname;
var basename = path.basename;
var extname = path.extname;
var join = path.join;
var resolve = path.resolve;

/**
 * Module exports.
 * @public
 */

module.exports = View;

/**
 * Initialize a new `View` with the given `name`.
 *
 * Options:
 *
 *   - `defaultEngine` the default template engine name
 *   - `engines` template engine require() cache
 *   - `root` root path for view lookup
 *
 * @param {string} name
 * @param {object} options
 * @public
 */

function View(name, options) {
  var opts = options || {};

  this.defaultEngine = opts.defaultEngine;
  this.ext = extname(name);
  this.name = name;
  this.root = opts.root;

  if (!this.ext && !this.defaultEngine) {
    throw new Error('No default engine was specified and no extension was provided.');
  }

  var fileName = name;

  if (!this.ext) {
    // get extension from default engine name
    this.ext = this.defaultEngine[0] !== '.' ? '.' + this.defaultEngine : this.defaultEngine;

    fileName += this.ext;
  }

  if (!opts.engines[this.ext]) {
    // load engine
    var mod = this.ext.substr(1);
    debug('require "%s"', mod);

    // default engine export
    var fn = !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()).__express;

    if (typeof fn !== 'function') {
      throw new Error('Module "' + mod + '" does not provide a view engine.');
    }

    opts.engines[this.ext] = fn;
  }

  // store loaded engine
  this.engine = opts.engines[this.ext];

  // lookup path
  this.path = this.lookup(fileName);
}

/**
 * Lookup view by the given `name`
 *
 * @param {string} name
 * @private
 */

View.prototype.lookup = function lookup(name) {
  var path;
  var roots = [].concat(this.root);

  debug('lookup "%s"', name);

  for (var i = 0; i < roots.length && !path; i++) {
    var root = roots[i];

    // resolve the path
    var loc = resolve(root, name);
    var dir = dirname(loc);
    var file = basename(loc);

    // resolve the file
    path = this.resolve(dir, file);
  }

  return path;
};

/**
 * Render with the given options.
 *
 * @param {object} options
 * @param {function} callback
 * @private
 */

View.prototype.render = function render(options, callback) {
  debug('render "%s"', this.path);
  this.engine(this.path, options, callback);
};

/**
 * Resolve the file within the given directory.
 *
 * @param {string} dir
 * @param {string} file
 * @private
 */

View.prototype.resolve = function resolve(dir, file) {
  var ext = this.ext;

  // <path>.<ext>
  var path = join(dir, file);
  var stat = tryStat(path);

  if (stat && stat.isFile()) {
    return path;
  }

  // <path>/index.<ext>
  path = join(dir, basename(file, ext), 'index' + ext);
  stat = tryStat(path);

  if (stat && stat.isFile()) {
    return path;
  }
};

/**
 * Return a stat, maybe.
 *
 * @param {string} path
 * @return {fs.Stats}
 * @private
 */

function tryStat(path) {
  debug('stat "%s"', path);

  try {
    return fs.statSync(path);
  } catch (e) {
    return undefined;
  }
}

/***/ }),
/* 166 */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 166;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * destroy
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var ReadStream = __webpack_require__(7).ReadStream;
var Stream = __webpack_require__(9);

/**
 * Module exports.
 * @public
 */

module.exports = destroy;

/**
 * Destroy a stream.
 *
 * @param {object} stream
 * @public
 */

function destroy(stream) {
  if (stream instanceof ReadStream) {
    return destroyReadStream(stream);
  }

  if (!(stream instanceof Stream)) {
    return stream;
  }

  if (typeof stream.destroy === 'function') {
    stream.destroy();
  }

  return stream;
}

/**
 * Destroy a ReadStream.
 *
 * @param {object} stream
 * @private
 */

function destroyReadStream(stream) {
  stream.destroy();

  if (typeof stream.close === 'function') {
    // node.js core bug work-around
    stream.on('open', onOpenClose);
  }

  return stream;
}

/**
 * On open handler to close stream.
 * @private
 */

function onOpenClose() {
  if (typeof this.fd === 'number') {
    // actually close down the fd
    this.close();
  }
}

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__(0);
var fs = __webpack_require__(7);

function Mime() {
  // Map of extension -> mime type
  this.types = Object.create(null);

  // Map of mime type -> extension
  this.extensions = Object.create(null);
}

/**
 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
 * to an array of extensions associated with the type.  The first extension is
 * used as the default extension for the type.
 *
 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
 *
 * @param map (Object) type definitions
 */
Mime.prototype.define = function (map) {
  for (var type in map) {
    var exts = map[type];
    for (var i = 0; i < exts.length; i++) {
      if (process.env.DEBUG_MIME && this.types[exts[i]]) {
        console.warn((this._loading || "define()").replace(/.*\//, ''), 'changes "' + exts[i] + '" extension type from ' + this.types[exts[i]] + ' to ' + type);
      }

      this.types[exts[i]] = type;
    }

    // Default extension is the first one we encounter
    if (!this.extensions[type]) {
      this.extensions[type] = exts[0];
    }
  }
};

/**
 * Load an Apache2-style ".types" file
 *
 * This may be called multiple times (it's expected).  Where files declare
 * overlapping types/extensions, the last file wins.
 *
 * @param file (String) path of file to load.
 */
Mime.prototype.load = function (file) {
  this._loading = file;
  // Read file and split into lines
  var map = {},
      content = fs.readFileSync(file, 'ascii'),
      lines = content.split(/[\r\n]+/);

  lines.forEach(function (line) {
    // Clean up whitespace/comments, and split into fields
    var fields = line.replace(/\s*#.*|^\s*|\s*$/g, '').split(/\s+/);
    map[fields.shift()] = fields;
  });

  this.define(map);

  this._loading = null;
};

/**
 * Lookup a mime type based on extension
 */
Mime.prototype.lookup = function (path, fallback) {
  var ext = path.replace(/^.*[\.\/\\]/, '').toLowerCase();

  return this.types[ext] || fallback || this.default_type;
};

/**
 * Return file extension associated with a mime type
 */
Mime.prototype.extension = function (mimeType) {
  var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
  return this.extensions[type];
};

// Default instance
var mime = new Mime();

// Define built-in types
mime.define(__webpack_require__(169));

// Default type
mime.default_type = mime.lookup('bin');

//
// Additional API specific to the default instance
//

mime.Mime = Mime;

/**
 * Lookup a charset based on mime type.
 */
mime.charsets = {
  lookup: function (mimeType, fallback) {
    // Assume text types are utf8
    return (/^text\/|^application\/(javascript|json)/.test(mimeType) ? 'UTF-8' : fallback
    );
  }
};

module.exports = mime;

/***/ }),
/* 169 */
/***/ (function(module, exports) {

module.exports = {"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomsvc+xml":["atomsvc"],"application/bdoc":["bdoc"],"application/ccxml+xml":["ccxml"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma"],"application/emma+xml":["emma"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/font-tdpfr":["pfr"],"application/font-woff":["woff"],"application/font-woff2":["woff2"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/prs.cww":["cww"],"application/pskc+xml":["pskcxml"],"application/rdf+xml":["rdf"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/voicexml+xml":["vxml"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["dmg"],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":["bdoc"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-otf":["otf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-ttf":["ttf","ttc"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["iso"],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":["exe"],"application/x-msdownload":["exe","dll","com","bat","msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["wmf","wmz","emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":["prc","pdb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"application/xaml+xml":["xaml"],"application/xcap-diff+xml":["xdf"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["3gpp"],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mp3":["mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/wav":["wav"],"audio/wave":["wav"],"audio/webm":["weba"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":["m4a"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":["ra"],"audio/x-wav":["wav"],"audio/xm":["xm"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"font/otf":["otf"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/g3fax":["g3"],"image/gif":["gif"],"image/ief":["ief"],"image/jpeg":["jpeg","jpg","jpe"],"image/ktx":["ktx"],"image/png":["png"],"image/prs.btif":["btif"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/tiff":["tiff","tif"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/webp":["webp"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":["bmp"],"image/x-pcx":["pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/rfc822":["eml","mime"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.vtu":["vtu"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["x3db","x3dbz"],"model/x3d+vrml":["x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/hjson":["hjson"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/prs.lines.tag":["dsc"],"text/richtext":["rtx"],"text/rtf":["rtf"],"text/sgml":["sgml","sgm"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/vtt":["vtt"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":["org"],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"text/xml":["xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/webm":["webm"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]}

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * forwarded
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = forwarded;

/**
 * Get all addresses in the request, using the `X-Forwarded-For` header.
 *
 * @param {object} req
 * @return {array}
 * @public
 */

function forwarded(req) {
  if (!req) {
    throw new TypeError('argument req is required');
  }

  // simple header parsing
  var proxyAddrs = parse(req.headers['x-forwarded-for'] || '');
  var socketAddr = req.connection.remoteAddress;
  var addrs = [socketAddr].concat(proxyAddrs);

  // return all addresses
  return addrs;
}

/**
 * Parse the X-Forwarded-For header.
 *
 * @param {string} header
 * @private
 */

function parse(header) {
  var end = header.length;
  var list = [];
  var start = header.length;

  // gather addresses, backwards
  for (var i = header.length - 1; i >= 0; i--) {
    switch (header.charCodeAt(i)) {
      case 0x20:
        /*   */
        if (start === end) {
          start = end = i;
        }
        break;
      case 0x2c:
        /* , */
        if (start !== end) {
          list.push(header.substring(start, end));
        }
        start = end = i;
        break;
      default:
        start = i;
        break;
    }
  }

  // final address
  if (start !== end) {
    list.push(header.substring(start, end));
  }

  return list;
}

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function () {
  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;

  ipaddr = {};

  root = this;

  if (typeof module !== "undefined" && module !== null && module.exports) {
    module.exports = ipaddr;
  } else {
    root['ipaddr'] = ipaddr;
  }

  matchCIDR = function (first, second, partSize, cidrBits) {
    var part, shift;
    if (first.length !== second.length) {
      throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
    }
    part = 0;
    while (cidrBits > 0) {
      shift = partSize - cidrBits;
      if (shift < 0) {
        shift = 0;
      }
      if (first[part] >> shift !== second[part] >> shift) {
        return false;
      }
      cidrBits -= partSize;
      part += 1;
    }
    return true;
  };

  ipaddr.subnetMatch = function (address, rangeList, defaultName) {
    var k, len, rangeName, rangeSubnets, subnet;
    if (defaultName == null) {
      defaultName = 'unicast';
    }
    for (rangeName in rangeList) {
      rangeSubnets = rangeList[rangeName];
      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
        rangeSubnets = [rangeSubnets];
      }
      for (k = 0, len = rangeSubnets.length; k < len; k++) {
        subnet = rangeSubnets[k];
        if (address.kind() === subnet[0].kind()) {
          if (address.match.apply(address, subnet)) {
            return rangeName;
          }
        }
      }
    }
    return defaultName;
  };

  ipaddr.IPv4 = function () {
    function IPv4(octets) {
      var k, len, octet;
      if (octets.length !== 4) {
        throw new Error("ipaddr: ipv4 octet count should be 4");
      }
      for (k = 0, len = octets.length; k < len; k++) {
        octet = octets[k];
        if (!(0 <= octet && octet <= 255)) {
          throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
        }
      }
      this.octets = octets;
    }

    IPv4.prototype.kind = function () {
      return 'ipv4';
    };

    IPv4.prototype.toString = function () {
      return this.octets.join(".");
    };

    IPv4.prototype.toNormalizedString = function () {
      return this.toString();
    };

    IPv4.prototype.toByteArray = function () {
      return this.octets.slice(0);
    };

    IPv4.prototype.match = function (other, cidrRange) {
      var ref;
      if (cidrRange === void 0) {
        ref = other, other = ref[0], cidrRange = ref[1];
      }
      if (other.kind() !== 'ipv4') {
        throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
      }
      return matchCIDR(this.octets, other.octets, 8, cidrRange);
    };

    IPv4.prototype.SpecialRanges = {
      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
      multicast: [[new IPv4([224, 0, 0, 0]), 4]],
      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
      loopback: [[new IPv4([127, 0, 0, 0]), 8]],
      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
      "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
    };

    IPv4.prototype.range = function () {
      return ipaddr.subnetMatch(this, this.SpecialRanges);
    };

    IPv4.prototype.toIPv4MappedAddress = function () {
      return ipaddr.IPv6.parse("::ffff:" + this.toString());
    };

    IPv4.prototype.prefixLengthFromSubnetMask = function () {
      var cidr, i, k, octet, stop, zeros, zerotable;
      zerotable = {
        0: 8,
        128: 7,
        192: 6,
        224: 5,
        240: 4,
        248: 3,
        252: 2,
        254: 1,
        255: 0
      };
      cidr = 0;
      stop = false;
      for (i = k = 3; k >= 0; i = k += -1) {
        octet = this.octets[i];
        if (octet in zerotable) {
          zeros = zerotable[octet];
          if (stop && zeros !== 0) {
            return null;
          }
          if (zeros !== 8) {
            stop = true;
          }
          cidr += zeros;
        } else {
          return null;
        }
      }
      return 32 - cidr;
    };

    return IPv4;
  }();

  ipv4Part = "(0?\\d+|0x[a-f0-9]+)";

  ipv4Regexes = {
    fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", 'i'),
    longValue: new RegExp("^" + ipv4Part + "$", 'i')
  };

  ipaddr.IPv4.parser = function (string) {
    var match, parseIntAuto, part, shift, value;
    parseIntAuto = function (string) {
      if (string[0] === "0" && string[1] !== "x") {
        return parseInt(string, 8);
      } else {
        return parseInt(string);
      }
    };
    if (match = string.match(ipv4Regexes.fourOctet)) {
      return function () {
        var k, len, ref, results;
        ref = match.slice(1, 6);
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          part = ref[k];
          results.push(parseIntAuto(part));
        }
        return results;
      }();
    } else if (match = string.match(ipv4Regexes.longValue)) {
      value = parseIntAuto(match[1]);
      if (value > 0xffffffff || value < 0) {
        throw new Error("ipaddr: address outside defined range");
      }
      return function () {
        var k, results;
        results = [];
        for (shift = k = 0; k <= 24; shift = k += 8) {
          results.push(value >> shift & 0xff);
        }
        return results;
      }().reverse();
    } else {
      return null;
    }
  };

  ipaddr.IPv6 = function () {
    function IPv6(parts, zoneId) {
      var i, k, l, len, part, ref;
      if (parts.length === 16) {
        this.parts = [];
        for (i = k = 0; k <= 14; i = k += 2) {
          this.parts.push(parts[i] << 8 | parts[i + 1]);
        }
      } else if (parts.length === 8) {
        this.parts = parts;
      } else {
        throw new Error("ipaddr: ipv6 part count should be 8 or 16");
      }
      ref = this.parts;
      for (l = 0, len = ref.length; l < len; l++) {
        part = ref[l];
        if (!(0 <= part && part <= 0xffff)) {
          throw new Error("ipaddr: ipv6 part should fit in 16 bits");
        }
      }
      if (zoneId) {
        this.zoneId = zoneId;
      }
    }

    IPv6.prototype.kind = function () {
      return 'ipv6';
    };

    IPv6.prototype.toString = function () {
      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');
    };

    IPv6.prototype.toByteArray = function () {
      var bytes, k, len, part, ref;
      bytes = [];
      ref = this.parts;
      for (k = 0, len = ref.length; k < len; k++) {
        part = ref[k];
        bytes.push(part >> 8);
        bytes.push(part & 0xff);
      }
      return bytes;
    };

    IPv6.prototype.toNormalizedString = function () {
      var addr, part, suffix;
      addr = function () {
        var k, len, ref, results;
        ref = this.parts;
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          part = ref[k];
          results.push(part.toString(16));
        }
        return results;
      }.call(this).join(":");
      suffix = '';
      if (this.zoneId) {
        suffix = '%' + this.zoneId;
      }
      return addr + suffix;
    };

    IPv6.prototype.match = function (other, cidrRange) {
      var ref;
      if (cidrRange === void 0) {
        ref = other, other = ref[0], cidrRange = ref[1];
      }
      if (other.kind() !== 'ipv6') {
        throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
      }
      return matchCIDR(this.parts, other.parts, 16, cidrRange);
    };

    IPv6.prototype.SpecialRanges = {
      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
    };

    IPv6.prototype.range = function () {
      return ipaddr.subnetMatch(this, this.SpecialRanges);
    };

    IPv6.prototype.isIPv4MappedAddress = function () {
      return this.range() === 'ipv4Mapped';
    };

    IPv6.prototype.toIPv4Address = function () {
      var high, low, ref;
      if (!this.isIPv4MappedAddress()) {
        throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
      }
      ref = this.parts.slice(-2), high = ref[0], low = ref[1];
      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
    };

    IPv6.prototype.prefixLengthFromSubnetMask = function () {
      var cidr, i, k, part, stop, zeros, zerotable;
      zerotable = {
        0: 16,
        32768: 15,
        49152: 14,
        57344: 13,
        61440: 12,
        63488: 11,
        64512: 10,
        65024: 9,
        65280: 8,
        65408: 7,
        65472: 6,
        65504: 5,
        65520: 4,
        65528: 3,
        65532: 2,
        65534: 1,
        65535: 0
      };
      cidr = 0;
      stop = false;
      for (i = k = 7; k >= 0; i = k += -1) {
        part = this.parts[i];
        if (part in zerotable) {
          zeros = zerotable[part];
          if (stop && zeros !== 0) {
            return null;
          }
          if (zeros !== 16) {
            stop = true;
          }
          cidr += zeros;
        } else {
          return null;
        }
      }
      return 128 - cidr;
    };

    return IPv6;
  }();

  ipv6Part = "(?:[0-9a-f]+::?)+";

  zoneIndex = "%[0-9a-z]{1,}";

  ipv6Regexes = {
    zoneIndex: new RegExp(zoneIndex, 'i'),
    "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?(" + zoneIndex + ")?$", 'i'),
    transitional: new RegExp("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)" + (ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part) + ("(" + zoneIndex + ")?$"), 'i')
  };

  expandIPv6 = function (string, parts) {
    var colonCount, lastColon, part, replacement, replacementCount, zoneId;
    if (string.indexOf('::') !== string.lastIndexOf('::')) {
      return null;
    }
    zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];
    if (zoneId) {
      zoneId = zoneId.substring(1);
      string = string.replace(/%.+$/, '');
    }
    colonCount = 0;
    lastColon = -1;
    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
      colonCount++;
    }
    if (string.substr(0, 2) === '::') {
      colonCount--;
    }
    if (string.substr(-2, 2) === '::') {
      colonCount--;
    }
    if (colonCount > parts) {
      return null;
    }
    replacementCount = parts - colonCount;
    replacement = ':';
    while (replacementCount--) {
      replacement += '0:';
    }
    string = string.replace('::', replacement);
    if (string[0] === ':') {
      string = string.slice(1);
    }
    if (string[string.length - 1] === ':') {
      string = string.slice(0, -1);
    }
    parts = function () {
      var k, len, ref, results;
      ref = string.split(":");
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        part = ref[k];
        results.push(parseInt(part, 16));
      }
      return results;
    }();
    return {
      parts: parts,
      zoneId: zoneId
    };
  };

  ipaddr.IPv6.parser = function (string) {
    var addr, k, len, match, octet, octets, zoneId;
    if (ipv6Regexes['native'].test(string)) {
      return expandIPv6(string, 8);
    } else if (match = string.match(ipv6Regexes['transitional'])) {
      zoneId = match[6] || '';
      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
      if (addr.parts) {
        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];
        for (k = 0, len = octets.length; k < len; k++) {
          octet = octets[k];
          if (!(0 <= octet && octet <= 255)) {
            return null;
          }
        }
        addr.parts.push(octets[0] << 8 | octets[1]);
        addr.parts.push(octets[2] << 8 | octets[3]);
        return {
          parts: addr.parts,
          zoneId: addr.zoneId
        };
      }
    }
    return null;
  };

  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function (string) {
    return this.parser(string) !== null;
  };

  ipaddr.IPv4.isValid = function (string) {
    var e;
    try {
      new this(this.parser(string));
      return true;
    } catch (error1) {
      e = error1;
      return false;
    }
  };

  ipaddr.IPv4.isValidFourPartDecimal = function (string) {
    if (ipaddr.IPv4.isValid(string) && string.match(/^\d+(\.\d+){3}$/)) {
      return true;
    } else {
      return false;
    }
  };

  ipaddr.IPv6.isValid = function (string) {
    var addr, e;
    if (typeof string === "string" && string.indexOf(":") === -1) {
      return false;
    }
    try {
      addr = this.parser(string);
      new this(addr.parts, addr.zoneId);
      return true;
    } catch (error1) {
      e = error1;
      return false;
    }
  };

  ipaddr.IPv4.parse = function (string) {
    var parts;
    parts = this.parser(string);
    if (parts === null) {
      throw new Error("ipaddr: string is not formatted like ip address");
    }
    return new this(parts);
  };

  ipaddr.IPv6.parse = function (string) {
    var addr;
    addr = this.parser(string);
    if (addr.parts === null) {
      throw new Error("ipaddr: string is not formatted like ip address");
    }
    return new this(addr.parts, addr.zoneId);
  };

  ipaddr.IPv4.parseCIDR = function (string) {
    var maskLength, match;
    if (match = string.match(/^(.+)\/(\d+)$/)) {
      maskLength = parseInt(match[2]);
      if (maskLength >= 0 && maskLength <= 32) {
        return [this.parse(match[1]), maskLength];
      }
    }
    throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
  };

  ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {
    var filledOctetCount, j, octets;
    prefix = parseInt(prefix);
    if (prefix < 0 || prefix > 32) {
      throw new Error('ipaddr: invalid IPv4 prefix length');
    }
    octets = [0, 0, 0, 0];
    j = 0;
    filledOctetCount = Math.floor(prefix / 8);
    while (j < filledOctetCount) {
      octets[j] = 255;
      j++;
    }
    if (filledOctetCount < 4) {
      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;
    }
    return new this(octets);
  };

  ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {
    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;
    try {
      cidr = this.parseCIDR(string);
      ipInterfaceOctets = cidr[0].toByteArray();
      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
      octets = [];
      i = 0;
      while (i < 4) {
        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
        i++;
      }
      return new this(octets);
    } catch (error1) {
      error = error1;
      throw new Error('ipaddr: the address does not have IPv4 CIDR format');
    }
  };

  ipaddr.IPv4.networkAddressFromCIDR = function (string) {
    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;
    try {
      cidr = this.parseCIDR(string);
      ipInterfaceOctets = cidr[0].toByteArray();
      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
      octets = [];
      i = 0;
      while (i < 4) {
        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
        i++;
      }
      return new this(octets);
    } catch (error1) {
      error = error1;
      throw new Error('ipaddr: the address does not have IPv4 CIDR format');
    }
  };

  ipaddr.IPv6.parseCIDR = function (string) {
    var maskLength, match;
    if (match = string.match(/^(.+)\/(\d+)$/)) {
      maskLength = parseInt(match[2]);
      if (maskLength >= 0 && maskLength <= 128) {
        return [this.parse(match[1]), maskLength];
      }
    }
    throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
  };

  ipaddr.isValid = function (string) {
    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
  };

  ipaddr.parse = function (string) {
    if (ipaddr.IPv6.isValid(string)) {
      return ipaddr.IPv6.parse(string);
    } else if (ipaddr.IPv4.isValid(string)) {
      return ipaddr.IPv4.parse(string);
    } else {
      throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
    }
  };

  ipaddr.parseCIDR = function (string) {
    var e;
    try {
      return ipaddr.IPv6.parseCIDR(string);
    } catch (error1) {
      e = error1;
      try {
        return ipaddr.IPv4.parseCIDR(string);
      } catch (error1) {
        e = error1;
        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
      }
    }
  };

  ipaddr.fromByteArray = function (bytes) {
    var length;
    length = bytes.length;
    if (length === 4) {
      return new ipaddr.IPv4(bytes);
    } else if (length === 16) {
      return new ipaddr.IPv6(bytes);
    } else {
      throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
    }
  };

  ipaddr.process = function (string) {
    var addr;
    addr = this.parse(string);
    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
      return addr.toIPv4Address();
    } else {
      return addr;
    }
  };
}).call(this);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(172)(module)))

/***/ }),
/* 172 */
/***/ (function(module, exports) {

module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function () {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function () {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2013 Roman Shtylman
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var accepts = __webpack_require__(174);
var deprecate = __webpack_require__(10)('express');
var isIP = __webpack_require__(21).isIP;
var typeis = __webpack_require__(25);
var http = __webpack_require__(16);
var fresh = __webpack_require__(83);
var parseRange = __webpack_require__(84);
var parse = __webpack_require__(26);
var proxyaddr = __webpack_require__(85);

/**
 * Request prototype.
 * @public
 */

var req = Object.create(http.IncomingMessage.prototype);

/**
 * Module exports.
 * @public
 */

module.exports = req;

/**
 * Return request header.
 *
 * The `Referrer` header field is special-cased,
 * both `Referrer` and `Referer` are interchangeable.
 *
 * Examples:
 *
 *     req.get('Content-Type');
 *     // => "text/plain"
 *
 *     req.get('content-type');
 *     // => "text/plain"
 *
 *     req.get('Something');
 *     // => undefined
 *
 * Aliased as `req.header()`.
 *
 * @param {String} name
 * @return {String}
 * @public
 */

req.get = req.header = function header(name) {
  if (!name) {
    throw new TypeError('name argument is required to req.get');
  }

  if (typeof name !== 'string') {
    throw new TypeError('name must be a string to req.get');
  }

  var lc = name.toLowerCase();

  switch (lc) {
    case 'referer':
    case 'referrer':
      return this.headers.referrer || this.headers.referer;
    default:
      return this.headers[lc];
  }
};

/**
 * To do: update docs.
 *
 * Check if the given `type(s)` is acceptable, returning
 * the best match when true, otherwise `undefined`, in which
 * case you should respond with 406 "Not Acceptable".
 *
 * The `type` value may be a single MIME type string
 * such as "application/json", an extension name
 * such as "json", a comma-delimited list such as "json, html, text/plain",
 * an argument list such as `"json", "html", "text/plain"`,
 * or an array `["json", "html", "text/plain"]`. When a list
 * or array is given, the _best_ match, if any is returned.
 *
 * Examples:
 *
 *     // Accept: text/html
 *     req.accepts('html');
 *     // => "html"
 *
 *     // Accept: text/*, application/json
 *     req.accepts('html');
 *     // => "html"
 *     req.accepts('text/html');
 *     // => "text/html"
 *     req.accepts('json, text');
 *     // => "json"
 *     req.accepts('application/json');
 *     // => "application/json"
 *
 *     // Accept: text/*, application/json
 *     req.accepts('image/png');
 *     req.accepts('png');
 *     // => undefined
 *
 *     // Accept: text/*;q=.5, application/json
 *     req.accepts(['html', 'json']);
 *     req.accepts('html', 'json');
 *     req.accepts('html, json');
 *     // => "json"
 *
 * @param {String|Array} type(s)
 * @return {String|Array|Boolean}
 * @public
 */

req.accepts = function () {
  var accept = accepts(this);
  return accept.types.apply(accept, arguments);
};

/**
 * Check if the given `encoding`s are accepted.
 *
 * @param {String} ...encoding
 * @return {String|Array}
 * @public
 */

req.acceptsEncodings = function () {
  var accept = accepts(this);
  return accept.encodings.apply(accept, arguments);
};

req.acceptsEncoding = deprecate.function(req.acceptsEncodings, 'req.acceptsEncoding: Use acceptsEncodings instead');

/**
 * Check if the given `charset`s are acceptable,
 * otherwise you should respond with 406 "Not Acceptable".
 *
 * @param {String} ...charset
 * @return {String|Array}
 * @public
 */

req.acceptsCharsets = function () {
  var accept = accepts(this);
  return accept.charsets.apply(accept, arguments);
};

req.acceptsCharset = deprecate.function(req.acceptsCharsets, 'req.acceptsCharset: Use acceptsCharsets instead');

/**
 * Check if the given `lang`s are acceptable,
 * otherwise you should respond with 406 "Not Acceptable".
 *
 * @param {String} ...lang
 * @return {String|Array}
 * @public
 */

req.acceptsLanguages = function () {
  var accept = accepts(this);
  return accept.languages.apply(accept, arguments);
};

req.acceptsLanguage = deprecate.function(req.acceptsLanguages, 'req.acceptsLanguage: Use acceptsLanguages instead');

/**
 * Parse Range header field, capping to the given `size`.
 *
 * Unspecified ranges such as "0-" require knowledge of your resource length. In
 * the case of a byte range this is of course the total number of bytes. If the
 * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,
 * and `-2` when syntactically invalid.
 *
 * When ranges are returned, the array has a "type" property which is the type of
 * range that is required (most commonly, "bytes"). Each array element is an object
 * with a "start" and "end" property for the portion of the range.
 *
 * The "combine" option can be set to `true` and overlapping & adjacent ranges
 * will be combined into a single range.
 *
 * NOTE: remember that ranges are inclusive, so for example "Range: users=0-3"
 * should respond with 4 users when available, not 3.
 *
 * @param {number} size
 * @param {object} [options]
 * @param {boolean} [options.combine=false]
 * @return {number|array}
 * @public
 */

req.range = function range(size, options) {
  var range = this.get('Range');
  if (!range) return;
  return parseRange(size, range, options);
};

/**
 * Return the value of param `name` when present or `defaultValue`.
 *
 *  - Checks route placeholders, ex: _/user/:id_
 *  - Checks body params, ex: id=12, {"id":12}
 *  - Checks query string params, ex: ?id=12
 *
 * To utilize request bodies, `req.body`
 * should be an object. This can be done by using
 * the `bodyParser()` middleware.
 *
 * @param {String} name
 * @param {Mixed} [defaultValue]
 * @return {String}
 * @public
 */

req.param = function param(name, defaultValue) {
  var params = this.params || {};
  var body = this.body || {};
  var query = this.query || {};

  var args = arguments.length === 1 ? 'name' : 'name, default';
  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');

  if (null != params[name] && params.hasOwnProperty(name)) return params[name];
  if (null != body[name]) return body[name];
  if (null != query[name]) return query[name];

  return defaultValue;
};

/**
 * Check if the incoming request contains the "Content-Type"
 * header field, and it contains the give mime `type`.
 *
 * Examples:
 *
 *      // With Content-Type: text/html; charset=utf-8
 *      req.is('html');
 *      req.is('text/html');
 *      req.is('text/*');
 *      // => true
 *
 *      // When Content-Type is application/json
 *      req.is('json');
 *      req.is('application/json');
 *      req.is('application/*');
 *      // => true
 *
 *      req.is('html');
 *      // => false
 *
 * @param {String|Array} types...
 * @return {String|false|null}
 * @public
 */

req.is = function is(types) {
  var arr = types;

  // support flattened arguments
  if (!Array.isArray(types)) {
    arr = new Array(arguments.length);
    for (var i = 0; i < arr.length; i++) {
      arr[i] = arguments[i];
    }
  }

  return typeis(this, arr);
};

/**
 * Return the protocol string "http" or "https"
 * when requested with TLS. When the "trust proxy"
 * setting trusts the socket address, the
 * "X-Forwarded-Proto" header field will be trusted
 * and used if present.
 *
 * If you're running behind a reverse proxy that
 * supplies https for you this may be enabled.
 *
 * @return {String}
 * @public
 */

defineGetter(req, 'protocol', function protocol() {
  var proto = this.connection.encrypted ? 'https' : 'http';
  var trust = this.app.get('trust proxy fn');

  if (!trust(this.connection.remoteAddress, 0)) {
    return proto;
  }

  // Note: X-Forwarded-Proto is normally only ever a
  //       single value, but this is to be safe.
  var header = this.get('X-Forwarded-Proto') || proto;
  var index = header.indexOf(',');

  return index !== -1 ? header.substring(0, index).trim() : header.trim();
});

/**
 * Short-hand for:
 *
 *    req.protocol === 'https'
 *
 * @return {Boolean}
 * @public
 */

defineGetter(req, 'secure', function secure() {
  return this.protocol === 'https';
});

/**
 * Return the remote address from the trusted proxy.
 *
 * The is the remote address on the socket unless
 * "trust proxy" is set.
 *
 * @return {String}
 * @public
 */

defineGetter(req, 'ip', function ip() {
  var trust = this.app.get('trust proxy fn');
  return proxyaddr(this, trust);
});

/**
 * When "trust proxy" is set, trusted proxy addresses + client.
 *
 * For example if the value were "client, proxy1, proxy2"
 * you would receive the array `["client", "proxy1", "proxy2"]`
 * where "proxy2" is the furthest down-stream and "proxy1" and
 * "proxy2" were trusted.
 *
 * @return {Array}
 * @public
 */

defineGetter(req, 'ips', function ips() {
  var trust = this.app.get('trust proxy fn');
  var addrs = proxyaddr.all(this, trust);

  // reverse the order (to farthest -> closest)
  // and remove socket address
  addrs.reverse().pop();

  return addrs;
});

/**
 * Return subdomains as an array.
 *
 * Subdomains are the dot-separated parts of the host before the main domain of
 * the app. By default, the domain of the app is assumed to be the last two
 * parts of the host. This can be changed by setting "subdomain offset".
 *
 * For example, if the domain is "tobi.ferrets.example.com":
 * If "subdomain offset" is not set, req.subdomains is `["ferrets", "tobi"]`.
 * If "subdomain offset" is 3, req.subdomains is `["tobi"]`.
 *
 * @return {Array}
 * @public
 */

defineGetter(req, 'subdomains', function subdomains() {
  var hostname = this.hostname;

  if (!hostname) return [];

  var offset = this.app.get('subdomain offset');
  var subdomains = !isIP(hostname) ? hostname.split('.').reverse() : [hostname];

  return subdomains.slice(offset);
});

/**
 * Short-hand for `url.parse(req.url).pathname`.
 *
 * @return {String}
 * @public
 */

defineGetter(req, 'path', function path() {
  return parse(this).pathname;
});

/**
 * Parse the "Host" header field to a hostname.
 *
 * When the "trust proxy" setting trusts the socket
 * address, the "X-Forwarded-Host" header field will
 * be trusted.
 *
 * @return {String}
 * @public
 */

defineGetter(req, 'hostname', function hostname() {
  var trust = this.app.get('trust proxy fn');
  var host = this.get('X-Forwarded-Host');

  if (!host || !trust(this.connection.remoteAddress, 0)) {
    host = this.get('Host');
  }

  if (!host) return;

  // IPv6 literal support
  var offset = host[0] === '[' ? host.indexOf(']') + 1 : 0;
  var index = host.indexOf(':', offset);

  return index !== -1 ? host.substring(0, index) : host;
});

// TODO: change req.host to return host in next major

defineGetter(req, 'host', deprecate.function(function host() {
  return this.hostname;
}, 'req.host: Use req.hostname instead'));

/**
 * Check if the request is fresh, aka
 * Last-Modified and/or the ETag
 * still match.
 *
 * @return {Boolean}
 * @public
 */

defineGetter(req, 'fresh', function () {
  var method = this.method;
  var res = this.res;
  var status = res.statusCode;

  // GET or HEAD for weak freshness validation only
  if ('GET' !== method && 'HEAD' !== method) return false;

  // 2xx or 304 as per rfc2616 14.26
  if (status >= 200 && status < 300 || 304 === status) {
    return fresh(this.headers, {
      'etag': res.get('ETag'),
      'last-modified': res.get('Last-Modified')
    });
  }

  return false;
});

/**
 * Check if the request is stale, aka
 * "Last-Modified" and / or the "ETag" for the
 * resource has changed.
 *
 * @return {Boolean}
 * @public
 */

defineGetter(req, 'stale', function stale() {
  return !this.fresh;
});

/**
 * Check if the request was an _XMLHttpRequest_.
 *
 * @return {Boolean}
 * @public
 */

defineGetter(req, 'xhr', function xhr() {
  var val = this.get('X-Requested-With') || '';
  return val.toLowerCase() === 'xmlhttprequest';
});

/**
 * Helper function for creating a getter on an object.
 *
 * @param {Object} obj
 * @param {String} name
 * @param {Function} getter
 * @private
 */
function defineGetter(obj, name, getter) {
  Object.defineProperty(obj, name, {
    configurable: true,
    enumerable: true,
    get: getter
  });
}

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * accepts
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var Negotiator = __webpack_require__(175);
var mime = __webpack_require__(72);

/**
 * Module exports.
 * @public
 */

module.exports = Accepts;

/**
 * Create a new Accepts object for the given req.
 *
 * @param {object} req
 * @public
 */

function Accepts(req) {
  if (!(this instanceof Accepts)) {
    return new Accepts(req);
  }

  this.headers = req.headers;
  this.negotiator = new Negotiator(req);
}

/**
 * Check if the given `type(s)` is acceptable, returning
 * the best match when true, otherwise `undefined`, in which
 * case you should respond with 406 "Not Acceptable".
 *
 * The `type` value may be a single mime type string
 * such as "application/json", the extension name
 * such as "json" or an array `["json", "html", "text/plain"]`. When a list
 * or array is given the _best_ match, if any is returned.
 *
 * Examples:
 *
 *     // Accept: text/html
 *     this.types('html');
 *     // => "html"
 *
 *     // Accept: text/*, application/json
 *     this.types('html');
 *     // => "html"
 *     this.types('text/html');
 *     // => "text/html"
 *     this.types('json', 'text');
 *     // => "json"
 *     this.types('application/json');
 *     // => "application/json"
 *
 *     // Accept: text/*, application/json
 *     this.types('image/png');
 *     this.types('png');
 *     // => undefined
 *
 *     // Accept: text/*;q=.5, application/json
 *     this.types(['html', 'json']);
 *     this.types('html', 'json');
 *     // => "json"
 *
 * @param {String|Array} types...
 * @return {String|Array|Boolean}
 * @public
 */

Accepts.prototype.type = Accepts.prototype.types = function (types_) {
  var types = types_;

  // support flattened arguments
  if (types && !Array.isArray(types)) {
    types = new Array(arguments.length);
    for (var i = 0; i < types.length; i++) {
      types[i] = arguments[i];
    }
  }

  // no types, return all requested types
  if (!types || types.length === 0) {
    return this.negotiator.mediaTypes();
  }

  // no accept header, return first given type
  if (!this.headers.accept) {
    return types[0];
  }

  var mimes = types.map(extToMime);
  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
  var first = accepts[0];

  return first ? types[mimes.indexOf(first)] : false;
};

/**
 * Return accepted encodings or best fit based on `encodings`.
 *
 * Given `Accept-Encoding: gzip, deflate`
 * an array sorted by quality is returned:
 *
 *     ['gzip', 'deflate']
 *
 * @param {String|Array} encodings...
 * @return {String|Array}
 * @public
 */

Accepts.prototype.encoding = Accepts.prototype.encodings = function (encodings_) {
  var encodings = encodings_;

  // support flattened arguments
  if (encodings && !Array.isArray(encodings)) {
    encodings = new Array(arguments.length);
    for (var i = 0; i < encodings.length; i++) {
      encodings[i] = arguments[i];
    }
  }

  // no encodings, return all requested encodings
  if (!encodings || encodings.length === 0) {
    return this.negotiator.encodings();
  }

  return this.negotiator.encodings(encodings)[0] || false;
};

/**
 * Return accepted charsets or best fit based on `charsets`.
 *
 * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`
 * an array sorted by quality is returned:
 *
 *     ['utf-8', 'utf-7', 'iso-8859-1']
 *
 * @param {String|Array} charsets...
 * @return {String|Array}
 * @public
 */

Accepts.prototype.charset = Accepts.prototype.charsets = function (charsets_) {
  var charsets = charsets_;

  // support flattened arguments
  if (charsets && !Array.isArray(charsets)) {
    charsets = new Array(arguments.length);
    for (var i = 0; i < charsets.length; i++) {
      charsets[i] = arguments[i];
    }
  }

  // no charsets, return all requested charsets
  if (!charsets || charsets.length === 0) {
    return this.negotiator.charsets();
  }

  return this.negotiator.charsets(charsets)[0] || false;
};

/**
 * Return accepted languages or best fit based on `langs`.
 *
 * Given `Accept-Language: en;q=0.8, es, pt`
 * an array sorted by quality is returned:
 *
 *     ['es', 'pt', 'en']
 *
 * @param {String|Array} langs...
 * @return {Array|String}
 * @public
 */

Accepts.prototype.lang = Accepts.prototype.langs = Accepts.prototype.language = Accepts.prototype.languages = function (languages_) {
  var languages = languages_;

  // support flattened arguments
  if (languages && !Array.isArray(languages)) {
    languages = new Array(arguments.length);
    for (var i = 0; i < languages.length; i++) {
      languages[i] = arguments[i];
    }
  }

  // no languages, return all requested languages
  if (!languages || languages.length === 0) {
    return this.negotiator.languages();
  }

  return this.negotiator.languages(languages)[0] || false;
};

/**
 * Convert extnames to mime.
 *
 * @param {String} type
 * @return {String}
 * @private
 */

function extToMime(type) {
  return type.indexOf('/') === -1 ? mime.lookup(type) : type;
}

/**
 * Check if mime is valid.
 *
 * @param {String} type
 * @return {String}
 * @private
 */

function validMime(type) {
  return typeof type === 'string';
}

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * negotiator
 * Copyright(c) 2012 Federico Romero
 * Copyright(c) 2012-2014 Isaac Z. Schlueter
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Cached loaded submodules.
 * @private
 */

var modules = Object.create(null);

/**
 * Module exports.
 * @public
 */

module.exports = Negotiator;
module.exports.Negotiator = Negotiator;

/**
 * Create a Negotiator instance from a request.
 * @param {object} request
 * @public
 */

function Negotiator(request) {
  if (!(this instanceof Negotiator)) {
    return new Negotiator(request);
  }

  this.request = request;
}

Negotiator.prototype.charset = function charset(available) {
  var set = this.charsets(available);
  return set && set[0];
};

Negotiator.prototype.charsets = function charsets(available) {
  var preferredCharsets = loadModule('charset').preferredCharsets;
  return preferredCharsets(this.request.headers['accept-charset'], available);
};

Negotiator.prototype.encoding = function encoding(available) {
  var set = this.encodings(available);
  return set && set[0];
};

Negotiator.prototype.encodings = function encodings(available) {
  var preferredEncodings = loadModule('encoding').preferredEncodings;
  return preferredEncodings(this.request.headers['accept-encoding'], available);
};

Negotiator.prototype.language = function language(available) {
  var set = this.languages(available);
  return set && set[0];
};

Negotiator.prototype.languages = function languages(available) {
  var preferredLanguages = loadModule('language').preferredLanguages;
  return preferredLanguages(this.request.headers['accept-language'], available);
};

Negotiator.prototype.mediaType = function mediaType(available) {
  var set = this.mediaTypes(available);
  return set && set[0];
};

Negotiator.prototype.mediaTypes = function mediaTypes(available) {
  var preferredMediaTypes = loadModule('mediaType').preferredMediaTypes;
  return preferredMediaTypes(this.request.headers.accept, available);
};

// Backwards compatibility
Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;

/**
 * Load the given module.
 * @private
 */

function loadModule(moduleName) {
  var module = modules[moduleName];

  if (module !== undefined) {
    return module;
  }

  // This uses a switch for static require analysis
  switch (moduleName) {
    case 'charset':
      module = __webpack_require__(176);
      break;
    case 'encoding':
      module = __webpack_require__(177);
      break;
    case 'language':
      module = __webpack_require__(178);
      break;
    case 'mediaType':
      module = __webpack_require__(179);
      break;
    default:
      throw new Error('Cannot find module \'' + moduleName + '\'');
  }

  // Store to prevent invoking require()
  modules[moduleName] = module;

  return module;
}

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = preferredCharsets;
module.exports.preferredCharsets = preferredCharsets;

/**
 * Module variables.
 * @private
 */

var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Charset header.
 * @private
 */

function parseAcceptCharset(accept) {
  var accepts = accept.split(',');

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var charset = parseCharset(accepts[i].trim(), i);

    if (charset) {
      accepts[j++] = charset;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a charset from the Accept-Charset header.
 * @private
 */

function parseCharset(str, i) {
  var match = simpleCharsetRegExp.exec(str);
  if (!match) return null;

  var charset = match[1];
  var q = 1;
  if (match[2]) {
    var params = match[2].split(';');
    for (var i = 0; i < params.length; i++) {
      var p = params[i].trim().split('=');
      if (p[0] === 'q') {
        q = parseFloat(p[1]);
        break;
      }
    }
  }

  return {
    charset: charset,
    q: q,
    i: i
  };
}

/**
 * Get the priority of a charset.
 * @private
 */

function getCharsetPriority(charset, accepted, index) {
  var priority = { o: -1, q: 0, s: 0 };

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(charset, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the charset.
 * @private
 */

function specify(charset, spec, index) {
  var s = 0;
  if (spec.charset.toLowerCase() === charset.toLowerCase()) {
    s |= 1;
  } else if (spec.charset !== '*') {
    return null;
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  };
}

/**
 * Get the preferred charsets from an Accept-Charset header.
 * @public
 */

function preferredCharsets(accept, provided) {
  // RFC 2616 sec 14.2: no header = *
  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');

  if (!provided) {
    // sorted list of all charsets
    return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getCharsetPriority(type, accepts, index);
  });

  // sorted list of accepted charsets
  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
}

/**
 * Get full charset string.
 * @private
 */

function getFullCharset(spec) {
  return spec.charset;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = preferredEncodings;
module.exports.preferredEncodings = preferredEncodings;

/**
 * Module variables.
 * @private
 */

var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Encoding header.
 * @private
 */

function parseAcceptEncoding(accept) {
  var accepts = accept.split(',');
  var hasIdentity = false;
  var minQuality = 1;

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var encoding = parseEncoding(accepts[i].trim(), i);

    if (encoding) {
      accepts[j++] = encoding;
      hasIdentity = hasIdentity || specify('identity', encoding);
      minQuality = Math.min(minQuality, encoding.q || 1);
    }
  }

  if (!hasIdentity) {
    /*
     * If identity doesn't explicitly appear in the accept-encoding header,
     * it's added to the list of acceptable encoding with the lowest q
     */
    accepts[j++] = {
      encoding: 'identity',
      q: minQuality,
      i: i
    };
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse an encoding from the Accept-Encoding header.
 * @private
 */

function parseEncoding(str, i) {
  var match = simpleEncodingRegExp.exec(str);
  if (!match) return null;

  var encoding = match[1];
  var q = 1;
  if (match[2]) {
    var params = match[2].split(';');
    for (var i = 0; i < params.length; i++) {
      var p = params[i].trim().split('=');
      if (p[0] === 'q') {
        q = parseFloat(p[1]);
        break;
      }
    }
  }

  return {
    encoding: encoding,
    q: q,
    i: i
  };
}

/**
 * Get the priority of an encoding.
 * @private
 */

function getEncodingPriority(encoding, accepted, index) {
  var priority = { o: -1, q: 0, s: 0 };

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(encoding, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the encoding.
 * @private
 */

function specify(encoding, spec, index) {
  var s = 0;
  if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {
    s |= 1;
  } else if (spec.encoding !== '*') {
    return null;
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  };
};

/**
 * Get the preferred encodings from an Accept-Encoding header.
 * @public
 */

function preferredEncodings(accept, provided) {
  var accepts = parseAcceptEncoding(accept || '');

  if (!provided) {
    // sorted list of all encodings
    return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getEncodingPriority(type, accepts, index);
  });

  // sorted list of accepted encodings
  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
}

/**
 * Get full encoding string.
 * @private
 */

function getFullEncoding(spec) {
  return spec.encoding;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = preferredLanguages;
module.exports.preferredLanguages = preferredLanguages;

/**
 * Module variables.
 * @private
 */

var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;

/**
 * Parse the Accept-Language header.
 * @private
 */

function parseAcceptLanguage(accept) {
  var accepts = accept.split(',');

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var langauge = parseLanguage(accepts[i].trim(), i);

    if (langauge) {
      accepts[j++] = langauge;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a language from the Accept-Language header.
 * @private
 */

function parseLanguage(str, i) {
  var match = simpleLanguageRegExp.exec(str);
  if (!match) return null;

  var prefix = match[1],
      suffix = match[2],
      full = prefix;

  if (suffix) full += "-" + suffix;

  var q = 1;
  if (match[3]) {
    var params = match[3].split(';');
    for (var i = 0; i < params.length; i++) {
      var p = params[i].split('=');
      if (p[0] === 'q') q = parseFloat(p[1]);
    }
  }

  return {
    prefix: prefix,
    suffix: suffix,
    q: q,
    i: i,
    full: full
  };
}

/**
 * Get the priority of a language.
 * @private
 */

function getLanguagePriority(language, accepted, index) {
  var priority = { o: -1, q: 0, s: 0 };

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(language, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the language.
 * @private
 */

function specify(language, spec, index) {
  var p = parseLanguage(language);
  if (!p) return null;
  var s = 0;
  if (spec.full.toLowerCase() === p.full.toLowerCase()) {
    s |= 4;
  } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
    s |= 2;
  } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
    s |= 1;
  } else if (spec.full !== '*') {
    return null;
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  };
};

/**
 * Get the preferred languages from an Accept-Language header.
 * @public
 */

function preferredLanguages(accept, provided) {
  // RFC 2616 sec 14.4: no header = *
  var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');

  if (!provided) {
    // sorted list of all languages
    return accepts.filter(isQuality).sort(compareSpecs).map(getFullLanguage);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getLanguagePriority(type, accepts, index);
  });

  // sorted list of accepted languages
  return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
}

/**
 * Get full language string.
 * @private
 */

function getFullLanguage(spec) {
  return spec.full;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * negotiator
 * Copyright(c) 2012 Isaac Z. Schlueter
 * Copyright(c) 2014 Federico Romero
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

module.exports = preferredMediaTypes;
module.exports.preferredMediaTypes = preferredMediaTypes;

/**
 * Module variables.
 * @private
 */

var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;

/**
 * Parse the Accept header.
 * @private
 */

function parseAccept(accept) {
  var accepts = splitMediaTypes(accept);

  for (var i = 0, j = 0; i < accepts.length; i++) {
    var mediaType = parseMediaType(accepts[i].trim(), i);

    if (mediaType) {
      accepts[j++] = mediaType;
    }
  }

  // trim accepts
  accepts.length = j;

  return accepts;
}

/**
 * Parse a media type from the Accept header.
 * @private
 */

function parseMediaType(str, i) {
  var match = simpleMediaTypeRegExp.exec(str);
  if (!match) return null;

  var params = Object.create(null);
  var q = 1;
  var subtype = match[2];
  var type = match[1];

  if (match[3]) {
    var kvps = splitParameters(match[3]).map(splitKeyValuePair);

    for (var j = 0; j < kvps.length; j++) {
      var pair = kvps[j];
      var key = pair[0].toLowerCase();
      var val = pair[1];

      // get the value, unwrapping quotes
      var value = val && val[0] === '"' && val[val.length - 1] === '"' ? val.substr(1, val.length - 2) : val;

      if (key === 'q') {
        q = parseFloat(value);
        break;
      }

      // store parameter
      params[key] = value;
    }
  }

  return {
    type: type,
    subtype: subtype,
    params: params,
    q: q,
    i: i
  };
}

/**
 * Get the priority of a media type.
 * @private
 */

function getMediaTypePriority(type, accepted, index) {
  var priority = { o: -1, q: 0, s: 0 };

  for (var i = 0; i < accepted.length; i++) {
    var spec = specify(type, accepted[i], index);

    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
      priority = spec;
    }
  }

  return priority;
}

/**
 * Get the specificity of the media type.
 * @private
 */

function specify(type, spec, index) {
  var p = parseMediaType(type);
  var s = 0;

  if (!p) {
    return null;
  }

  if (spec.type.toLowerCase() == p.type.toLowerCase()) {
    s |= 4;
  } else if (spec.type != '*') {
    return null;
  }

  if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
    s |= 2;
  } else if (spec.subtype != '*') {
    return null;
  }

  var keys = Object.keys(spec.params);
  if (keys.length > 0) {
    if (keys.every(function (k) {
      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();
    })) {
      s |= 1;
    } else {
      return null;
    }
  }

  return {
    i: index,
    o: spec.i,
    q: spec.q,
    s: s
  };
}

/**
 * Get the preferred media types from an Accept header.
 * @public
 */

function preferredMediaTypes(accept, provided) {
  // RFC 2616 sec 14.2: no header = */*
  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');

  if (!provided) {
    // sorted list of all types
    return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);
  }

  var priorities = provided.map(function getPriority(type, index) {
    return getMediaTypePriority(type, accepts, index);
  });

  // sorted list of accepted types
  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
    return provided[priorities.indexOf(priority)];
  });
}

/**
 * Compare two specs.
 * @private
 */

function compareSpecs(a, b) {
  return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
}

/**
 * Get full type string.
 * @private
 */

function getFullType(spec) {
  return spec.type + '/' + spec.subtype;
}

/**
 * Check if a spec has any quality.
 * @private
 */

function isQuality(spec) {
  return spec.q > 0;
}

/**
 * Count the number of quotes in a string.
 * @private
 */

function quoteCount(string) {
  var count = 0;
  var index = 0;

  while ((index = string.indexOf('"', index)) !== -1) {
    count++;
    index++;
  }

  return count;
}

/**
 * Split a key value pair.
 * @private
 */

function splitKeyValuePair(str) {
  var index = str.indexOf('=');
  var key;
  var val;

  if (index === -1) {
    key = str;
  } else {
    key = str.substr(0, index);
    val = str.substr(index + 1);
  }

  return [key, val];
}

/**
 * Split an Accept header into media types.
 * @private
 */

function splitMediaTypes(accept) {
  var accepts = accept.split(',');

  for (var i = 1, j = 0; i < accepts.length; i++) {
    if (quoteCount(accepts[j]) % 2 == 0) {
      accepts[++j] = accepts[i];
    } else {
      accepts[j] += ',' + accepts[i];
    }
  }

  // trim accepts
  accepts.length = j + 1;

  return accepts;
}

/**
 * Split a string of parameters.
 * @private
 */

function splitParameters(str) {
  var parameters = str.split(';');

  for (var i = 1, j = 0; i < parameters.length; i++) {
    if (quoteCount(parameters[j]) % 2 == 0) {
      parameters[++j] = parameters[i];
    } else {
      parameters[j] += ';' + parameters[i];
    }
  }

  // trim parameters
  parameters.length = j + 1;

  for (var i = 0; i < parameters.length; i++) {
    parameters[i] = parameters[i].trim();
  }

  return parameters;
}

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var Buffer = __webpack_require__(80).Buffer;
var contentDisposition = __webpack_require__(81);
var deprecate = __webpack_require__(10)('express');
var encodeUrl = __webpack_require__(37);
var escapeHtml = __webpack_require__(38);
var http = __webpack_require__(16);
var isAbsolute = __webpack_require__(14).isAbsolute;
var onFinished = __webpack_require__(36);
var path = __webpack_require__(0);
var statuses = __webpack_require__(24);
var merge = __webpack_require__(40);
var sign = __webpack_require__(181).sign;
var normalizeType = __webpack_require__(14).normalizeType;
var normalizeTypes = __webpack_require__(14).normalizeTypes;
var setCharset = __webpack_require__(14).setCharset;
var cookie = __webpack_require__(182);
var send = __webpack_require__(50);
var extname = path.extname;
var mime = send.mime;
var resolve = path.resolve;
var vary = __webpack_require__(183);

/**
 * Response prototype.
 * @public
 */

var res = Object.create(http.ServerResponse.prototype);

/**
 * Module exports.
 * @public
 */

module.exports = res;

/**
 * Module variables.
 * @private
 */

var charsetRegExp = /;\s*charset\s*=/;

/**
 * Set status `code`.
 *
 * @param {Number} code
 * @return {ServerResponse}
 * @public
 */

res.status = function status(code) {
  this.statusCode = code;
  return this;
};

/**
 * Set Link header field with the given `links`.
 *
 * Examples:
 *
 *    res.links({
 *      next: 'http://api.example.com/users?page=2',
 *      last: 'http://api.example.com/users?page=5'
 *    });
 *
 * @param {Object} links
 * @return {ServerResponse}
 * @public
 */

res.links = function (links) {
  var link = this.get('Link') || '';
  if (link) link += ', ';
  return this.set('Link', link + Object.keys(links).map(function (rel) {
    return '<' + links[rel] + '>; rel="' + rel + '"';
  }).join(', '));
};

/**
 * Send a response.
 *
 * Examples:
 *
 *     res.send(Buffer.from('wahoo'));
 *     res.send({ some: 'json' });
 *     res.send('<p>some html</p>');
 *
 * @param {string|number|boolean|object|Buffer} body
 * @public
 */

res.send = function send(body) {
  var chunk = body;
  var encoding;
  var req = this.req;
  var type;

  // settings
  var app = this.app;

  // allow status / body
  if (arguments.length === 2) {
    // res.send(body, status) backwards compat
    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {
      deprecate('res.send(body, status): Use res.status(status).send(body) instead');
      this.statusCode = arguments[1];
    } else {
      deprecate('res.send(status, body): Use res.status(status).send(body) instead');
      this.statusCode = arguments[0];
      chunk = arguments[1];
    }
  }

  // disambiguate res.send(status) and res.send(status, num)
  if (typeof chunk === 'number' && arguments.length === 1) {
    // res.send(status) will set status message as text string
    if (!this.get('Content-Type')) {
      this.type('txt');
    }

    deprecate('res.send(status): Use res.sendStatus(status) instead');
    this.statusCode = chunk;
    chunk = statuses[chunk];
  }

  switch (typeof chunk) {
    // string defaulting to html
    case 'string':
      if (!this.get('Content-Type')) {
        this.type('html');
      }
      break;
    case 'boolean':
    case 'number':
    case 'object':
      if (chunk === null) {
        chunk = '';
      } else if (Buffer.isBuffer(chunk)) {
        if (!this.get('Content-Type')) {
          this.type('bin');
        }
      } else {
        return this.json(chunk);
      }
      break;
  }

  // write strings in utf-8
  if (typeof chunk === 'string') {
    encoding = 'utf8';
    type = this.get('Content-Type');

    // reflect this in content-type
    if (typeof type === 'string') {
      this.set('Content-Type', setCharset(type, 'utf-8'));
    }
  }

  // determine if ETag should be generated
  var etagFn = app.get('etag fn');
  var generateETag = !this.get('ETag') && typeof etagFn === 'function';

  // populate Content-Length
  var len;
  if (chunk !== undefined) {
    if (Buffer.isBuffer(chunk)) {
      // get length of Buffer
      len = chunk.length;
    } else if (!generateETag && chunk.length < 1000) {
      // just calculate length when no ETag + small chunk
      len = Buffer.byteLength(chunk, encoding);
    } else {
      // convert chunk to Buffer and calculate
      chunk = Buffer.from(chunk, encoding);
      encoding = undefined;
      len = chunk.length;
    }

    this.set('Content-Length', len);
  }

  // populate ETag
  var etag;
  if (generateETag && len !== undefined) {
    if (etag = etagFn(chunk, encoding)) {
      this.set('ETag', etag);
    }
  }

  // freshness
  if (req.fresh) this.statusCode = 304;

  // strip irrelevant headers
  if (204 === this.statusCode || 304 === this.statusCode) {
    this.removeHeader('Content-Type');
    this.removeHeader('Content-Length');
    this.removeHeader('Transfer-Encoding');
    chunk = '';
  }

  if (req.method === 'HEAD') {
    // skip body for HEAD
    this.end();
  } else {
    // respond
    this.end(chunk, encoding);
  }

  return this;
};

/**
 * Send JSON response.
 *
 * Examples:
 *
 *     res.json(null);
 *     res.json({ user: 'tj' });
 *
 * @param {string|number|boolean|object} obj
 * @public
 */

res.json = function json(obj) {
  var val = obj;

  // allow status / body
  if (arguments.length === 2) {
    // res.json(body, status) backwards compat
    if (typeof arguments[1] === 'number') {
      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');
      this.statusCode = arguments[1];
    } else {
      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');
      this.statusCode = arguments[0];
      val = arguments[1];
    }
  }

  // settings
  var app = this.app;
  var escape = app.get('json escape');
  var replacer = app.get('json replacer');
  var spaces = app.get('json spaces');
  var body = stringify(val, replacer, spaces, escape);

  // content-type
  if (!this.get('Content-Type')) {
    this.set('Content-Type', 'application/json');
  }

  return this.send(body);
};

/**
 * Send JSON response with JSONP callback support.
 *
 * Examples:
 *
 *     res.jsonp(null);
 *     res.jsonp({ user: 'tj' });
 *
 * @param {string|number|boolean|object} obj
 * @public
 */

res.jsonp = function jsonp(obj) {
  var val = obj;

  // allow status / body
  if (arguments.length === 2) {
    // res.json(body, status) backwards compat
    if (typeof arguments[1] === 'number') {
      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');
      this.statusCode = arguments[1];
    } else {
      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');
      this.statusCode = arguments[0];
      val = arguments[1];
    }
  }

  // settings
  var app = this.app;
  var escape = app.get('json escape');
  var replacer = app.get('json replacer');
  var spaces = app.get('json spaces');
  var body = stringify(val, replacer, spaces, escape);
  var callback = this.req.query[app.get('jsonp callback name')];

  // content-type
  if (!this.get('Content-Type')) {
    this.set('X-Content-Type-Options', 'nosniff');
    this.set('Content-Type', 'application/json');
  }

  // fixup callback
  if (Array.isArray(callback)) {
    callback = callback[0];
  }

  // jsonp
  if (typeof callback === 'string' && callback.length !== 0) {
    this.set('X-Content-Type-Options', 'nosniff');
    this.set('Content-Type', 'text/javascript');

    // restrict callback charset
    callback = callback.replace(/[^\[\]\w$.]/g, '');

    // replace chars not allowed in JavaScript that are in JSON
    body = body.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');

    // the /**/ is a specific security mitigation for "Rosetta Flash JSONP abuse"
    // the typeof check is just to reduce client error noise
    body = '/**/ typeof ' + callback + ' === \'function\' && ' + callback + '(' + body + ');';
  }

  return this.send(body);
};

/**
 * Send given HTTP status code.
 *
 * Sets the response status to `statusCode` and the body of the
 * response to the standard description from node's http.STATUS_CODES
 * or the statusCode number if no description.
 *
 * Examples:
 *
 *     res.sendStatus(200);
 *
 * @param {number} statusCode
 * @public
 */

res.sendStatus = function sendStatus(statusCode) {
  var body = statuses[statusCode] || String(statusCode);

  this.statusCode = statusCode;
  this.type('txt');

  return this.send(body);
};

/**
 * Transfer the file at the given `path`.
 *
 * Automatically sets the _Content-Type_ response header field.
 * The callback `callback(err)` is invoked when the transfer is complete
 * or when an error occurs. Be sure to check `res.sentHeader`
 * if you wish to attempt responding, as the header and some data
 * may have already been transferred.
 *
 * Options:
 *
 *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
 *   - `root`     root directory for relative filenames
 *   - `headers`  object of headers to serve with file
 *   - `dotfiles` serve dotfiles, defaulting to false; can be `"allow"` to send them
 *
 * Other options are passed along to `send`.
 *
 * Examples:
 *
 *  The following example illustrates how `res.sendFile()` may
 *  be used as an alternative for the `static()` middleware for
 *  dynamic situations. The code backing `res.sendFile()` is actually
 *  the same code, so HTTP cache support etc is identical.
 *
 *     app.get('/user/:uid/photos/:file', function(req, res){
 *       var uid = req.params.uid
 *         , file = req.params.file;
 *
 *       req.user.mayViewFilesFrom(uid, function(yes){
 *         if (yes) {
 *           res.sendFile('/uploads/' + uid + '/' + file);
 *         } else {
 *           res.send(403, 'Sorry! you cant see that.');
 *         }
 *       });
 *     });
 *
 * @public
 */

res.sendFile = function sendFile(path, options, callback) {
  var done = callback;
  var req = this.req;
  var res = this;
  var next = req.next;
  var opts = options || {};

  if (!path) {
    throw new TypeError('path argument is required to res.sendFile');
  }

  // support function as second arg
  if (typeof options === 'function') {
    done = options;
    opts = {};
  }

  if (!opts.root && !isAbsolute(path)) {
    throw new TypeError('path must be absolute or specify root to res.sendFile');
  }

  // create file stream
  var pathname = encodeURI(path);
  var file = send(req, pathname, opts);

  // transfer
  sendfile(res, file, opts, function (err) {
    if (done) return done(err);
    if (err && err.code === 'EISDIR') return next();

    // next() all but write errors
    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {
      next(err);
    }
  });
};

/**
 * Transfer the file at the given `path`.
 *
 * Automatically sets the _Content-Type_ response header field.
 * The callback `callback(err)` is invoked when the transfer is complete
 * or when an error occurs. Be sure to check `res.sentHeader`
 * if you wish to attempt responding, as the header and some data
 * may have already been transferred.
 *
 * Options:
 *
 *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)
 *   - `root`     root directory for relative filenames
 *   - `headers`  object of headers to serve with file
 *   - `dotfiles` serve dotfiles, defaulting to false; can be `"allow"` to send them
 *
 * Other options are passed along to `send`.
 *
 * Examples:
 *
 *  The following example illustrates how `res.sendfile()` may
 *  be used as an alternative for the `static()` middleware for
 *  dynamic situations. The code backing `res.sendfile()` is actually
 *  the same code, so HTTP cache support etc is identical.
 *
 *     app.get('/user/:uid/photos/:file', function(req, res){
 *       var uid = req.params.uid
 *         , file = req.params.file;
 *
 *       req.user.mayViewFilesFrom(uid, function(yes){
 *         if (yes) {
 *           res.sendfile('/uploads/' + uid + '/' + file);
 *         } else {
 *           res.send(403, 'Sorry! you cant see that.');
 *         }
 *       });
 *     });
 *
 * @public
 */

res.sendfile = function (path, options, callback) {
  var done = callback;
  var req = this.req;
  var res = this;
  var next = req.next;
  var opts = options || {};

  // support function as second arg
  if (typeof options === 'function') {
    done = options;
    opts = {};
  }

  // create file stream
  var file = send(req, path, opts);

  // transfer
  sendfile(res, file, opts, function (err) {
    if (done) return done(err);
    if (err && err.code === 'EISDIR') return next();

    // next() all but write errors
    if (err && err.code !== 'ECONNABORT' && err.syscall !== 'write') {
      next(err);
    }
  });
};

res.sendfile = deprecate.function(res.sendfile, 'res.sendfile: Use res.sendFile instead');

/**
 * Transfer the file at the given `path` as an attachment.
 *
 * Optionally providing an alternate attachment `filename`,
 * and optional callback `callback(err)`. The callback is invoked
 * when the data transfer is complete, or when an error has
 * ocurred. Be sure to check `res.headersSent` if you plan to respond.
 *
 * Optionally providing an `options` object to use with `res.sendFile()`.
 * This function will set the `Content-Disposition` header, overriding
 * any `Content-Disposition` header passed as header options in order
 * to set the attachment and filename.
 *
 * This method uses `res.sendFile()`.
 *
 * @public
 */

res.download = function download(path, filename, options, callback) {
  var done = callback;
  var name = filename;
  var opts = options || null;

  // support function as second or third arg
  if (typeof filename === 'function') {
    done = filename;
    name = null;
    opts = null;
  } else if (typeof options === 'function') {
    done = options;
    opts = null;
  }

  // set Content-Disposition when file is sent
  var headers = {
    'Content-Disposition': contentDisposition(name || path)
  };

  // merge user-provided headers
  if (opts && opts.headers) {
    var keys = Object.keys(opts.headers);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (key.toLowerCase() !== 'content-disposition') {
        headers[key] = opts.headers[key];
      }
    }
  }

  // merge user-provided options
  opts = Object.create(opts);
  opts.headers = headers;

  // Resolve the full path for sendFile
  var fullPath = resolve(path);

  // send file
  return this.sendFile(fullPath, opts, done);
};

/**
 * Set _Content-Type_ response header with `type` through `mime.lookup()`
 * when it does not contain "/", or set the Content-Type to `type` otherwise.
 *
 * Examples:
 *
 *     res.type('.html');
 *     res.type('html');
 *     res.type('json');
 *     res.type('application/json');
 *     res.type('png');
 *
 * @param {String} type
 * @return {ServerResponse} for chaining
 * @public
 */

res.contentType = res.type = function contentType(type) {
  var ct = type.indexOf('/') === -1 ? mime.lookup(type) : type;

  return this.set('Content-Type', ct);
};

/**
 * Respond to the Acceptable formats using an `obj`
 * of mime-type callbacks.
 *
 * This method uses `req.accepted`, an array of
 * acceptable types ordered by their quality values.
 * When "Accept" is not present the _first_ callback
 * is invoked, otherwise the first match is used. When
 * no match is performed the server responds with
 * 406 "Not Acceptable".
 *
 * Content-Type is set for you, however if you choose
 * you may alter this within the callback using `res.type()`
 * or `res.set('Content-Type', ...)`.
 *
 *    res.format({
 *      'text/plain': function(){
 *        res.send('hey');
 *      },
 *
 *      'text/html': function(){
 *        res.send('<p>hey</p>');
 *      },
 *
 *      'appliation/json': function(){
 *        res.send({ message: 'hey' });
 *      }
 *    });
 *
 * In addition to canonicalized MIME types you may
 * also use extnames mapped to these types:
 *
 *    res.format({
 *      text: function(){
 *        res.send('hey');
 *      },
 *
 *      html: function(){
 *        res.send('<p>hey</p>');
 *      },
 *
 *      json: function(){
 *        res.send({ message: 'hey' });
 *      }
 *    });
 *
 * By default Express passes an `Error`
 * with a `.status` of 406 to `next(err)`
 * if a match is not made. If you provide
 * a `.default` callback it will be invoked
 * instead.
 *
 * @param {Object} obj
 * @return {ServerResponse} for chaining
 * @public
 */

res.format = function (obj) {
  var req = this.req;
  var next = req.next;

  var fn = obj.default;
  if (fn) delete obj.default;
  var keys = Object.keys(obj);

  var key = keys.length > 0 ? req.accepts(keys) : false;

  this.vary("Accept");

  if (key) {
    this.set('Content-Type', normalizeType(key).value);
    obj[key](req, this, next);
  } else if (fn) {
    fn();
  } else {
    var err = new Error('Not Acceptable');
    err.status = err.statusCode = 406;
    err.types = normalizeTypes(keys).map(function (o) {
      return o.value;
    });
    next(err);
  }

  return this;
};

/**
 * Set _Content-Disposition_ header to _attachment_ with optional `filename`.
 *
 * @param {String} filename
 * @return {ServerResponse}
 * @public
 */

res.attachment = function attachment(filename) {
  if (filename) {
    this.type(extname(filename));
  }

  this.set('Content-Disposition', contentDisposition(filename));

  return this;
};

/**
 * Append additional header `field` with value `val`.
 *
 * Example:
 *
 *    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);
 *    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');
 *    res.append('Warning', '199 Miscellaneous warning');
 *
 * @param {String} field
 * @param {String|Array} val
 * @return {ServerResponse} for chaining
 * @public
 */

res.append = function append(field, val) {
  var prev = this.get(field);
  var value = val;

  if (prev) {
    // concat the new and prev vals
    value = Array.isArray(prev) ? prev.concat(val) : Array.isArray(val) ? [prev].concat(val) : [prev, val];
  }

  return this.set(field, value);
};

/**
 * Set header `field` to `val`, or pass
 * an object of header fields.
 *
 * Examples:
 *
 *    res.set('Foo', ['bar', 'baz']);
 *    res.set('Accept', 'application/json');
 *    res.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });
 *
 * Aliased as `res.header()`.
 *
 * @param {String|Object} field
 * @param {String|Array} val
 * @return {ServerResponse} for chaining
 * @public
 */

res.set = res.header = function header(field, val) {
  if (arguments.length === 2) {
    var value = Array.isArray(val) ? val.map(String) : String(val);

    // add charset to content-type
    if (field.toLowerCase() === 'content-type') {
      if (Array.isArray(value)) {
        throw new TypeError('Content-Type cannot be set to an Array');
      }
      if (!charsetRegExp.test(value)) {
        var charset = mime.charsets.lookup(value.split(';')[0]);
        if (charset) value += '; charset=' + charset.toLowerCase();
      }
    }

    this.setHeader(field, value);
  } else {
    for (var key in field) {
      this.set(key, field[key]);
    }
  }
  return this;
};

/**
 * Get value for header `field`.
 *
 * @param {String} field
 * @return {String}
 * @public
 */

res.get = function (field) {
  return this.getHeader(field);
};

/**
 * Clear cookie `name`.
 *
 * @param {String} name
 * @param {Object} [options]
 * @return {ServerResponse} for chaining
 * @public
 */

res.clearCookie = function clearCookie(name, options) {
  var opts = merge({ expires: new Date(1), path: '/' }, options);

  return this.cookie(name, '', opts);
};

/**
 * Set cookie `name` to `value`, with the given `options`.
 *
 * Options:
 *
 *    - `maxAge`   max-age in milliseconds, converted to `expires`
 *    - `signed`   sign the cookie
 *    - `path`     defaults to "/"
 *
 * Examples:
 *
 *    // "Remember Me" for 15 minutes
 *    res.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly: true });
 *
 *    // save as above
 *    res.cookie('rememberme', '1', { maxAge: 900000, httpOnly: true })
 *
 * @param {String} name
 * @param {String|Object} value
 * @param {Object} [options]
 * @return {ServerResponse} for chaining
 * @public
 */

res.cookie = function (name, value, options) {
  var opts = merge({}, options);
  var secret = this.req.secret;
  var signed = opts.signed;

  if (signed && !secret) {
    throw new Error('cookieParser("secret") required for signed cookies');
  }

  var val = typeof value === 'object' ? 'j:' + JSON.stringify(value) : String(value);

  if (signed) {
    val = 's:' + sign(val, secret);
  }

  if ('maxAge' in opts) {
    opts.expires = new Date(Date.now() + opts.maxAge);
    opts.maxAge /= 1000;
  }

  if (opts.path == null) {
    opts.path = '/';
  }

  this.append('Set-Cookie', cookie.serialize(name, String(val), opts));

  return this;
};

/**
 * Set the location header to `url`.
 *
 * The given `url` can also be "back", which redirects
 * to the _Referrer_ or _Referer_ headers or "/".
 *
 * Examples:
 *
 *    res.location('/foo/bar').;
 *    res.location('http://example.com');
 *    res.location('../login');
 *
 * @param {String} url
 * @return {ServerResponse} for chaining
 * @public
 */

res.location = function location(url) {
  var loc = url;

  // "back" is an alias for the referrer
  if (url === 'back') {
    loc = this.req.get('Referrer') || '/';
  }

  // set location
  return this.set('Location', encodeUrl(loc));
};

/**
 * Redirect to the given `url` with optional response `status`
 * defaulting to 302.
 *
 * The resulting `url` is determined by `res.location()`, so
 * it will play nicely with mounted apps, relative paths,
 * `"back"` etc.
 *
 * Examples:
 *
 *    res.redirect('/foo/bar');
 *    res.redirect('http://example.com');
 *    res.redirect(301, 'http://example.com');
 *    res.redirect('../login'); // /blog/post/1 -> /blog/login
 *
 * @public
 */

res.redirect = function redirect(url) {
  var address = url;
  var body;
  var status = 302;

  // allow status / url
  if (arguments.length === 2) {
    if (typeof arguments[0] === 'number') {
      status = arguments[0];
      address = arguments[1];
    } else {
      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
      status = arguments[1];
    }
  }

  // Set location header
  address = this.location(address).get('Location');

  // Support text/{plain,html} by default
  this.format({
    text: function () {
      body = statuses[status] + '. Redirecting to ' + address;
    },

    html: function () {
      var u = escapeHtml(address);
      body = '<p>' + statuses[status] + '. Redirecting to <a href="' + u + '">' + u + '</a></p>';
    },

    default: function () {
      body = '';
    }
  });

  // Respond
  this.statusCode = status;
  this.set('Content-Length', Buffer.byteLength(body));

  if (this.req.method === 'HEAD') {
    this.end();
  } else {
    this.end(body);
  }
};

/**
 * Add `field` to Vary. If already present in the Vary set, then
 * this call is simply ignored.
 *
 * @param {Array|String} field
 * @return {ServerResponse} for chaining
 * @public
 */

res.vary = function (field) {
  // checks for back-compat
  if (!field || Array.isArray(field) && !field.length) {
    deprecate('res.vary(): Provide a field name');
    return this;
  }

  vary(this, field);

  return this;
};

/**
 * Render `view` with the given `options` and optional callback `fn`.
 * When a callback function is given a response will _not_ be made
 * automatically, otherwise a response of _200_ and _text/html_ is given.
 *
 * Options:
 *
 *  - `cache`     boolean hinting to the engine it should cache
 *  - `filename`  filename of the view being rendered
 *
 * @public
 */

res.render = function render(view, options, callback) {
  var app = this.req.app;
  var done = callback;
  var opts = options || {};
  var req = this.req;
  var self = this;

  // support callback function as second arg
  if (typeof options === 'function') {
    done = options;
    opts = {};
  }

  // merge res.locals
  opts._locals = self.locals;

  // default callback to respond
  done = done || function (err, str) {
    if (err) return req.next(err);
    self.send(str);
  };

  // render
  app.render(view, opts, done);
};

// pipe the send file stream
function sendfile(res, file, options, callback) {
  var done = false;
  var streaming;

  // request aborted
  function onaborted() {
    if (done) return;
    done = true;

    var err = new Error('Request aborted');
    err.code = 'ECONNABORTED';
    callback(err);
  }

  // directory
  function ondirectory() {
    if (done) return;
    done = true;

    var err = new Error('EISDIR, read');
    err.code = 'EISDIR';
    callback(err);
  }

  // errors
  function onerror(err) {
    if (done) return;
    done = true;
    callback(err);
  }

  // ended
  function onend() {
    if (done) return;
    done = true;
    callback();
  }

  // file
  function onfile() {
    streaming = false;
  }

  // finished
  function onfinish(err) {
    if (err && err.code === 'ECONNRESET') return onaborted();
    if (err) return onerror(err);
    if (done) return;

    setImmediate(function () {
      if (streaming !== false && !done) {
        onaborted();
        return;
      }

      if (done) return;
      done = true;
      callback();
    });
  }

  // streaming
  function onstream() {
    streaming = true;
  }

  file.on('directory', ondirectory);
  file.on('end', onend);
  file.on('error', onerror);
  file.on('file', onfile);
  file.on('stream', onstream);
  onFinished(res, onfinish);

  if (options.headers) {
    // set headers on successful transfer
    file.on('headers', function headers(res) {
      var obj = options.headers;
      var keys = Object.keys(obj);

      for (var i = 0; i < keys.length; i++) {
        var k = keys[i];
        res.setHeader(k, obj[k]);
      }
    });
  }

  // pipe
  file.pipe(res);
}

/**
 * Stringify JSON, like JSON.stringify, but v8 optimized, with the
 * ability to escape characters that can trigger HTML sniffing.
 *
 * @param {*} value
 * @param {function} replaces
 * @param {number} spaces
 * @param {boolean} escape
 * @returns {string}
 * @private
 */

function stringify(value, replacer, spaces, escape) {
  // v8 checks arguments.length for optimizing simple call
  // https://bugs.chromium.org/p/v8/issues/detail?id=4730
  var json = replacer || spaces ? JSON.stringify(value, replacer, spaces) : JSON.stringify(value);

  if (escape) {
    json = json.replace(/[<>&]/g, function (c) {
      switch (c.charCodeAt(0)) {
        case 0x3c:
          return '\\u003c';
        case 0x3e:
          return '\\u003e';
        case 0x26:
          return '\\u0026';
        default:
          return c;
      }
    });
  }

  return json;
}

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var crypto = __webpack_require__(15);

/**
 * Sign the given `val` with `secret`.
 *
 * @param {String} val
 * @param {String} secret
 * @return {String}
 * @api private
 */

exports.sign = function (val, secret) {
  if ('string' != typeof val) throw new TypeError("Cookie value must be provided as a string.");
  if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
  return val + '.' + crypto.createHmac('sha256', secret).update(val).digest('base64').replace(/\=+$/, '');
};

/**
 * Unsign and decode the given `val` with `secret`,
 * returning `false` if the signature is invalid.
 *
 * @param {String} val
 * @param {String} secret
 * @return {String|Boolean}
 * @api private
 */

exports.unsign = function (val, secret) {
  if ('string' != typeof val) throw new TypeError("Signed cookie string must be provided.");
  if ('string' != typeof secret) throw new TypeError("Secret string must be provided.");
  var str = val.slice(0, val.lastIndexOf('.')),
      mac = exports.sign(str, secret);

  return sha1(mac) == sha1(val) ? str : false;
};

/**
 * Private
 */

function sha1(str) {
  return crypto.createHash('sha1').update(str).digest('hex');
}

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 * @public
 */

exports.parse = parse;
exports.serialize = serialize;

/**
 * Module variables.
 * @private
 */

var decode = decodeURIComponent;
var encode = encodeURIComponent;
var pairSplitRegExp = /; */;

/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */

var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

function parse(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string');
  }

  var obj = {};
  var opt = options || {};
  var pairs = str.split(pairSplitRegExp);
  var dec = opt.decode || decode;

  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i];
    var eq_idx = pair.indexOf('=');

    // skip things that don't look like key=value
    if (eq_idx < 0) {
      continue;
    }

    var key = pair.substr(0, eq_idx).trim();
    var val = pair.substr(++eq_idx, pair.length).trim();

    // quoted values
    if ('"' == val[0]) {
      val = val.slice(1, -1);
    }

    // only assign once
    if (undefined == obj[key]) {
      obj[key] = tryDecode(val, dec);
    }
  }

  return obj;
}

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */

function serialize(name, val, options) {
  var opt = options || {};
  var enc = opt.encode || encode;

  if (typeof enc !== 'function') {
    throw new TypeError('option encode is invalid');
  }

  if (!fieldContentRegExp.test(name)) {
    throw new TypeError('argument name is invalid');
  }

  var value = enc(val);

  if (value && !fieldContentRegExp.test(value)) {
    throw new TypeError('argument val is invalid');
  }

  var str = name + '=' + value;

  if (null != opt.maxAge) {
    var maxAge = opt.maxAge - 0;
    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
    str += '; Max-Age=' + Math.floor(maxAge);
  }

  if (opt.domain) {
    if (!fieldContentRegExp.test(opt.domain)) {
      throw new TypeError('option domain is invalid');
    }

    str += '; Domain=' + opt.domain;
  }

  if (opt.path) {
    if (!fieldContentRegExp.test(opt.path)) {
      throw new TypeError('option path is invalid');
    }

    str += '; Path=' + opt.path;
  }

  if (opt.expires) {
    if (typeof opt.expires.toUTCString !== 'function') {
      throw new TypeError('option expires is invalid');
    }

    str += '; Expires=' + opt.expires.toUTCString();
  }

  if (opt.httpOnly) {
    str += '; HttpOnly';
  }

  if (opt.secure) {
    str += '; Secure';
  }

  if (opt.sameSite) {
    var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;

    switch (sameSite) {
      case true:
        str += '; SameSite=Strict';
        break;
      case 'lax':
        str += '; SameSite=Lax';
        break;
      case 'strict':
        str += '; SameSite=Strict';
        break;
      default:
        throw new TypeError('option sameSite is invalid');
    }
  }

  return str;
}

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

function tryDecode(str, decode) {
  try {
    return decode(str);
  } catch (e) {
    return str;
  }
}

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * vary
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module exports.
 */

module.exports = vary;
module.exports.append = append;

/**
 * RegExp to match field-name in RFC 7230 sec 3.2
 *
 * field-name    = token
 * token         = 1*tchar
 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
 *               / DIGIT / ALPHA
 *               ; any VCHAR, except delimiters
 */

var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;

/**
 * Append a field to a vary header.
 *
 * @param {String} header
 * @param {String|Array} field
 * @return {String}
 * @public
 */

function append(header, field) {
  if (typeof header !== 'string') {
    throw new TypeError('header argument is required');
  }

  if (!field) {
    throw new TypeError('field argument is required');
  }

  // get fields array
  var fields = !Array.isArray(field) ? parse(String(field)) : field;

  // assert on invalid field names
  for (var j = 0; j < fields.length; j++) {
    if (!FIELD_NAME_REGEXP.test(fields[j])) {
      throw new TypeError('field argument contains an invalid header name');
    }
  }

  // existing, unspecified vary
  if (header === '*') {
    return header;
  }

  // enumerate current values
  var val = header;
  var vals = parse(header.toLowerCase());

  // unspecified vary
  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {
    return '*';
  }

  for (var i = 0; i < fields.length; i++) {
    var fld = fields[i].toLowerCase();

    // append value (case-preserving)
    if (vals.indexOf(fld) === -1) {
      vals.push(fld);
      val = val ? val + ', ' + fields[i] : fields[i];
    }
  }

  return val;
}

/**
 * Parse a vary header into an array.
 *
 * @param {String} header
 * @return {Array}
 * @private
 */

function parse(header) {
  var end = 0;
  var list = [];
  var start = 0;

  // gather tokens
  for (var i = 0, len = header.length; i < len; i++) {
    switch (header.charCodeAt(i)) {
      case 0x20:
        /*   */
        if (start === end) {
          start = end = i + 1;
        }
        break;
      case 0x2c:
        /* , */
        list.push(header.substring(start, end));
        start = end = i + 1;
        break;
      default:
        end = i + 1;
        break;
    }
  }

  // final token
  list.push(header.substring(start, end));

  return list;
}

/**
 * Mark that a request is varied on a header field.
 *
 * @param {Object} res
 * @param {String|Array} field
 * @public
 */

function vary(res, field) {
  if (!res || !res.getHeader || !res.setHeader) {
    // quack quack
    throw new TypeError('res argument is required');
  }

  // get existing header
  var val = res.getHeader('Vary') || '';
  var header = Array.isArray(val) ? val.join(', ') : String(val);

  // set new header
  if (val = append(header, field)) {
    res.setHeader('Vary', val);
  }
}

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * serve-static
 * Copyright(c) 2010 Sencha Inc.
 * Copyright(c) 2011 TJ Holowaychuk
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * Module dependencies.
 * @private
 */

var encodeUrl = __webpack_require__(37);
var escapeHtml = __webpack_require__(38);
var parseUrl = __webpack_require__(26);
var resolve = __webpack_require__(0).resolve;
var send = __webpack_require__(50);
var url = __webpack_require__(17);

/**
 * Module exports.
 * @public
 */

module.exports = serveStatic;
module.exports.mime = send.mime;

/**
 * @param {string} root
 * @param {object} [options]
 * @return {function}
 * @public
 */

function serveStatic(root, options) {
  if (!root) {
    throw new TypeError('root path required');
  }

  if (typeof root !== 'string') {
    throw new TypeError('root path must be a string');
  }

  // copy options object
  var opts = Object.create(options || null);

  // fall-though
  var fallthrough = opts.fallthrough !== false;

  // default redirect
  var redirect = opts.redirect !== false;

  // headers listener
  var setHeaders = opts.setHeaders;

  if (setHeaders && typeof setHeaders !== 'function') {
    throw new TypeError('option setHeaders must be function');
  }

  // setup options for send
  opts.maxage = opts.maxage || opts.maxAge || 0;
  opts.root = resolve(root);

  // construct directory listener
  var onDirectory = redirect ? createRedirectDirectoryListener() : createNotFoundDirectoryListener();

  return function serveStatic(req, res, next) {
    if (req.method !== 'GET' && req.method !== 'HEAD') {
      if (fallthrough) {
        return next();
      }

      // method not allowed
      res.statusCode = 405;
      res.setHeader('Allow', 'GET, HEAD');
      res.setHeader('Content-Length', '0');
      res.end();
      return;
    }

    var forwardError = !fallthrough;
    var originalUrl = parseUrl.original(req);
    var path = parseUrl(req).pathname;

    // make sure redirect occurs at mount
    if (path === '/' && originalUrl.pathname.substr(-1) !== '/') {
      path = '';
    }

    // create send stream
    var stream = send(req, path, opts);

    // add directory handler
    stream.on('directory', onDirectory);

    // add headers listener
    if (setHeaders) {
      stream.on('headers', setHeaders);
    }

    // add file listener for fallthrough
    if (fallthrough) {
      stream.on('file', function onFile() {
        // once file is determined, always forward error
        forwardError = true;
      });
    }

    // forward errors
    stream.on('error', function error(err) {
      if (forwardError || !(err.statusCode < 500)) {
        next(err);
        return;
      }

      next();
    });

    // pipe
    stream.pipe(res);
  };
}

/**
 * Collapse all leading slashes into a single slash
 * @private
 */
function collapseLeadingSlashes(str) {
  for (var i = 0; i < str.length; i++) {
    if (str.charCodeAt(i) !== 0x2f /* / */) {
        break;
      }
  }

  return i > 1 ? '/' + str.substr(i) : str;
}

/**
* Create a minimal HTML document.
*
* @param {string} title
* @param {string} body
* @private
*/

function createHtmlDocument(title, body) {
  return '<!DOCTYPE html>\n' + '<html lang="en">\n' + '<head>\n' + '<meta charset="utf-8">\n' + '<title>' + title + '</title>\n' + '</head>\n' + '<body>\n' + '<pre>' + body + '</pre>\n' + '</body>\n' + '</html>\n';
}

/**
 * Create a directory listener that just 404s.
 * @private
 */

function createNotFoundDirectoryListener() {
  return function notFound() {
    this.error(404);
  };
}

/**
 * Create a directory listener that performs a redirect.
 * @private
 */

function createRedirectDirectoryListener() {
  return function redirect(res) {
    if (this.hasTrailingSlash()) {
      this.error(404);
      return;
    }

    // get original URL
    var originalUrl = parseUrl.original(this.req);

    // append trailing slash
    originalUrl.path = null;
    originalUrl.pathname = collapseLeadingSlashes(originalUrl.pathname + '/');

    // reformat the URL
    var loc = encodeUrl(url.format(originalUrl));
    var doc = createHtmlDocument('Redirecting', 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + '</a>');

    // send redirect response
    res.statusCode = 301;
    res.setHeader('Content-Type', 'text/html; charset=UTF-8');
    res.setHeader('Content-Length', Buffer.byteLength(doc));
    res.setHeader('Content-Security-Policy', "default-src 'self'");
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('Location', loc);
    res.end(doc);
  };
}

/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = launch;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vscode_ws_jsonrpc__ = __webpack_require__(186);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vscode_ws_jsonrpc___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vscode_ws_jsonrpc__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__php_server__ = __webpack_require__(196);



function launch(socket) {
  const reader = new __WEBPACK_IMPORTED_MODULE_0_vscode_ws_jsonrpc__["WebSocketMessageReader"](socket);
  const writer = new __WEBPACK_IMPORTED_MODULE_0_vscode_ws_jsonrpc__["WebSocketMessageWriter"](socket);
  Object(__WEBPACK_IMPORTED_MODULE_1__php_server__["a" /* start */])(reader, writer);
}

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) 2017 TypeFox GmbH (http://www.typefox.io). All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
__export(__webpack_require__(11));
__export(__webpack_require__(86));
__export(__webpack_require__(191));
__export(__webpack_require__(51));
__export(__webpack_require__(88));
__export(__webpack_require__(91));
__export(__webpack_require__(195));

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(28);
var Is = __webpack_require__(27);
var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
    });
    function is(value) {
        var candidate = value;
        return candidate && (candidate === CancellationToken.None || candidate === CancellationToken.Cancelled || Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
    }
    CancellationToken.is = is;
})(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));
var shortcutEvent = Object.freeze(function (callback, context) {
    var handle = setTimeout(callback.bind(context), 0);
    return { dispose: function () {
            clearTimeout(handle);
        } };
});
var MutableToken = /** @class */function () {
    function MutableToken() {
        this._isCancelled = false;
    }
    MutableToken.prototype.cancel = function () {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this._emitter = undefined;
            }
        }
    };
    Object.defineProperty(MutableToken.prototype, "isCancellationRequested", {
        get: function () {
            return this._isCancelled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MutableToken.prototype, "onCancellationRequested", {
        get: function () {
            if (this._isCancelled) {
                return shortcutEvent;
            }
            if (!this._emitter) {
                this._emitter = new events_1.Emitter();
            }
            return this._emitter.event;
        },
        enumerable: true,
        configurable: true
    });
    return MutableToken;
}();
var CancellationTokenSource = /** @class */function () {
    function CancellationTokenSource() {}
    Object.defineProperty(CancellationTokenSource.prototype, "token", {
        get: function () {
            if (!this._token) {
                // be lazy and create the token only when
                // actually needed
                this._token = new MutableToken();
            }
            return this._token;
        },
        enumerable: true,
        configurable: true
    });
    CancellationTokenSource.prototype.cancel = function () {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        } else {
            this._token.cancel();
        }
    };
    CancellationTokenSource.prototype.dispose = function () {
        this.cancel();
    };
    return CancellationTokenSource;
}();
exports.CancellationTokenSource = CancellationTokenSource;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

Object.defineProperty(exports, "__esModule", { value: true });
var Touch;
(function (Touch) {
    Touch.None = 0;
    Touch.First = 1;
    Touch.Last = 2;
})(Touch = exports.Touch || (exports.Touch = {}));
var LinkedMap = /** @class */function () {
    function LinkedMap() {
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
    }
    LinkedMap.prototype.clear = function () {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
    };
    LinkedMap.prototype.isEmpty = function () {
        return !this._head && !this._tail;
    };
    Object.defineProperty(LinkedMap.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    LinkedMap.prototype.has = function (key) {
        return this._map.has(key);
    };
    LinkedMap.prototype.get = function (key) {
        var item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        return item.value;
    };
    LinkedMap.prototype.set = function (key, value, touch) {
        if (touch === void 0) {
            touch = Touch.None;
        }
        var item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== Touch.None) {
                this.touch(item, touch);
            }
        } else {
            item = { key: key, value: value, next: undefined, previous: undefined };
            switch (touch) {
                case Touch.None:
                    this.addItemLast(item);
                    break;
                case Touch.First:
                    this.addItemFirst(item);
                    break;
                case Touch.Last:
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
    };
    LinkedMap.prototype.delete = function (key) {
        var item = this._map.get(key);
        if (!item) {
            return false;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return true;
    };
    LinkedMap.prototype.shift = function () {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        var item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    };
    LinkedMap.prototype.forEach = function (callbackfn, thisArg) {
        var current = this._head;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            } else {
                callbackfn(current.value, current.key, this);
            }
            current = current.next;
        }
    };
    LinkedMap.prototype.forEachReverse = function (callbackfn, thisArg) {
        var current = this._tail;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            } else {
                callbackfn(current.value, current.key, this);
            }
            current = current.previous;
        }
    };
    LinkedMap.prototype.values = function () {
        var result = [];
        var current = this._head;
        while (current) {
            result.push(current.value);
            current = current.next;
        }
        return result;
    };
    LinkedMap.prototype.keys = function () {
        var result = [];
        var current = this._head;
        while (current) {
            result.push(current.key);
            current = current.next;
        }
        return result;
    };
    /* JSON RPC run on es5 which has no Symbol.iterator
    public keys(): IterableIterator<K> {
        let current = this._head;
        let iterator: IterableIterator<K> = {
            [Symbol.iterator]() {
                return iterator;
            },
            next():IteratorResult<K> {
                if (current) {
                    let result = { value: current.key, done: false };
                    current = current.next;
                    return result;
                } else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
      public values(): IterableIterator<V> {
        let current = this._head;
        let iterator: IterableIterator<V> = {
            [Symbol.iterator]() {
                return iterator;
            },
            next():IteratorResult<V> {
                if (current) {
                    let result = { value: current.value, done: false };
                    current = current.next;
                    return result;
                } else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    */
    LinkedMap.prototype.addItemFirst = function (item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        } else if (!this._head) {
            throw new Error('Invalid list');
        } else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
    };
    LinkedMap.prototype.addItemLast = function (item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        } else if (!this._tail) {
            throw new Error('Invalid list');
        } else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
    };
    LinkedMap.prototype.removeItem = function (item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        } else if (item === this._head) {
            this._head = item.next;
        } else if (item === this._tail) {
            this._tail = item.previous;
        } else {
            var next = item.next;
            var previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
    };
    LinkedMap.prototype.touch = function (item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if (touch !== Touch.First && touch !== Touch.Last) {
            return;
        }
        if (touch === Touch.First) {
            if (item === this._head) {
                return;
            }
            var next = item.next;
            var previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            } else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
        } else if (touch === Touch.Last) {
            if (item === this._tail) {
                return;
            }
            var next = item.next;
            var previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            } else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
        }
    };
    return LinkedMap;
}();
exports.LinkedMap = LinkedMap;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __webpack_require__(0);
var os_1 = __webpack_require__(87);
var crypto_1 = __webpack_require__(15);
var net_1 = __webpack_require__(21);
var messageReader_1 = __webpack_require__(41);
var messageWriter_1 = __webpack_require__(42);
function generateRandomPipeName() {
    var randomSuffix = crypto_1.randomBytes(21).toString('hex');
    if (process.platform === 'win32') {
        return "\\\\.\\pipe\\vscode-jsonrpc-" + randomSuffix + "-sock";
    } else {
        // Mac/Unix: use socket file
        return path_1.join(os_1.tmpdir(), "vscode-" + randomSuffix + ".sock");
    }
}
exports.generateRandomPipeName = generateRandomPipeName;
function createClientPipeTransport(pipeName, encoding) {
    if (encoding === void 0) {
        encoding = 'utf-8';
    }
    var connectResolve;
    var connected = new Promise(function (resolve, _reject) {
        connectResolve = resolve;
    });
    return new Promise(function (resolve, reject) {
        var server = net_1.createServer(function (socket) {
            server.close();
            connectResolve([new messageReader_1.SocketMessageReader(socket, encoding), new messageWriter_1.SocketMessageWriter(socket, encoding)]);
        });
        server.on('error', reject);
        server.listen(pipeName, function () {
            server.removeListener('error', reject);
            resolve({
                onConnected: function () {
                    return connected;
                }
            });
        });
    });
}
exports.createClientPipeTransport = createClientPipeTransport;
function createServerPipeTransport(pipeName, encoding) {
    if (encoding === void 0) {
        encoding = 'utf-8';
    }
    var socket = net_1.createConnection(pipeName);
    return [new messageReader_1.SocketMessageReader(socket, encoding), new messageWriter_1.SocketMessageWriter(socket, encoding)];
}
exports.createServerPipeTransport = createServerPipeTransport;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
var net_1 = __webpack_require__(21);
var messageReader_1 = __webpack_require__(41);
var messageWriter_1 = __webpack_require__(42);
function createClientSocketTransport(port, encoding) {
    if (encoding === void 0) {
        encoding = 'utf-8';
    }
    var connectResolve;
    var connected = new Promise(function (resolve, _reject) {
        connectResolve = resolve;
    });
    return new Promise(function (resolve, reject) {
        var server = net_1.createServer(function (socket) {
            server.close();
            connectResolve([new messageReader_1.SocketMessageReader(socket, encoding), new messageWriter_1.SocketMessageWriter(socket, encoding)]);
        });
        server.on('error', reject);
        server.listen(port, '127.0.0.1', function () {
            server.removeListener('error', reject);
            resolve({
                onConnected: function () {
                    return connected;
                }
            });
        });
    });
}
exports.createClientSocketTransport = createClientSocketTransport;
function createServerSocketTransport(port, encoding) {
    if (encoding === void 0) {
        encoding = 'utf-8';
    }
    var socket = net_1.createConnection(port, '127.0.0.1');
    return [new messageReader_1.SocketMessageReader(socket, encoding), new messageWriter_1.SocketMessageWriter(socket, encoding)];
}
exports.createServerSocketTransport = createServerSocketTransport;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) 2017 TypeFox GmbH (http://www.typefox.io). All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var events_1 = __webpack_require__(28);
exports.Disposable = events_1.Disposable;
var DisposableCollection = function () {
    function DisposableCollection() {
        this.disposables = [];
    }
    DisposableCollection.prototype.dispose = function () {
        while (this.disposables.length !== 0) {
            this.disposables.pop().dispose();
        }
    };
    DisposableCollection.prototype.push = function (disposable) {
        var disposables = this.disposables;
        disposables.push(disposable);
        return {
            dispose: function () {
                var index = disposables.indexOf(disposable);
                if (index !== -1) {
                    disposables.splice(index, 1);
                }
            }
        };
    };
    return DisposableCollection;
}();
exports.DisposableCollection = DisposableCollection;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) 2017 TypeFox GmbH (http://www.typefox.io). All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var messageReader_1 = __webpack_require__(41);
var stream_1 = __webpack_require__(52);
var AbstractStreamMessageReader = function (_super) {
    __extends(AbstractStreamMessageReader, _super);
    function AbstractStreamMessageReader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractStreamMessageReader.prototype.readMessage = function (message, callback) {
        var _this = this;
        var readable = new stream_1.ReadableStream(message);
        var reader = new messageReader_1.StreamMessageReader(readable);
        reader.onError(function (e) {
            return _this.fireError(e);
        });
        reader.onClose(function () {
            return _this.fireClose();
        });
        reader.onPartialMessage(function (info) {
            return _this.firePartialMessage(info);
        });
        reader.listen(callback);
    };
    return AbstractStreamMessageReader;
}(messageReader_1.AbstractMessageReader);
exports.AbstractStreamMessageReader = AbstractStreamMessageReader;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var messageWriter_1 = __webpack_require__(42);
var stream_1 = __webpack_require__(52);
var AbstractStreamMessageWriter = function (_super) {
    __extends(AbstractStreamMessageWriter, _super);
    function AbstractStreamMessageWriter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractStreamMessageWriter.prototype.write = function (msg) {
        var content = this.writeMessage(msg);
        this.send(content);
    };
    AbstractStreamMessageWriter.prototype.writeMessage = function (msg) {
        var _this = this;
        var writable = new stream_1.WritableStream();
        var writer = new messageWriter_1.StreamMessageWriter(writable);
        writer.onError(function (e) {
            return _this.fireError(e);
        });
        writer.onClose(function () {
            return _this.fireClose();
        });
        writer.write(msg);
        writable.end();
        return writable.data.toString();
    };
    return AbstractStreamMessageWriter;
}(messageWriter_1.AbstractMessageWriter);
exports.AbstractStreamMessageWriter = AbstractStreamMessageWriter;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) 2017 TypeFox GmbH (http://www.typefox.io). All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var vscode_jsonrpc_1 = __webpack_require__(11);
var reader_1 = __webpack_require__(89);
var writer_1 = __webpack_require__(90);
function createWebSocketConnection(socket, logger) {
    var messageReader = new reader_1.WebSocketMessageReader(socket);
    var messageWriter = new writer_1.WebSocketMessageWriter(socket);
    var connection = vscode_jsonrpc_1.createMessageConnection(messageReader, messageWriter, logger);
    connection.onClose(function () {
        return connection.dispose();
    });
    return connection;
}
exports.createWebSocketConnection = createWebSocketConnection;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var socket_1 = __webpack_require__(88);
var logger_1 = __webpack_require__(91);
function listen(options) {
    var webSocket = options.webSocket,
        onConnection = options.onConnection;
    var logger = options.logger || new logger_1.ConsoleLogger();
    webSocket.onopen = function () {
        var socket = toSocket(webSocket);
        var connection = socket_1.createWebSocketConnection(socket, logger);
        onConnection(connection);
    };
}
exports.listen = listen;
function toSocket(webSocket) {
    return {
        send: function (content) {
            return webSocket.send(content);
        },
        onMessage: function (cb) {
            return webSocket.onmessage = function (event) {
                return cb(event.data);
            };
        },
        onError: function (cb) {
            return webSocket.onerror = function (event) {
                if (event instanceof ErrorEvent) {
                    cb(event.message);
                }
            };
        },
        onClose: function (cb) {
            return webSocket.onclose = function (event) {
                return cb(event.code, event.reason);
            };
        },
        dispose: function () {
            return webSocket.close();
        }
    };
}
exports.toSocket = toSocket;

/***/ }),
/* 196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = start;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vscode_languageserver__ = __webpack_require__(197);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vscode_languageserver___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vscode_languageserver__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_intelephense__ = __webpack_require__(210);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_intelephense___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_intelephense__);

// import Uri from 'vscode-uri';


let initialisedAt;

function elapsed(st) {
  if (!st) {
    return -1;
  }
  const diff = process.hrtime(st);
  return diff[0] * 1000 + diff[1] / 1000000;
}

class PhpServer {
  constructor(connection) {
    this.connection = connection;
    this.documents = new __WEBPACK_IMPORTED_MODULE_0_vscode_languageserver__["TextDocuments"]();
    this.workspaceRoot = undefined;
    // this.LanguageService = getLanguageService({
    //   schemaRequestService: this.resovleSchema.bind(this),
    // });
    this.pendingValidationRequests = new Map();

    this.documents.listen(this.connection);
    // this.documents.onDidChangeContent(change => this.validate(change.document));
    // this.documents.onDidClose((event) => {
    //   this.cleanPendingValidation(event.document);
    //   this.cleanDiagnostics(event.document);
    // });

    this.connection.onInitialize(params => {
      initialisedAt = process.hrtime();
      this.connection.console.info('Initialising');
      const initOptions = {
        storagePath: undefined,
        logWriter: {
          info: connection.console.info,
          warn: connection.console.warn,
          error: connection.console.error
        },
        clearCache: undefined
      };

      return __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].initialise(initOptions).then(() => {
        __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].onPublishDiagnostics(args => {
          connection.sendDiagnostics(args);
        });
        connection.console.info(`Initialised in ${elapsed(initialisedAt).toFixed()} ms`);

        return {
          capabilities: {
            textDocumentSync: __WEBPACK_IMPORTED_MODULE_0_vscode_languageserver__["TextDocumentSyncKind"].Incremental,
            documentSymbolProvider: true,
            workspaceSymbolProvider: true,
            completionProvider: {
              triggerCharacters: ['$', '>', ':', '\\', // php
              '.', '<', '/']
            },
            signatureHelpProvider: {
              triggerCharacters: ['(', ',']
            },
            definitionProvider: true,
            // documentFormattingProvider: true,
            documentRangeFormattingProvider: true,
            referencesProvider: true,
            documentLinkProvider: { resolveProvider: true },
            hoverProvider: true,
            documentHighlightProvider: true
          }
        };
      });
    });

    this.connection.onCodeAction(params => {
      this.codeAction(params);
    });

    this.connection.onHover(params => {
      console.log(params);
      return __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].provideHover(params.textDocument.uri, params.position);
    });

    // this.connection.onCompletion((params) => this.completion(params));
    // this.connection.onCompletionResolve(item => this.resolveCompletion(item));
    // this.connection.onExecuteCommand((params) => this.executeCommand(params));
    // this.connection.onDocumentSymbol((params) => this.findDocumentSymbols(params));
    // this.connection.onDocumentRangeFormatting((params) => this.format(params));
    this.connection.onDocumentHighlight(params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].provideHighlights(params.textDocument.uri, params.position));

    this.connection.onDidOpenTextDocument(params => {
      if (params.textDocument.text.length > 1000000) {
        connection.console.warn(`${params.textDocument.uri} not opened -- over max file size.`);
        return;
      }
      __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].openDocument(params.textDocument);
    });

    this.connection.onDidChangeTextDocument(params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].editDocument(params.textDocument, params.contentChanges));

    this.connection.onDidCloseTextDocument(params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].closeDocument(params.textDocument));

    this.connection.onDocumentSymbol(params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].documentSymbols(params.textDocument));

    this.connection.onWorkspaceSymbol(params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].workspaceSymbols(params.query));

    connection.onReferences(params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].provideReferences(params.textDocument, params.position, params.context));

    connection.onCompletion(params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].provideCompletions(params.textDocument, params.position));

    connection.onSignatureHelp(params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].provideSignatureHelp(params.textDocument, params.position));

    connection.onDefinition(params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].provideDefinition(params.textDocument, params.position));

    connection.onDocumentRangeFormatting(params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].provideDocumentRangeFormattingEdits(params.textDocument, params.range, params.options));

    connection.onShutdown(__WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].shutdown);

    connection.onRequest('discoverSymbols', params => {
      if (params.textDocument.text.length > 1000000) {
        connection.console.warn(`${params.textDocument.uri} exceeds max file size.`);
        return 0;
      }

      return __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].discoverSymbols(params.textDocument);
    });

    connection.onRequest('discoverReferences', params => {
      if (params.textDocument.text.length > 1000000) {
        connection.console.warn(`${params.textDocument.uri} exceeds max file size.`);
        return 0;
      }
      return __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].discoverReferences(params.textDocument);
    });

    connection.onRequest('forget', params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].forget(params.uri));

    connection.onRequest('importSymbol', params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].provideContractFqnTextEdits(params.uri, params.position, params.alias));

    connection.onRequest('knownDocuments', () => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].knownDocuments());

    connection.onRequest('documentLanguageRanges', params => __WEBPACK_IMPORTED_MODULE_1_intelephense__["Intelephense"].documentLanguageRanges(params.textDocument));
  }

  start() {
    this.connection.listen();
  }

  codeAction(params) {
    return [{
      title: 'Upper Case Document',
      command: 'php.documentUpper',
      arguments: [Object.assign({}, params.textDocument, {
        version: this.documents.get(params.textDocument.uri).version
      })]
    }];
  }
}
/* unused harmony export PhpServer */


function start(reader, writer) {
  const connection = Object(__WEBPACK_IMPORTED_MODULE_0_vscode_languageserver__["createConnection"])(reader, writer);
  const server = new PhpServer(connection);
  server.start();
  return server;
}

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="./thenable.ts" />


function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_protocol_1 = __webpack_require__(43);
exports.Event = vscode_languageserver_protocol_1.Event;
const configuration_1 = __webpack_require__(205);
const workspaceFolders_1 = __webpack_require__(206);
const Is = __webpack_require__(92);
const UUID = __webpack_require__(207);
// ------------- Reexport the API surface of the language worker API ----------------------
__export(__webpack_require__(43));
const fm = __webpack_require__(208);
var Files;
(function (Files) {
    Files.uriToFilePath = fm.uriToFilePath;
    Files.resolveGlobalNodePath = fm.resolveGlobalNodePath;
    Files.resolveGlobalYarnPath = fm.resolveGlobalYarnPath;
    Files.resolve = fm.resolve;
    Files.resolveModule = fm.resolveModule;
    Files.resolveModule2 = fm.resolveModule2;
    Files.resolveModulePath = fm.resolveModulePath;
})(Files = exports.Files || (exports.Files = {}));
let shutdownReceived = false;
let exitTimer = undefined;
function setupExitTimer() {
    const argName = '--clientProcessId';
    function runTimer(value) {
        try {
            let processId = parseInt(value);
            if (!isNaN(processId)) {
                exitTimer = setInterval(() => {
                    try {
                        process.kill(processId, 0);
                    } catch (ex) {
                        // Parent process doesn't exist anymore. Exit the server.
                        process.exit(shutdownReceived ? 0 : 1);
                    }
                }, 3000);
            }
        } catch (e) {
            // Ignore errors;
        }
    }
    for (let i = 2; i < process.argv.length; i++) {
        let arg = process.argv[i];
        if (arg === argName && i + 1 < process.argv.length) {
            runTimer(process.argv[i + 1]);
            return;
        } else {
            let args = arg.split('=');
            if (args[0] === argName) {
                runTimer(args[1]);
            }
        }
    }
}
setupExitTimer();
function null2Undefined(value) {
    if (value === null) {
        return void 0;
    }
    return value;
}
/**
 * A manager for simple text documents
 */
class TextDocuments {
    /**
     * Create a new text document manager.
     */
    constructor() {
        this._documents = Object.create(null);
        this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();
        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
        this._onWillSave = new vscode_languageserver_protocol_1.Emitter();
    }
    /**
     * Returns the [TextDocumentSyncKind](#TextDocumentSyncKind) used by
     * this text document manager.
     */
    get syncKind() {
        return vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been opened or the content changes.
     */
    get onDidChangeContent() {
        return this._onDidChangeContent.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been opened.
     */
    get onDidOpen() {
        return this._onDidOpen.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * will be saved.
     */
    get onWillSave() {
        return this._onWillSave.event;
    }
    /**
     * Sets a handler that will be called if a participant wants to provide
     * edits during a text document save.
     */
    onWillSaveWaitUntil(handler) {
        this._willSaveWaitUntil = handler;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been saved.
     */
    get onDidSave() {
        return this._onDidSave.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been closed.
     */
    get onDidClose() {
        return this._onDidClose.event;
    }
    /**
     * Returns the document for the given URI. Returns undefined if
     * the document is not mananged by this instance.
     *
     * @param uri The text document's URI to retrieve.
     * @return the text document or `undefined`.
     */
    get(uri) {
        return this._documents[uri];
    }
    /**
     * Returns all text documents managed by this instance.
     *
     * @return all text documents.
     */
    all() {
        return Object.keys(this._documents).map(key => this._documents[key]);
    }
    /**
     * Returns the URIs of all text documents managed by this instance.
     *
     * @return the URI's of all text documents.
     */
    keys() {
        return Object.keys(this._documents);
    }
    /**
     * Listens for `low level` notification on the given connection to
     * update the text documents managed by this instance.
     *
     * @param connection The connection to listen on.
     */
    listen(connection) {
        function isUpdateableDocument(value) {
            return Is.func(value.update);
        }
        connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Full;
        connection.onDidOpenTextDocument(event => {
            let td = event.textDocument;
            let document = vscode_languageserver_protocol_1.TextDocument.create(td.uri, td.languageId, td.version, td.text);
            this._documents[td.uri] = document;
            let toFire = Object.freeze({ document });
            this._onDidOpen.fire(toFire);
            this._onDidChangeContent.fire(toFire);
        });
        connection.onDidChangeTextDocument(event => {
            let td = event.textDocument;
            let changes = event.contentChanges;
            let last = changes.length > 0 ? changes[changes.length - 1] : undefined;
            if (last) {
                let document = this._documents[td.uri];
                if (document && isUpdateableDocument(document)) {
                    document.update(last, td.version);
                    this._onDidChangeContent.fire(Object.freeze({ document }));
                }
            }
        });
        connection.onDidCloseTextDocument(event => {
            let document = this._documents[event.textDocument.uri];
            if (document) {
                delete this._documents[event.textDocument.uri];
                this._onDidClose.fire(Object.freeze({ document }));
            }
        });
        connection.onWillSaveTextDocument(event => {
            let document = this._documents[event.textDocument.uri];
            if (document) {
                this._onWillSave.fire(Object.freeze({ document, reason: event.reason }));
            }
        });
        connection.onWillSaveTextDocumentWaitUntil((event, token) => {
            let document = this._documents[event.textDocument.uri];
            if (document && this._willSaveWaitUntil) {
                return this._willSaveWaitUntil(Object.freeze({ document, reason: event.reason }), token);
            } else {
                return [];
            }
        });
        connection.onDidSaveTextDocument(event => {
            let document = this._documents[event.textDocument.uri];
            if (document) {
                this._onDidSave.fire(Object.freeze({ document }));
            }
        });
    }
}
exports.TextDocuments = TextDocuments;
/**
 * Helps tracking error message. Equal occurences of the same
 * message are only stored once. This class is for example
 * useful if text documents are validated in a loop and equal
 * error message should be folded into one.
 */
class ErrorMessageTracker {
    constructor() {
        this._messages = Object.create(null);
    }
    /**
     * Add a message to the tracker.
     *
     * @param message The message to add.
     */
    add(message) {
        let count = this._messages[message];
        if (!count) {
            count = 0;
        }
        count++;
        this._messages[message] = count;
    }
    /**
     * Send all tracked messages to the connection's window.
     *
     * @param connection The connection established between client and server.
     */
    sendErrors(connection) {
        Object.keys(this._messages).forEach(message => {
            connection.window.showErrorMessage(message);
        });
    }
}
exports.ErrorMessageTracker = ErrorMessageTracker;
var BulkRegistration;
(function (BulkRegistration) {
    /**
     * Creates a new bulk registration.
     * @return an empty bulk registration.
     */
    function create() {
        return new BulkRegistrationImpl();
    }
    BulkRegistration.create = create;
})(BulkRegistration = exports.BulkRegistration || (exports.BulkRegistration = {}));
class BulkRegistrationImpl {
    constructor() {
        this._registrations = [];
        this._registered = new Set();
    }
    add(type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        if (this._registered.has(method)) {
            throw new Error(`${method} is already added to this registration`);
        }
        const id = UUID.generateUuid();
        this._registrations.push({
            id: id,
            method: method,
            registerOptions: registerOptions || {}
        });
        this._registered.add(method);
    }
    asRegistrationParams() {
        return {
            registrations: this._registrations
        };
    }
}
var BulkUnregistration;
(function (BulkUnregistration) {
    function create() {
        return new BulkUnregistrationImpl(undefined, []);
    }
    BulkUnregistration.create = create;
})(BulkUnregistration = exports.BulkUnregistration || (exports.BulkUnregistration = {}));
class BulkUnregistrationImpl {
    constructor(_connection, unregistrations) {
        this._connection = _connection;
        this._unregistrations = new Map();
        unregistrations.forEach(unregistration => {
            this._unregistrations.set(unregistration.method, unregistration);
        });
    }
    get isAttached() {
        return !!this._connection;
    }
    attach(connection) {
        this._connection = connection;
    }
    add(unregistration) {
        this._unregistrations.set(unregistration.method, unregistration);
    }
    dispose() {
        let unregistrations = [];
        for (let unregistration of this._unregistrations.values()) {
            unregistrations.push(unregistration);
        }
        let params = {
            unregisterations: unregistrations
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, _error => {
            this._connection.console.info(`Bulk unregistration failed.`);
        });
    }
    disposeSingle(arg) {
        const method = Is.string(arg) ? arg : arg.method;
        const unregistration = this._unregistrations.get(method);
        if (!unregistration) {
            return false;
        }
        let params = {
            unregisterations: [unregistration]
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {
            this._unregistrations.delete(method);
        }, _error => {
            this._connection.console.info(`Unregistering request handler for ${unregistration.id} failed.`);
        });
        return true;
    }
}
class ConnectionLogger {
    constructor() {}
    rawAttach(connection) {
        this._rawConnection = connection;
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    fillServerCapabilities(_capabilities) {}
    initialize(_capabilities) {}
    error(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Error, message);
    }
    warn(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);
    }
    info(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Info, message);
    }
    log(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Log, message);
    }
    send(type, message) {
        if (this._rawConnection) {
            this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, { type, message });
        }
    }
}
class RemoteWindowImpl {
    constructor() {}
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {}
    fillServerCapabilities(_capabilities) {}
    showErrorMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Error, message, actions };
        return this._connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
    showWarningMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Warning, message, actions };
        return this._connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
    showInformationMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Info, message, actions };
        return this._connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
}
class RemoteClientImpl {
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {}
    fillServerCapabilities(_capabilities) {}
    register(typeOrRegistrations, registerOptionsOrType, registerOptions) {
        if (typeOrRegistrations instanceof BulkRegistrationImpl) {
            return this.registerMany(typeOrRegistrations);
        } else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {
            return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);
        } else {
            return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);
        }
    }
    registerSingle1(unregistration, type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        const id = UUID.generateUuid();
        let params = {
            registrations: [{ id, method, registerOptions: registerOptions || {} }]
        };
        if (!unregistration.isAttached) {
            unregistration.attach(this._connection);
        }
        return this._connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(_result => {
            unregistration.add({ id: id, method: method });
            return unregistration;
        }, _error => {
            this.connection.console.info(`Registering request handler for ${method} failed.`);
            return Promise.reject(_error);
        });
    }
    registerSingle2(type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        const id = UUID.generateUuid();
        let params = {
            registrations: [{ id, method, registerOptions: registerOptions || {} }]
        };
        return this._connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(_result => {
            return vscode_languageserver_protocol_1.Disposable.create(() => {
                this.unregisterSingle(id, method);
            });
        }, _error => {
            this.connection.console.info(`Registering request handler for ${method} failed.`);
            return Promise.reject(_error);
        });
    }
    unregisterSingle(id, method) {
        let params = {
            unregisterations: [{ id, method }]
        };
        return this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(undefined, _error => {
            this.connection.console.info(`Unregistering request handler for ${id} failed.`);
        });
    }
    registerMany(registrations) {
        let params = registrations.asRegistrationParams();
        return this._connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {
            return new BulkUnregistrationImpl(this._connection, params.registrations.map(registration => {
                return { id: registration.id, method: registration.method };
            }));
        }, _error => {
            this.connection.console.info(`Bulk registration failed.`);
            return Promise.reject(_error);
        });
    }
}
class _RemoteWorkspaceImpl {
    constructor() {}
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {}
    fillServerCapabilities(_capabilities) {}
    applyEdit(edit) {
        let params = {
            edit
        };
        return this._connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);
    }
}
const RemoteWorkspaceImpl = workspaceFolders_1.WorkspaceFoldersFeature(configuration_1.ConfigurationFeature(_RemoteWorkspaceImpl));
class TracerImpl {
    constructor() {
        this._trace = vscode_languageserver_protocol_1.Trace.Off;
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {}
    fillServerCapabilities(_capabilities) {}
    set trace(value) {
        this._trace = value;
    }
    log(message, verbose) {
        if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {
            return;
        }
        this._connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {
            message: message,
            verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : undefined
        });
    }
}
class TelemetryImpl {
    constructor() {}
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {}
    fillServerCapabilities(_capabilities) {}
    logEvent(data) {
        this._connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data);
    }
}
function combineConsoleFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineConsoleFeatures = combineConsoleFeatures;
function combineTelemetryFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineTelemetryFeatures = combineTelemetryFeatures;
function combineTracerFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineTracerFeatures = combineTracerFeatures;
function combineClientFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineClientFeatures = combineClientFeatures;
function combineWindowFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineWindowFeatures = combineWindowFeatures;
function combineWorkspaceFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineWorkspaceFeatures = combineWorkspaceFeatures;
function combineFeatures(one, two) {
    function combine(one, two, func) {
        if (one && two) {
            return func(one, two);
        } else if (one) {
            return one;
        } else {
            return two;
        }
    }
    let result = {
        __brand: 'features',
        console: combine(one.console, two.console, combineConsoleFeatures),
        tracer: combine(one.tracer, two.tracer, combineTracerFeatures),
        telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),
        client: combine(one.client, two.client, combineClientFeatures),
        window: combine(one.window, two.window, combineWindowFeatures),
        workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures)
    };
    return result;
}
exports.combineFeatures = combineFeatures;
function createConnection(arg1, arg2, arg3, arg4) {
    let factories;
    let input;
    let output;
    let strategy;
    if (arg1 !== void 0 && arg1.__brand === 'features') {
        factories = arg1;
        arg1 = arg2;
        arg2 = arg3;
        arg3 = arg4;
    }
    if (vscode_languageserver_protocol_1.ConnectionStrategy.is(arg1)) {
        strategy = arg1;
    } else {
        input = arg1;
        output = arg2;
        strategy = arg3;
    }
    return _createConnection(input, output, strategy, factories);
}
exports.createConnection = createConnection;
function _createConnection(input, output, strategy, factories) {
    if (!input && !output && process.argv.length > 2) {
        let port = void 0;
        let pipeName = void 0;
        let argv = process.argv.slice(2);
        for (let i = 0; i < argv.length; i++) {
            let arg = argv[i];
            if (arg === '--node-ipc') {
                input = new vscode_languageserver_protocol_1.IPCMessageReader(process);
                output = new vscode_languageserver_protocol_1.IPCMessageWriter(process);
                break;
            } else if (arg === '--stdio') {
                input = process.stdin;
                output = process.stdout;
                break;
            } else if (arg === '--socket') {
                port = parseInt(argv[i + 1]);
                break;
            } else if (arg === '--pipe') {
                pipeName = argv[i + 1];
                break;
            } else {
                var args = arg.split('=');
                if (args[0] === '--socket') {
                    port = parseInt(args[1]);
                    break;
                } else if (args[0] === '--pipe') {
                    pipeName = args[1];
                    break;
                }
            }
        }
        if (port) {
            let transport = vscode_languageserver_protocol_1.createServerSocketTransport(port);
            input = transport[0];
            output = transport[1];
        } else if (pipeName) {
            let transport = vscode_languageserver_protocol_1.createServerPipeTransport(pipeName);
            input = transport[0];
            output = transport[1];
        }
    }
    var commandLineMessage = "Use arguments of createConnection or set command line parameters: '--node-ipc', '--stdio' or '--socket={number}'";
    if (!input) {
        throw new Error("Connection input stream is not set. " + commandLineMessage);
    }
    if (!output) {
        throw new Error("Connection output stream is not set. " + commandLineMessage);
    }
    // Backwards compatibility
    if (Is.func(input.read) && Is.func(input.on)) {
        let inputStream = input;
        inputStream.on('end', () => {
            process.exit(shutdownReceived ? 0 : 1);
        });
        inputStream.on('close', () => {
            process.exit(shutdownReceived ? 0 : 1);
        });
    }
    const logger = factories && factories.console ? new (factories.console(ConnectionLogger))() : new ConnectionLogger();
    const connection = vscode_languageserver_protocol_1.createProtocolConnection(input, output, logger, strategy);
    logger.rawAttach(connection);
    const tracer = factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl();
    const telemetry = factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl();
    const client = factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl();
    const remoteWindow = factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl();
    const workspace = factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl();
    const allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace];
    function asThenable(value) {
        if (Is.thenable(value)) {
            return value;
        } else {
            return Promise.resolve(value);
        }
    }
    let shutdownHandler = undefined;
    let initializeHandler = undefined;
    let exitHandler = undefined;
    let protocolConnection = {
        listen: () => connection.listen(),
        sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),
        onRequest: (type, handler) => connection.onRequest(type, handler),
        sendNotification: (type, param) => {
            const method = Is.string(type) ? type : type.method;
            if (arguments.length === 1) {
                connection.sendNotification(method);
            } else {
                connection.sendNotification(method, param);
            }
        },
        onNotification: (type, handler) => connection.onNotification(type, handler),
        onInitialize: handler => initializeHandler = handler,
        onInitialized: handler => connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),
        onShutdown: handler => shutdownHandler = handler,
        onExit: handler => exitHandler = handler,
        get console() {
            return logger;
        },
        get telemetry() {
            return telemetry;
        },
        get tracer() {
            return tracer;
        },
        get client() {
            return client;
        },
        get window() {
            return remoteWindow;
        },
        get workspace() {
            return workspace;
        },
        onDidChangeConfiguration: handler => connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),
        onDidChangeWatchedFiles: handler => connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),
        __textDocumentSync: undefined,
        onDidOpenTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),
        onDidChangeTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),
        onDidCloseTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),
        onWillSaveTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),
        onWillSaveTextDocumentWaitUntil: handler => connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),
        onDidSaveTextDocument: handler => connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),
        sendDiagnostics: params => connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),
        onHover: handler => connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, handler),
        onCompletion: handler => connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, handler),
        onCompletionResolve: handler => connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),
        onSignatureHelp: handler => connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, handler),
        onDefinition: handler => connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, handler),
        onTypeDefinition: handler => connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, handler),
        onImplementation: handler => connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, handler),
        onReferences: handler => connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, handler),
        onDocumentHighlight: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, handler),
        onDocumentSymbol: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, handler),
        onWorkspaceSymbol: handler => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, handler),
        onCodeAction: handler => connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, handler),
        onCodeLens: handler => connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, handler),
        onCodeLensResolve: handler => connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, handler),
        onDocumentFormatting: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, handler),
        onDocumentRangeFormatting: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, handler),
        onDocumentOnTypeFormatting: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, handler),
        onRenameRequest: handler => connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, handler),
        onDocumentLinks: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, handler),
        onDocumentLinkResolve: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, handler),
        onDocumentColor: handler => connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, handler),
        onColorPresentation: handler => connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, handler),
        onExecuteCommand: handler => connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, handler),
        dispose: () => connection.dispose()
    };
    for (let remote of allRemotes) {
        remote.attach(protocolConnection);
    }
    connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, params => {
        if (Is.number(params.processId) && exitTimer === void 0) {
            // We received a parent process id. Set up a timer to periodically check
            // if the parent is still alive.
            setInterval(() => {
                try {
                    process.kill(params.processId, 0);
                } catch (ex) {
                    // Parent process doesn't exist anymore. Exit the server.
                    process.exit(shutdownReceived ? 0 : 1);
                }
            }, 3000);
        }
        if (Is.string(params.trace)) {
            tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);
        }
        for (let remote of allRemotes) {
            remote.initialize(params.capabilities);
        }
        if (initializeHandler) {
            let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token);
            return asThenable(result).then(value => {
                if (value instanceof vscode_languageserver_protocol_1.ResponseError) {
                    return value;
                }
                let result = value;
                if (!result) {
                    result = { capabilities: {} };
                }
                let capabilities = result.capabilities;
                if (!capabilities) {
                    capabilities = {};
                    result.capabilities = capabilities;
                }
                if (!capabilities.textDocumentSync) {
                    capabilities.textDocumentSync = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                } else if (!Is.number(capabilities.textDocumentSync) && !Is.number(capabilities.textDocumentSync.change)) {
                    capabilities.textDocumentSync.change = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                }
                for (let remote of allRemotes) {
                    remote.fillServerCapabilities(capabilities);
                }
                return result;
            });
        } else {
            let result = { capabilities: { textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None } };
            for (let remote of allRemotes) {
                remote.fillServerCapabilities(result.capabilities);
            }
            return result;
        }
    });
    connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {
        shutdownReceived = true;
        if (shutdownHandler) {
            return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);
        } else {
            return undefined;
        }
    });
    connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {
        try {
            if (exitHandler) {
                exitHandler();
            }
        } finally {
            if (shutdownReceived) {
                process.exit(0);
            } else {
                process.exit(1);
            }
        }
    });
    connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, params => {
        tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);
    });
    return protocolConnection;
}
// Export the protocol currently in proposed state.
var ProposedFeatures;
(function (ProposedFeatures) {
    ProposedFeatures.all = {
        __brand: 'features'
    };
})(ProposedFeatures = exports.ProposedFeatures || (exports.ProposedFeatures = {}));

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
const Is = __webpack_require__(199);
const vscode_jsonrpc_1 = __webpack_require__(11);
const protocol_implementation_1 = __webpack_require__(200);
exports.ImplementationRequest = protocol_implementation_1.ImplementationRequest;
const protocol_typeDefinition_1 = __webpack_require__(201);
exports.TypeDefinitionRequest = protocol_typeDefinition_1.TypeDefinitionRequest;
const protocol_workspaceFolders_1 = __webpack_require__(202);
exports.WorkspaceFoldersRequest = protocol_workspaceFolders_1.WorkspaceFoldersRequest;
exports.DidChangeWorkspaceFoldersNotification = protocol_workspaceFolders_1.DidChangeWorkspaceFoldersNotification;
const protocol_configuration_1 = __webpack_require__(203);
exports.ConfigurationRequest = protocol_configuration_1.ConfigurationRequest;
const protocol_colorProvider_1 = __webpack_require__(204);
exports.DocumentColorRequest = protocol_colorProvider_1.DocumentColorRequest;
exports.ColorPresentationRequest = protocol_colorProvider_1.ColorPresentationRequest;
var DocumentFilter;
(function (DocumentFilter) {
  function is(value) {
    let candidate = value;
    return Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);
  }
  DocumentFilter.is = is;
})(DocumentFilter = exports.DocumentFilter || (exports.DocumentFilter = {}));
/**
 * The `client/registerCapability` request is sent from the server to the client to register a new capability
 * handler on the client side.
 */
var RegistrationRequest;
(function (RegistrationRequest) {
  RegistrationRequest.type = new vscode_jsonrpc_1.RequestType('client/registerCapability');
})(RegistrationRequest = exports.RegistrationRequest || (exports.RegistrationRequest = {}));
/**
 * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
 * handler on the client side.
 */
var UnregistrationRequest;
(function (UnregistrationRequest) {
  UnregistrationRequest.type = new vscode_jsonrpc_1.RequestType('client/unregisterCapability');
})(UnregistrationRequest = exports.UnregistrationRequest || (exports.UnregistrationRequest = {}));
/**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */
var TextDocumentSyncKind;
(function (TextDocumentSyncKind) {
  /**
   * Documents should not be synced at all.
   */
  TextDocumentSyncKind.None = 0;
  /**
   * Documents are synced by always sending the full content
   * of the document.
   */
  TextDocumentSyncKind.Full = 1;
  /**
   * Documents are synced by sending the full content on open.
   * After that only incremental updates to the document are
   * send.
   */
  TextDocumentSyncKind.Incremental = 2;
})(TextDocumentSyncKind = exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));
/**
 * The initialize request is sent from the client to the server.
 * It is sent once as the request after starting up the server.
 * The requests parameter is of type [InitializeParams](#InitializeParams)
 * the response if of type [InitializeResult](#InitializeResult) of a Thenable that
 * resolves to such.
 */
var InitializeRequest;
(function (InitializeRequest) {
  InitializeRequest.type = new vscode_jsonrpc_1.RequestType('initialize');
})(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));
/**
 * Known error codes for an `InitializeError`;
 */
var InitializeError;
(function (InitializeError) {
  /**
   * If the protocol version provided by the client can't be handled by the server.
   * @deprecated This initialize error got replaced by client capabilities. There is
   * no version handshake in version 3.0x
   */
  InitializeError.unknownProtocolVersion = 1;
})(InitializeError = exports.InitializeError || (exports.InitializeError = {}));
/**
 * The intialized notification is sent from the client to the
 * server after the client is fully initialized and the server
 * is allowed to send requests from the server to the client.
 */
var InitializedNotification;
(function (InitializedNotification) {
  InitializedNotification.type = new vscode_jsonrpc_1.NotificationType('initialized');
})(InitializedNotification = exports.InitializedNotification || (exports.InitializedNotification = {}));
//---- Shutdown Method ----
/**
 * A shutdown request is sent from the client to the server.
 * It is sent once when the client decides to shutdown the
 * server. The only notification that is sent after a shutdown request
 * is the exit event.
 */
var ShutdownRequest;
(function (ShutdownRequest) {
  ShutdownRequest.type = new vscode_jsonrpc_1.RequestType0('shutdown');
})(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));
//---- Exit Notification ----
/**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */
var ExitNotification;
(function (ExitNotification) {
  ExitNotification.type = new vscode_jsonrpc_1.NotificationType0('exit');
})(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));
//---- Configuration notification ----
/**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */
var DidChangeConfigurationNotification;
(function (DidChangeConfigurationNotification) {
  DidChangeConfigurationNotification.type = new vscode_jsonrpc_1.NotificationType('workspace/didChangeConfiguration');
})(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));
//---- Message show and log notifications ----
/**
 * The message type
 */
var MessageType;
(function (MessageType) {
  /**
   * An error message.
   */
  MessageType.Error = 1;
  /**
   * A warning message.
   */
  MessageType.Warning = 2;
  /**
   * An information message.
   */
  MessageType.Info = 3;
  /**
   * A log message.
   */
  MessageType.Log = 4;
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */
var ShowMessageNotification;
(function (ShowMessageNotification) {
  ShowMessageNotification.type = new vscode_jsonrpc_1.NotificationType('window/showMessage');
})(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));
/**
 * The show message request is sent from the server to the client to show a message
 * and a set of options actions to the user.
 */
var ShowMessageRequest;
(function (ShowMessageRequest) {
  ShowMessageRequest.type = new vscode_jsonrpc_1.RequestType('window/showMessageRequest');
})(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));
/**
 * The log message notification is sent from the server to the client to ask
 * the client to log a particular message.
 */
var LogMessageNotification;
(function (LogMessageNotification) {
  LogMessageNotification.type = new vscode_jsonrpc_1.NotificationType('window/logMessage');
})(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));
//---- Telemetry notification
/**
 * The telemetry event notification is sent from the server to the client to ask
 * the client to log telemetry data.
 */
var TelemetryEventNotification;
(function (TelemetryEventNotification) {
  TelemetryEventNotification.type = new vscode_jsonrpc_1.NotificationType('telemetry/event');
})(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));
/**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri. Open in this sense means it is managed by the client. It doesn't necessarily
 * mean that its content is presented in an editor. An open notification must not
 * be sent more than once without a corresponding close notification send before.
 * This means open and close notification must be balanced and the max open count
 * is one.
 */
var DidOpenTextDocumentNotification;
(function (DidOpenTextDocumentNotification) {
  DidOpenTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didOpen');
})(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));
/**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */
var DidChangeTextDocumentNotification;
(function (DidChangeTextDocumentNotification) {
  DidChangeTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didChange');
})(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));
/**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists where
 * the document's uri points to (e.g. if the document's uri is a file uri the
 * truth now exists on disk). As with the open notification the close notification
 * is about managing the document's content. Receiving a close notification
 * doesn't mean that the document was open in an editor before. A close
 * notification requires a previous open notification to be sent.
 */
var DidCloseTextDocumentNotification;
(function (DidCloseTextDocumentNotification) {
  DidCloseTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didClose');
})(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));
/**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */
var DidSaveTextDocumentNotification;
(function (DidSaveTextDocumentNotification) {
  DidSaveTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/didSave');
})(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));
/**
 * A document will save notification is sent from the client to the server before
 * the document is actually saved.
 */
var WillSaveTextDocumentNotification;
(function (WillSaveTextDocumentNotification) {
  WillSaveTextDocumentNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/willSave');
})(WillSaveTextDocumentNotification = exports.WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = {}));
/**
 * A document will save request is sent from the client to the server before
 * the document is actually saved. The request can return an array of TextEdits
 * which will be applied to the text document before it is saved. Please note that
 * clients might drop results if computing the text edits took too long or if a
 * server constantly fails on this request. This is done to keep the save fast and
 * reliable.
 */
var WillSaveTextDocumentWaitUntilRequest;
(function (WillSaveTextDocumentWaitUntilRequest) {
  WillSaveTextDocumentWaitUntilRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/willSaveWaitUntil');
})(WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = {}));
//---- File eventing ----
/**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the language client.
 */
var DidChangeWatchedFilesNotification;
(function (DidChangeWatchedFilesNotification) {
  DidChangeWatchedFilesNotification.type = new vscode_jsonrpc_1.NotificationType('workspace/didChangeWatchedFiles');
})(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));
/**
 * The file event type
 */
var FileChangeType;
(function (FileChangeType) {
  /**
   * The file got created.
   */
  FileChangeType.Created = 1;
  /**
   * The file got changed.
   */
  FileChangeType.Changed = 2;
  /**
   * The file got deleted.
   */
  FileChangeType.Deleted = 3;
})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
var WatchKind;
(function (WatchKind) {
  /**
   * Interested in create events.
   */
  WatchKind.Create = 1;
  /**
   * Interested in change events
   */
  WatchKind.Change = 2;
  /**
   * Interested in delete events
   */
  WatchKind.Delete = 4;
})(WatchKind = exports.WatchKind || (exports.WatchKind = {}));
//---- Diagnostic notification ----
/**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */
var PublishDiagnosticsNotification;
(function (PublishDiagnosticsNotification) {
  PublishDiagnosticsNotification.type = new vscode_jsonrpc_1.NotificationType('textDocument/publishDiagnostics');
})(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));
/**
 * How a completion was triggered
 */
var CompletionTriggerKind;
(function (CompletionTriggerKind) {
  /**
   * Completion was triggered by typing an identifier (24x7 code
   * complete), manual invocation (e.g Ctrl+Space) or via API.
   */
  CompletionTriggerKind.Invoked = 1;
  /**
   * Completion was triggered by a trigger character specified by
   * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
   */
  CompletionTriggerKind.TriggerCharacter = 2;
  /**
   * Completion was re-triggered as current completion list is incomplete
   */
  CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
})(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));
/**
 * Request to request completion at a given text document position. The request's
 * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response
 * is of type [CompletionItem[]](#CompletionItem) or [CompletionList](#CompletionList)
 * or a Thenable that resolves to such.
 *
 * The request can delay the computation of the [`detail`](#CompletionItem.detail)
 * and [`documentation`](#CompletionItem.documentation) properties to the `completionItem/resolve`
 * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
 * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
 */
var CompletionRequest;
(function (CompletionRequest) {
  CompletionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/completion');
})(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));
/**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type [CompletionItem](#CompletionItem) the response
 * is of type [CompletionItem](#CompletionItem) or a Thenable that resolves to such.
 */
var CompletionResolveRequest;
(function (CompletionResolveRequest) {
  CompletionResolveRequest.type = new vscode_jsonrpc_1.RequestType('completionItem/resolve');
})(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));
//---- Hover Support -------------------------------
/**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response is of
 * type [Hover](#Hover) or a Thenable that resolves to such.
 */
var HoverRequest;
(function (HoverRequest) {
  HoverRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/hover');
})(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));
var SignatureHelpRequest;
(function (SignatureHelpRequest) {
  SignatureHelpRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/signatureHelp');
})(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));
//---- Goto Definition -------------------------------------
/**
 * A request to resolve the definition location of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the response is of type [Definition](#Definition) or a
 * Thenable that resolves to such.
 */
var DefinitionRequest;
(function (DefinitionRequest) {
  DefinitionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/definition');
})(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));
/**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type [ReferenceParams](#ReferenceParams) the response is of type
 * [Location[]](#Location) or a Thenable that resolves to such.
 */
var ReferencesRequest;
(function (ReferencesRequest) {
  ReferencesRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/references');
})(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {}));
//---- Document Highlight ----------------------------------
/**
 * Request to resolve a [DocumentHighlight](#DocumentHighlight) for a given
 * text document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]
 * (#DocumentHighlight) or a Thenable that resolves to such.
 */
var DocumentHighlightRequest;
(function (DocumentHighlightRequest) {
  DocumentHighlightRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentHighlight');
})(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));
//---- Document Symbol Provider ---------------------------
/**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type [TextDocumentIdentifier](#TextDocumentIdentifier) the
 * response is of type [SymbolInformation[]](#SymbolInformation) or a Thenable
 * that resolves to such.
 */
var DocumentSymbolRequest;
(function (DocumentSymbolRequest) {
  DocumentSymbolRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentSymbol');
})(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));
//---- Workspace Symbol Provider ---------------------------
/**
 * A request to list project-wide symbols matching the query string given
 * by the [WorkspaceSymbolParams](#WorkspaceSymbolParams). The response is
 * of type [SymbolInformation[]](#SymbolInformation) or a Thenable that
 * resolves to such.
 */
var WorkspaceSymbolRequest;
(function (WorkspaceSymbolRequest) {
  WorkspaceSymbolRequest.type = new vscode_jsonrpc_1.RequestType('workspace/symbol');
})(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));
/**
 * A request to provide commands for the given text document and range.
 */
var CodeActionRequest;
(function (CodeActionRequest) {
  CodeActionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/codeAction');
})(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));
/**
 * A request to provide code lens for the given text document.
 */
var CodeLensRequest;
(function (CodeLensRequest) {
  CodeLensRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/codeLens');
})(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));
/**
 * A request to resolve a command for a given code lens.
 */
var CodeLensResolveRequest;
(function (CodeLensResolveRequest) {
  CodeLensResolveRequest.type = new vscode_jsonrpc_1.RequestType('codeLens/resolve');
})(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));
/**
 * A request to to format a whole document.
 */
var DocumentFormattingRequest;
(function (DocumentFormattingRequest) {
  DocumentFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/formatting');
})(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));
/**
 * A request to to format a range in a document.
 */
var DocumentRangeFormattingRequest;
(function (DocumentRangeFormattingRequest) {
  DocumentRangeFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/rangeFormatting');
})(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));
/**
 * A request to format a document on type.
 */
var DocumentOnTypeFormattingRequest;
(function (DocumentOnTypeFormattingRequest) {
  DocumentOnTypeFormattingRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/onTypeFormatting');
})(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));
/**
 * A request to rename a symbol.
 */
var RenameRequest;
(function (RenameRequest) {
  RenameRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/rename');
})(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));
/**
 * A request to provide document links
 */
var DocumentLinkRequest;
(function (DocumentLinkRequest) {
  DocumentLinkRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentLink');
})(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));
/**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type [DocumentLink](#DocumentLink) the response
 * is of type [DocumentLink](#DocumentLink) or a Thenable that resolves to such.
 */
var DocumentLinkResolveRequest;
(function (DocumentLinkResolveRequest) {
  DocumentLinkResolveRequest.type = new vscode_jsonrpc_1.RequestType('documentLink/resolve');
})(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));
/**
 * A request send from the client to the server to execute a command. The request might return
 * a workspace edit which the client will apply to the workspace.
 */
var ExecuteCommandRequest;
(function (ExecuteCommandRequest) {
  ExecuteCommandRequest.type = new vscode_jsonrpc_1.RequestType('workspace/executeCommand');
})(ExecuteCommandRequest = exports.ExecuteCommandRequest || (exports.ExecuteCommandRequest = {}));
/**
 * A request sent from the server to the client to modified certain resources.
 */
var ApplyWorkspaceEditRequest;
(function (ApplyWorkspaceEditRequest) {
  ApplyWorkspaceEditRequest.type = new vscode_jsonrpc_1.RequestType('workspace/applyEdit');
})(ApplyWorkspaceEditRequest = exports.ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = {}));

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
const toString = Object.prototype.toString;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return toString.call(value) === '[object String]';
}
exports.string = string;
function number(value) {
    return toString.call(value) === '[object Number]';
}
exports.number = number;
function error(value) {
    return toString.call(value) === '[object Error]';
}
exports.error = error;
function func(value) {
    return toString.call(value) === '[object Function]';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function thenable(value) {
    return value && func(value.then);
}
exports.thenable = thenable;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
const vscode_jsonrpc_1 = __webpack_require__(11);
/**
 * A request to resolve the implementation locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositioParams]
 * (#TextDocumentPositionParams) the response is of type [Definition](#Definition) or a
 * Thenable that resolves to such.
 */
var ImplementationRequest;
(function (ImplementationRequest) {
  ImplementationRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/implementation');
})(ImplementationRequest = exports.ImplementationRequest || (exports.ImplementationRequest = {}));

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
const vscode_jsonrpc_1 = __webpack_require__(11);
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositioParams]
 * (#TextDocumentPositionParams) the response is of type [Definition](#Definition) or a
 * Thenable that resolves to such.
 */
var TypeDefinitionRequest;
(function (TypeDefinitionRequest) {
  TypeDefinitionRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/typeDefinition');
})(TypeDefinitionRequest = exports.TypeDefinitionRequest || (exports.TypeDefinitionRequest = {}));

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
const vscode_jsonrpc_1 = __webpack_require__(11);
/**
 * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */
var WorkspaceFoldersRequest;
(function (WorkspaceFoldersRequest) {
  WorkspaceFoldersRequest.type = new vscode_jsonrpc_1.RequestType0('workspace/workspaceFolders');
})(WorkspaceFoldersRequest = exports.WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = {}));
/**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */
var DidChangeWorkspaceFoldersNotification;
(function (DidChangeWorkspaceFoldersNotification) {
  DidChangeWorkspaceFoldersNotification.type = new vscode_jsonrpc_1.NotificationType('workspace/didChangeWorkspaceFolders');
})(DidChangeWorkspaceFoldersNotification = exports.DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = {}));

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
const vscode_jsonrpc_1 = __webpack_require__(11);
/**
 * The 'workspace/configuration' request is sent from the server to the client to fetch a certain
 * configuration setting.
 */
var ConfigurationRequest;
(function (ConfigurationRequest) {
  ConfigurationRequest.type = new vscode_jsonrpc_1.RequestType('workspace/configuration');
})(ConfigurationRequest = exports.ConfigurationRequest || (exports.ConfigurationRequest = {}));

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
const vscode_jsonrpc_1 = __webpack_require__(11);
/**
 * A request to list all color symbols found in a given text document. The request's
 * parameter is of type [DocumentColorParams](#DocumentColorParams) the
 * response is of type [ColorInformation[]](#ColorInformation) or a Thenable
 * that resolves to such.
 */
var DocumentColorRequest;
(function (DocumentColorRequest) {
  DocumentColorRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/documentColor');
})(DocumentColorRequest = exports.DocumentColorRequest || (exports.DocumentColorRequest = {}));
/**
 * A request to list all presentation for a color. The request's
 * parameter is of type [ColorPresentationParams](#ColorPresentationParams) the
 * response is of type [ColorInformation[]](#ColorInformation) or a Thenable
 * that resolves to such.
 */
var ColorPresentationRequest;
(function (ColorPresentationRequest) {
  ColorPresentationRequest.type = new vscode_jsonrpc_1.RequestType('textDocument/colorPresentation');
})(ColorPresentationRequest = exports.ColorPresentationRequest || (exports.ColorPresentationRequest = {}));

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_protocol_1 = __webpack_require__(43);
const Is = __webpack_require__(92);
exports.ConfigurationFeature = Base => {
    return class extends Base {
        getConfiguration(arg) {
            if (!arg) {
                return this._getConfiguration({});
            } else if (Is.string(arg)) {
                return this._getConfiguration({ section: arg });
            } else {
                return this._getConfiguration(arg);
            }
        }
        _getConfiguration(arg) {
            let params = {
                items: Array.isArray(arg) ? arg : [arg]
            };
            return this.connection.sendRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, params).then(result => {
                return Array.isArray(arg) ? result : result[0];
            });
        }
    };
};

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_protocol_1 = __webpack_require__(43);
exports.WorkspaceFoldersFeature = Base => {
    return class extends Base {
        initialize(capabilities) {
            let workspaceCapabilities = capabilities.workspace;
            if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {
                this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();
                this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, params => {
                    this._onDidChangeWorkspaceFolders.fire(params.event);
                });
            }
        }
        getWorkspaceFolders() {
            return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);
        }
        get onDidChangeWorkspaceFolders() {
            if (!this._onDidChangeWorkspaceFolders) {
                throw new Error('Client doesn\'t support sending workspace folder change events.');
            }
            if (!this._unregistration) {
                this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);
            }
            return this._onDidChangeWorkspaceFolders.event;
        }
    };
};

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


Object.defineProperty(exports, "__esModule", { value: true });
class ValueUUID {
    constructor(_value) {
        this._value = _value;
        // empty
    }
    asHex() {
        return this._value;
    }
    equals(other) {
        return this.asHex() === other.asHex();
    }
}
class V4UUID extends ValueUUID {
    constructor() {
        super([V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), '-', V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), '-', '4', V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), '-', V4UUID._oneOf(V4UUID._timeHighBits), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), '-', V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex(), V4UUID._randomHex()].join(''));
    }
    static _oneOf(array) {
        return array[Math.floor(array.length * Math.random())];
    }
    static _randomHex() {
        return V4UUID._oneOf(V4UUID._chars);
    }
}
V4UUID._chars = ['0', '1', '2', '3', '4', '5', '6', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
V4UUID._timeHighBits = ['8', '9', 'a', 'b'];
/**
 * An empty UUID that contains only zeros.
 */
exports.empty = new ValueUUID('00000000-0000-0000-0000-000000000000');
function v4() {
    return new V4UUID();
}
exports.v4 = v4;
const _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
function isUUID(value) {
    return _UUIDPattern.test(value);
}
exports.isUUID = isUUID;
/**
 * Parses a UUID that is of the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.
 * @param value A uuid string.
 */
function parse(value) {
    if (!isUUID(value)) {
        throw new Error('invalid uuid');
    }
    return new ValueUUID(value);
}
exports.parse = parse;
function generateUuid() {
    return v4().asHex();
}
exports.generateUuid = generateUuid;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname, __filename) {/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */


Object.defineProperty(exports, "__esModule", { value: true });
const url = __webpack_require__(17);
const path = __webpack_require__(0);
const fs = __webpack_require__(7);
const child_process_1 = __webpack_require__(209);
/**
 * @deprecated Use the `vscode-uri` npm module which provides a more
 * complete implementation of handling VS Code URIs.
 */
function uriToFilePath(uri) {
    let parsed = url.parse(uri);
    if (parsed.protocol !== 'file:' || !parsed.path) {
        return undefined;
    }
    let segments = parsed.path.split('/');
    for (var i = 0, len = segments.length; i < len; i++) {
        segments[i] = decodeURIComponent(segments[i]);
    }
    if (process.platform === 'win32' && segments.length > 1) {
        let first = segments[0];
        let second = segments[1];
        // Do we have a drive letter and we started with a / which is the
        // case if the first segement is empty (see split above)
        if (first.length === 0 && second.length > 1 && second[1] === ':') {
            // Remove first slash
            segments.shift();
        }
    }
    return path.normalize(segments.join('/'));
}
exports.uriToFilePath = uriToFilePath;
function isWindows() {
    return process.platform === 'win32';
}
function resolveModule(workspaceRoot, moduleName) {
    let nodePathKey = 'NODE_PATH';
    return new Promise((resolve, reject) => {
        let nodePath = [];
        if (workspaceRoot) {
            nodePath.push(path.join(workspaceRoot, 'node_modules'));
        }
        child_process_1.exec('npm config get prefix', (error, stdout, _stderr) => {
            if (!error) {
                let globalPath = stdout.replace(/[\s\r\n]+$/, '');
                if (globalPath.length > 0) {
                    if (isWindows()) {
                        nodePath.push(path.join(globalPath, 'node_modules'));
                    } else {
                        nodePath.push(path.join(globalPath, 'lib', 'node_modules'));
                    }
                }
            }
            let separator = isWindows() ? ';' : ':';
            let env = process.env;
            let newEnv = Object.create(null);
            Object.keys(env).forEach(key => newEnv[key] = env[key]);
            if (newEnv[nodePathKey]) {
                newEnv[nodePathKey] = nodePath.join(separator) + separator + newEnv[nodePathKey];
            } else {
                newEnv[nodePathKey] = nodePath.join(separator);
            }
            try {
                let cp = child_process_1.fork(path.join(__dirname, 'resolve.js'), [], { env: newEnv, execArgv: [] });
                cp.on('message', message => {
                    if (message.command === 'resolve') {
                        let toRequire = moduleName;
                        if (message.success) {
                            toRequire = message.result;
                        }
                        cp.send({ command: 'exit' });
                        try {
                            resolve(!(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
                        } catch (error) {
                            reject(error);
                        }
                    }
                });
                let message = {
                    command: 'resolve',
                    args: moduleName
                };
                cp.send(message);
            } catch (error) {
                reject(error);
            }
        });
    });
}
exports.resolveModule = resolveModule;
function resolve(moduleName, nodePath, cwd, tracer) {
    const nodePathKey = 'NODE_PATH';
    const app = ["var p = process;", "p.on('message',function(m){", "if(m.c==='e'){", "p.exit(0);", "}", "else if(m.c==='rs'){", "try{", "var r=require.resolve(m.a);", "p.send({c:'r',s:true,r:r});", "}", "catch(err){", "p.send({c:'r',s:false});", "}", "}", "});"].join('');
    return new Promise((resolve, reject) => {
        let env = process.env;
        let newEnv = Object.create(null);
        Object.keys(env).forEach(key => newEnv[key] = env[key]);
        if (nodePath) {
            if (newEnv[nodePathKey]) {
                newEnv[nodePathKey] = nodePath + path.delimiter + newEnv[nodePathKey];
            } else {
                newEnv[nodePathKey] = nodePath;
            }
            if (tracer) {
                tracer(`NODE_PATH value is: ${newEnv[nodePathKey]}`);
            }
        }
        newEnv['ATOM_SHELL_INTERNAL_RUN_AS_NODE'] = '1';
        try {
            let cp = child_process_1.fork('', [], {
                cwd: cwd,
                env: newEnv,
                execArgv: ['-e', app]
            });
            cp.on('error', error => {
                reject(error);
            });
            cp.on('message', message => {
                if (message.c === 'r') {
                    cp.send({ c: 'e' });
                    if (message.s) {
                        resolve(message.r);
                    } else {
                        reject(new Error(`Failed to resolve module: ${moduleName}`));
                    }
                }
            });
            let message = {
                c: 'rs',
                a: moduleName
            };
            cp.send(message);
        } catch (error) {
            reject(error);
        }
    });
}
exports.resolve = resolve;
function resolveGlobalNodePath(tracer) {
    let npmCommand = isWindows() ? 'npm.cmd' : 'npm';
    let stdout = child_process_1.spawnSync(npmCommand, ['config', 'get', 'prefix'], {
        encoding: 'utf8'
    }).stdout;
    if (!stdout) {
        if (tracer) {
            tracer(`'npm config get prefix' didn't return a value.`);
        }
        return undefined;
    }
    let prefix = stdout.trim();
    if (tracer) {
        tracer(`'npm config get prefix' value is: ${prefix}`);
    }
    if (prefix.length > 0) {
        if (isWindows()) {
            return path.join(prefix, 'node_modules');
        } else {
            return path.join(prefix, 'lib', 'node_modules');
        }
    }
    return undefined;
}
exports.resolveGlobalNodePath = resolveGlobalNodePath;
function resolveGlobalYarnPath(tracer) {
    let yarnCommand = isWindows() ? 'yarn.cmd' : 'yarn';
    let results = child_process_1.spawnSync(yarnCommand, ['global', 'dir', '--json'], {
        encoding: 'utf8'
    });
    let stdout = results.stdout;
    if (!stdout) {
        if (tracer) {
            tracer(`'yarn global dir' didn't return a value.`);
            if (results.stderr) {
                tracer(results.stderr);
            }
        }
        return undefined;
    }
    let lines = stdout.trim().split(/\r?\n/);
    for (let line of lines) {
        try {
            let yarn = JSON.parse(line);
            if (yarn.type === 'log') {
                return path.join(yarn.data, 'node_modules');
            }
        } catch (e) {
            // Do nothing. Ignore the line
        }
    }
    return undefined;
}
exports.resolveGlobalYarnPath = resolveGlobalYarnPath;
var FileSystem;
(function (FileSystem) {
    let _isCaseSensitive = undefined;
    function isCaseSensitive() {
        if (_isCaseSensitive !== void 0) {
            return _isCaseSensitive;
        }
        if (process.platform === 'win32') {
            _isCaseSensitive = false;
        } else {
            // convert current file name to upper case / lower case and check if file exists
            // (guards against cases when name is already all uppercase or lowercase)
            _isCaseSensitive = !fs.existsSync(__filename.toUpperCase()) || !fs.existsSync(__filename.toLowerCase());
        }
        return _isCaseSensitive;
    }
    FileSystem.isCaseSensitive = isCaseSensitive;
    function isParent(parent, child) {
        if (isCaseSensitive()) {
            return path.normalize(child).indexOf(path.normalize(parent)) === 0;
        } else {
            return path.normalize(child).toLowerCase().indexOf(path.normalize(parent).toLowerCase()) == 0;
        }
    }
    FileSystem.isParent = isParent;
})(FileSystem = exports.FileSystem || (exports.FileSystem = {}));
function resolveModulePath(workspaceRoot, moduleName, nodePath, tracer) {
    if (nodePath) {
        if (!path.isAbsolute(nodePath)) {
            nodePath = path.join(workspaceRoot, nodePath);
        }
        return resolve(moduleName, nodePath, nodePath, tracer).then(value => {
            if (FileSystem.isParent(nodePath, value)) {
                return value;
            } else {
                return Promise.reject(new Error(`Failed to load ${moduleName} from node path location.`));
            }
        }).then(undefined, _error => {
            return resolve(moduleName, resolveGlobalNodePath(tracer), workspaceRoot, tracer);
        });
    } else {
        return resolve(moduleName, resolveGlobalNodePath(tracer), workspaceRoot, tracer);
    }
}
exports.resolveModulePath = resolveModulePath;
/**
 * Resolves the given module relative to the given workspace root. In contrast to
 * `resolveModule` this method considers the parent chain as well.
 */
function resolveModule2(workspaceRoot, moduleName, nodePath, tracer) {
    return resolveModulePath(workspaceRoot, moduleName, nodePath, tracer).then(path => {
        if (tracer) {
            tracer(`Module ${moduleName} got resolved to ${path}`);
        }
        return !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
    });
}
exports.resolveModule2 = resolveModule2;
/* WEBPACK VAR INJECTION */}.call(exports, "/", "/index.js"))

/***/ }),
/* 209 */
/***/ (function(module, exports) {

module.exports = require("child_process");

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const parsedDocument_1 = __webpack_require__(18);
const symbolStore_1 = __webpack_require__(214);
const symbolProvider_1 = __webpack_require__(216);
const completionProvider_1 = __webpack_require__(217);
const diagnosticsProvider_1 = __webpack_require__(218);
const signatureHelpProvider_1 = __webpack_require__(219);
const definitionProvider_1 = __webpack_require__(220);
const formatProvider_1 = __webpack_require__(221);
const commands_1 = __webpack_require__(222);
const referenceReader_1 = __webpack_require__(223);
const referenceProvider_1 = __webpack_require__(224);
const reference_1 = __webpack_require__(54);
const cache_1 = __webpack_require__(225);
const logger_1 = __webpack_require__(55);
const path = __webpack_require__(0);
const hoverProvider_1 = __webpack_require__(253);
const highlightProvider_1 = __webpack_require__(254);
var Intelephense;
(function (Intelephense) {
    const phpLanguageId = 'php';
    let documentStore;
    let symbolStore;
    let refStore;
    let symbolProvider;
    let completionProvider;
    let diagnosticsProvider;
    let signatureHelpProvider;
    let definitionProvider;
    let formatProvider;
    let nameTextEditProvider;
    let referenceProvider;
    let hoverProvider;
    let highlightProvider;
    let cacheClear = false;
    let symbolCache;
    let refCache;
    let stateCache;
    const stateTimestampKey = 'timestamp';
    const knownDocsFilename = 'known_uris.json';
    const refStoreCacheKey = 'referenceStore';
    let diagnosticsUnsubscribe;
    let cacheTimestamp = 0;
    let storagePath = '';
    function onPublishDiagnostics(fn) {
        if (diagnosticsUnsubscribe) {
            diagnosticsUnsubscribe();
        }
        if (fn) {
            diagnosticsUnsubscribe = diagnosticsProvider.publishDiagnosticsEvent.subscribe(fn);
        }
    }
    Intelephense.onPublishDiagnostics = onPublishDiagnostics;
    function initialise(options) {
        if (options.logWriter) {
            logger_1.Log.writer = options.logWriter;
        }
        storagePath = options.storagePath;
        symbolCache = cache_1.createCache(storagePath ? path.join(storagePath, 'symbols') : undefined);
        refCache = cache_1.createCache(storagePath ? path.join(storagePath, 'references') : undefined);
        stateCache = cache_1.createCache(storagePath ? path.join(storagePath, 'state') : undefined);
        documentStore = new parsedDocument_1.ParsedDocumentStore();
        symbolStore = new symbolStore_1.SymbolStore();
        refStore = new reference_1.ReferenceStore(refCache);
        symbolProvider = new symbolProvider_1.SymbolProvider(symbolStore);
        completionProvider = new completionProvider_1.CompletionProvider(symbolStore, documentStore, refStore);
        diagnosticsProvider = new diagnosticsProvider_1.DiagnosticsProvider();
        signatureHelpProvider = new signatureHelpProvider_1.SignatureHelpProvider(symbolStore, documentStore, refStore);
        definitionProvider = new definitionProvider_1.DefinitionProvider(symbolStore, documentStore, refStore);
        formatProvider = new formatProvider_1.FormatProvider(documentStore);
        nameTextEditProvider = new commands_1.NameTextEditProvider(symbolStore, documentStore, refStore);
        referenceProvider = new referenceProvider_1.ReferenceProvider(documentStore, symbolStore, refStore);
        hoverProvider = new hoverProvider_1.HoverProvider(documentStore, symbolStore, refStore);
        highlightProvider = new highlightProvider_1.HighlightProvider(documentStore, symbolStore, refStore);
        documentStore.parsedDocumentChangeEvent.subscribe(args => {
            symbolStore.onParsedDocumentChange(args);
            let refTable = referenceReader_1.ReferenceReader.discoverReferences(args.parsedDocument, symbolStore);
            refStore.add(refTable);
        });
        if (options.clearCache) {
            return clearCache().then(() => {
                symbolStore.add(symbolStore_1.SymbolTable.readBuiltInSymbols());
            }).catch(msg => {
                logger_1.Log.error(msg);
            });
        } else if (storagePath) {
            symbolStore.add(symbolStore_1.SymbolTable.readBuiltInSymbols());
            return stateCache.read(stateTimestampKey).then(data => {
                if (!data) {
                    return;
                }
                cacheTimestamp = data;
            }).then(() => {
                return cache_1.readArrayFromDisk(path.join(storagePath, 'state', knownDocsFilename));
            }).then(uris => {
                return readCachedSymbolTables(uris);
            }).then(() => {
                return cacheReadReferenceStore();
            }).catch(msg => {
                logger_1.Log.error(msg);
            });
        } else {
            symbolStore.add(symbolStore_1.SymbolTable.readBuiltInSymbols());
            return Promise.resolve();
        }
    }
    Intelephense.initialise = initialise;
    function shutdown() {
        if (!storagePath) {
            return;
        }
        let uris = [];
        for (let t of symbolStore.tables) {
            if (t.uri !== 'php') {
                uris.push(t.uri);
            }
        }
        return stateCache.write(stateTimestampKey, Date.now()).then(() => {
            return cache_1.writeArrayToDisk(uris, path.join(storagePath, 'state', knownDocsFilename)).catch(() => {});
        }).then(() => {
            return refStore.closeAll();
        }).then(() => {
            return cacheWriteReferenceStore();
        }).then(() => {
            return new Promise((resolve, reject) => {
                let openDocs = documentStore.documents;
                let cacheSymbolTableFn = () => {
                    let doc = openDocs.pop();
                    if (doc) {
                        let symbolTable = symbolStore.getSymbolTable(doc.uri);
                        symbolCache.write(doc.uri, symbolTable).then(cacheSymbolTableFn).catch(msg => {
                            logger_1.Log.error(msg);
                            cacheSymbolTableFn();
                        });
                    } else {
                        resolve();
                    }
                };
                cacheSymbolTableFn();
            });
        }).catch(msg => {
            logger_1.Log.error(msg);
        });
    }
    Intelephense.shutdown = shutdown;
    const refStoreTableSummariesFileName = 'ref_store_table_summaries.json';
    const refStoreNameIndexFileName = 'ref_store_name_index.json';
    function cacheWriteReferenceStore() {
        let data = refStore.toJSON();
        if (data && data.length > 0) {
            return cache_1.writeArrayToDisk(data, path.join(storagePath, 'state', refStoreTableSummariesFileName)).catch(e => {});
        } else {
            return Promise.resolve();
        }
    }
    function cacheReadReferenceStore() {
        let refStoreTables;
        return cache_1.readArrayFromDisk(path.join(storagePath, 'state', refStoreTableSummariesFileName)).then(items => {
            if (items && items.length > 0) {
                refStore.fromJSON(items);
            }
        }).catch(err => {});
    }
    function readCachedSymbolTables(keys) {
        if (!keys) {
            return Promise.resolve();
        }
        return new Promise((resolve, reject) => {
            let count = keys.length;
            if (count < 1) {
                resolve();
            }
            let batch = Math.min(4, count);
            let onCacheReadErr = msg => {
                logger_1.Log.error(msg);
                onCacheRead(undefined);
            };
            let onCacheRead = data => {
                --count;
                if (data) {
                    symbolStore.add(new symbolStore_1.SymbolTable(data._uri, data._root, data._hash));
                }
                let uri = keys.pop();
                if (uri) {
                    symbolCache.read(uri).then(onCacheRead).catch(onCacheReadErr);
                } else if (count < 1) {
                    resolve();
                }
            };
            let uri;
            while (batch-- > 0 && (uri = keys.pop())) {
                symbolCache.read(uri).then(onCacheRead).catch(onCacheReadErr);
            }
        });
    }
    function clearCache() {
        return stateCache.flush().then(() => {
            return refCache.flush();
        }).then(() => {
            return symbolCache.flush();
        }).catch(msg => {
            logger_1.Log.warn(msg);
        });
    }
    function provideHighlights(uri, position) {
        return highlightProvider.provideHightlights(uri, position);
    }
    Intelephense.provideHighlights = provideHighlights;
    function provideHover(uri, position) {
        return hoverProvider.provideHover(uri, position);
    }
    Intelephense.provideHover = provideHover;
    function knownDocuments() {
        let known = [];
        for (let uri of refStore.knownDocuments()) {
            if (uri !== 'php') {
                known.push(uri);
            }
        }
        return { timestamp: cacheTimestamp, documents: known };
    }
    Intelephense.knownDocuments = knownDocuments;
    function documentLanguageRanges(textDocument) {
        let doc = documentStore.find(textDocument.uri);
        return doc ? { version: doc.version, ranges: doc.documentLanguageRanges() } : undefined;
    }
    Intelephense.documentLanguageRanges = documentLanguageRanges;
    function setConfig(config) {
        diagnosticsProvider.debounceWait = config.diagnosticsProvider.debounce;
        diagnosticsProvider.maxItems = config.diagnosticsProvider.maxItems;
        completionProvider.config = config.completionProvider;
    }
    Intelephense.setConfig = setConfig;
    function openDocument(textDocument) {
        if (textDocument.languageId !== phpLanguageId || documentStore.has(textDocument.uri)) {
            return;
        }
        let parsedDocument = new parsedDocument_1.ParsedDocument(textDocument.uri, textDocument.text, textDocument.version);
        documentStore.add(parsedDocument);
        let symbolTable = symbolStore_1.SymbolTable.create(parsedDocument);
        symbolStore.add(symbolTable);
        let refTable = referenceReader_1.ReferenceReader.discoverReferences(parsedDocument, symbolStore);
        refStore.add(refTable);
        diagnosticsProvider.add(parsedDocument);
    }
    Intelephense.openDocument = openDocument;
    function closeDocument(textDocument) {
        documentStore.remove(textDocument.uri);
        refStore.close(textDocument.uri);
        diagnosticsProvider.remove(textDocument.uri);
        let symbolTable = symbolStore.getSymbolTable(textDocument.uri);
        if (symbolTable) {
            symbolTable.pruneScopedVars();
            return symbolCache.write(symbolTable.uri, symbolTable).catch(msg => {
                logger_1.Log.error(msg);
            });
        }
    }
    Intelephense.closeDocument = closeDocument;
    function editDocument(textDocument, contentChanges) {
        let parsedDocument = documentStore.find(textDocument.uri);
        if (parsedDocument) {
            parsedDocument.version = textDocument.version;
            parsedDocument.applyChanges(contentChanges);
        }
    }
    Intelephense.editDocument = editDocument;
    function documentSymbols(textDocument) {
        flushParseDebounce(textDocument.uri);
        return symbolProvider.provideDocumentSymbols(textDocument.uri);
    }
    Intelephense.documentSymbols = documentSymbols;
    function workspaceSymbols(query) {
        return query ? symbolProvider.provideWorkspaceSymbols(query) : [];
    }
    Intelephense.workspaceSymbols = workspaceSymbols;
    function provideCompletions(textDocument, position) {
        flushParseDebounce(textDocument.uri);
        return completionProvider.provideCompletions(textDocument.uri, position);
    }
    Intelephense.provideCompletions = provideCompletions;
    function provideSignatureHelp(textDocument, position) {
        flushParseDebounce(textDocument.uri);
        return signatureHelpProvider.provideSignatureHelp(textDocument.uri, position);
    }
    Intelephense.provideSignatureHelp = provideSignatureHelp;
    function provideDefinition(textDocument, position) {
        flushParseDebounce(textDocument.uri);
        return definitionProvider.provideDefinition(textDocument.uri, position);
    }
    Intelephense.provideDefinition = provideDefinition;
    function discoverSymbols(textDocument) {
        let uri = textDocument.uri;
        if (documentStore.has(uri)) {
            let symbolTable = symbolStore.getSymbolTable(uri);
            return symbolTable ? symbolTable.symbolCount : 0;
        }
        let text = textDocument.text;
        let parsedDocument = new parsedDocument_1.ParsedDocument(uri, text, textDocument.version);
        let symbolTable = symbolStore_1.SymbolTable.create(parsedDocument, true);
        symbolTable.pruneScopedVars();
        symbolStore.add(symbolTable);
        return symbolCache.write(symbolTable.uri, symbolTable).then(() => {
            return symbolTable.symbolCount;
        }).catch(msg => {
            logger_1.Log.warn(msg);
            return symbolTable.symbolCount;
        });
    }
    Intelephense.discoverSymbols = discoverSymbols;
    function discoverReferences(textDocument) {
        let uri = textDocument.uri;
        let refTable = refStore.getReferenceTable(uri);
        if (documentStore.has(uri)) {
            return refTable ? refTable.referenceCount : 0;
        }
        if (!symbolStore.getSymbolTable(uri)) {
            return 0;
        }
        let text = textDocument.text;
        let parsedDocument = new parsedDocument_1.ParsedDocument(uri, text, textDocument.version);
        refTable = referenceReader_1.ReferenceReader.discoverReferences(parsedDocument, symbolStore);
        refStore.add(refTable);
        refStore.close(refTable.uri);
        return refTable.referenceCount;
    }
    Intelephense.discoverReferences = discoverReferences;
    function forget(uri) {
        symbolStore.remove(uri);
        refStore.remove(uri, true);
    }
    Intelephense.forget = forget;
    function provideContractFqnTextEdits(uri, position, alias) {
        flushParseDebounce(uri);
        return nameTextEditProvider.provideContractFqnTextEdits(uri, position, alias);
    }
    Intelephense.provideContractFqnTextEdits = provideContractFqnTextEdits;
    function numberDocumentsOpen() {
        return documentStore.count;
    }
    Intelephense.numberDocumentsOpen = numberDocumentsOpen;
    function numberDocumentsKnown() {
        return symbolStore.tableCount;
    }
    Intelephense.numberDocumentsKnown = numberDocumentsKnown;
    function numberSymbolsKnown() {
        return symbolStore.symbolCount;
    }
    Intelephense.numberSymbolsKnown = numberSymbolsKnown;
    function provideDocumentFormattingEdits(doc, formatOptions) {
        flushParseDebounce(doc.uri);
        return formatProvider.provideDocumentFormattingEdits(doc, formatOptions);
    }
    Intelephense.provideDocumentFormattingEdits = provideDocumentFormattingEdits;
    function provideDocumentRangeFormattingEdits(doc, range, formatOptions) {
        flushParseDebounce(doc.uri);
        return formatProvider.provideDocumentRangeFormattingEdits(doc, range, formatOptions);
    }
    Intelephense.provideDocumentRangeFormattingEdits = provideDocumentRangeFormattingEdits;
    function provideReferences(doc, pos, context) {
        flushParseDebounce(doc.uri);
        return referenceProvider.provideReferenceLocations(doc.uri, pos, context);
    }
    Intelephense.provideReferences = provideReferences;
    function flushParseDebounce(uri) {
        let parsedDocument = documentStore.find(uri);
        if (parsedDocument) {
            parsedDocument.flush();
        }
    }
})(Intelephense = exports.Intelephense || (exports.Intelephense = {}));

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const lexer_1 = __webpack_require__(95);
var Parser;
(function (Parser) {
    function precedenceAssociativityTuple(t) {
        switch (t.tokenType) {
            case 113:
                return [48, 2];
            case 135:
                return [47, 2];
            case 129:
                return [47, 2];
            case 86:
                return [47, 2];
            case 152:
                return [47, 2];
            case 153:
                return [47, 2];
            case 150:
                return [47, 2];
            case 155:
                return [47, 2];
            case 151:
                return [47, 2];
            case 148:
                return [47, 2];
            case 149:
                return [47, 2];
            case 94:
                return [47, 2];
            case 43:
                return [46, 0];
            case 89:
                return [45, 2];
            case 101:
                return [44, 1];
            case 91:
                return [44, 1];
            case 92:
                return [44, 1];
            case 111:
                return [43, 1];
            case 143:
                return [43, 1];
            case 126:
                return [43, 1];
            case 106:
                return [42, 1];
            case 108:
                return [42, 1];
            case 99:
                return [41, 0];
            case 100:
                return [41, 0];
            case 141:
                return [41, 0];
            case 137:
                return [41, 0];
            case 136:
                return [40, 0];
            case 138:
                return [40, 0];
            case 139:
                return [40, 0];
            case 140:
                return [40, 0];
            case 142:
                return [40, 0];
            case 103:
                return [39, 1];
            case 125:
                return [38, 1];
            case 123:
                return [37, 1];
            case 102:
                return [36, 1];
            case 124:
                return [35, 1];
            case 122:
                return [34, 2];
            case 96:
                return [33, 1];
            case 85:
                return [32, 2];
            case 127:
                return [32, 2];
            case 112:
                return [32, 2];
            case 144:
                return [32, 2];
            case 146:
                return [32, 2];
            case 130:
                return [32, 2];
            case 145:
                return [32, 2];
            case 114:
                return [32, 2];
            case 104:
                return [32, 2];
            case 110:
                return [32, 2];
            case 105:
                return [32, 2];
            case 107:
                return [32, 2];
            case 109:
                return [32, 2];
            case 48:
                return [31, 1];
            case 50:
                return [30, 1];
            case 49:
                return [29, 1];
            default:
                throwUnexpectedTokenError(t);
        }
    }
    const statementListRecoverSet = [66, 38, 12, 35, 9, 2, 31, 63, 45, 116, 39, 68, 16, 33, 61, 5, 13, 59, 36, 60, 17, 65, 34, 14, 64, 62, 37, 88, 158, 157, 81, 156];
    const classMemberDeclarationListRecoverSet = [55, 56, 54, 60, 2, 31, 35, 67, 12, 66];
    const encapsulatedVariableListRecoverSet = [80, 131, 128];
    function binaryOpToPhraseType(t) {
        switch (t.tokenType) {
            case 96:
                return 40;
            case 126:
            case 111:
            case 143:
                return 1;
            case 123:
            case 103:
            case 125:
                return 14;
            case 101:
            case 91:
            case 92:
                return 117;
            case 113:
                return 71;
            case 106:
            case 108:
                return 154;
            case 102:
            case 124:
            case 48:
            case 49:
            case 50:
                return 109;
            case 138:
            case 140:
            case 136:
            case 139:
                return 59;
            case 99:
            case 141:
            case 100:
            case 137:
            case 142:
                return 143;
            case 122:
                return 37;
            case 85:
                return 155;
            case 112:
            case 144:
            case 146:
            case 114:
            case 130:
            case 127:
            case 145:
            case 104:
            case 110:
            case 105:
            case 107:
            case 109:
                return 38;
            case 43:
                return 100;
            default:
                return 0;
        }
    }
    var tokenBuffer;
    var phraseStack;
    var errorPhrase;
    var recoverSetStack;
    function parse(text) {
        init(text);
        let stmtList = statementList([1]);
        hidden(stmtList);
        return stmtList;
    }
    Parser.parse = parse;
    function init(text, lexerModeStack) {
        lexer_1.Lexer.setInput(text, lexerModeStack);
        phraseStack = [];
        tokenBuffer = [];
        recoverSetStack = [];
        errorPhrase = null;
    }
    function start(phraseType, dontPushHiddenToParent) {
        if (!dontPushHiddenToParent) {
            hidden();
        }
        let p = {
            phraseType: phraseType ? phraseType : 0,
            children: []
        };
        phraseStack.push(p);
        return p;
    }
    function end() {
        return phraseStack.pop();
    }
    function hidden(p) {
        if (!p) {
            p = phraseStack[phraseStack.length - 1];
        }
        let t;
        while (true) {
            t = tokenBuffer.length ? tokenBuffer.shift() : lexer_1.Lexer.lex();
            if (t.tokenType < 159) {
                tokenBuffer.unshift(t);
                break;
            } else {
                p.children.push(t);
            }
        }
    }
    function optional(tokenType) {
        if (tokenType === peek().tokenType) {
            errorPhrase = null;
            return next();
        } else {
            return null;
        }
    }
    function optionalOneOf(tokenTypes) {
        if (tokenTypes.indexOf(peek().tokenType) >= 0) {
            errorPhrase = null;
            return next();
        } else {
            return null;
        }
    }
    function next(doNotPush) {
        let t = tokenBuffer.length ? tokenBuffer.shift() : lexer_1.Lexer.lex();
        if (t.tokenType === 1) {
            return t;
        }
        if (t.tokenType >= 159) {
            phraseStack[phraseStack.length - 1].children.push(t);
            return next(doNotPush);
        } else if (!doNotPush) {
            phraseStack[phraseStack.length - 1].children.push(t);
        }
        return t;
    }
    function expect(tokenType) {
        let t = peek();
        if (t.tokenType === tokenType) {
            errorPhrase = null;
            return next();
        } else if (tokenType === 88 && t.tokenType === 158) {
            return t;
        } else {
            error(tokenType);
            if (peek(1).tokenType === tokenType) {
                let predicate = x => {
                    return x.tokenType === tokenType;
                };
                skip(predicate);
                errorPhrase = null;
                return next();
            }
            return null;
        }
    }
    function expectOneOf(tokenTypes) {
        let t = peek();
        if (tokenTypes.indexOf(t.tokenType) >= 0) {
            errorPhrase = null;
            return next();
        } else if (tokenTypes.indexOf(88) >= 0 && t.tokenType === 158) {
            return t;
        } else {
            error();
            if (tokenTypes.indexOf(peek(1).tokenType) >= 0) {
                let predicate = x => {
                    return tokenTypes.indexOf(x.tokenType) >= 0;
                };
                skip(predicate);
                errorPhrase = null;
                return next();
            }
            return null;
        }
    }
    function peek(n) {
        let k = n ? n + 1 : 1;
        let bufferPos = -1;
        let t;
        while (true) {
            ++bufferPos;
            if (bufferPos === tokenBuffer.length) {
                tokenBuffer.push(lexer_1.Lexer.lex());
            }
            t = tokenBuffer[bufferPos];
            if (t.tokenType < 159) {
                --k;
            }
            if (t.tokenType === 1 || k === 0) {
                break;
            }
        }
        return t;
    }
    function skip(predicate) {
        let t;
        while (true) {
            t = tokenBuffer.length ? tokenBuffer.shift() : lexer_1.Lexer.lex();
            if (predicate(t) || t.tokenType === 1) {
                tokenBuffer.unshift(t);
                break;
            } else {
                errorPhrase.children.push(t);
            }
        }
    }
    function error(expected) {
        if (errorPhrase) {
            return;
        }
        errorPhrase = {
            phraseType: 60,
            children: [],
            unexpected: peek()
        };
        if (expected) {
            errorPhrase.expected = expected;
        }
        phraseStack[phraseStack.length - 1].children.push(errorPhrase);
    }
    function list(phraseType, elementFunction, elementStartPredicate, breakOn, recoverSet) {
        let p = start(phraseType);
        let t;
        let recoveryAttempted = false;
        let listRecoverSet = recoverSet ? recoverSet.slice(0) : [];
        if (breakOn) {
            Array.prototype.push.apply(listRecoverSet, breakOn);
        }
        recoverSetStack.push(listRecoverSet);
        while (true) {
            t = peek();
            if (elementStartPredicate(t)) {
                recoveryAttempted = false;
                p.children.push(elementFunction());
            } else if (!breakOn || breakOn.indexOf(t.tokenType) >= 0 || recoveryAttempted) {
                break;
            } else {
                error();
                t = peek(1);
                if (elementStartPredicate(t) || breakOn.indexOf(t.tokenType) >= 0) {
                    skip(x => {
                        return x === t;
                    });
                } else {
                    defaultSyncStrategy();
                }
                recoveryAttempted = true;
            }
        }
        recoverSetStack.pop();
        return end();
    }
    function defaultSyncStrategy() {
        let mergedRecoverTokenTypeArray = [];
        for (let n = recoverSetStack.length - 1; n >= 0; --n) {
            Array.prototype.push.apply(mergedRecoverTokenTypeArray, recoverSetStack[n]);
        }
        let mergedRecoverTokenTypeSet = new Set(mergedRecoverTokenTypeArray);
        let predicate = x => {
            return mergedRecoverTokenTypeSet.has(x.tokenType);
        };
        skip(predicate);
    }
    function statementList(breakOn) {
        return list(157, statement, isStatementStart, breakOn, statementListRecoverSet);
    }
    function constDeclaration() {
        let p = start(42);
        next();
        p.children.push(delimitedList(44, constElement, isConstElementStartToken, 93, [88]));
        expect(88);
        return end();
    }
    function isClassConstElementStartToken(t) {
        return t.tokenType === 83 || isSemiReservedToken(t);
    }
    function isConstElementStartToken(t) {
        return t.tokenType === 83;
    }
    function constElement() {
        let p = start(43);
        expect(83);
        expect(85);
        p.children.push(expression(0));
        return end();
    }
    function expression(minPrecedence) {
        let precedence;
        let associativity;
        let op;
        let lhs = expressionAtom();
        let p;
        let rhs;
        let binaryPhraseType;
        while (true) {
            op = peek();
            binaryPhraseType = binaryOpToPhraseType(op);
            if (binaryPhraseType === 0) {
                break;
            }
            [precedence, associativity] = precedenceAssociativityTuple(op);
            if (precedence < minPrecedence) {
                break;
            }
            if (associativity === 1) {
                ++precedence;
            }
            if (binaryPhraseType === 40) {
                lhs = ternaryExpression(lhs);
                continue;
            }
            p = start(binaryPhraseType, true);
            p.children.push(lhs);
            next();
            if (binaryPhraseType === 100) {
                p.children.push(typeDesignator(101));
            } else {
                if (binaryPhraseType === 155 && peek().tokenType === 103) {
                    next();
                    p.phraseType = 16;
                }
                p.children.push(expression(precedence));
            }
            lhs = end();
        }
        return lhs;
    }
    function ternaryExpression(testExpr) {
        let p = start(40, true);
        p.children.push(testExpr);
        next();
        if (optional(87)) {
            p.children.push(expression(0));
        } else {
            p.children.push(expression(0));
            expect(87);
            p.children.push(expression(0));
        }
        return end();
    }
    function variableOrExpression() {
        let part = variableAtom();
        let isVariable = part.phraseType === 156;
        if (isDereferenceOperator(peek())) {
            part = variable(part);
            isVariable = true;
        } else {
            switch (part.phraseType) {
                case 141:
                case 84:
                case 144:
                    part = constantAccessExpression(part);
                    break;
                default:
                    break;
            }
        }
        if (!isVariable) {
            return part;
        }
        let t = peek();
        if (t.tokenType === 135) {
            return postfixExpression(132, part);
        } else if (t.tokenType === 129) {
            return postfixExpression(131, part);
        } else {
            return part;
        }
    }
    function constantAccessExpression(qName) {
        let p = start(41, true);
        p.children.push(qName);
        return end();
    }
    function postfixExpression(phraseType, variableNode) {
        let p = start(phraseType, true);
        p.children.push(variableNode);
        next();
        return end();
    }
    function isDereferenceOperator(t) {
        switch (t.tokenType) {
            case 117:
            case 116:
            case 115:
            case 118:
            case 133:
                return true;
            default:
                return false;
        }
    }
    function expressionAtom() {
        let t = peek();
        switch (t.tokenType) {
            case 60:
                if (peek(1).tokenType === 35) {
                    return anonymousFunctionCreationExpression();
                } else {
                    return variableOrExpression();
                }
            case 78:
                if (isDereferenceOperator(peek(1))) {
                    return variableOrExpression();
                } else {
                    return next(true);
                }
            case 84:
            case 90:
            case 3:
            case 117:
            case 147:
            case 83:
            case 51:
            case 118:
                return variableOrExpression();
            case 135:
                return unaryExpression(134);
            case 129:
                return unaryExpression(133);
            case 111:
            case 143:
            case 89:
            case 86:
                return unaryExpression(174);
            case 94:
                return unaryExpression(63);
            case 152:
            case 153:
            case 150:
            case 155:
            case 151:
            case 148:
            case 149:
                return unaryExpression(19);
            case 47:
                return listIntrinsic();
            case 11:
                return cloneExpression();
            case 52:
                return objectCreationExpression();
            case 79:
            case 82:
            case 73:
            case 72:
            case 71:
            case 77:
            case 75:
            case 74:
            case 76:
            case 10:
                return next(true);
            case 154:
                return heredocStringLiteral();
            case 97:
                return doubleQuotedStringLiteral();
            case 95:
                return shellCommandExpression();
            case 53:
                return printIntrinsic();
            case 69:
                return yieldExpression();
            case 70:
                return yieldFromExpression();
            case 35:
                return anonymousFunctionCreationExpression();
            case 41:
                return scriptInclusion(97);
            case 42:
                return scriptInclusion(98);
            case 57:
                return scriptInclusion(146);
            case 58:
                return scriptInclusion(147);
            case 28:
                return evalIntrinsic();
            case 20:
                return emptyIntrinsic();
            case 29:
                return exitIntrinsic();
            case 46:
                return issetIntrinsic();
            default:
                start(64);
                error();
                return end();
        }
    }
    function exitIntrinsic() {
        let p = start(70);
        next();
        if (optional(118)) {
            if (isExpressionStart(peek())) {
                p.children.push(expression(0));
            }
            expect(121);
        }
        return end();
    }
    function issetIntrinsic() {
        let p = start(107);
        next();
        expect(118);
        p.children.push(variableList([121]));
        expect(121);
        return end();
    }
    function emptyIntrinsic() {
        let p = start(55);
        next();
        expect(118);
        p.children.push(expression(0));
        expect(121);
        return end();
    }
    function evalIntrinsic() {
        let p = start(69);
        next();
        expect(118);
        p.children.push(expression(0));
        expect(121);
        return end();
    }
    function scriptInclusion(phraseType) {
        let p = start(phraseType);
        next();
        p.children.push(expression(0));
        return end();
    }
    function printIntrinsic() {
        let p = start(135);
        next();
        p.children.push(expression(0));
        return end();
    }
    function yieldFromExpression() {
        let p = start(181);
        next();
        p.children.push(expression(0));
        return end();
    }
    function yieldExpression() {
        let p = start(180);
        next();
        if (!isExpressionStart(peek())) {
            return end();
        }
        let keyOrValue = expression(0);
        p.children.push(keyOrValue);
        if (optional(132)) {
            p.children.push(expression(0));
        }
        return end();
    }
    function shellCommandExpression() {
        let p = start(153);
        next();
        p.children.push(encapsulatedVariableList(95));
        expect(95);
        return end();
    }
    function doubleQuotedStringLiteral() {
        let p = start(50);
        next();
        p.children.push(encapsulatedVariableList(97));
        expect(97);
        return end();
    }
    function encapsulatedVariableList(breakOn) {
        return list(58, encapsulatedVariable, isEncapsulatedVariableStart, [breakOn], encapsulatedVariableListRecoverSet);
    }
    function isEncapsulatedVariableStart(t) {
        switch (t.tokenType) {
            case 80:
            case 84:
            case 131:
            case 128:
                return true;
            default:
                return false;
        }
    }
    function encapsulatedVariable() {
        switch (peek().tokenType) {
            case 80:
                return next(true);
            case 84:
                let t = peek(1);
                if (t.tokenType === 117) {
                    return encapsulatedDimension();
                } else if (t.tokenType === 115) {
                    return encapsulatedProperty();
                } else {
                    return simpleVariable();
                }
            case 131:
                return dollarCurlyOpenEncapsulatedVariable();
            case 128:
                return curlyOpenEncapsulatedVariable();
            default:
                throwUnexpectedTokenError(peek());
        }
    }
    function curlyOpenEncapsulatedVariable() {
        let p = start(57);
        next();
        p.children.push(variable(variableAtom()));
        expect(119);
        return end();
    }
    function dollarCurlyOpenEncapsulatedVariable() {
        let p = start(57);
        next();
        let t = peek();
        if (t.tokenType === 84) {
            if (peek(1).tokenType === 117) {
                p.children.push(dollarCurlyEncapsulatedDimension());
            } else {
                let sv = start(156);
                next();
                p.children.push(end());
            }
        } else if (isExpressionStart(t)) {
            p.children.push(expression(0));
        } else {
            error();
        }
        expect(119);
        return end();
    }
    function dollarCurlyEncapsulatedDimension() {
        let p = start(160);
        next();
        next();
        p.children.push(expression(0));
        expect(120);
        return end();
    }
    function encapsulatedDimension() {
        let p = start(160);
        p.children.push(simpleVariable());
        next();
        switch (peek().tokenType) {
            case 83:
            case 82:
                next();
                break;
            case 84:
                p.children.push(simpleVariable());
                break;
            case 143:
                let u = start(174);
                next();
                expect(82);
                p.children.push(end());
                break;
            default:
                error();
                break;
        }
        expect(120);
        return end();
    }
    function encapsulatedProperty() {
        let p = start(136);
        p.children.push(simpleVariable());
        next();
        expect(83);
        return end();
    }
    function heredocStringLiteral() {
        let p = start(94);
        next();
        p.children.push(encapsulatedVariableList(27));
        expect(27);
        return end();
    }
    function anonymousClassDeclaration() {
        let p = start(2);
        p.children.push(anonymousClassDeclarationHeader());
        p.children.push(typeDeclarationBody(29, isClassMemberStart, classMemberDeclarationList));
        return end();
    }
    function anonymousClassDeclarationHeader() {
        let p = start(3);
        next();
        if (optional(118)) {
            if (isArgumentStart(peek())) {
                p.children.push(argumentList());
            }
            expect(121);
        }
        if (peek().tokenType === 30) {
            p.children.push(classBaseClause());
        }
        if (peek().tokenType === 40) {
            p.children.push(classInterfaceClause());
        }
        return end();
    }
    function classInterfaceClause() {
        let p = start(31);
        next();
        p.children.push(qualifiedNameList([116]));
        return end();
    }
    function classMemberDeclarationList() {
        return list(32, classMemberDeclaration, isClassMemberStart, [119], classMemberDeclarationListRecoverSet);
    }
    function isClassMemberStart(t) {
        switch (t.tokenType) {
            case 55:
            case 56:
            case 54:
            case 60:
            case 2:
            case 31:
            case 35:
            case 67:
            case 12:
            case 66:
                return true;
            default:
                return false;
        }
    }
    function classMemberDeclaration() {
        let p = start(61);
        let t = peek();
        switch (t.tokenType) {
            case 55:
            case 56:
            case 54:
            case 60:
            case 2:
            case 31:
                let modifiers = memberModifierList();
                t = peek();
                if (t.tokenType === 84) {
                    p.children.push(modifiers);
                    return propertyDeclaration(p);
                } else if (t.tokenType === 35) {
                    return methodDeclaration(p, modifiers);
                } else if (t.tokenType === 12) {
                    p.children.push(modifiers);
                    return classConstDeclaration(p);
                } else {
                    p.children.push(modifiers);
                    error();
                    return end();
                }
            case 35:
                return methodDeclaration(p, null);
            case 67:
                next();
                return propertyDeclaration(p);
            case 12:
                return classConstDeclaration(p);
            case 66:
                return traitUseClause(p);
            default:
                throwUnexpectedTokenError(t);
        }
    }
    function throwUnexpectedTokenError(t) {
        throw new Error(`Unexpected token: ${t.tokenType}`);
    }
    function traitUseClause(p) {
        p.phraseType = 170;
        next();
        p.children.push(qualifiedNameList([88, 116]));
        p.children.push(traitUseSpecification());
        return end();
    }
    function traitUseSpecification() {
        let p = start(171);
        let t = expectOneOf([88, 116]);
        if (t && t.tokenType === 116) {
            if (isTraitAdaptationStart(peek())) {
                p.children.push(traitAdaptationList());
            }
            expect(119);
        }
        return end();
    }
    function traitAdaptationList() {
        return list(163, traitAdaptation, isTraitAdaptationStart, [119]);
    }
    function isTraitAdaptationStart(t) {
        switch (t.tokenType) {
            case 83:
            case 147:
            case 51:
                return true;
            default:
                return isSemiReservedToken(t);
        }
    }
    function traitAdaptation() {
        let p = start(66);
        let t = peek();
        let t2 = peek(1);
        if (t.tokenType === 51 || t.tokenType === 147 || t.tokenType === 83 && (t2.tokenType === 133 || t2.tokenType === 147)) {
            p.children.push(methodReference());
            if (peek().tokenType === 44) {
                next();
                return traitPrecedence(p);
            }
        } else if (t.tokenType === 83 || isSemiReservedToken(t)) {
            let methodRef = start(116);
            methodRef.children.push(identifier());
            p.children.push(end());
        } else {
            error();
            return end();
        }
        return traitAlias(p);
    }
    function traitAlias(p) {
        p.phraseType = 164;
        expect(4);
        let t = peek();
        if (t.tokenType === 83 || isReservedToken(t)) {
            p.children.push(identifier());
        } else if (isMemberModifier(t)) {
            next();
            t = peek();
            if (t.tokenType === 83 || isSemiReservedToken(t)) {
                p.children.push(identifier());
            }
        } else {
            error();
        }
        expect(88);
        return end();
    }
    function traitPrecedence(p) {
        p.phraseType = 169;
        p.children.push(qualifiedNameList([88]));
        expect(88);
        return end();
    }
    function methodReference() {
        let p = start(116);
        p.children.push(qualifiedName());
        expect(133);
        p.children.push(identifier());
        return end();
    }
    function methodDeclarationHeader(memberModifers) {
        let p = start(115, true);
        if (memberModifers) {
            p.children.push(memberModifers);
        }
        next();
        optional(103);
        p.children.push(identifier());
        expect(118);
        if (isParameterStart(peek())) {
            p.children.push(delimitedList(130, parameterDeclaration, isParameterStart, 93, [121]));
        }
        expect(121);
        if (peek().tokenType === 87) {
            p.children.push(returnType());
        }
        return end();
    }
    function methodDeclaration(p, memberModifers) {
        p.phraseType = 113;
        p.children.push(methodDeclarationHeader(memberModifers));
        p.children.push(methodDeclarationBody());
        return end();
    }
    function methodDeclarationBody() {
        let p = start(114);
        if (peek().tokenType === 88) {
            next();
        } else {
            p.children.push(compoundStatement());
        }
        return end();
    }
    function identifier() {
        let p = start(95);
        let t = peek();
        if (t.tokenType === 83 || isSemiReservedToken(t)) {
            next();
        } else {
            error();
        }
        return end();
    }
    function interfaceDeclaration() {
        let p = start(103);
        p.children.push(interfaceDeclarationHeader());
        p.children.push(typeDeclarationBody(104, isClassMemberStart, interfaceMemberDeclarations));
        return end();
    }
    function typeDeclarationBody(phraseType, elementStartPredicate, listFunction) {
        let p = start(phraseType);
        expect(116);
        if (elementStartPredicate(peek())) {
            p.children.push(listFunction());
        }
        expect(119);
        return end();
    }
    function interfaceMemberDeclarations() {
        return list(106, classMemberDeclaration, isClassMemberStart, [119], classMemberDeclarationListRecoverSet);
    }
    function interfaceDeclarationHeader() {
        let p = start(105);
        next();
        expect(83);
        if (peek().tokenType === 30) {
            p.children.push(interfaceBaseClause());
        }
        return end();
    }
    function interfaceBaseClause() {
        let p = start(102);
        next();
        p.children.push(qualifiedNameList([116]));
        return end();
    }
    function traitDeclaration() {
        let p = start(165);
        p.children.push(traitDeclarationHeader());
        p.children.push(typeDeclarationBody(166, isClassMemberStart, traitMemberDeclarations));
        return end();
    }
    function traitDeclarationHeader() {
        let p = start(167);
        next();
        expect(83);
        return end();
    }
    function traitMemberDeclarations() {
        return list(168, classMemberDeclaration, isClassMemberStart, [119], classMemberDeclarationListRecoverSet);
    }
    function functionDeclaration() {
        let p = start(86);
        p.children.push(functionDeclarationHeader());
        p.children.push(functionDeclarationBody());
        return end();
    }
    function functionDeclarationBody() {
        let cs = compoundStatement();
        cs.phraseType = 87;
        return cs;
    }
    function functionDeclarationHeader() {
        let p = start(88);
        next();
        optional(103);
        expect(83);
        expect(118);
        if (isParameterStart(peek())) {
            p.children.push(delimitedList(130, parameterDeclaration, isParameterStart, 93, [121]));
        }
        expect(121);
        if (peek().tokenType === 87) {
            p.children.push(returnType());
        }
        return end();
    }
    function isParameterStart(t) {
        switch (t.tokenType) {
            case 103:
            case 134:
            case 84:
                return true;
            default:
                return isTypeDeclarationStart(t);
        }
    }
    function classDeclaration() {
        let p = start(28);
        p.children.push(classDeclarationHeader());
        p.children.push(typeDeclarationBody(29, isClassMemberStart, classMemberDeclarationList));
        return end();
    }
    function classDeclarationHeader() {
        let p = start(30);
        optionalOneOf([2, 31]);
        expect(9);
        expect(83);
        if (peek().tokenType === 30) {
            p.children.push(classBaseClause());
        }
        if (peek().tokenType === 40) {
            p.children.push(classInterfaceClause());
        }
        return end();
    }
    function classBaseClause() {
        let p = start(23);
        next();
        p.children.push(qualifiedName());
        return end();
    }
    function compoundStatement() {
        let p = start(39);
        expect(116);
        if (isStatementStart(peek())) {
            p.children.push(statementList([119]));
        }
        expect(119);
        return end();
    }
    function statement() {
        let t = peek();
        switch (t.tokenType) {
            case 51:
                return namespaceDefinition();
            case 66:
                return namespaceUseDeclaration();
            case 38:
                return haltCompilerStatement();
            case 12:
                return constDeclaration();
            case 35:
                {
                    let p1 = peek(1);
                    if (p1.tokenType === 118 || p1.tokenType === 103 && peek(2).tokenType === 118) {
                        return expressionStatement();
                    } else {
                        return functionDeclaration();
                    }
                }
            case 9:
            case 2:
            case 31:
                return classDeclaration();
            case 63:
                return traitDeclaration();
            case 45:
                return interfaceDeclaration();
            case 116:
                return compoundStatement();
            case 39:
                return ifStatement();
            case 68:
                return whileStatement();
            case 16:
                return doStatement();
            case 33:
                return forStatement();
            case 61:
                return switchStatement();
            case 5:
                return breakStatement();
            case 13:
                return continueStatement();
            case 59:
                return returnStatement();
            case 36:
                return globalDeclaration();
            case 60:
                if (peek(1).tokenType === 84 && [88, 93, 158, 85].indexOf(peek(2).tokenType) >= 0) {
                    return functionStaticDeclaration();
                } else {
                    return expressionStatement();
                }
            case 81:
            case 156:
            case 158:
                return inlineText();
            case 34:
                return foreachStatement();
            case 14:
                return declareStatement();
            case 64:
                return tryStatement();
            case 62:
                return throwStatement();
            case 37:
                return gotoStatement();
            case 17:
            case 157:
                return echoIntrinsic();
            case 65:
                return unsetIntrinsic();
            case 88:
                return nullStatement();
            case 83:
                if (peek(1).tokenType === 87) {
                    return namedLabelStatement();
                }
            default:
                return expressionStatement();
        }
    }
    function inlineText() {
        let p = start(99);
        optional(158);
        optional(81);
        optional(156);
        return end();
    }
    function nullStatement() {
        start(127);
        next();
        return end();
    }
    function isCatchClauseStart(t) {
        return t.tokenType === 8;
    }
    function tryStatement() {
        let p = start(172);
        next();
        p.children.push(compoundStatement());
        let t = peek();
        if (t.tokenType === 8) {
            p.children.push(list(21, catchClause, isCatchClauseStart));
        } else if (t.tokenType !== 32) {
            error();
        }
        if (peek().tokenType === 32) {
            p.children.push(finallyClause());
        }
        return end();
    }
    function finallyClause() {
        let p = start(74);
        next();
        p.children.push(compoundStatement());
        return end();
    }
    function catchClause() {
        let p = start(20);
        next();
        expect(118);
        p.children.push(delimitedList(22, qualifiedName, isQualifiedNameStart, 123, [84]));
        expect(84);
        expect(121);
        p.children.push(compoundStatement());
        return end();
    }
    function declareDirective() {
        let p = start(46);
        expect(83);
        expect(85);
        expectOneOf([82, 79, 78]);
        return end();
    }
    function declareStatement() {
        let p = start(47);
        next();
        expect(118);
        p.children.push(declareDirective());
        expect(121);
        let t = peek();
        if (t.tokenType === 87) {
            next();
            p.children.push(statementList([21]));
            expect(21);
            expect(88);
        } else if (isStatementStart(t)) {
            p.children.push(statement());
        } else if (t.tokenType === 88) {
            next();
        } else {
            error();
        }
        return end();
    }
    function switchStatement() {
        let p = start(161);
        next();
        expect(118);
        p.children.push(expression(0));
        expect(121);
        let t = expectOneOf([87, 116]);
        let tCase = peek();
        if (tCase.tokenType === 7 || tCase.tokenType === 15) {
            p.children.push(caseStatements(t && t.tokenType === 87 ? 25 : 119));
        }
        if (t && t.tokenType === 87) {
            expect(25);
            expect(88);
        } else {
            expect(119);
        }
        return end();
    }
    function caseStatements(breakOn) {
        let p = start(18);
        let t;
        let caseBreakOn = [7, 15];
        caseBreakOn.push(breakOn);
        while (true) {
            t = peek();
            if (t.tokenType === 7) {
                p.children.push(caseStatement(caseBreakOn));
            } else if (t.tokenType === 15) {
                p.children.push(defaultStatement(caseBreakOn));
            } else if (breakOn === t.tokenType) {
                break;
            } else {
                error();
                break;
            }
        }
        return end();
    }
    function caseStatement(breakOn) {
        let p = start(17);
        next();
        p.children.push(expression(0));
        expectOneOf([87, 88]);
        if (isStatementStart(peek())) {
            p.children.push(statementList(breakOn));
        }
        return end();
    }
    function defaultStatement(breakOn) {
        let p = start(48);
        next();
        expectOneOf([87, 88]);
        if (isStatementStart(peek())) {
            p.children.push(statementList(breakOn));
        }
        return end();
    }
    function namedLabelStatement() {
        let p = start(118);
        next();
        next();
        return end();
    }
    function gotoStatement() {
        let p = start(92);
        next();
        expect(83);
        expect(88);
        return end();
    }
    function throwStatement() {
        let p = start(162);
        next();
        p.children.push(expression(0));
        expect(88);
        return end();
    }
    function foreachCollection() {
        let p = start(76);
        p.children.push(expression(0));
        return end();
    }
    function foreachKeyOrValue() {
        let p = start(79);
        p.children.push(expression(0));
        if (peek().tokenType === 132) {
            next();
            p.phraseType = 77;
        }
        return end();
    }
    function foreachValue() {
        let p = start(79);
        optional(103);
        p.children.push(expression(0));
        return end();
    }
    function foreachStatement() {
        let p = start(78);
        next();
        expect(118);
        p.children.push(foreachCollection());
        expect(4);
        let keyOrValue = peek().tokenType === 103 ? foreachValue() : foreachKeyOrValue();
        p.children.push(keyOrValue);
        if (keyOrValue.phraseType === 77) {
            p.children.push(foreachValue());
        }
        expect(121);
        let t = peek();
        if (t.tokenType === 87) {
            next();
            p.children.push(statementList([23]));
            expect(23);
            expect(88);
        } else if (isStatementStart(t)) {
            p.children.push(statement());
        } else {
            error();
        }
        return end();
    }
    function isVariableStart(t) {
        switch (t.tokenType) {
            case 84:
            case 90:
            case 118:
            case 3:
            case 117:
            case 78:
            case 60:
            case 83:
            case 51:
            case 147:
                return true;
            default:
                return false;
        }
    }
    function variableInitial() {
        return variable(variableAtom());
    }
    function variableList(breakOn) {
        return delimitedList(176, variableInitial, isVariableStart, 93, breakOn);
    }
    function unsetIntrinsic() {
        let p = start(175);
        next();
        expect(118);
        p.children.push(variableList([121]));
        expect(121);
        expect(88);
        return end();
    }
    function expressionInitial() {
        return expression(0);
    }
    function echoIntrinsic() {
        let p = start(51);
        next();
        p.children.push(delimitedList(72, expressionInitial, isExpressionStart, 93));
        expect(88);
        return end();
    }
    function isStaticVariableDclarationStart(t) {
        return t.tokenType === 84;
    }
    function functionStaticDeclaration() {
        let p = start(89);
        next();
        p.children.push(delimitedList(159, staticVariableDeclaration, isStaticVariableDclarationStart, 93, [88]));
        expect(88);
        return end();
    }
    function globalDeclaration() {
        let p = start(91);
        next();
        p.children.push(delimitedList(177, simpleVariable, isSimpleVariableStart, 93, [88]));
        expect(88);
        return end();
    }
    function isSimpleVariableStart(t) {
        switch (t.tokenType) {
            case 84:
            case 90:
                return true;
            default:
                return false;
        }
    }
    function staticVariableDeclaration() {
        let p = start(158);
        expect(84);
        if (peek().tokenType === 85) {
            p.children.push(functionStaticInitialiser());
        }
        return end();
    }
    function functionStaticInitialiser() {
        let p = start(90);
        next();
        p.children.push(expression(0));
        return end();
    }
    function continueStatement() {
        let p = start(45);
        next();
        if (isExpressionStart(peek())) {
            p.children.push(expression(0));
        }
        expect(88);
        return end();
    }
    function breakStatement() {
        let p = start(15);
        next();
        if (isExpressionStart(peek())) {
            p.children.push(expression(0));
        }
        expect(88);
        return end();
    }
    function returnStatement() {
        let p = start(148);
        next();
        if (isExpressionStart(peek())) {
            p.children.push(expression(0));
        }
        expect(88);
        return end();
    }
    function forExpressionGroup(phraseType, breakOn) {
        return delimitedList(phraseType, expressionInitial, isExpressionStart, 93, breakOn);
    }
    function forStatement() {
        let p = start(83);
        next();
        expect(118);
        if (isExpressionStart(peek())) {
            p.children.push(forExpressionGroup(82, [88]));
        }
        expect(88);
        if (isExpressionStart(peek())) {
            p.children.push(forExpressionGroup(75, [88]));
        }
        expect(88);
        if (isExpressionStart(peek())) {
            p.children.push(forExpressionGroup(80, [121]));
        }
        expect(121);
        let t = peek();
        if (t.tokenType === 87) {
            next();
            p.children.push(statementList([22]));
            expect(22);
            expect(88);
        } else if (isStatementStart(peek())) {
            p.children.push(statement());
        } else {
            error();
        }
        return end();
    }
    function doStatement() {
        let p = start(49);
        next();
        p.children.push(statement());
        expect(68);
        expect(118);
        p.children.push(expression(0));
        expect(121);
        expect(88);
        return end();
    }
    function whileStatement() {
        let p = start(179);
        next();
        expect(118);
        p.children.push(expression(0));
        expect(121);
        let t = peek();
        if (t.tokenType === 87) {
            next();
            p.children.push(statementList([26]));
            expect(26);
            expect(88);
        } else if (isStatementStart(t)) {
            p.children.push(statement());
        } else {
            error();
        }
        return end();
    }
    function elseIfClause1() {
        let p = start(53);
        next();
        expect(118);
        p.children.push(expression(0));
        expect(121);
        p.children.push(statement());
        return end();
    }
    function elseIfClause2() {
        let p = start(53);
        next();
        expect(118);
        p.children.push(expression(0));
        expect(121);
        expect(87);
        p.children.push(statementList([24, 18, 19]));
        return end();
    }
    function elseClause1() {
        let p = start(52);
        next();
        p.children.push(statement());
        return end();
    }
    function elseClause2() {
        let p = start(52);
        next();
        expect(87);
        p.children.push(statementList([24]));
        return end();
    }
    function isElseIfClauseStart(t) {
        return t.tokenType === 19;
    }
    function ifStatement() {
        let p = start(96);
        next();
        expect(118);
        p.children.push(expression(0));
        expect(121);
        let t = peek();
        let elseIfClauseFunction = elseIfClause1;
        let elseClauseFunction = elseClause1;
        let expectEndIf = false;
        if (t.tokenType === 87) {
            next();
            p.children.push(statementList([19, 18, 24]));
            elseIfClauseFunction = elseIfClause2;
            elseClauseFunction = elseClause2;
            expectEndIf = true;
        } else if (isStatementStart(t)) {
            p.children.push(statement());
        } else {
            error();
        }
        if (peek().tokenType === 19) {
            p.children.push(list(54, elseIfClauseFunction, isElseIfClauseStart));
        }
        if (peek().tokenType === 18) {
            p.children.push(elseClauseFunction());
        }
        if (expectEndIf) {
            expect(24);
            expect(88);
        }
        return end();
    }
    function expressionStatement() {
        let p = start(73);
        p.children.push(expression(0));
        expect(88);
        return end();
    }
    function returnType() {
        let p = start(149);
        next();
        p.children.push(typeDeclaration());
        return end();
    }
    function typeDeclaration() {
        let p = start(173);
        optional(96);
        switch (peek().tokenType) {
            case 6:
            case 3:
                next();
                break;
            case 83:
            case 51:
            case 147:
                p.children.push(qualifiedName());
                break;
            default:
                error();
                break;
        }
        return end();
    }
    function classConstDeclaration(p) {
        p.phraseType = 25;
        next();
        p.children.push(delimitedList(27, classConstElement, isClassConstElementStartToken, 93, [88]));
        expect(88);
        return end();
    }
    function isExpressionStart(t) {
        switch (t.tokenType) {
            case 84:
            case 90:
            case 3:
            case 117:
            case 78:
            case 147:
            case 83:
            case 51:
            case 118:
            case 60:
            case 135:
            case 129:
            case 111:
            case 143:
            case 89:
            case 86:
            case 94:
            case 152:
            case 153:
            case 150:
            case 155:
            case 151:
            case 148:
            case 149:
            case 47:
            case 11:
            case 52:
            case 79:
            case 82:
            case 73:
            case 72:
            case 71:
            case 77:
            case 75:
            case 74:
            case 76:
            case 10:
            case 154:
            case 97:
            case 95:
            case 53:
            case 69:
            case 70:
            case 35:
            case 41:
            case 42:
            case 57:
            case 58:
            case 28:
            case 20:
            case 46:
            case 29:
                return true;
            default:
                return false;
        }
    }
    function classConstElement() {
        let p = start(26);
        p.children.push(identifier());
        expect(85);
        p.children.push(expression(0));
        return end();
    }
    function isPropertyElementStart(t) {
        return t.tokenType === 84;
    }
    function propertyDeclaration(p) {
        let t;
        p.phraseType = 137;
        p.children.push(delimitedList(139, propertyElement, isPropertyElementStart, 93, [88]));
        expect(88);
        return end();
    }
    function propertyElement() {
        let p = start(138);
        expect(84);
        if (peek().tokenType === 85) {
            p.children.push(propertyInitialiser());
        }
        return end();
    }
    function propertyInitialiser() {
        let p = start(140);
        next();
        p.children.push(expression(0));
        return end();
    }
    function memberModifierList() {
        let p = start(110);
        while (isMemberModifier(peek())) {
            next();
        }
        return end();
    }
    function isMemberModifier(t) {
        switch (t.tokenType) {
            case 55:
            case 56:
            case 54:
            case 60:
            case 2:
            case 31:
                return true;
            default:
                return false;
        }
    }
    function qualifiedNameList(breakOn) {
        return delimitedList(142, qualifiedName, isQualifiedNameStart, 93, breakOn);
    }
    function objectCreationExpression() {
        let p = start(128);
        next();
        if (peek().tokenType === 9) {
            p.children.push(anonymousClassDeclaration());
            return end();
        }
        p.children.push(typeDesignator(34));
        if (optional(118)) {
            if (isArgumentStart(peek())) {
                p.children.push(argumentList());
            }
            expect(121);
        }
        return end();
    }
    function typeDesignator(phraseType) {
        let p = start(phraseType);
        let part = classTypeDesignatorAtom();
        while (true) {
            switch (peek().tokenType) {
                case 117:
                    part = subscriptExpression(part, 120);
                    continue;
                case 116:
                    part = subscriptExpression(part, 119);
                    continue;
                case 115:
                    part = propertyAccessExpression(part);
                    continue;
                case 133:
                    let staticPropNode = start(152);
                    staticPropNode.children.push(part);
                    next();
                    staticPropNode.children.push(restrictedScopedMemberName());
                    part = end();
                    continue;
                default:
                    break;
            }
            break;
        }
        p.children.push(part);
        return end();
    }
    function restrictedScopedMemberName() {
        let p = start(151);
        let t = peek();
        switch (t.tokenType) {
            case 84:
                next();
                break;
            case 90:
                p.children.push(simpleVariable());
                break;
            default:
                error();
                break;
        }
        return end();
    }
    function classTypeDesignatorAtom() {
        let t = peek();
        switch (t.tokenType) {
            case 60:
                return relativeScope();
            case 84:
            case 90:
                return simpleVariable();
            case 83:
            case 51:
            case 147:
                return qualifiedName();
            default:
                start(62);
                error();
                return end();
        }
    }
    function cloneExpression() {
        let p = start(35);
        next();
        p.children.push(expression(0));
        return end();
    }
    function listIntrinsic() {
        let p = start(108);
        next();
        expect(118);
        p.children.push(arrayInitialiserList(121));
        expect(121);
        return end();
    }
    function unaryExpression(phraseType) {
        let p = start(phraseType);
        let op = next();
        switch (phraseType) {
            case 133:
            case 134:
                p.children.push(variable(variableAtom()));
                break;
            default:
                p.children.push(expression(precedenceAssociativityTuple(op)[0]));
                break;
        }
        return end();
    }
    function anonymousFunctionHeader() {
        let p = start(5);
        optional(60);
        next();
        optional(103);
        expect(118);
        if (isParameterStart(peek())) {
            p.children.push(delimitedList(130, parameterDeclaration, isParameterStart, 93, [121]));
        }
        expect(121);
        if (peek().tokenType === 66) {
            p.children.push(anonymousFunctionUseClause());
        }
        if (peek().tokenType === 87) {
            p.children.push(returnType());
        }
        return end();
    }
    function anonymousFunctionCreationExpression() {
        let p = start(4);
        p.children.push(anonymousFunctionHeader());
        p.children.push(functionDeclarationBody());
        return end();
    }
    function isAnonymousFunctionUseVariableStart(t) {
        return t.tokenType === 84 || t.tokenType === 103;
    }
    function anonymousFunctionUseClause() {
        let p = start(6);
        next();
        expect(118);
        p.children.push(delimitedList(36, anonymousFunctionUseVariable, isAnonymousFunctionUseVariableStart, 93, [121]));
        expect(121);
        return end();
    }
    function anonymousFunctionUseVariable() {
        let p = start(7);
        optional(103);
        expect(84);
        return end();
    }
    function isTypeDeclarationStart(t) {
        switch (t.tokenType) {
            case 147:
            case 83:
            case 51:
            case 96:
            case 3:
            case 6:
                return true;
            default:
                return false;
        }
    }
    function parameterDeclaration() {
        let p = start(129);
        if (isTypeDeclarationStart(peek())) {
            p.children.push(typeDeclaration());
        }
        optional(103);
        optional(134);
        expect(84);
        if (peek().tokenType === 85) {
            next();
            p.children.push(expression(0));
        }
        return end();
    }
    function variable(variableAtomNode) {
        let count = 0;
        while (true) {
            ++count;
            switch (peek().tokenType) {
                case 133:
                    variableAtomNode = scopedAccessExpression(variableAtomNode);
                    continue;
                case 115:
                    variableAtomNode = propertyOrMethodAccessExpression(variableAtomNode);
                    continue;
                case 117:
                    variableAtomNode = subscriptExpression(variableAtomNode, 120);
                    continue;
                case 116:
                    variableAtomNode = subscriptExpression(variableAtomNode, 119);
                    continue;
                case 118:
                    variableAtomNode = functionCallExpression(variableAtomNode);
                    continue;
                default:
                    if (count === 1 && variableAtomNode.phraseType !== 156) {
                        let errNode = start(67, true);
                        errNode.children.push(variableAtomNode);
                        error();
                        return end();
                    }
                    break;
            }
            break;
        }
        return variableAtomNode;
    }
    function functionCallExpression(lhs) {
        let p = start(85, true);
        p.children.push(lhs);
        expect(118);
        if (isArgumentStart(peek())) {
            p.children.push(argumentList());
        }
        expect(121);
        return end();
    }
    function scopedAccessExpression(lhs) {
        let p = start(65, true);
        p.children.push(lhs);
        next();
        p.children.push(scopedMemberName(p));
        if (optional(118)) {
            p.phraseType = 150;
            if (isArgumentStart(peek())) {
                p.children.push(argumentList());
            }
            expect(121);
            return end();
        } else if (p.phraseType === 150) {
            error();
        }
        return end();
    }
    function scopedMemberName(parent) {
        let p = start(151);
        let t = peek();
        switch (t.tokenType) {
            case 116:
                parent.phraseType = 150;
                p.children.push(encapsulatedExpression(116, 119));
                break;
            case 84:
                parent.phraseType = 152;
                next();
                break;
            case 90:
                p.children.push(simpleVariable());
                parent.phraseType = 152;
                break;
            default:
                if (t.tokenType === 83 || isSemiReservedToken(t)) {
                    p.children.push(identifier());
                    parent.phraseType = 24;
                } else {
                    error();
                }
                break;
        }
        return end();
    }
    function propertyAccessExpression(lhs) {
        let p = start(136, true);
        p.children.push(lhs);
        next();
        p.children.push(memberName());
        return end();
    }
    function propertyOrMethodAccessExpression(lhs) {
        let p = start(136, true);
        p.children.push(lhs);
        next();
        p.children.push(memberName());
        if (optional(118)) {
            if (isArgumentStart(peek())) {
                p.children.push(argumentList());
            }
            p.phraseType = 112;
            expect(121);
        }
        return end();
    }
    function memberName() {
        let p = start(111);
        switch (peek().tokenType) {
            case 83:
                next();
                break;
            case 116:
                p.children.push(encapsulatedExpression(116, 119));
                break;
            case 90:
            case 84:
                p.children.push(simpleVariable());
                break;
            default:
                error();
                break;
        }
        return end();
    }
    function subscriptExpression(lhs, closeTokenType) {
        let p = start(160, true);
        p.children.push(lhs);
        next();
        if (isExpressionStart(peek())) {
            p.children.push(expression(0));
        }
        expect(closeTokenType);
        return end();
    }
    function argumentList() {
        return delimitedList(8, argumentExpression, isArgumentStart, 93, [121]);
    }
    function isArgumentStart(t) {
        return t.tokenType === 134 || isExpressionStart(t);
    }
    function variadicUnpacking() {
        let p = start(178);
        next();
        p.children.push(expression(0));
        return end();
    }
    function argumentExpression() {
        return peek().tokenType === 134 ? variadicUnpacking() : expression(0);
    }
    function qualifiedName() {
        let p = start(141);
        let t = peek();
        if (t.tokenType === 147) {
            next();
            p.phraseType = 84;
        } else if (t.tokenType === 51) {
            p.phraseType = 144;
            next();
            expect(147);
        }
        p.children.push(namespaceName());
        return end();
    }
    function isQualifiedNameStart(t) {
        switch (t.tokenType) {
            case 147:
            case 83:
            case 51:
                return true;
            default:
                return false;
        }
    }
    function shortArrayCreationExpression() {
        let p = start(9);
        next();
        if (isArrayElementStart(peek())) {
            p.children.push(arrayInitialiserList(120));
        }
        expect(120);
        return end();
    }
    function longArrayCreationExpression() {
        let p = start(9);
        next();
        expect(118);
        if (isArrayElementStart(peek())) {
            p.children.push(arrayInitialiserList(121));
        }
        expect(121);
        return end();
    }
    function isArrayElementStart(t) {
        return t.tokenType === 103 || isExpressionStart(t);
    }
    function arrayInitialiserList(breakOn) {
        let p = start(11);
        let t;
        let arrayInitialiserListRecoverSet = [breakOn, 93];
        recoverSetStack.push(arrayInitialiserListRecoverSet);
        while (true) {
            if (isArrayElementStart(peek())) {
                p.children.push(arrayElement());
            }
            t = peek();
            if (t.tokenType === 93) {
                next();
            } else if (t.tokenType === breakOn) {
                break;
            } else {
                error();
                if (isArrayElementStart(t)) {
                    continue;
                } else {
                    defaultSyncStrategy();
                    t = peek();
                    if (t.tokenType === 93 || t.tokenType === breakOn) {
                        continue;
                    }
                }
                break;
            }
        }
        recoverSetStack.pop();
        return end();
    }
    function arrayValue() {
        let p = start(13);
        optional(103);
        p.children.push(expression(0));
        return end();
    }
    function arrayKey() {
        let p = start(12);
        p.children.push(expression(0));
        return end();
    }
    function arrayElement() {
        let p = start(10);
        if (peek().tokenType === 103) {
            p.children.push(arrayValue());
            return end();
        }
        let keyOrValue = arrayKey();
        p.children.push(keyOrValue);
        if (!optional(132)) {
            keyOrValue.phraseType = 13;
            return end();
        }
        p.children.push(arrayValue());
        return end();
    }
    function encapsulatedExpression(openTokenType, closeTokenType) {
        let p = start(56);
        expect(openTokenType);
        p.children.push(expression(0));
        expect(closeTokenType);
        return end();
    }
    function relativeScope() {
        let p = start(145);
        next();
        return end();
    }
    function variableAtom() {
        let t = peek();
        switch (t.tokenType) {
            case 84:
            case 90:
                return simpleVariable();
            case 118:
                return encapsulatedExpression(118, 121);
            case 3:
                return longArrayCreationExpression();
            case 117:
                return shortArrayCreationExpression();
            case 78:
                return next(true);
            case 60:
                return relativeScope();
            case 83:
            case 51:
            case 147:
                return qualifiedName();
            default:
                let p = start(68);
                error();
                return end();
        }
    }
    function simpleVariable() {
        let p = start(156);
        let t = expectOneOf([84, 90]);
        if (t && t.tokenType === 90) {
            t = peek();
            if (t.tokenType === 116) {
                p.children.push(encapsulatedExpression(116, 119));
            } else if (t.tokenType === 90 || t.tokenType === 84) {
                p.children.push(simpleVariable());
            } else {
                error();
            }
        }
        return end();
    }
    function haltCompilerStatement() {
        let p = start(93);
        next();
        expect(118);
        expect(121);
        expect(88);
        return end();
    }
    function namespaceUseDeclaration() {
        let p = start(124);
        next();
        optionalOneOf([35, 12]);
        optional(147);
        let nsNameNode = namespaceName();
        let t = peek();
        if (t.tokenType === 147 || t.tokenType === 116) {
            p.children.push(nsNameNode);
            expect(147);
            expect(116);
            p.children.push(delimitedList(126, namespaceUseGroupClause, isNamespaceUseGroupClauseStartToken, 93, [119]));
            expect(119);
            expect(88);
            return end();
        }
        p.children.push(delimitedList(123, namespaceUseClauseFunction(nsNameNode), isNamespaceUseClauseStartToken, 93, [88], true));
        expect(88);
        return end();
    }
    function isNamespaceUseClauseStartToken(t) {
        return t.tokenType === 83 || t.tokenType === 147;
    }
    function namespaceUseClauseFunction(nsName) {
        return () => {
            let p = start(122, !!nsName);
            if (nsName) {
                p.children.push(nsName);
                nsName = null;
            } else {
                p.children.push(namespaceName());
            }
            if (peek().tokenType === 4) {
                p.children.push(namespaceAliasingClause());
            }
            return end();
        };
    }
    function delimitedList(phraseType, elementFunction, elementStartPredicate, delimiter, breakOn, doNotPushHiddenToParent) {
        let p = start(phraseType, doNotPushHiddenToParent);
        let t;
        let delimitedListRecoverSet = breakOn ? breakOn.slice(0) : [];
        delimitedListRecoverSet.push(delimiter);
        recoverSetStack.push(delimitedListRecoverSet);
        while (true) {
            p.children.push(elementFunction());
            t = peek();
            if (t.tokenType === delimiter) {
                next();
            } else if (!breakOn || breakOn.indexOf(t.tokenType) >= 0) {
                break;
            } else {
                error();
                if (elementStartPredicate(t)) {
                    continue;
                } else if (breakOn) {
                    defaultSyncStrategy();
                    if (peek().tokenType === delimiter) {
                        continue;
                    }
                }
                break;
            }
        }
        recoverSetStack.pop();
        return end();
    }
    function isNamespaceUseGroupClauseStartToken(t) {
        switch (t.tokenType) {
            case 12:
            case 35:
            case 83:
                return true;
            default:
                return false;
        }
    }
    function namespaceUseGroupClause() {
        let p = start(125);
        optionalOneOf([35, 12]);
        p.children.push(namespaceName());
        if (peek().tokenType === 4) {
            p.children.push(namespaceAliasingClause());
        }
        return end();
    }
    function namespaceAliasingClause() {
        let p = start(119);
        next();
        expect(83);
        return end();
    }
    function namespaceDefinition() {
        let p = start(120);
        next();
        if (peek().tokenType === 83) {
            p.children.push(namespaceName());
            let t = expectOneOf([88, 116]);
            if (!t || t.tokenType !== 116) {
                return end();
            }
        } else {
            expect(116);
        }
        p.children.push(statementList([119]));
        expect(119);
        return end();
    }
    function namespaceName() {
        start(121);
        expect(83);
        while (true) {
            if (peek().tokenType === 147 && peek(1).tokenType === 83) {
                next();
                next();
            } else {
                break;
            }
        }
        return end();
    }
    function isReservedToken(t) {
        switch (t.tokenType) {
            case 41:
            case 42:
            case 28:
            case 57:
            case 58:
            case 49:
            case 50:
            case 48:
            case 43:
            case 52:
            case 11:
            case 29:
            case 39:
            case 19:
            case 18:
            case 24:
            case 17:
            case 16:
            case 68:
            case 26:
            case 33:
            case 22:
            case 34:
            case 23:
            case 14:
            case 21:
            case 4:
            case 64:
            case 8:
            case 32:
            case 62:
            case 66:
            case 44:
            case 36:
            case 67:
            case 65:
            case 46:
            case 20:
            case 13:
            case 37:
            case 35:
            case 12:
            case 59:
            case 53:
            case 69:
            case 47:
            case 61:
            case 25:
            case 7:
            case 15:
            case 5:
            case 3:
            case 6:
            case 30:
            case 40:
            case 51:
            case 63:
            case 45:
            case 9:
            case 10:
            case 77:
            case 74:
            case 75:
            case 73:
            case 72:
            case 71:
            case 76:
                return true;
            default:
                return false;
        }
    }
    function isSemiReservedToken(t) {
        switch (t.tokenType) {
            case 60:
            case 2:
            case 31:
            case 54:
            case 56:
            case 55:
                return true;
            default:
                return isReservedToken(t);
        }
    }
    function isStatementStart(t) {
        switch (t.tokenType) {
            case 51:
            case 66:
            case 38:
            case 12:
            case 35:
            case 9:
            case 2:
            case 31:
            case 63:
            case 45:
            case 116:
            case 39:
            case 68:
            case 16:
            case 33:
            case 61:
            case 5:
            case 13:
            case 59:
            case 36:
            case 60:
            case 17:
            case 65:
            case 34:
            case 14:
            case 64:
            case 62:
            case 37:
            case 83:
            case 88:
            case 158:
            case 81:
            case 156:
            case 157:
                return true;
            default:
                return isExpressionStart(t);
        }
    }
})(Parser = exports.Parser || (exports.Parser = {}));

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
function phraseTypeToString(type) {
    switch (type) {
        case 0:
            return 'Unknown';
        case 1:
            return 'AdditiveExpression';
        case 2:
            return 'AnonymousClassDeclaration';
        case 3:
            return 'AnonymousClassDeclarationHeader';
        case 4:
            return 'AnonymousFunctionCreationExpression';
        case 5:
            return 'AnonymousFunctionHeader';
        case 6:
            return 'AnonymousFunctionUseClause';
        case 7:
            return 'AnonymousFunctionUseVariable';
        case 8:
            return 'ArgumentExpressionList';
        case 9:
            return 'ArrayCreationExpression';
        case 10:
            return 'ArrayElement';
        case 11:
            return 'ArrayInitialiserList';
        case 12:
            return 'ArrayKey';
        case 13:
            return 'ArrayValue';
        case 14:
            return 'BitwiseExpression';
        case 15:
            return 'BreakStatement';
        case 16:
            return 'ByRefAssignmentExpression';
        case 17:
            return 'CaseStatement';
        case 18:
            return 'CaseStatementList';
        case 19:
            return 'CastExpression';
        case 20:
            return 'CatchClause';
        case 21:
            return 'CatchClauseList';
        case 22:
            return 'CatchNameList';
        case 23:
            return 'ClassBaseClause';
        case 24:
            return 'ClassConstantAccessExpression';
        case 25:
            return 'ClassConstDeclaration';
        case 26:
            return 'ClassConstElement';
        case 27:
            return 'ClassConstElementList';
        case 28:
            return 'ClassDeclaration';
        case 29:
            return 'ClassDeclarationBody';
        case 30:
            return 'ClassDeclarationHeader';
        case 31:
            return 'ClassInterfaceClause';
        case 32:
            return 'ClassMemberDeclarationList';
        case 33:
            return 'ClassModifiers';
        case 34:
            return 'ClassTypeDesignator';
        case 35:
            return 'CloneExpression';
        case 36:
            return 'ClosureUseList';
        case 37:
            return 'CoalesceExpression';
        case 38:
            return 'CompoundAssignmentExpression';
        case 39:
            return 'CompoundStatement';
        case 40:
            return 'TernaryExpression';
        case 41:
            return 'ConstantAccessExpression';
        case 42:
            return 'ConstDeclaration';
        case 43:
            return 'ConstElement';
        case 44:
            return 'ConstElementList';
        case 45:
            return 'ContinueStatement';
        case 46:
            return 'DeclareDirective';
        case 47:
            return 'DeclareStatement';
        case 48:
            return 'DefaultStatement';
        case 49:
            return 'DoStatement';
        case 50:
            return 'DoubleQuotedStringLiteral';
        case 51:
            return 'EchoIntrinsic';
        case 52:
            return 'ElseClause';
        case 53:
            return 'ElseIfClause';
        case 54:
            return 'ElseIfClauseList';
        case 55:
            return 'EmptyIntrinsic';
        case 56:
            return 'EncapsulatedExpression';
        case 57:
            return 'EncapsulatedVariable';
        case 58:
            return 'EncapsulatedVariableList';
        case 59:
            return 'EqualityExpression';
        case 60:
            return 'Error';
        case 61:
            return 'ErrorClassMemberDeclaration';
        case 62:
            return 'ErrorClassTypeDesignatorAtom';
        case 63:
            return 'ErrorControlExpression';
        case 64:
            return 'ErrorExpression';
        case 65:
            return 'ErrorScopedAccessExpression';
        case 66:
            return 'ErrorTraitAdaptation';
        case 67:
            return 'ErrorVariable';
        case 68:
            return 'ErrorVariableAtom';
        case 69:
            return 'EvalIntrinsic';
        case 70:
            return 'ExitIntrinsic';
        case 71:
            return 'ExponentiationExpression';
        case 72:
            return 'ExpressionList';
        case 73:
            return 'ExpressionStatement';
        case 74:
            return 'FinallyClause';
        case 75:
            return 'ForControl';
        case 76:
            return 'ForeachCollection';
        case 77:
            return 'ForeachKey';
        case 78:
            return 'ForeachStatement';
        case 79:
            return 'ForeachValue';
        case 80:
            return 'ForEndOfLoop';
        case 81:
            return 'ForExpressionGroup';
        case 82:
            return 'ForInitialiser';
        case 83:
            return 'ForStatement';
        case 84:
            return 'FullyQualifiedName';
        case 85:
            return 'FunctionCallExpression';
        case 86:
            return 'FunctionDeclaration';
        case 88:
            return 'FunctionDeclarationHeader';
        case 87:
            return 'FunctionDeclarationBody';
        case 89:
            return 'FunctionStaticDeclaration';
        case 90:
            return 'FunctionStaticInitialiser';
        case 91:
            return 'GlobalDeclaration';
        case 92:
            return 'GotoStatement';
        case 93:
            return 'HaltCompilerStatement';
        case 94:
            return 'HeredocStringLiteral';
        case 95:
            return 'Identifier';
        case 96:
            return 'IfStatement';
        case 97:
            return 'IncludeExpression';
        case 98:
            return 'IncludeOnceExpression';
        case 99:
            return 'InlineText';
        case 100:
            return 'InstanceOfExpression';
        case 101:
            return 'InstanceofTypeDesignator';
        case 102:
            return 'InterfaceBaseClause';
        case 103:
            return 'InterfaceDeclaration';
        case 104:
            return 'InterfaceDeclarationBody';
        case 105:
            return 'InterfaceDeclarationHeader';
        case 106:
            return 'InterfaceMemberDeclarationList';
        case 107:
            return 'IssetIntrinsic';
        case 108:
            return 'ListIntrinsic';
        case 109:
            return 'LogicalExpression';
        case 110:
            return 'MemberModifierList';
        case 111:
            return 'MemberName';
        case 112:
            return 'MethodCallExpression';
        case 113:
            return 'MethodDeclaration';
        case 114:
            return 'MethodDeclarationBody';
        case 115:
            return 'MethodDeclarationHeader';
        case 116:
            return 'MethodReference';
        case 117:
            return 'MultiplicativeExpression';
        case 118:
            return 'NamedLabelStatement';
        case 119:
            return 'NamespaceAliasingClause';
        case 120:
            return 'NamespaceDefinition';
        case 121:
            return 'NamespaceName';
        case 122:
            return 'NamespaceUseClause';
        case 123:
            return 'NamespaceUseClauseList';
        case 124:
            return 'NamespaceUseDeclaration';
        case 125:
            return 'NamespaceUseGroupClause';
        case 126:
            return 'NamespaceUseGroupClauseList';
        case 127:
            return 'NullStatement';
        case 128:
            return 'ObjectCreationExpression';
        case 129:
            return 'ParameterDeclaration';
        case 130:
            return 'ParameterDeclarationList';
        case 131:
            return 'PostfixDecrementExpression';
        case 132:
            return 'PostfixIncrementExpression';
        case 133:
            return 'PrefixDecrementExpression';
        case 134:
            return 'PrefixIncrementExpression';
        case 135:
            return 'PrintIntrinsic';
        case 136:
            return 'PropertyAccessExpression';
        case 137:
            return 'PropertyDeclaration';
        case 138:
            return 'PropertyElement';
        case 139:
            return 'PropertyElementList';
        case 140:
            return 'PropertyInitialiser';
        case 141:
            return 'QualifiedName';
        case 142:
            return 'QualifiedNameList';
        case 143:
            return 'RelationalExpression';
        case 144:
            return 'RelativeQualifiedName';
        case 145:
            return 'RelativeScope';
        case 146:
            return 'RequireExpression';
        case 147:
            return 'RequireOnceExpression';
        case 148:
            return 'ReturnStatement';
        case 149:
            return 'ReturnType';
        case 150:
            return 'ScopedCallExpression';
        case 151:
            return 'ScopedMemberName';
        case 152:
            return 'ScopedPropertyAccessExpression';
        case 153:
            return 'ShellCommandExpression';
        case 154:
            return 'ShiftExpression';
        case 155:
            return 'SimpleAssignmentExpression';
        case 156:
            return 'SimpleVariable';
        case 157:
            return 'StatementList';
        case 158:
            return 'StaticVariableDeclaration';
        case 159:
            return 'StaticVariableDeclarationList';
        case 160:
            return 'SubscriptExpression';
        case 161:
            return 'SwitchStatement';
        case 162:
            return 'ThrowStatement';
        case 163:
            return 'TraitAdaptationList';
        case 164:
            return 'TraitAlias';
        case 165:
            return 'TraitDeclaration';
        case 166:
            return 'TraitDeclarationBody';
        case 167:
            return 'TraitDeclarationHeader';
        case 168:
            return 'TraitMemberDeclarationList';
        case 169:
            return 'TraitPrecedence';
        case 170:
            return 'TraitUseClause';
        case 171:
            return 'TraitUseSpecification';
        case 172:
            return 'TryStatement';
        case 173:
            return 'TypeDeclaration';
        case 174:
            return 'UnaryOpExpression';
        case 175:
            return 'UnsetIntrinsic';
        case 176:
            return 'VariableList';
        case 177:
            return 'VariableNameList';
        case 178:
            return 'VariadicUnpacking';
        case 179:
            return 'WhileStatement';
        case 180:
            return 'YieldExpression';
        case 181:
            return 'YieldFromExpression';
        default:
            return '';
    }
}
exports.phraseTypeToString = phraseTypeToString;

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = __webpack_require__(19);
class TextDocument {
    constructor(uri, text) {
        this._uri = uri;
        this.text = text;
    }
    get uri() {
        return this._uri;
    }
    get text() {
        return this._text;
    }
    set text(text) {
        this._text = text;
        this._lineOffsets = this._textLineOffsets(text, 0);
    }
    get lineOffsets() {
        return this._lineOffsets;
    }
    textBeforeOffset(offset, length) {
        let start = Math.min(offset - (length - 1), 0);
        return this._text.slice(start, offset + 1);
    }
    lineText(line) {
        let endOffset = line + 1 < this._lineOffsets.length ? this._lineOffsets[line + 1] : this._text.length;
        return this._text.slice(this._lineOffsets[line], endOffset);
    }
    lineAtOffset(offset) {
        let search = new types_1.BinarySearch(this._lineOffsets);
        let compareFn = x => {
            return x - offset;
        };
        let result = search.search(compareFn);
        return result.isExactMatch ? result.rank : Math.max(result.rank - 1, 0);
    }
    lineSubstring(offset) {
        let lineNumber = this.lineAtOffset(offset);
        return this._text.slice(this._lineOffsets[lineNumber], offset);
    }
    offsetAtLine(line) {
        if (line <= 0 || this._lineOffsets.length < 1) {
            return 0;
        } else if (line > this._lineOffsets.length - 1) {
            return this._lineOffsets[this._lineOffsets.length - 1];
        } else {
            return this._lineOffsets[line];
        }
    }
    textAtOffset(offset, length) {
        return this._text.substr(offset, length);
    }
    positionAtOffset(offset) {
        let index = this.lineAtOffset(offset);
        return {
            line: index,
            character: offset - this._lineOffsets[index]
        };
    }
    offsetAtPosition(pos) {
        let offset = this.offsetAtLine(pos.line) + pos.character;
        return Math.max(0, Math.min(offset, this._text.length));
    }
    applyEdit(start, end, text) {
        let startOffset = this.offsetAtPosition(start);
        let endOffset = this.offsetAtPosition(end);
        this._text = this._text.slice(0, startOffset) + text + this._text.slice(endOffset);
        let newLineOffsets = this._lineOffsets.slice(0, start.line + 1);
        let lengthDiff = text.length - (endOffset - startOffset);
        Array.prototype.push.apply(newLineOffsets, this._textLineOffsets(text, startOffset).slice(1));
        let endLineOffsets = this._lineOffsets.slice(end.line + 1);
        for (let n = 0, l = endLineOffsets.length; n < l; ++n) {
            newLineOffsets.push(endLineOffsets[n] + lengthDiff);
        }
        this._lineOffsets = newLineOffsets;
    }
    _textLineOffsets(text, offset) {
        let n = 0;
        let length = text.length;
        let isLineStart = true;
        let offsets = [];
        let c;
        while (n < length) {
            c = text[n];
            if (isLineStart) {
                offsets.push(n + offset);
                isLineStart = false;
            }
            if (c === '\r') {
                if (++n < length && text[n] === '\n') {
                    ++n;
                }
                isLineStart = true;
                continue;
            } else if (c === '\n') {
                isLineStart = true;
            }
            ++n;
        }
        if (isLineStart) {
            offsets.push(n + offset);
        }
        return offsets;
    }
}
exports.TextDocument = TextDocument;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const symbol_1 = __webpack_require__(12);
const types_1 = __webpack_require__(19);
const vscode_languageserver_types_1 = __webpack_require__(3);
const typeString_1 = __webpack_require__(29);
const builtInSymbols = __webpack_require__(215);
const symbolReader_1 = __webpack_require__(96);
const nameResolver_1 = __webpack_require__(98);
const util = __webpack_require__(4);
const typeAggregate_1 = __webpack_require__(44);
const builtInsymbolsUri = 'php';
class SymbolTable {
    constructor(uri, root, hash) {
        this._uri = uri;
        this._root = root;
        if (hash !== undefined) {
            this._hash = hash;
        } else {
            this._hash = Math.abs(util.hash32(uri));
        }
    }
    get uri() {
        return this._uri;
    }
    get root() {
        return this._root;
    }
    get hash() {
        return this._hash;
    }
    get symbols() {
        let traverser = new types_1.TreeTraverser([this.root]);
        let symbols = traverser.toArray();
        symbols.shift();
        return symbols;
    }
    get symbolCount() {
        let traverser = new types_1.TreeTraverser([this.root]);
        return traverser.count() - 1;
    }
    pruneScopedVars() {
        let visitor = new ScopedVariablePruneVisitor();
        this.traverse(visitor);
    }
    parent(s) {
        let traverser = new types_1.TreeTraverser([this.root]);
        let fn = x => {
            return x === s;
        };
        if (!traverser.find(fn)) {
            return null;
        }
        return traverser.parent();
    }
    traverse(visitor) {
        let traverser = new types_1.TreeTraverser([this.root]);
        traverser.traverse(visitor);
        return visitor;
    }
    createTraverser() {
        return new types_1.TreeTraverser([this.root]);
    }
    filter(predicate) {
        let traverser = new types_1.TreeTraverser([this.root]);
        return traverser.filter(predicate);
    }
    find(predicate) {
        let traverser = new types_1.TreeTraverser([this.root]);
        return traverser.find(predicate);
    }
    nameResolver(pos) {
        let nameResolver = new nameResolver_1.NameResolver();
        let traverser = new types_1.TreeTraverser([this.root]);
        let visitor = new NameResolverVisitor(pos, nameResolver);
        traverser.traverse(visitor);
        return nameResolver;
    }
    scope(pos) {
        let traverser = new types_1.TreeTraverser([this.root]);
        let visitor = new ScopeVisitor(pos, false);
        traverser.traverse(visitor);
        return visitor.scope;
    }
    absoluteScope(pos) {
        let traverser = new types_1.TreeTraverser([this.root]);
        let visitor = new ScopeVisitor(pos, true);
        traverser.traverse(visitor);
        return visitor.scope;
    }
    scopeSymbols() {
        return this.filter(this._isScopeSymbol);
    }
    symbolAtPosition(position) {
        let pred = x => {
            return x.location && util.positionEquality(x.location.range.start, position);
        };
        return this.filter(pred).pop();
    }
    contains(s) {
        let traverser = new types_1.TreeTraverser([this.root]);
        let visitor = new ContainsVisitor(s);
        traverser.traverse(visitor);
        return visitor.found;
    }
    _isScopeSymbol(s) {
        const mask = 1 | 2 | 4 | 0 | 64 | 32;
        return (s.kind & mask) > 0;
    }
    static fromJSON(data) {
        return new SymbolTable(data._uri, data._root, data._hash);
    }
    static create(parsedDocument, externalOnly) {
        let symbolReader = new symbolReader_1.SymbolReader(parsedDocument, new nameResolver_1.NameResolver());
        parsedDocument.traverse(symbolReader);
        return new SymbolTable(parsedDocument.uri, symbolReader.symbol);
    }
    static readBuiltInSymbols() {
        return new SymbolTable(builtInsymbolsUri, {
            kind: 0,
            name: '',
            children: builtInSymbols
        });
    }
}
exports.SymbolTable = SymbolTable;
class ScopedVariablePruneVisitor {
    preorder(node, spine) {
        if ((node.kind === 64 || node.kind === 32) && node.children) {
            node.children = node.children.filter(this._isNotVar);
        }
        return true;
    }
    _isNotVar(s) {
        return s.kind !== 256;
    }
}
class SymbolStore {
    constructor() {
        this.onParsedDocumentChange = args => {
            this.remove(args.parsedDocument.uri);
            let table = SymbolTable.create(args.parsedDocument);
            this.add(table);
        };
        this._tableIndex = new SymbolTableIndex();
        this._symbolIndex = new types_1.NameIndex(symbol_1.PhpSymbol.keys);
        this._symbolCount = 0;
    }
    getSymbolTable(uri) {
        return this._tableIndex.find(uri);
    }
    get tables() {
        return this._tableIndex.tables();
    }
    get tableCount() {
        return this._tableIndex.count();
    }
    get symbolCount() {
        return this._symbolCount;
    }
    add(symbolTable) {
        this.remove(symbolTable.uri);
        this._tableIndex.add(symbolTable);
        this._symbolIndex.addMany(this._indexSymbols(symbolTable.root));
        this._symbolCount += symbolTable.symbolCount;
    }
    remove(uri) {
        let symbolTable = this._tableIndex.remove(uri);
        if (!symbolTable) {
            return;
        }
        this._symbolIndex.removeMany(this._indexSymbols(symbolTable.root));
        this._symbolCount -= symbolTable.symbolCount;
    }
    toJSON() {
        return {
            _tableIndex: this._tableIndex,
            _symbolCount: this._symbolCount
        };
    }
    fromJSON(data) {
        this._symbolCount = data._symbolCount;
        this._tableIndex.fromJSON(data._tableIndex);
        for (let t of this._tableIndex.tables()) {
            this._symbolIndex.addMany(this._indexSymbols(t.root));
        }
    }
    find(text, filter) {
        if (!text) {
            return [];
        }
        let lcText = text.toLowerCase();
        let kindMask = 8 | 256;
        let result = this._symbolIndex.find(text);
        let symbols = [];
        let s;
        for (let n = 0, l = result.length; n < l; ++n) {
            s = result[n];
            if ((!filter || filter(s)) && ((s.kind & kindMask) > 0 && s.name === text || !(s.kind & kindMask) && s.name.toLowerCase() === lcText)) {
                symbols.push(s);
            }
        }
        return symbols;
    }
    match(text, filter) {
        if (!text) {
            return [];
        }
        let matches = this._symbolIndex.match(text);
        if (!filter) {
            return matches;
        }
        let filtered = [];
        let s;
        for (let n = 0, l = matches.length; n < l; ++n) {
            s = matches[n];
            if (filter(s)) {
                filtered.push(s);
            }
        }
        return filtered;
    }
    *matchIterator(text, filter) {
        if (!text) {
            return;
        }
        const indexMatchIterator = this._symbolIndex.matchIterator(text);
        const symbols = new Set();
        for (let s of indexMatchIterator) {
            if ((!filter || filter(s)) && !symbols.has(s)) {
                symbols.add(s);
                yield s;
            }
        }
    }
    findSymbolsByReference(ref, memberMergeStrategy) {
        if (!ref) {
            return [];
        }
        let symbols;
        let fn;
        let lcName;
        let table;
        switch (ref.kind) {
            case 1:
            case 2:
            case 4:
                fn = x => {
                    return (x.kind & (1 | 2 | 4)) > 0;
                };
                symbols = this.find(ref.name, fn);
                break;
            case 64:
            case 8:
                fn = x => {
                    return x.kind === ref.kind;
                };
                symbols = this.find(ref.name, fn);
                if (symbols.length < 1 && ref.altName) {
                    symbols = this.find(ref.altName, fn);
                }
                break;
            case 32:
                lcName = ref.name.toLowerCase();
                fn = x => {
                    return x.kind === 32 && x.name.toLowerCase() === lcName;
                };
                symbols = this.findMembers(ref.scope, memberMergeStrategy || 0, fn);
                break;
            case 16:
                {
                    let name = ref.name;
                    fn = x => {
                        return x.kind === 16 && name === x.name;
                    };
                    symbols = this.findMembers(ref.scope, memberMergeStrategy || 0, fn);
                    break;
                }
            case 1024:
                fn = x => {
                    return x.kind === 1024 && x.name === ref.name;
                };
                symbols = this.findMembers(ref.scope, memberMergeStrategy || 0, fn);
                break;
            case 256:
            case 128:
                table = this.getSymbolTable(ref.location.uri);
                if (table) {
                    let scope = table.scope(ref.location.range.start);
                    fn = x => {
                        return (x.kind & (128 | 256)) > 0 && x.name === ref.name;
                    };
                    let s = scope.children ? scope.children.find(fn) : null;
                    if (s) {
                        symbols = [s];
                    }
                }
                break;
            case 2048:
                fn = x => {
                    return x.kind === 32 && x.name.toLowerCase() === '__construct';
                };
                symbols = this.findMembers(ref.name, memberMergeStrategy || 0, fn);
                break;
            default:
                break;
        }
        return symbols || [];
    }
    findMembers(scope, memberMergeStrategy, predicate) {
        let fqnArray = typeString_1.TypeString.atomicClassArray(scope);
        let type;
        let members = [];
        for (let n = 0; n < fqnArray.length; ++n) {
            type = typeAggregate_1.TypeAggregate.create(this, fqnArray[n]);
            if (type) {
                Array.prototype.push.apply(members, type.members(memberMergeStrategy, predicate));
            }
        }
        return Array.from(new Set(members));
    }
    findBaseMember(symbol) {
        if (!symbol || !symbol.scope || !(symbol.kind & (16 | 32 | 1024)) || (symbol.modifiers & 4) > 0) {
            return symbol;
        }
        let fn;
        if (symbol.kind === 32) {
            let name = symbol.name.toLowerCase();
            fn = s => {
                return s.kind === symbol.kind && s.modifiers === symbol.modifiers && name === s.name.toLowerCase();
            };
        } else {
            fn = s => {
                return s.kind === symbol.kind && s.modifiers === symbol.modifiers && symbol.name === s.name;
            };
        }
        return this.findMembers(symbol.scope, 3, fn).shift() || symbol;
    }
    symbolLocation(symbol) {
        let table = this._tableIndex.findBySymbol(symbol);
        return table ? vscode_languageserver_types_1.Location.create(table.uri, symbol.location.range) : undefined;
    }
    referenceToTypeString(ref) {
        if (!ref) {
            return '';
        }
        switch (ref.kind) {
            case 1:
            case 2:
            case 4:
            case 2048:
                return ref.name;
            case 64:
            case 32:
            case 16:
                return this.findSymbolsByReference(ref, 2).reduce((carry, val) => {
                    return typeString_1.TypeString.merge(carry, symbol_1.PhpSymbol.type(val));
                }, '');
            case 256:
                return ref.type || '';
            default:
                return '';
        }
    }
    _sortMatches(query, matches) {
        let map = {};
        let s;
        let name;
        let val;
        query = query.toLowerCase();
        for (let n = 0, l = matches.length; n < l; ++n) {
            s = matches[n];
            name = s.name;
            if (map[name] === undefined) {
                val = (symbol_1.PhpSymbol.notFqn(s.name).toLowerCase().indexOf(query) + 1) * 10;
                if (val > 0) {
                    val = 1000 - val;
                }
                map[name] = val;
            }
            ++map[name];
        }
        let unique = Array.from(new Set(matches));
        let sortFn = (a, b) => {
            return map[b.name] - map[a.name];
        };
        unique.sort(sortFn);
        return unique;
    }
    _classOrInterfaceFilter(s) {
        return (s.kind & (1 | 2)) > 0;
    }
    _classInterfaceTraitFilter(s) {
        return (s.kind & (1 | 2 | 4)) > 0;
    }
    _indexSymbols(root) {
        let traverser = new types_1.TreeTraverser([root]);
        return traverser.filter(this._indexFilter);
    }
    _indexFilter(s) {
        return !(s.kind & (128 | 4096)) && !(s.modifiers & 4096) && !(s.kind === 256 && s.location) && s.name.length > 0;
    }
}
exports.SymbolStore = SymbolStore;
class NameResolverVisitor {
    constructor(pos, nameResolver) {
        this.pos = pos;
        this.nameResolver = nameResolver;
        this.haltTraverse = false;
        this._kindMask = 1 | 64 | 8;
    }
    preorder(node, spine) {
        if (node.location && node.location.range.start.line > this.pos.line) {
            this.haltTraverse = true;
            return false;
        }
        if ((node.modifiers & 4096) > 0 && (node.kind & this._kindMask) > 0) {
            this.nameResolver.rules.push(node);
        } else if (node.kind === 512) {
            this.nameResolver.namespace = node;
        } else if (node.kind === 1) {
            this.nameResolver.pushClass(node);
        }
        return true;
    }
    postorder(node, spine) {
        if (this.haltTraverse || node.location && node.location.range.end.line > this.pos.line) {
            this.haltTraverse = true;
            return;
        }
        if (node.kind === 1) {
            this.nameResolver.popClass();
        }
    }
}
class ScopeVisitor {
    constructor(pos, absolute) {
        this.pos = pos;
        this.haltTraverse = false;
        this._kindMask = 1 | 2 | 4 | 64 | 32 | 4096;
        this._absolute = false;
        this._scopeStack = [];
        this._absolute = absolute;
    }
    get scope() {
        return this._scopeStack[this._scopeStack.length - 1];
    }
    preorder(node, spine) {
        if (node.location && node.location.range.start.line > this.pos.line) {
            this.haltTraverse = true;
            return false;
        }
        if (!node.location || util.isInRange(this.pos, node.location.range) !== 0) {
            return false;
        }
        if ((node.kind & this._kindMask) > 0 && !(node.modifiers & 4096) && (!this._absolute || node.kind !== 64 || !(node.modifiers & 512))) {
            this._scopeStack.push(node);
        }
        return true;
    }
}
class ContainsVisitor {
    constructor(symbol) {
        this.haltTraverse = false;
        this.found = false;
        this._symbol = symbol;
        if (!symbol.location) {
            throw new Error('Invalid Argument');
        }
    }
    preorder(node, spine) {
        if (node === this._symbol) {
            this.found = true;
            this.haltTraverse = true;
            return false;
        }
        if (node.location && util.isInRange(this._symbol.location.range.start, node.location.range) !== 0) {
            return false;
        }
        return true;
    }
}
class SymbolTableIndex {
    constructor() {
        this._count = 0;
        this._tables = [];
        this._search = new types_1.BinarySearch(this._tables);
    }
    count() {
        return this._count;
    }
    *tables() {
        let node;
        for (let n = 0, nl = this._tables.length; n < nl; ++n) {
            node = this._tables[n];
            for (let k = 0, tl = node.tables.length; k < tl; ++k) {
                yield node.tables[k];
            }
        }
    }
    add(table) {
        let fn = this._createCompareFn(table.uri);
        let search = this._search.search(fn);
        if (search.isExactMatch) {
            let node = this._tables[search.rank];
            if (node.tables.find(this._createUriFindFn(table.uri))) {
                --this._count;
                throw new Error(`Duplicate key ${table.uri}`);
            }
            node.tables.push(table);
        } else {
            let node = { hash: table.hash, tables: [table] };
            this._tables.splice(search.rank, 0, node);
        }
        ++this._count;
    }
    remove(uri) {
        let fn = this._createCompareFn(uri);
        let node = this._search.find(fn);
        if (node) {
            let i = node.tables.findIndex(this._createUriFindFn(uri));
            if (i > -1) {
                --this._count;
                return node.tables.splice(i, 1).pop();
            }
        }
    }
    find(uri) {
        let fn = this._createCompareFn(uri);
        let node = this._search.find(fn);
        return node ? node.tables.find(this._createUriFindFn(uri)) : null;
    }
    findBySymbol(s) {
        if (!s.location) {
            return undefined;
        }
        let node = this._search.find(x => {
            return x.hash - s.location.uriHash;
        });
        if (!node || !node.tables.length) {
            return undefined;
        } else if (node.tables.length === 1) {
            return node.tables[0];
        } else {
            let table;
            for (let n = 0; n < node.tables.length; ++n) {
                table = node.tables[n];
                if (table.contains(s)) {
                    return table;
                }
            }
        }
        return undefined;
    }
    toJSON() {
        return {
            _tables: this._tables,
            _count: this._count
        };
    }
    fromJSON(data) {
        this._count = data._count;
        this._tables = [];
        let node;
        let newNode;
        for (let n = 0; n < data._tables.length; ++n) {
            node = data._tables[n];
            newNode = {
                hash: node.hash,
                tables: []
            };
            for (let k = 0; k < node.tables.length; ++k) {
                newNode.tables.push(SymbolTable.fromJSON(node.tables[k]));
            }
            this._tables.push(newNode);
        }
        this._search = new types_1.BinarySearch(this._tables);
    }
    _createCompareFn(uri) {
        let hash = Math.abs(util.hash32(uri));
        return x => {
            return x.hash - hash;
        };
    }
    _createUriFindFn(uri) {
        return x => {
            return x.uri === uri;
        };
    }
}
exports.SymbolTableIndex = SymbolTableIndex;

/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports = [{"kind":1,"name":"SplFileInfo","modifiers":0,"associated":[],"children":[{"kind":32,"name":"getPerms","modifiers":1,"children":[],"doc":{"description":"Gets the file permissions for the file.","type":"int"}},{"kind":32,"name":"getFilename","modifiers":1,"children":[],"doc":{"description":"Gets the filename without any path information.","type":"string"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$file_name","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Creates a new SplFileInfo object for the file_name specified. The file does not need to exist, or be readable.","type":"public"}},{"kind":32,"name":"getLinkTarget","modifiers":1,"children":[],"doc":{"description":"Gets the target of a filesystem link.","type":"string"}},{"kind":32,"name":"getBasename","modifiers":1,"children":[{"kind":128,"name":"$suffix","modifiers":0,"doc":{"description":"Optional suffix to omit from the base name returned.","type":"string"}}],"doc":{"description":"This method returns the base name of the file, directory, or link without path info.","type":"string"}},{"kind":32,"name":"getPathInfo","modifiers":1,"children":[{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"Name of an SplFileInfo derived class to use.","type":"string"}}],"doc":{"description":"Gets an SplFileInfo object for the parent of the current file.","type":"SplFileInfo"}},{"kind":32,"name":"getExtension","modifiers":1,"children":[],"doc":{"description":"Retrieves the file extension.","type":"string"}},{"kind":32,"name":"isFile","modifiers":1,"children":[],"doc":{"description":"Checks if the file referenced by this SplFileInfo object exists and is a regular file.","type":"bool"}},{"kind":32,"name":"isLink","modifiers":1,"children":[],"doc":{"description":"Use this method to check if the file referenced by the SplFileInfo object is a link.","type":"bool"}},{"kind":32,"name":"isDir","modifiers":1,"children":[],"doc":{"description":"This method can be used to determine if the file is a directory.","type":"bool"}},{"kind":32,"name":"getATime","modifiers":1,"children":[],"doc":{"description":"Gets the last access time for the file.","type":"int"}},{"kind":32,"name":"getMTime","modifiers":1,"children":[],"doc":{"description":"Returns the time when the contents of the file were changed. The time returned is a Unix timestamp.","type":"int"}},{"kind":32,"name":"getPath","modifiers":1,"children":[],"doc":{"description":"Returns the path to the file, omitting the filename and any trailing slash.","type":"string"}},{"kind":32,"name":"getOwner","modifiers":1,"children":[],"doc":{"description":"Gets the file owner. The owner ID is returned in numerical format.","type":"int"}},{"kind":32,"name":"isWritable","modifiers":1,"children":[],"doc":{"description":"Checks if the current entry is writable.","type":"bool"}},{"kind":32,"name":"getRealPath","modifiers":1,"children":[],"doc":{"description":"This method expands all symbolic links, resolves relative references and returns the real path to the file.","type":"string"}},{"kind":32,"name":"getCTime","modifiers":1,"children":[],"doc":{"description":"Returns the inode change time for the file. The time returned is a Unix timestamp.","type":"int"}},{"kind":32,"name":"openFile","modifiers":1,"children":[{"kind":128,"name":"$open_mode","modifiers":0,"value":"\"r\"","doc":{"description":"The mode for opening the file. See the fopen() documentation for descriptions of possible modes. The default is read only.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"false","doc":{"description":"When set to TRUE, the filename is also searched for within the include_path","type":"bool"}},{"kind":128,"name":"$context","modifiers":0,"value":"NULL","doc":{"description":"Refer to the context section of the manual for a description of contexts.","type":"resource"}}],"doc":{"description":"Creates an SplFileObject object of the file. This is useful because SplFileObject contains additional methods for manipulating the file whereas SplFileInfo is only useful for gaining information, like whether the file is writable.","type":"SplFileObject"}},{"kind":32,"name":"getFileInfo","modifiers":1,"children":[{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"Name of an SplFileInfo derived class to use.","type":"string"}}],"doc":{"description":"This method gets an SplFileInfo object for the referenced file.","type":"SplFileInfo"}},{"kind":32,"name":"getGroup","modifiers":1,"children":[],"doc":{"description":"Gets the file group. The group ID is returned in numerical format.","type":"int"}},{"kind":32,"name":"isReadable","modifiers":1,"children":[],"doc":{"description":"Check if the file is readable.","type":"bool"}},{"kind":32,"name":"getPathname","modifiers":1,"children":[],"doc":{"description":"Returns the path to the file.","type":"string"}},{"kind":32,"name":"getInode","modifiers":1,"children":[],"doc":{"description":"Gets the inode number for the filesystem object.","type":"int"}},{"kind":32,"name":"setFileClass","modifiers":1,"children":[{"kind":128,"name":"$class_name","modifiers":0,"value":"\"SplFileObject\"","doc":{"description":"The class name to use when SplFileInfo::openFile() is called.","type":"string"}}],"doc":{"description":"Use this method to set a custom class which will be used when SplFileInfo::openFile() is called. The class name passed to this method must be SplFileObject or a class derived from SplFileObject.","type":"void"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"This method will return the file name of the referenced file.","type":"void"}},{"kind":32,"name":"getSize","modifiers":1,"children":[],"doc":{"description":"Returns the filesize in bytes for the file referenced.","type":"int"}},{"kind":32,"name":"getType","modifiers":1,"children":[],"doc":{"description":"Returns the type of the file referenced.","type":"string"}},{"kind":32,"name":"setInfoClass","modifiers":1,"children":[{"kind":128,"name":"$class_name","modifiers":0,"value":"\"SplFileInfo\"","doc":{"description":"The class name to use when SplFileInfo::getFileInfo() and SplFileInfo::getPathInfo() are called.","type":"string"}}],"doc":{"description":"Use this method to set a custom class which will be used when SplFileInfo::getFileInfo() and SplFileInfo::getPathInfo() are called. The class name passed to this method must be SplFileInfo or a class derived from SplFileInfo.","type":"void"}},{"kind":32,"name":"isExecutable","modifiers":1,"children":[],"doc":{"description":"Checks if the file is executable.","type":"bool"}}],"doc":{"description":"The SplFileInfo class offers a high-level object oriented interface to information for an individual file."}},{"kind":1,"name":"ParseError","modifiers":0,"associated":[{"kind":1,"name":"Error"}],"children":[],"doc":{"description":"ParseError is thrown when an error occurs while parsing PHP code, such as when eval() is called."}},{"kind":1,"name":"Exception","modifiers":0,"associated":[],"children":[{"kind":16,"name":"$message","modifiers":2,"doc":{"description":"The exception message","type":"string"}},{"kind":16,"name":"$code","modifiers":2,"doc":{"description":"The exception code","type":"int"}},{"kind":16,"name":"$file","modifiers":2,"doc":{"description":"The filename where the exception was created","type":"string"}},{"kind":16,"name":"$line","modifiers":2,"doc":{"description":"The line where the exception was created","type":"int"}},{"kind":32,"name":"getFile","modifiers":9,"children":[],"doc":{"description":"Get the name of the file in which the exception was created.","type":"string"}},{"kind":32,"name":"getPrevious","modifiers":9,"children":[],"doc":{"description":"Returns previous exception (the third parameter of Exception::__construct()).","type":"Throwable"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"Returns the string representation of the exception.","type":"string"}},{"kind":32,"name":"getLine","modifiers":9,"children":[],"doc":{"description":"Get line number where the exception was created.","type":"int"}},{"kind":32,"name":"getMessage","modifiers":9,"children":[],"doc":{"description":"Returns the Exception message.","type":"string"}},{"kind":32,"name":"getTraceAsString","modifiers":9,"children":[],"doc":{"description":"Returns the Exception stack trace as a string.","type":"string"}},{"kind":32,"name":"getCode","modifiers":9,"children":[],"doc":{"description":"Returns the Exception code.","type":"mixed"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$message","modifiers":0,"value":"\"\"","doc":{"description":"The Exception message to throw.","type":"string"}},{"kind":128,"name":"$code","modifiers":0,"value":"0","doc":{"description":"The Exception code.","type":"int"}},{"kind":128,"name":"$previous","modifiers":0,"value":"NULL","doc":{"description":"The previous exception used for the exception chaining.","type":"Throwable"}}],"doc":{"description":"Constructs the Exception.","type":"public"}},{"kind":32,"name":"getTrace","modifiers":9,"children":[],"doc":{"description":"Returns the Exception stack trace.","type":"array"}},{"kind":32,"name":"__clone","modifiers":12,"children":[],"doc":{"description":"Tries to clone the Exception, which results in Fatal error.","type":"void"}}],"doc":{"description":"Exception is the base class for all Exceptions in PHP 5, and the base class for all user exceptions in PHP 7."}},{"kind":2,"name":"Serializable","modifiers":0,"associated":[],"children":[{"kind":32,"name":"unserialize","modifiers":1,"children":[{"kind":128,"name":"$serialized","modifiers":0,"doc":{"description":"The string representation of the object.","type":"string"}}],"doc":{"description":"Called during unserialization of the object.","type":"void"}},{"kind":32,"name":"serialize","modifiers":1,"children":[],"doc":{"description":"Should return the string representation of the object.","type":"string"}}],"doc":{"description":"Interface for customized serializing."}},{"kind":1,"name":"DOMDocument","modifiers":0,"associated":[{"kind":1,"name":"DOMNode"}],"children":[{"kind":16,"name":"$actualEncoding","modifiers":1,"doc":{"description":"Deprecated. Actual encoding of the document, is a readonly equivalent to encoding.","type":"string"}},{"kind":16,"name":"$config","modifiers":1,"doc":{"description":"Deprecated. Configuration used when DOMDocument::normalizeDocument() is invoked.","type":"DOMConfiguration"}},{"kind":16,"name":"$doctype","modifiers":1,"doc":{"description":"The Document Type Declaration associated with this document.","type":"DOMDocumentType"}},{"kind":16,"name":"$documentElement","modifiers":1,"doc":{"description":"This is a convenience attribute that allows direct access to the child node that is the document element of the document.","type":"DOMElement"}},{"kind":16,"name":"$documentURI","modifiers":1,"doc":{"description":"The location of the document or NULL if undefined.","type":"string"}},{"kind":16,"name":"$encoding","modifiers":1,"doc":{"description":"Encoding of the document, as specified by the XML declaration. This attribute is not present in the final DOM Level 3 specification, but is the only way of manipulating XML document encoding in this implementation.","type":"string"}},{"kind":16,"name":"$formatOutput","modifiers":1,"doc":{"description":"Nicely formats output with indentation and extra space.","type":"bool"}},{"kind":16,"name":"$implementation","modifiers":1,"doc":{"description":"The DOMImplementation object that handles this document.","type":"DOMImplementation"}},{"kind":16,"name":"$preserveWhiteSpace","modifiers":1,"doc":{"description":"Do not remove redundant white space. Default to TRUE.","type":"bool"}},{"kind":16,"name":"$recover","modifiers":1,"doc":{"description":"Proprietary. Enables recovery mode, i.e. trying to parse non-well formed documents. This attribute is not part of the DOM specification and is specific to libxml.","type":"bool"}},{"kind":16,"name":"$resolveExternals","modifiers":1,"doc":{"description":"Set it to TRUE to load external entities from a doctype declaration. This is useful for including character entities in your XML document.","type":"bool"}},{"kind":16,"name":"$standalone","modifiers":1,"doc":{"description":"Deprecated. Whether or not the document is standalone, as specified by the XML declaration, corresponds to xmlStandalone.","type":"bool"}},{"kind":16,"name":"$strictErrorChecking","modifiers":1,"doc":{"description":"Throws DOMException on errors. Default to TRUE.","type":"bool"}},{"kind":16,"name":"$substituteEntities","modifiers":1,"doc":{"description":"Proprietary. Whether or not to substitute entities. This attribute is not part of the DOM specification and is specific to libxml.","type":"bool"}},{"kind":16,"name":"$validateOnParse","modifiers":1,"doc":{"description":"Loads and validates against the DTD. Default to FALSE.","type":"bool"}},{"kind":16,"name":"$version","modifiers":1,"doc":{"description":"Deprecated. Version of XML, corresponds to xmlVersion.","type":"string"}},{"kind":16,"name":"$xmlEncoding","modifiers":1,"doc":{"description":"An attribute specifying, as part of the XML declaration, the encoding of this document. This is NULL when unspecified or when it is not known, such as when the Document was created in memory.","type":"string"}},{"kind":16,"name":"$xmlStandalone","modifiers":1,"doc":{"description":"An attribute specifying, as part of the XML declaration, whether this document is standalone. This is FALSE when unspecified.","type":"bool"}},{"kind":16,"name":"$xmlVersion","modifiers":1,"doc":{"description":"An attribute specifying, as part of the XML declaration, the version number of this document. If there is no declaration and if this document supports the \"XML\" feature, the value is \"1.0\".","type":"string"}},{"kind":32,"name":"createTextNode","modifiers":1,"children":[{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The content of the text.","type":"string"}}],"doc":{"description":"This function creates a new instance of class DOMText. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().","type":"DOMText"}},{"kind":32,"name":"validate","modifiers":1,"children":[],"doc":{"description":"Validates the document based on its DTD.","type":"bool"}},{"kind":32,"name":"schemaValidate","modifiers":1,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The path to the schema.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"A bitmask of Libxml schema validation flags. Currently the only supported value is LIBXML_SCHEMA_CREATE. Available since PHP 5.5.2 and Libxml 2.6.14.","type":"int"}}],"doc":{"description":"Validates a document based on the given schema file.","type":"bool"}},{"kind":32,"name":"saveXML","modifiers":1,"children":[{"kind":128,"name":"$node","modifiers":0,"doc":{"description":"Use this parameter to output only a specific node without XML declaration rather than the entire document.","type":"DOMNode"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Additional Options. Currently only LIBXML_NOEMPTYTAG is supported.","type":"int"}}],"doc":{"description":"Creates an XML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.","type":"string"}},{"kind":32,"name":"createAttributeNS","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The URI of the namespace.","type":"string"}},{"kind":128,"name":"$qualifiedName","modifiers":0,"doc":{"description":"The tag name and prefix of the attribute, as prefix:tagname.","type":"string"}}],"doc":{"description":"This function creates a new instance of class DOMAttr. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().","type":"DOMAttr"}},{"kind":32,"name":"saveHTMLFile","modifiers":1,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The path to the saved HTML document.","type":"string"}}],"doc":{"description":"Creates an HTML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.","type":"int"}},{"kind":32,"name":"createElementNS","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The URI of the namespace.","type":"string"}},{"kind":128,"name":"$qualifiedName","modifiers":0,"doc":{"description":"The qualified name of the element, as prefix:tagname.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the element. By default, an empty element will be created. You can also set the value later with DOMElement::$nodeValue.","type":"string"}}],"doc":{"description":"This function creates a new element node with an associated namespace. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().","type":"DOMElement"}},{"kind":32,"name":"saveHTML","modifiers":1,"children":[{"kind":128,"name":"$node","modifiers":0,"value":"NULL","doc":{"description":"Optional parameter to output a subset of the document.","type":"DOMNode"}}],"doc":{"description":"Creates an HTML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.","type":"string"}},{"kind":32,"name":"relaxNGValidateSource","modifiers":1,"children":[{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"A string containing the RNG schema.","type":"string"}}],"doc":{"description":"Performs » relaxNG validation on the document based on the given RNG source.","type":"bool"}},{"kind":32,"name":"loadXML","modifiers":1,"children":[{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"The string containing the XML.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Bitwise OR of the libxml option constants.","type":"int"}}],"doc":{"description":"Loads an XML document from a string.","type":"mixed"}},{"kind":32,"name":"importNode","modifiers":1,"children":[{"kind":128,"name":"$importedNode","modifiers":0,"doc":{"description":"The node to import.","type":"DOMNode"}},{"kind":128,"name":"$deep","modifiers":0,"doc":{"description":"If set to TRUE, this method will recursively import the subtree under the importedNode. Note: To copy the nodes attributes deep needs to be set to TRUE","type":"bool"}}],"doc":{"description":"This function returns a copy of the node to import and associates it with the current document.","type":"DOMNode"}},{"kind":32,"name":"save","modifiers":1,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The path to the saved XML document.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Additional Options. Currently only LIBXML_NOEMPTYTAG is supported.","type":"int"}}],"doc":{"description":"Creates an XML document from the DOM representation. This function is usually called after building a new dom document from scratch as in the example below.","type":"int"}},{"kind":32,"name":"createElement","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The tag name of the element.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the element. By default, an empty element will be created. The value can also be set later with DOMElement::$nodeValue. The value is used verbatim except that the < and > entity references will escaped. Note that & has to be manually escaped; otherwise it is regarded as starting an entity reference. Also \" won't be escaped.","type":"string"}}],"doc":{"description":"This function creates a new instance of class DOMElement. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().","type":"DOMElement"}},{"kind":32,"name":"loadHTML","modifiers":1,"children":[{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"The HTML string.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Since PHP 5.4.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.","type":"int"}}],"doc":{"description":"The function parses the HTML contained in the string source. Unlike loading XML, HTML does not have to be well-formed to load. This function may also be called statically to load and create a DOMDocument object. The static invocation may be used when no DOMDocument properties need to be set prior to loading.","type":"bool"}},{"kind":32,"name":"normalizeDocument","modifiers":1,"children":[],"doc":{"description":"This method acts as if you saved and then loaded the document, putting the document in a \"normal\" form.","type":"void"}},{"kind":32,"name":"schemaValidateSource","modifiers":1,"children":[{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"A string containing the schema.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"A bitmask of Libxml schema validation flags. Currently the only supported value is LIBXML_SCHEMA_CREATE. Available since PHP 5.5.2 and Libxml 2.6.14.","type":"int"}}],"doc":{"description":"Validates a document based on a schema defined in the given string.","type":"bool"}},{"kind":32,"name":"registerNodeClass","modifiers":1,"children":[{"kind":128,"name":"$baseclass","modifiers":0,"doc":{"description":"The DOM class that you want to extend. You can find a list of these classes in the chapter introduction.","type":"string"}},{"kind":128,"name":"$extendedclass","modifiers":0,"doc":{"description":"Your extended class name. If NULL is provided, any previously registered class extending baseclass will be removed.","type":"string"}}],"doc":{"description":"This method allows you to register your own extended DOM class to be used afterward by the PHP DOM extension.","type":"bool"}},{"kind":32,"name":"createCDATASection","modifiers":1,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The content of the cdata.","type":"string"}}],"doc":{"description":"This function creates a new instance of class DOMCDATASection. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().","type":"DOMCDATASection"}},{"kind":32,"name":"loadHTMLFile","modifiers":1,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The path to the HTML file.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Since PHP 5.4.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.","type":"int"}}],"doc":{"description":"The function parses the HTML document in the file named filename. Unlike loading XML, HTML does not have to be well-formed to load.","type":"bool"}},{"kind":32,"name":"xinclude","modifiers":1,"children":[{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"libxml parameters. Available since PHP 5.1.0 and Libxml 2.6.7.","type":"int"}}],"doc":{"description":"This method substitutes » XIncludes in a DOMDocument object.","type":"int"}},{"kind":32,"name":"relaxNGValidate","modifiers":1,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The RNG file.","type":"string"}}],"doc":{"description":"Performs » relaxNG validation on the document based on the given RNG schema.","type":"bool"}},{"kind":32,"name":"createEntityReference","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The content of the entity reference, e.g. the entity reference minus the leading & and the trailing ; characters.","type":"string"}}],"doc":{"description":"This function creates a new instance of class DOMEntityReference. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().","type":"DOMEntityReference"}},{"kind":32,"name":"load","modifiers":1,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The path to the XML document.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Bitwise OR of the libxml option constants.","type":"int"}}],"doc":{"description":"Loads an XML document from a file.","type":"mixed"}},{"kind":32,"name":"getElementById","modifiers":1,"children":[{"kind":128,"name":"$elementId","modifiers":0,"doc":{"description":"The unique id value for an element.","type":"string"}}],"doc":{"description":"This function is similar to DOMDocument::getElementsByTagName but searches for an element with a given id.","type":"DOMElement"}},{"kind":32,"name":"getElementsByTagName","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The local name (without namespace) of the tag to match on. The special value * matches all tags.","type":"string"}}],"doc":{"description":"This function returns a new instance of class DOMNodeList containing all the elements with a given local tag name.","type":"DOMNodeList"}},{"kind":32,"name":"getElementsByTagNameNS","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI of the elements to match on. The special value * matches all namespaces.","type":"string"}},{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name of the elements to match on. The special value * matches all local names.","type":"string"}}],"doc":{"description":"Returns a DOMNodeList of all elements with a given local name and a namespace URI.","type":"DOMNodeList"}},{"kind":32,"name":"createComment","modifiers":1,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The content of the comment.","type":"string"}}],"doc":{"description":"This function creates a new instance of class DOMComment. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().","type":"DOMComment"}},{"kind":32,"name":"createProcessingInstruction","modifiers":1,"children":[{"kind":128,"name":"$target","modifiers":0,"doc":{"description":"The target of the processing instruction.","type":"string"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The content of the processing instruction.","type":"string"}}],"doc":{"description":"This function creates a new instance of class DOMProcessingInstruction. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().","type":"DOMProcessingInstruction"}},{"kind":32,"name":"createDocumentFragment","modifiers":1,"children":[],"doc":{"description":"This function creates a new instance of class DOMDocumentFragment. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().","type":"DOMDocumentFragment"}},{"kind":32,"name":"createAttribute","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the attribute.","type":"string"}}],"doc":{"description":"This function creates a new instance of class DOMAttr. This node will not show up in the document unless it is inserted with (e.g.) DOMNode::appendChild().","type":"DOMAttr"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$version","modifiers":0,"doc":{"description":"The version number of the document as part of the XML declaration.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding of the document as part of the XML declaration.","type":"string"}}],"doc":{"description":"Creates a new DOMDocument object.","type":"public"}}],"doc":{"description":"Represents an entire HTML or XML document; serves as the root of the document tree."}},{"kind":2,"name":"Throwable","modifiers":0,"associated":[],"children":[{"kind":32,"name":"getLine","modifiers":1,"children":[],"doc":{"description":"Returns the line number where the thrown object was instantiated.","type":"int"}},{"kind":32,"name":"getCode","modifiers":1,"children":[],"doc":{"description":"Returns the error code associated with the thrown object.","type":"int"}},{"kind":32,"name":"getTrace","modifiers":1,"children":[],"doc":{"description":"Returns the stack trace as an array.","type":"array"}},{"kind":32,"name":"__toString","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"getPrevious","modifiers":1,"children":[],"doc":{"description":"Returns any previous Throwable (for example, one provided as the third parameter to Exception::__construct()).","type":"Throwable"}},{"kind":32,"name":"getFile","modifiers":1,"children":[],"doc":{"description":"Get the name of the file in which the exception was created.","type":"string"}},{"kind":32,"name":"getTraceAsString","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"getMessage","modifiers":1,"children":[],"doc":{"description":"Returns the message associated with the thrown object.","type":"string"}}],"doc":{"description":"Throwable is the base interface for any object that can be thrown via a throw statement in PHP 7, including Error and Exception."}},{"kind":1,"name":"GlobIterator","modifiers":0,"associated":[{"kind":1,"name":"FilesystemIterator"},{"kind":2,"name":"SeekableIterator"},{"kind":2,"name":"Countable"}],"children":[{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The path of the directory.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"FilesystemIterator::KEY_AS_PATHNAME","doc":{"description":"Option flags, the flags may be a bitmask of the FilesystemIterator constants.","type":"int"}}],"doc":{"description":"Constructs a new directory iterator from a glob expression.","type":"public"}},{"kind":32,"name":"count","modifiers":1,"children":[],"doc":{"description":"Gets the number of directories and files found by the glob expression.","type":"int"}}],"doc":{"description":"Iterates through a file system in a similar fashion to glob()."}},{"kind":1,"name":"mysqli","modifiers":0,"associated":[],"children":[{"kind":32,"name":"reap_async_query","modifiers":1,"children":[],"doc":{"description":"Get result from async query. Available only with mysqlnd.","type":"mysqli_result"}},{"kind":32,"name":"real_query","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query, as a string. Data inside the query should be properly escaped.","type":"string"}}],"doc":{"description":"Executes a single query against the database whose result can then be retrieved or stored using the mysqli_store_result() or mysqli_use_result() functions.","type":"bool"}},{"kind":32,"name":"escape_string","modifiers":0,"children":[{"kind":128,"name":"$escapestr","modifiers":0,"doc":{"description":"The string to be escaped. Characters encoded are NUL (ASCII 0), \\n, \\r, \\, ', \", and Control-Z.","type":"string"}}],"doc":{"description":"This function is used to create a legal SQL string that you can use in an SQL statement. The given string is encoded to an escaped SQL string, taking into account the current character set of the connection.","type":"string"}},{"kind":32,"name":"real_escape_string","modifiers":0,"children":[{"kind":128,"name":"$escapestr","modifiers":0,"doc":{"description":"The string to be escaped. Characters encoded are NUL (ASCII 0), \\n, \\r, \\, ', \", and Control-Z.","type":"string"}}],"doc":{"description":"This function is used to create a legal SQL string that you can use in an SQL statement. The given string is encoded to an escaped SQL string, taking into account the current character set of the connection.","type":"string"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"value":"ini_get(\"mysqli.default_host\")","doc":{"description":"Can be either a host name or an IP address. Passing the NULL value or the string \"localhost\" to this parameter, the local host is assumed. When possible, pipes will be used instead of the TCP/IP protocol. Prepending host by p: opens a persistent connection. mysqli_change_user() is automatically called on connections opened from the connection pool.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"value":"ini_get(\"mysqli.default_user\")","doc":{"description":"The MySQL user name.","type":"string"}},{"kind":128,"name":"$passwd","modifiers":0,"value":"ini_get(\"mysqli.default_pw\")","doc":{"description":"If not provided or NULL, the MySQL server will attempt to authenticate the user against those user records which have no password only. This allows one username to be used with different permissions (depending on if a password as provided or not).","type":"string"}},{"kind":128,"name":"$dbname","modifiers":0,"value":"\"\"","doc":{"description":"If provided will specify the default database to be used when performing queries.","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"value":"ini_get(\"mysqli.default_port\")","doc":{"description":"Specifies the port number to attempt to connect to the MySQL server.","type":"int"}},{"kind":128,"name":"$socket","modifiers":0,"value":"ini_get(\"mysqli.default_socket\")","doc":{"description":"Specifies the socket or named pipe that should be used. Note: Specifying the socket parameter will not explicitly determine the type of connection to be used when connecting to the MySQL server. How the connection is made to the MySQL database is determined by the host parameter.","type":"string"}}],"doc":{"description":"Opens a connection to the MySQL Server running on.","type":"mysqli"}},{"kind":32,"name":"set_local_infile_handler","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$read_func","modifiers":0,"doc":{"description":"A callback function or object method taking the following parameters: stream A PHP stream associated with the SQL commands INFILE &buffer A string buffer to store the rewritten input into buflen The maximum number of characters to be stored in the buffer &errormsg If an error occurs you can store an error message in here","type":"callable"}}],"doc":{"description":"Set callback function for LOAD DATA LOCAL INFILE command","type":"bool"}},{"kind":32,"name":"more_results","modifiers":0,"children":[],"doc":{"description":"Indicates if one or more result sets are available from a previous call to mysqli_multi_query().","type":"bool"}},{"kind":32,"name":"ssl_set","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The path name to the key file.","type":"string"}},{"kind":128,"name":"$cert","modifiers":0,"doc":{"description":"The path name to the certificate file.","type":"string"}},{"kind":128,"name":"$ca","modifiers":0,"doc":{"description":"The path name to the certificate authority file.","type":"string"}},{"kind":128,"name":"$capath","modifiers":0,"doc":{"description":"The pathname to a directory that contains trusted SSL CA certificates in PEM format.","type":"string"}},{"kind":128,"name":"$cipher","modifiers":0,"doc":{"description":"A list of allowable ciphers to use for SSL encryption.","type":"string"}}],"doc":{"description":"Used for establishing secure connections using SSL. It must be called before mysqli_real_connect(). This function does nothing unless OpenSSL support is enabled.","type":"bool"}},{"kind":32,"name":"change_user","modifiers":0,"children":[{"kind":128,"name":"$user","modifiers":0,"doc":{"description":"The MySQL user name.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The MySQL password.","type":"string"}},{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The database to change to. If desired, the NULL value may be passed resulting in only changing the user and not selecting a database. To select a database in this case use the mysqli_select_db() function.","type":"string"}}],"doc":{"description":"Changes the user of the specified database connection and sets the current database.","type":"bool"}},{"kind":32,"name":"poll","modifiers":32,"children":[{"kind":128,"name":"$read","modifiers":1024,"doc":{"description":"List of connections to check for outstanding results that can be read.","type":"array"}},{"kind":128,"name":"$error","modifiers":1024,"doc":{"description":"List of connections on which an error occured, for example, query failure or lost connection.","type":"array"}},{"kind":128,"name":"$reject","modifiers":1024,"doc":{"description":"List of connections rejected because no asynchronous query has been run on for which the function could poll results.","type":"array"}},{"kind":128,"name":"$sec","modifiers":0,"doc":{"description":"Number of seconds to wait, must be non-negative.","type":"int"}},{"kind":128,"name":"$usec","modifiers":0,"doc":{"description":"Number of microseconds to wait, must be non-negative.","type":"int"}}],"doc":{"description":"Poll connections. Available only with mysqlnd. The method can be used as static.","type":"int"}},{"kind":32,"name":"next_result","modifiers":0,"children":[],"doc":{"description":"Prepares next result set from a previous call to mysqli_multi_query() which can be retrieved by mysqli_store_result() or mysqli_use_result().","type":"bool"}},{"kind":32,"name":"ping","modifiers":0,"children":[],"doc":{"description":"Checks whether the connection to the server is working. If it has gone down and global option mysqli.reconnect is enabled, an automatic reconnection is attempted.","type":"bool"}},{"kind":32,"name":"init","modifiers":0,"children":[],"doc":{"description":"Allocates or initializes a MYSQL object suitable for mysqli_options() and mysqli_real_connect().","type":"mysqli"}},{"kind":32,"name":"character_set_name","modifiers":0,"children":[],"doc":{"description":"Returns the current character set for the database connection.","type":"string"}},{"kind":32,"name":"get_charset","modifiers":0,"children":[],"doc":{"description":"Returns a character set object providing several properties of the current active character set.","type":"object"}},{"kind":32,"name":"select_db","modifiers":0,"children":[{"kind":128,"name":"$dbname","modifiers":0,"doc":{"description":"The database name.","type":"string"}}],"doc":{"description":"Selects the default database to be used when performing queries against the database connection.","type":"bool"}},{"kind":32,"name":"get_client_info","modifiers":0,"children":[],"doc":{"description":"Returns a string that represents the MySQL client library version.","type":"string"}},{"kind":32,"name":"kill","modifiers":0,"children":[{"kind":128,"name":"$processid","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"This function is used to ask the server to kill a MySQL thread specified by the processid parameter. This value must be retrieved by calling the mysqli_thread_id() function.","type":"bool"}},{"kind":32,"name":"close","modifiers":0,"children":[],"doc":{"description":"Closes a previously opened database connection.","type":"bool"}},{"kind":32,"name":"real_connect","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"Can be either a host name or an IP address. Passing the NULL value or the string \"localhost\" to this parameter, the local host is assumed. When possible, pipes will be used instead of the TCP/IP protocol.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The MySQL user name.","type":"string"}},{"kind":128,"name":"$passwd","modifiers":0,"doc":{"description":"If provided or NULL, the MySQL server will attempt to authenticate the user against those user records which have no password only. This allows one username to be used with different permissions (depending on if a password as provided or not).","type":"string"}},{"kind":128,"name":"$dbname","modifiers":0,"doc":{"description":"If provided will specify the default database to be used when performing queries.","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"doc":{"description":"Specifies the port number to attempt to connect to the MySQL server.","type":"int"}},{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"Specifies the socket or named pipe that should be used. Note: Specifying the socket parameter will not explicitly determine the type of connection to be used when connecting to the MySQL server. How the connection is made to the MySQL database is determined by the host parameter.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"With the parameter flags you can set different connection options: Supported flags Name Description MYSQLI_CLIENT_COMPRESS Use compression protocol MYSQLI_CLIENT_FOUND_ROWS return number of matched rows, not the number of affected rows MYSQLI_CLIENT_IGNORE_SPACE Allow spaces after function names. Makes all function names reserved words. MYSQLI_CLIENT_INTERACTIVE Allow interactive_timeout seconds (instead of wait_timeout seconds) of inactivity before closing the connection MYSQLI_CLIENT_SSL Use SSL (encryption) MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT Like MYSQLI_CLIENT_SSL, but disables validation of the provided SSL certificate. This is only for installations using MySQL Native Driver and MySQL 5.6 or later. Note: For security reasons the MULTI_STATEMENT flag is not supported in PHP. If you want to execute multiple queries use the mysqli_multi_query() function.","type":"int"}}],"doc":{"description":"Establish a connection to a MySQL database engine.","type":"bool"}},{"kind":32,"name":"stmt_init","modifiers":0,"children":[],"doc":{"description":"Allocates and initializes a statement object suitable for mysqli_stmt_prepare().","type":"mysqli_stmt"}},{"kind":32,"name":"use_result","modifiers":0,"children":[],"doc":{"description":"Used to initiate the retrieval of a result set from the last query executed using the mysqli_real_query() function on the database connection.","type":"mysqli_result"}},{"kind":32,"name":"get_warnings","modifiers":0,"children":[],"doc":{"description":"Procedural style","type":"mysqli_warning"}},{"kind":32,"name":"store_result","modifiers":0,"children":[{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"The option that you want to set. It can be one of the following values: Valid options Name Description MYSQLI_STORE_RESULT_COPY_DATA Copy results from the internal mysqlnd buffer into the PHP variables fetched. By default, mysqlnd will use a reference logic to avoid copying and duplicating results held in memory. For certain result sets, for example, result sets with many small rows, the copy approach can reduce the overall memory usage because PHP variables holding results may be released earlier (available with mysqlnd only, since PHP 5.6.0)","type":"int"}}],"doc":{"description":"Transfers the result set from the last query on the database connection represented by the link parameter to be used with the mysqli_data_seek() function.","type":"mysqli_result"}},{"kind":32,"name":"query","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query string. Data inside the query should be properly escaped.","type":"string"}},{"kind":128,"name":"$resultmode","modifiers":0,"value":"MYSQLI_STORE_RESULT","doc":{"description":"Either the constant MYSQLI_USE_RESULT or MYSQLI_STORE_RESULT depending on the desired behavior. By default, MYSQLI_STORE_RESULT is used. If you use MYSQLI_USE_RESULT all subsequent calls will return error Commands out of sync unless you call mysqli_free_result() With MYSQLI_ASYNC (available with mysqlnd), it is possible to perform query asynchronously. mysqli_poll() is then used to get results from such queries.","type":"int"}}],"doc":{"description":"Performs a query against the database.","type":"mixed"}},{"kind":32,"name":"autocommit","modifiers":0,"children":[{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"Whether to turn on auto-commit or not.","type":"bool"}}],"doc":{"description":"Turns on or off auto-commit mode on queries for the database connection.","type":"bool"}},{"kind":32,"name":"set_charset","modifiers":0,"children":[{"kind":128,"name":"$charset","modifiers":0,"doc":{"description":"The charset to be set as default.","type":"string"}}],"doc":{"description":"Sets the default character set to be used when sending data from and to the database server.","type":"bool"}},{"kind":32,"name":"stat","modifiers":0,"children":[],"doc":{"description":"mysqli_stat() returns a string containing information similar to that provided by the 'mysqladmin status' command. This includes uptime in seconds and the number of running threads, questions, reloads, and open tables.","type":"string"}},{"kind":32,"name":"begin_transaction","modifiers":1,"children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"Valid flags are: MYSQLI_TRANS_START_READ_ONLY: Start the transaction as \"START TRANSACTION READ ONLY\". MYSQLI_TRANS_START_READ_WRITE: Start the transaction as \"START TRANSACTION READ WRITE\". MYSQLI_TRANS_START_WITH_CONSISTENT_SNAPSHOT: Start the transaction as \"START TRANSACTION WITH CONSISTENT SNAPSHOT\".","type":"int"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Savepoint name for the transaction.","type":"string"}}],"doc":{"description":"Begins a transaction. Requires MySQL 5.6 and above, and the InnoDB engine (it is enabled by default). For additional details about how MySQL transactions work, see » http://dev.mysql.com/doc/mysql/en/commit.html.","type":"bool"}},{"kind":32,"name":"rpl_query_type","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Returns MYSQLI_RPL_MASTER, MYSQLI_RPL_SLAVE or MYSQLI_RPL_ADMIN depending on a query type. INSERT, UPDATE and similar are master queries, SELECT is slave, and FLUSH, REPAIR and similar are admin.","type":"int"}},{"kind":32,"name":"savepoint","modifiers":1,"description":"","children":[{"kind":128,"name":"$name","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":32,"name":"get_connection_stats","modifiers":0,"children":[],"doc":{"description":"Returns statistics about the client connection. Available only with mysqlnd.","type":"bool"}},{"kind":32,"name":"send_query","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Procedural style","type":"bool"}},{"kind":32,"name":"multi_query","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query, as a string. Data inside the query should be properly escaped.","type":"string"}}],"doc":{"description":"Executes one or multiple queries which are concatenated by a semicolon.","type":"bool"}},{"kind":32,"name":"rollback","modifiers":0,"children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"A bitmask of MYSQLI_TRANS_COR_* constants.","type":"int"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"If provided then ROLLBACK/*name*/ is executed.","type":"string"}}],"doc":{"description":"Rollbacks the current transaction for the database.","type":"bool"}},{"kind":32,"name":"commit","modifiers":0,"children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"A bitmask of MYSQLI_TRANS_COR_* constants.","type":"int"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"If provided then COMMIT/*name*/ is executed.","type":"string"}}],"doc":{"description":"Commits the current transaction for the database connection.","type":"bool"}},{"kind":32,"name":"debug","modifiers":0,"children":[{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"A string representing the debugging operation to perform","type":"string"}}],"doc":{"description":"Performs debugging operations using the Fred Fish debugging library.","type":"bool"}},{"kind":32,"name":"dump_debug_info","modifiers":0,"children":[],"doc":{"description":"This function is designed to be executed by an user with the SUPER privilege and is used to dump debugging information into the log for the MySQL Server relating to the connection.","type":"bool"}},{"kind":32,"name":"prepare","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query, as a string. Note: You should not add a terminating semicolon or \\g to the statement. This parameter can include one or more parameter markers in the SQL statement by embedding question mark (?) characters at the appropriate positions. Note: The markers are legal only in certain places in SQL statements. For example, they are allowed in the VALUES() list of an INSERT statement (to specify column values for a row), or in a comparison with a column in a WHERE clause to specify a comparison value. However, they are not allowed for identifiers (such as table or column names), in the select list that names the columns to be returned by a SELECT statement, or to specify both operands of a binary operator such as the = equal sign. The latter restriction is necessary because it would be impossible to determine the parameter type. It's not allowed to compare marker with NULL by ? IS NULL too. In general, parameters are legal only in Data Manipulation Language (DML) statements, and not in Data Definition Language (DDL) statements.","type":"string"}}],"doc":{"description":"Prepares the SQL query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement.","type":"mysqli_stmt"}},{"kind":32,"name":"options","modifiers":0,"children":[{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"The option that you want to set. It can be one of the following values: Valid options Name Description MYSQLI_OPT_CONNECT_TIMEOUT connection timeout in seconds (supported on Windows with TCP/IP since PHP 5.3.1) MYSQLI_OPT_LOCAL_INFILE enable/disable use of LOAD LOCAL INFILE MYSQLI_INIT_COMMAND command to execute after when connecting to MySQL server MYSQLI_READ_DEFAULT_FILE Read options from named option file instead of my.cnf MYSQLI_READ_DEFAULT_GROUP Read options from the named group from my.cnf or the file specified with MYSQL_READ_DEFAULT_FILE. MYSQLI_SERVER_PUBLIC_KEY RSA public key file used with the SHA-256 based authentication. MYSQLI_OPT_NET_CMD_BUFFER_SIZE The size of the internal command/network buffer. Only valid for mysqlnd. MYSQLI_OPT_NET_READ_BUFFER_SIZE Maximum read chunk size in bytes when reading the body of a MySQL command packet. Only valid for mysqlnd. MYSQLI_OPT_INT_AND_FLOAT_NATIVE Convert integer and float columns back to PHP numbers. Only valid for mysqlnd. MYSQLI_OPT_SSL_VERIFY_SERVER_CERT","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value for the option.","type":"mixed"}}],"doc":{"description":"Used to set extra connect options and affect behavior for a connection.","type":"bool"}},{"kind":32,"name":"release_savepoint","modifiers":1,"description":"","children":[{"kind":128,"name":"$name","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}}],"doc":{"description":"Represents a connection between PHP and a MySQL database."}},{"kind":8,"name":"INTL_MAX_LOCALE_LEN","doc":{"description":"Limit on locale length, set to 80 in PHP code. Locale names longer than this limit will not be accepted."}},{"kind":8,"name":"IDNA_DEFAULT","doc":{"description":"Prohibit processing of unassigned codepoints in the input for IDN functions and do not check if the input conforms to domain name ASCII rules."}},{"kind":8,"name":"IDNA_ALLOW_UNASSIGNED","doc":{"description":"Allow processing of unassigned codepoints in the input for IDN functions."}},{"kind":8,"name":"IDNA_USE_STD3_RULES","doc":{"description":"Check if the input for IDN functions conforms to domain name ASCII rules."}},{"kind":8,"name":"IDNA_CHECK_BIDI","doc":{"description":"Check whether the input conforms to the BiDi rules. Ignored by the IDNA2003 implementation, which always performs this check."}},{"kind":8,"name":"IDNA_CHECK_CONTEXTJ","doc":{"description":"Check whether the input conforms to the CONTEXTJ rules. Ignored by the IDNA2003 implementation, as this check is new in IDNA2008."}},{"kind":8,"name":"IDNA_NONTRANSITIONAL_TO_ASCII","doc":{"description":"Option for nontransitional processing in idn_to_ascii(). Transitional processing is activated by default. This option is ignored by the IDNA2003 implementation."}},{"kind":8,"name":"IDNA_NONTRANSITIONAL_TO_UNICODE","doc":{"description":"Option for nontransitional processing in idn_to_utf8(). Transitional processing is activated by default. This option is ignored by the IDNA2003 implementation."}},{"kind":8,"name":"INTL_IDNA_VARIANT_2003","doc":{"description":"Use IDNA 2003 algorithm in idn_to_utf8() and idn_to_ascii(). This is the default. This constant and using the default has been deprecated as of PHP 7.2.0."}},{"kind":8,"name":"INTL_IDNA_VARIANT_UTS46","doc":{"description":"Use UTS #46 algorithm in idn_to_utf8() and idn_to_ascii()."}},{"kind":8,"name":"IDNA_ERROR_CONTEXTJ","doc":{"description":"Errors reported in a bitset returned by the UTS #46 algorithm in idn_to_utf8() and idn_to_ascii()."}},{"kind":1,"name":"PDOStatement","modifiers":0,"associated":[{"kind":2,"name":"Traversable"}],"children":[{"kind":32,"name":"nextRowset","modifiers":1,"children":[],"doc":{"description":"Some database servers support stored procedures that return more than one rowset (also known as a result set). PDOStatement::nextRowset() enables you to access the second and subsequent rowsets associated with a PDOStatement object. Each rowset can have a different set of columns from the preceding rowset.","type":"bool"}},{"kind":32,"name":"closeCursor","modifiers":1,"children":[],"doc":{"description":"PDOStatement::closeCursor() frees up the connection to the server so that other SQL statements may be issued, but leaves the statement in a state that enables it to be executed again.","type":"bool"}},{"kind":32,"name":"getColumnMeta","modifiers":1,"description":"","children":[{"kind":128,"name":"$column","modifiers":0,"doc":{"description":"The 0-indexed column in the result set.","type":"int"}}],"doc":{"type":"array"}},{"kind":32,"name":"getAttribute","modifiers":1,"children":[{"kind":128,"name":"$attribute","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Gets an attribute of the statement. Currently, no generic attributes exist but only driver specific:","type":"mixed"}},{"kind":32,"name":"bindColumn","modifiers":1,"children":[{"kind":128,"name":"$column","modifiers":0,"doc":{"description":"Number of the column (1-indexed) or name of the column in the result set. If using the column name, be aware that the name should match the case of the column, as returned by the driver.","type":"mixed"}},{"kind":128,"name":"$param","modifiers":1024,"doc":{"description":"Name of the PHP variable to which the column will be bound.","type":"mixed"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"Data type of the parameter, specified by the PDO::PARAM_* constants.","type":"int"}},{"kind":128,"name":"$maxlen","modifiers":0,"doc":{"description":"A hint for pre-allocation.","type":"int"}},{"kind":128,"name":"$driverdata","modifiers":0,"doc":{"description":"Optional parameter(s) for the driver.","type":"mixed"}}],"doc":{"description":"PDOStatement::bindColumn() arranges to have a particular variable bound to a given column in the result-set from a query. Each call to PDOStatement::fetch() or PDOStatement::fetchAll() will update all the variables that are bound to columns.","type":"bool"}},{"kind":32,"name":"fetchAll","modifiers":1,"description":"","children":[{"kind":128,"name":"$fetch_style","modifiers":0,"doc":{"description":"Controls the contents of the returned array as documented in PDOStatement::fetch(). Defaults to value of PDO::ATTR_DEFAULT_FETCH_MODE (which defaults to PDO::FETCH_BOTH) To return an array consisting of all values of a single column from the result set, specify PDO::FETCH_COLUMN. You can specify which column you want with the fetch_argument parameter. To fetch only the unique values of a single column from the result set, bitwise-OR PDO::FETCH_COLUMN with PDO::FETCH_UNIQUE. To return an associative array grouped by the values of a specified column, bitwise-OR PDO::FETCH_COLUMN with PDO::FETCH_GROUP.","type":"int"}},{"kind":128,"name":"$fetch_argument","modifiers":0,"doc":{"description":"This argument has a different meaning depending on the value of the fetch_style parameter: PDO::FETCH_COLUMN: Returns the indicated 0-indexed column. PDO::FETCH_CLASS: Returns instances of the specified class, mapping the columns of each row to named properties in the class. PDO::FETCH_FUNC: Returns the results of calling the specified function, using each row's columns as parameters in the call.","type":"mixed"}},{"kind":128,"name":"$ctor_args","modifiers":0,"value":"array()","doc":{"description":"Arguments of custom class constructor when the fetch_style parameter is PDO::FETCH_CLASS.","type":"array"}}],"doc":{"type":"array"}},{"kind":32,"name":"debugDumpParams","modifiers":1,"children":[],"doc":{"description":"Dumps the information contained by a prepared statement directly on the output. It will provide the SQL query in use, the number of parameters used (Params), the list of parameters with their key name or position, their name, their position in the query (if this is supported by the PDO driver, otherwise, it will be -1), type (param_type) as an integer, and a boolean value is_param.","type":"void"}},{"kind":32,"name":"setFetchMode","modifiers":1,"description":"","children":[{"kind":128,"name":"$PDO::FETCH_INTO","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Object.","type":"object"}}],"doc":{"type":"bool"}},{"kind":32,"name":"fetchColumn","modifiers":1,"children":[{"kind":128,"name":"$column_number","modifiers":0,"value":"0","doc":{"description":"0-indexed number of the column you wish to retrieve from the row. If no value is supplied, PDOStatement::fetchColumn() fetches the first column.","type":"int"}}],"doc":{"description":"Returns a single column from the next row of a result set or FALSE if there are no more rows.","type":"mixed"}},{"kind":32,"name":"fetch","modifiers":1,"children":[{"kind":128,"name":"$fetch_style","modifiers":0,"doc":{"description":"Controls how the next row will be returned to the caller. This value must be one of the PDO::FETCH_* constants, defaulting to value of PDO::ATTR_DEFAULT_FETCH_MODE (which defaults to PDO::FETCH_BOTH). PDO::FETCH_ASSOC: returns an array indexed by column name as returned in your result set PDO::FETCH_BOTH (default): returns an array indexed by both column name and 0-indexed column number as returned in your result set PDO::FETCH_BOUND: returns TRUE and assigns the values of the columns in your result set to the PHP variables to which they were bound with the PDOStatement::bindColumn() method PDO::FETCH_CLASS: returns a new instance of the requested class, mapping the columns of the result set to named properties in the class, and calling the constructor afterwards, unless PDO::FETCH_PROPS_LATE is also given. If fetch_style includes PDO::FETCH_CLASSTYPE (e.g. PDO::FETCH_CLASS | PDO::FETCH_CLASSTYPE) then the name of the class is determined from a value of the first column. PDO::FETCH_INTO: updates an existing instance of the requested class, mapping the columns of the result set to named properties in the class PDO::FETCH_LAZY: combines PDO::FETCH_BOTH and PDO::FETCH_OBJ, creating the object variable names as they are accessed PDO::FETCH_NAMED: returns an array with the same form as PDO::FETCH_ASSOC, except that if there are multiple columns with the same name, the value referred to by that key will be an array of all the values in the row that had that column name PDO::FETCH_NUM: returns an array indexed by column number as returned in your result set, starting at column 0 PDO::FETCH_OBJ: returns an anonymous object with property names that correspond to the column names returned in your result set PDO::FETCH_PROPS_LATE: when used with PDO::FETCH_CLASS, the constructor of the class is called before the properties are assigned from the respective column values.","type":"int"}},{"kind":128,"name":"$cursor_orientation","modifiers":0,"value":"PDO::FETCH_ORI_NEXT","doc":{"description":"For a PDOStatement object representing a scrollable cursor, this value determines which row will be returned to the caller. This value must be one of the PDO::FETCH_ORI_* constants, defaulting to PDO::FETCH_ORI_NEXT. To request a scrollable cursor for your PDOStatement object, you must set the PDO::ATTR_CURSOR attribute to PDO::CURSOR_SCROLL when you prepare the SQL statement with PDO::prepare().","type":"int"}},{"kind":128,"name":"$cursor_offset","modifiers":0,"description":"","value":"0","doc":{"type":"int"}}],"doc":{"description":"Fetches a row from a result set associated with a PDOStatement object. The fetch_style parameter determines how PDO returns the row.","type":"mixed"}},{"kind":32,"name":"columnCount","modifiers":1,"children":[],"doc":{"description":"Use PDOStatement::columnCount() to return the number of columns in the result set represented by the PDOStatement object.","type":"int"}},{"kind":32,"name":"fetchObject","modifiers":1,"children":[{"kind":128,"name":"$class_name","modifiers":0,"value":"\"stdClass\"","doc":{"description":"Name of the created class.","type":"string"}},{"kind":128,"name":"$ctor_args","modifiers":0,"doc":{"description":"Elements of this array are passed to the constructor.","type":"array"}}],"doc":{"description":"Fetches the next row and returns it as an object. This function is an alternative to PDOStatement::fetch() with PDO::FETCH_CLASS or PDO::FETCH_OBJ style.","type":"mixed"}},{"kind":32,"name":"bindValue","modifiers":1,"children":[{"kind":128,"name":"$parameter","modifiers":0,"doc":{"description":"Parameter identifier. For a prepared statement using named placeholders, this will be a parameter name of the form :name. For a prepared statement using question mark placeholders, this will be the 1-indexed position of the parameter.","type":"mixed"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to bind to the parameter.","type":"mixed"}},{"kind":128,"name":"$data_type","modifiers":0,"value":"PDO::PARAM_STR","doc":{"description":"Explicit data type for the parameter using the PDO::PARAM_* constants.","type":"int"}}],"doc":{"description":"Binds a value to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement.","type":"bool"}},{"kind":32,"name":"errorCode","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"errorInfo","modifiers":1,"description":"","children":[],"doc":{"type":"array"}},{"kind":32,"name":"execute","modifiers":1,"children":[{"kind":128,"name":"$input_parameters","modifiers":0,"doc":{"description":"An array of values with as many elements as there are bound parameters in the SQL statement being executed. All values are treated as PDO::PARAM_STR. Multiple values cannot be bound to a single parameter; for example, it is not allowed to bind two values to a single named parameter in an IN() clause. Binding more values than specified is not possible; if more keys exist in input_parameters than in the SQL specified in the PDO::prepare(), then the statement will fail and an error is emitted.","type":"array"}}],"doc":{"description":"Execute the prepared statement. If the prepared statement included parameter markers, either:","type":"bool"}},{"kind":32,"name":"setAttribute","modifiers":1,"children":[{"kind":128,"name":"$attribute","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Sets an attribute on the statement. Currently, no generic attributes are set but only driver specific:","type":"bool"}},{"kind":32,"name":"bindParam","modifiers":1,"children":[{"kind":128,"name":"$parameter","modifiers":0,"doc":{"description":"Parameter identifier. For a prepared statement using named placeholders, this will be a parameter name of the form :name. For a prepared statement using question mark placeholders, this will be the 1-indexed position of the parameter.","type":"mixed"}},{"kind":128,"name":"$variable","modifiers":1024,"doc":{"description":"Name of the PHP variable to bind to the SQL statement parameter.","type":"mixed"}},{"kind":128,"name":"$data_type","modifiers":0,"value":"PDO::PARAM_STR","doc":{"description":"Explicit data type for the parameter using the PDO::PARAM_* constants. To return an INOUT parameter from a stored procedure, use the bitwise OR operator to set the PDO::PARAM_INPUT_OUTPUT bits for the data_type parameter.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"Length of the data type. To indicate that a parameter is an OUT parameter from a stored procedure, you must explicitly set the length.","type":"int"}},{"kind":128,"name":"$driver_options","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Binds a PHP variable to a corresponding named or question mark placeholder in the SQL statement that was used to prepare the statement. Unlike PDOStatement::bindValue(), the variable is bound as a reference and will only be evaluated at the time that PDOStatement::execute() is called.","type":"bool"}},{"kind":32,"name":"rowCount","modifiers":1,"children":[],"doc":{"description":"PDOStatement::rowCount() returns the number of rows affected by the last DELETE, INSERT, or UPDATE statement executed by the corresponding PDOStatement object.","type":"int"}}],"doc":{"description":"Represents a prepared statement and, after the statement is executed, an associated result set."}},{"kind":1,"name":"RecursiveFilterIterator","modifiers":16,"associated":[{"kind":1,"name":"FilterIterator"},{"kind":2,"name":"OuterIterator"},{"kind":2,"name":"RecursiveIterator"}],"children":[{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The RecursiveIterator to be filtered.","type":"RecursiveIterator"}}],"doc":{"description":"Create a RecursiveFilterIterator from a RecursiveIterator.","type":"public"}},{"kind":32,"name":"getChildren","modifiers":1,"children":[],"doc":{"description":"Return the inner iterator's children contained in a RecursiveFilterIterator.","type":"RecursiveFilterIterator"}},{"kind":32,"name":"hasChildren","modifiers":1,"children":[],"doc":{"description":"Check whether the inner iterator's current element has children.","type":"bool"}}],"doc":{"description":"This abstract iterator filters out unwanted values for a RecursiveIterator. This class should be extended to implement custom filters. The RecursiveFilterIterator::accept() must be implemented in the subclass."}},{"kind":1,"name":"Transliterator","modifiers":0,"associated":[],"children":[{"kind":1024,"name":"FORWARD","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"REVERSE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"createFromRules","modifiers":32,"children":[{"kind":128,"name":"$rules","modifiers":0,"doc":{"description":"The rules.","type":"string"}},{"kind":128,"name":"$direction","modifiers":0,"doc":{"description":"The direction, defaults to >Transliterator::FORWARD. May also be set to Transliterator::REVERSE.","type":"string"}}],"doc":{"description":"Creates a Transliterator from rules.","type":"Transliterator"}},{"kind":32,"name":"createInverse","modifiers":1,"children":[],"doc":{"description":"Opens the inverse transliterator.","type":"Transliterator"}},{"kind":32,"name":"transliterate","modifiers":1,"children":[{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The string to be transformed.","type":"string"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"The start index (in UTF-16 code units) from which the string will start to be transformed, inclusive. Indexing starts at 0. The text before will be left as is.","type":"int"}},{"kind":128,"name":"$end","modifiers":0,"doc":{"description":"The end index (in UTF-16 code units) until which the string will be transformed, exclusive. Indexing starts at 0. The text after will be left as is.","type":"int"}}],"doc":{"description":"Transforms a string or part thereof using an ICU transliterator.","type":"string"}},{"kind":32,"name":"getErrorMessage","modifiers":1,"children":[],"doc":{"description":"Gets the last error message for this transliterator.","type":"string"}},{"kind":32,"name":"create","modifiers":32,"children":[{"kind":128,"name":"$id","modifiers":0,"doc":{"description":"The id.","type":"string"}},{"kind":128,"name":"$direction","modifiers":0,"doc":{"description":"The direction, defaults to >Transliterator::FORWARD. May also be set to Transliterator::REVERSE.","type":"int"}}],"doc":{"description":"Opens a Transliterator by id.","type":"Transliterator"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"This method should not be called. Its only purpose is to deny instantiation with the new operator.","type":"Transliterator"}},{"kind":32,"name":"listIDs","modifiers":32,"children":[],"doc":{"description":"Returns an array with the registered transliterator IDs.","type":"array"}},{"kind":32,"name":"getErrorCode","modifiers":1,"children":[],"doc":{"description":"Gets the last error code for this transliterator.","type":"int"}}],"doc":{"description":"Transliterator provides transliteration of strings."}},{"kind":1,"name":"RecursiveIteratorIterator","modifiers":0,"associated":[{"kind":2,"name":"OuterIterator"}],"children":[{"kind":1024,"name":"LEAVES_ONLY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SELF_FIRST","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHILD_FIRST","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CATCH_GET_CHILD","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"getSubIterator","modifiers":1,"description":"","children":[{"kind":128,"name":"$level","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"RecursiveIterator"}},{"kind":32,"name":"rewind","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator being constructed from. Either a RecursiveIterator or IteratorAggregate.","type":"Traversable"}},{"kind":128,"name":"$mode","modifiers":0,"value":"RecursiveIteratorIterator::LEAVES_ONLY","doc":{"description":"Optional mode. Possible values are RecursiveIteratorIterator::LEAVES_ONLY - The default. Lists only leaves in iteration. RecursiveIteratorIterator::SELF_FIRST - Lists leaves and parents in iteration with parents coming first. RecursiveIteratorIterator::CHILD_FIRST - Lists leaves and parents in iteration with leaves coming first.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"Optional flag. Possible values are RecursiveIteratorIterator::CATCH_GET_CHILD which will then ignore exceptions thrown in calls to RecursiveIteratorIterator::getChildren().","type":"int"}}],"doc":{"description":"Creates a RecursiveIteratorIterator from a RecursiveIterator.","type":"public"}},{"kind":32,"name":"setMaxDepth","modifiers":1,"children":[{"kind":128,"name":"$max_depth","modifiers":0,"value":"-1","doc":{"description":"The maximum allowed depth. -1 is used for any depth.","type":"string"}}],"doc":{"description":"Set the maximum allowed depth.","type":"void"}},{"kind":32,"name":"callHasChildren","modifiers":1,"children":[],"doc":{"description":"Called for each element to test whether it has children.","type":"bool"}},{"kind":32,"name":"callGetChildren","modifiers":1,"children":[],"doc":{"description":"Get children of the current element.","type":"RecursiveIterator"}},{"kind":32,"name":"key","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"beginChildren","modifiers":1,"children":[],"doc":{"description":"Is called after calling RecursiveIteratorIterator::getChildren(), and its associated RecursiveIteratorIterator::rewind().","type":"void"}},{"kind":32,"name":"getMaxDepth","modifiers":1,"children":[],"doc":{"description":"Gets the maximum allowable depth.","type":"mixed"}},{"kind":32,"name":"nextElement","modifiers":1,"children":[],"doc":{"description":"Called when the next element is available.","type":"void"}},{"kind":32,"name":"getInnerIterator","modifiers":1,"children":[],"doc":{"description":"Gets the current active sub iterator.","type":"iterator"}},{"kind":32,"name":"endIteration","modifiers":1,"children":[],"doc":{"description":"Called when the iteration ends (when RecursiveIteratorIterator::valid() first returns FALSE.","type":"void"}},{"kind":32,"name":"beginIteration","modifiers":1,"children":[],"doc":{"description":"Called when iteration begins (after the first RecursiveIteratorIterator::rewind() call.","type":"void"}},{"kind":32,"name":"getDepth","modifiers":1,"description":"","children":[],"doc":{"type":"int"}},{"kind":32,"name":"next","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"valid","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"current","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"endChildren","modifiers":1,"children":[],"doc":{"description":"Called when end recursing one level.","type":"void"}}],"doc":{"description":"Can be used to iterate through recursive iterators."}},{"kind":1,"name":"RuntimeException","modifiers":0,"associated":[{"kind":1,"name":"Exception"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown if an error which can only be found on runtime occurs."}},{"kind":1,"name":"RegexIterator","modifiers":0,"associated":[{"kind":1,"name":"FilterIterator"}],"children":[{"kind":1024,"name":"MATCH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GET_MATCH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ALL_MATCHES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SPLIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"REPLACE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"USE_KEY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"setMode","modifiers":1,"children":[{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The operation mode. The available modes are listed below. The actual meanings of these modes are described in the predefined constants. RegexIterator modes value constant 0 RegexIterator::MATCH 1 RegexIterator::GET_MATCH 2 RegexIterator::ALL_MATCHES 3 RegexIterator::SPLIT 4 RegexIterator::REPLACE","type":"int"}}],"doc":{"description":"Sets the operation mode.","type":"void"}},{"kind":32,"name":"setPregFlags","modifiers":1,"children":[{"kind":128,"name":"$preg_flags","modifiers":0,"doc":{"description":"The regular expression flags. See RegexIterator::__construct() for an overview of available flags.","type":"int"}}],"doc":{"description":"Sets the regular expression flags.","type":"void"}},{"kind":32,"name":"getMode","modifiers":1,"children":[],"doc":{"description":"Returns the operation mode, see RegexIterator::setMode() for the list of operation modes.","type":"int"}},{"kind":32,"name":"getPregFlags","modifiers":1,"children":[],"doc":{"description":"Returns the regular expression flags, see RegexIterator::__construct() for the list of flags.","type":"int"}},{"kind":32,"name":"getRegex","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"accept","modifiers":1,"children":[],"doc":{"description":"Matches (string) RegexIterator::current() (or RegexIterator::key() if the RegexIterator::USE_KEY flag is set) against the regular expression.","type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator to apply this regex filter to.","type":"Iterator"}},{"kind":128,"name":"$regex","modifiers":0,"doc":{"description":"The regular expression to match.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"value":"self::MATCH","doc":{"description":"Operation mode, see RegexIterator::setMode() for a list of modes.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"Special flags, see RegexIterator::setFlags() for a list of available flags.","type":"int"}},{"kind":128,"name":"$preg_flags","modifiers":0,"value":"0","doc":{"description":"The regular expression flags. These flags depend on the operation mode parameter: RegexIterator preg_flags operation mode available flags RegexIterator::ALL_MATCHES See preg_match_all(). RegexIterator::GET_MATCH See preg_match(). RegexIterator::MATCH See preg_match(). RegexIterator::REPLACE none. RegexIterator::SPLIT See preg_split().","type":"int"}}],"doc":{"description":"Create a new RegexIterator which filters an Iterator using a regular expression.","type":"public"}},{"kind":32,"name":"getFlags","modifiers":1,"children":[],"doc":{"description":"Returns the flags, see RegexIterator::setFlags() for a list of available flags.","type":"int"}},{"kind":32,"name":"setFlags","modifiers":1,"children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The flags to set, a bitmask of class constants. The available flags are listed below. The actual meanings of these flags are described in the predefined constants. RegexIterator flags value constant 1 RegexIterator::USE_KEY","type":"int"}}],"doc":{"description":"Sets the flags.","type":"void"}}],"doc":{"description":"This iterator can be used to filter another iterator based on a regular expression."}},{"kind":1,"name":"DirectoryIterator","modifiers":0,"associated":[{"kind":1,"name":"SplFileInfo"},{"kind":2,"name":"SeekableIterator"}],"children":[{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Get the current DirectoryIterator item.","type":"DirectoryIterator"}},{"kind":32,"name":"getPathname","modifiers":1,"children":[],"doc":{"description":"Get the path and file name of the current file.","type":"string"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Check whether current DirectoryIterator position is a valid file.","type":"bool"}},{"kind":32,"name":"getType","modifiers":1,"children":[],"doc":{"description":"Determines which file type the current DirectoryIterator item belongs to. One of file, link, or dir.","type":"string"}},{"kind":32,"name":"getExtension","modifiers":1,"children":[],"doc":{"description":"Retrieves the file extension.","type":"string"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"Get the file name of the current DirectoryIterator item.","type":"string"}},{"kind":32,"name":"getBasename","modifiers":1,"children":[{"kind":128,"name":"$suffix","modifiers":0,"doc":{"description":"If the base name ends in suffix, this will be cut.","type":"string"}}],"doc":{"description":"Get the base name of the current DirectoryIterator item.","type":"string"}},{"kind":32,"name":"getMTime","modifiers":1,"children":[],"doc":{"description":"Get the last modification time of the current DirectoryIterator item, as a Unix timestamp.","type":"int"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Get the key for the current DirectoryIterator item.","type":"string"}},{"kind":32,"name":"isLink","modifiers":1,"children":[],"doc":{"description":"Determines if the current DirectoryIterator item is a symbolic link.","type":"bool"}},{"kind":32,"name":"getPerms","modifiers":1,"children":[],"doc":{"description":"Get the permissions of the current DirectoryIterator item.","type":"int"}},{"kind":32,"name":"isDot","modifiers":1,"children":[],"doc":{"description":"Determines if the current DirectoryIterator item is a directory and either . or ...","type":"bool"}},{"kind":32,"name":"getCTime","modifiers":1,"children":[],"doc":{"description":"Get the inode change time for the current DirectoryIterator item.","type":"int"}},{"kind":32,"name":"isWritable","modifiers":1,"children":[],"doc":{"description":"Determines if the current DirectoryIterator item is writable.","type":"bool"}},{"kind":32,"name":"isReadable","modifiers":1,"children":[],"doc":{"description":"Determines if the current DirectoryIterator item is readable.","type":"bool"}},{"kind":32,"name":"getSize","modifiers":1,"children":[],"doc":{"description":"Get the file size for the current DirectoryIterator item.","type":"int"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The path of the directory to traverse.","type":"string"}}],"doc":{"description":"Constructs a new directory iterator from a path.","type":"public"}},{"kind":32,"name":"isFile","modifiers":1,"children":[],"doc":{"description":"Determines if the current DirectoryIterator item is a regular file.","type":"bool"}},{"kind":32,"name":"isDir","modifiers":1,"children":[],"doc":{"description":"Determines if the current DirectoryIterator item is a directory.","type":"bool"}},{"kind":32,"name":"getFilename","modifiers":1,"children":[],"doc":{"description":"Get the file name of the current DirectoryIterator item.","type":"string"}},{"kind":32,"name":"getInode","modifiers":1,"children":[],"doc":{"description":"Get the inode number for the current DirectoryIterator item.","type":"int"}},{"kind":32,"name":"getOwner","modifiers":1,"children":[],"doc":{"description":"Get the owner of the current DirectoryIterator item, in numerical format.","type":"int"}},{"kind":32,"name":"getPath","modifiers":1,"children":[],"doc":{"description":"Get the path to the current DirectoryIterator item.","type":"string"}},{"kind":32,"name":"isExecutable","modifiers":1,"children":[],"doc":{"description":"Determines if the current DirectoryIterator item is executable.","type":"bool"}},{"kind":32,"name":"getATime","modifiers":1,"children":[],"doc":{"description":"Get the last access time of the current DirectoryIterator item.","type":"int"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Move forward to the next DirectoryIterator item.","type":"void"}},{"kind":32,"name":"seek","modifiers":1,"children":[{"kind":128,"name":"$position","modifiers":0,"doc":{"description":"The zero-based numeric position to seek to.","type":"int"}}],"doc":{"description":"Seek to a given position in the DirectoryIterator.","type":"void"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewind the DirectoryIterator back to the start.","type":"void"}},{"kind":32,"name":"getGroup","modifiers":1,"children":[],"doc":{"description":"Get the group id of the file.","type":"int"}}],"doc":{"description":"The DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories."}},{"kind":8,"name":"DIRECTORY_SEPARATOR","description":""},{"kind":8,"name":"PATH_SEPARATOR","doc":{"description":"Semicolon on Windows, colon otherwise."}},{"kind":8,"name":"SCANDIR_SORT_ASCENDING","doc":{"description":"Available since PHP 5.4.0."}},{"kind":8,"name":"SCANDIR_SORT_DESCENDING","doc":{"description":"Available since PHP 5.4.0."}},{"kind":8,"name":"SCANDIR_SORT_NONE","doc":{"description":"Available since PHP 5.4.0."}},{"kind":1,"name":"DateTimeImmutable","modifiers":0,"associated":[{"kind":2,"name":"DateTimeInterface"}],"children":[{"kind":32,"name":"createFromFormat","modifiers":32,"children":[{"kind":128,"name":"$format","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$time","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$timezone","modifiers":0,"description":"","doc":{"type":"DateTimeZone"}}],"doc":{"description":"Like DateTime::createFromFormat() but works with DateTimeImmutable.","type":"DateTimeImmutable"}},{"kind":32,"name":"__set_state","modifiers":32,"children":[{"kind":128,"name":"$array","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"Like DateTime::__set_state() but works with DateTimeImmutable.","type":"DateTimeImmutable"}},{"kind":32,"name":"setTimezone","modifiers":1,"children":[{"kind":128,"name":"$timezone","modifiers":0,"description":"","doc":{"type":"DateTimeZone"}}],"doc":{"description":"Like DateTime::setTimezone() but works with DateTimeImmutable.","type":"DateTimeImmutable"}},{"kind":32,"name":"format","modifiers":1,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"Format accepted by date().","type":"string"}}],"doc":{"description":"Returns date formatted according to given format.","type":"string"}},{"kind":32,"name":"diff","modifiers":1,"children":[{"kind":128,"name":"$datetime2","modifiers":0,"description":"","doc":{"type":"DateTimeInterface"}},{"kind":128,"name":"$absolute","modifiers":0,"value":"false","doc":{"description":"Should the interval be forced to be positive?","type":"bool"}}],"doc":{"description":"Returns the difference between two DateTimeInterface objects.","type":"DateInterval"}},{"kind":32,"name":"add","modifiers":1,"children":[{"kind":128,"name":"$interval","modifiers":0,"description":"","doc":{"type":"DateInterval"}}],"doc":{"description":"Like DateTime::add() but works with DateTimeImmutable.","type":"DateTimeImmutable"}},{"kind":32,"name":"sub","modifiers":1,"children":[{"kind":128,"name":"$interval","modifiers":0,"description":"","doc":{"type":"DateInterval"}}],"doc":{"description":"Like DateTime::sub() but works with DateTimeImmutable.","type":"DateTimeImmutable"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$time","modifiers":0,"description":"","value":"\"now\"","doc":{"type":"string"}},{"kind":128,"name":"$timezone","modifiers":0,"description":"","value":"NULL","doc":{"type":"DateTimeZone"}}],"doc":{"description":"Like DateTime::__construct() but works with DateTimeImmutable.","type":"public"}},{"kind":32,"name":"createFromMutable","modifiers":32,"description":"","children":[{"kind":128,"name":"$datetime","modifiers":0,"doc":{"description":"The mutable DateTime object that you want to convert to an immutable version. This object is not modified, but instead a new DateTimeImmutable object is created containing the same date time and timezone information.","type":"DateTime"}}],"doc":{"type":"DateTimeImmutable"}},{"kind":32,"name":"__wakeup","modifiers":0,"children":[],"doc":{"description":"The __wakeup() handler.","type":"public"}},{"kind":32,"name":"getLastErrors","modifiers":32,"children":[],"doc":{"description":"Like DateTime::getLastErrors() but works with DateTimeImmutable.","type":"array"}},{"kind":32,"name":"setDate","modifiers":1,"children":[{"kind":128,"name":"$year","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$month","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$day","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Like DateTime::setDate() but works with DateTimeImmutable.","type":"DateTimeImmutable"}},{"kind":32,"name":"modify","modifiers":1,"children":[{"kind":128,"name":"$modify","modifiers":0,"doc":{"description":"A date/time string. Valid formats are explained in Date and Time Formats.","type":"string"}}],"doc":{"description":"Creates a new DateTimeImmutable object with modified timestamp. The original object is not modified.","type":"DateTimeImmutable"}},{"kind":32,"name":"getTimestamp","modifiers":1,"children":[],"doc":{"description":"Gets the Unix timestamp.","type":"int"}},{"kind":32,"name":"getOffset","modifiers":1,"children":[],"doc":{"description":"Returns the timezone offset.","type":"int"}},{"kind":32,"name":"setISODate","modifiers":1,"children":[{"kind":128,"name":"$year","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$week","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$day","modifiers":0,"description":"","value":"1","doc":{"type":"int"}}],"doc":{"description":"Like DateTime::setISODate() but works with DateTimeImmutable.","type":"DateTimeImmutable"}},{"kind":32,"name":"getTimezone","modifiers":1,"children":[],"doc":{"description":"Return time zone relative to given DateTime.","type":"DateTimeZone"}},{"kind":32,"name":"setTimestamp","modifiers":1,"children":[{"kind":128,"name":"$unixtimestamp","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Like DateTime::setTimestamp() but works with DateTimeImmutable.","type":"DateTimeImmutable"}},{"kind":32,"name":"setTime","modifiers":1,"children":[{"kind":128,"name":"$hour","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$minute","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$second","modifiers":0,"description":"","value":"0","doc":{"type":"int"}}],"doc":{"description":"Like DateTime::setTime() but works with DateTimeImmutable.","type":"DateTimeImmutable"}}],"doc":{"description":"This class behaves the same as DateTime except it never modifies itself but returns a new object instead."}},{"kind":1,"name":"SoapFault","modifiers":0,"associated":[{"kind":1,"name":"Exception"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":32,"name":"SoapFault","modifiers":0,"children":[{"kind":128,"name":"$faultcode","modifiers":0,"doc":{"description":"The error code of the SoapFault.","type":"string"}},{"kind":128,"name":"$faultstring","modifiers":0,"doc":{"description":"The error message of the SoapFault.","type":"string"}},{"kind":128,"name":"$faultactor","modifiers":0,"doc":{"description":"A string identifying the actor that caused the error.","type":"string"}},{"kind":128,"name":"$detail","modifiers":0,"doc":{"description":"More details about the cause of the error.","type":"string"}},{"kind":128,"name":"$faultname","modifiers":0,"doc":{"description":"Can be used to select the proper fault encoding from WSDL.","type":"string"}},{"kind":128,"name":"$headerfault","modifiers":0,"doc":{"description":"Can be used during SOAP header handling to report an error in the response header.","type":"string"}}],"doc":{"description":"This class is used to send SOAP fault responses from the PHP handler. faultcode, faultstring, faultactor and detail are standard elements of a SOAP Fault.","type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$faultcode","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$faultstring","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$faultactor","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$detail","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$faultname","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$headerfault","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"This function is an alias of: SoapFault::SoapFault()","type":"SoapFault"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"Returns a string representation of the SoapFault.","type":"string"}}],"doc":{"description":"Represents a SOAP fault."}},{"kind":1,"name":"SplPriorityQueue","modifiers":0,"associated":[{"kind":2,"name":"Iterator"},{"kind":2,"name":"Countable"}],"children":[{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Checks if the queue contains any more nodes.","type":"bool"}},{"kind":32,"name":"isEmpty","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"top","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"This function returns the current node index","type":"mixed"}},{"kind":32,"name":"recoverFromCorruption","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"compare","modifiers":1,"children":[{"kind":128,"name":"$priority1","modifiers":0,"doc":{"description":"The priority of the first node being compared.","type":"mixed"}},{"kind":128,"name":"$priority2","modifiers":0,"doc":{"description":"The priority of the second node being compared.","type":"mixed"}}],"doc":{"description":"Compare priority1 with priority2.","type":"int"}},{"kind":32,"name":"count","modifiers":1,"description":"","children":[],"doc":{"type":"int"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"This constructs a new empty queue.","type":"public"}},{"kind":32,"name":"extract","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"insert","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to insert.","type":"mixed"}},{"kind":128,"name":"$priority","modifiers":0,"doc":{"description":"The associated priority.","type":"mixed"}}],"doc":{"description":"Insert value with the priority priority in the queue.","type":"void"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"This rewinds the iterator to the beginning. This is a no-op for heaps as the iterator is virtual and in fact never moves from the top of the heap.","type":"void"}},{"kind":32,"name":"setExtractFlags","modifiers":1,"description":"","children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"Defines what is extracted by SplPriorityQueue::current(), SplPriorityQueue::top() and SplPriorityQueue::extract(). SplPriorityQueue::EXTR_DATA (0x00000001): Extract the data SplPriorityQueue::EXTR_PRIORITY (0x00000002): Extract the priority SplPriorityQueue::EXTR_BOTH (0x00000003): Extract an array containing both The default mode is SplPriorityQueue::EXTR_DATA.","type":"int"}}],"doc":{"type":"void"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Extracts the top node from the queue.","type":"void"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Get the current datastructure node.","type":"mixed"}}],"doc":{"description":"The SplPriorityQueue class provides the main functionalities of a prioritized queue, implemented using a max heap."}},{"kind":1,"name":"Reflector","modifiers":0,"associated":[],"children":[{"kind":32,"name":"export","modifiers":32,"children":[],"doc":{"description":"Exports.","type":"string"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"To string.","type":"string"}}],"doc":{"description":"Reflector is an interface implemented by all exportable Reflection classes."}},{"kind":1,"name":"Directory","modifiers":0,"associated":[],"children":[{"kind":16,"name":"$path","modifiers":1,"doc":{"description":"The directory that was opened.","type":"string"}},{"kind":16,"name":"$handle","modifiers":1,"doc":{"description":"Can be used with other directory functions such as readdir(), rewinddir() and closedir().","type":"resource"}},{"kind":32,"name":"close","modifiers":1,"children":[{"kind":128,"name":"$dir_handle","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Same as closedir(), only dir_handle defaults to $this.","type":"void"}},{"kind":32,"name":"read","modifiers":1,"children":[{"kind":128,"name":"$dir_handle","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Same as readdir(), only dir_handle defaults to $this.","type":"string"}},{"kind":32,"name":"rewind","modifiers":1,"children":[{"kind":128,"name":"$dir_handle","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Same as rewinddir(), only dir_handle defaults to $this.","type":"void"}}],"doc":{"description":"Instances of Directory are created by calling the dir() function, not by the new operator."}},{"kind":1,"name":"ReflectionType","modifiers":0,"associated":[],"children":[{"kind":32,"name":"isBuiltin","modifiers":1,"children":[],"doc":{"description":"Checks if the type is a built-in type in PHP.","type":"bool"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"Gets the parameter type name.","type":"string"}},{"kind":32,"name":"allowsNull","modifiers":1,"children":[],"doc":{"description":"Checks whether the parameter allows NULL.","type":"bool"}}],"doc":{"description":"The ReflectionType class reports information about a function's return type."}},{"kind":1,"name":"RangeException","modifiers":0,"associated":[{"kind":1,"name":"RuntimeException"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown to indicate range errors during program execution. Normally this means there was an arithmetic error other than under/overflow. This is the runtime version of DomainException."}},{"kind":1,"name":"Error","modifiers":0,"associated":[{"kind":2,"name":"Throwable"}],"children":[{"kind":16,"name":"$message","modifiers":2,"doc":{"description":"The error message","type":"string"}},{"kind":16,"name":"$code","modifiers":2,"doc":{"description":"The error code","type":"int"}},{"kind":16,"name":"$file","modifiers":2,"doc":{"description":"The filename where the error happened","type":"string"}},{"kind":16,"name":"$line","modifiers":2,"doc":{"description":"The line where the error happened","type":"int"}}],"doc":{"description":"Error is the base class for all internal PHP errors."}},{"kind":1,"name":"OutOfBoundsException","modifiers":0,"associated":[{"kind":1,"name":"RuntimeException"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown if a value is not a valid key. This represents errors that cannot be detected at compile time."}},{"kind":1,"name":"ReflectionClass","modifiers":0,"associated":[{"kind":2,"name":"Reflector"}],"children":[{"kind":1024,"name":"IS_IMPLICIT_ABSTRACT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_EXPLICIT_ABSTRACT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_FINAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"getConstants","modifiers":1,"children":[],"doc":{"description":"Gets all defined constants from a class, regardless of their visibility.","type":"array"}},{"kind":32,"name":"getShortName","modifiers":1,"children":[],"doc":{"description":"Gets the short name of the class, the part without the namespace.","type":"string"}},{"kind":32,"name":"getFileName","modifiers":1,"children":[],"doc":{"description":"Gets the filename of the file in which the class has been defined.","type":"string"}},{"kind":32,"name":"isUserDefined","modifiers":1,"children":[],"doc":{"description":"Checks whether the class is user-defined, as opposed to internal.","type":"bool"}},{"kind":32,"name":"inNamespace","modifiers":1,"children":[],"doc":{"description":"Checks if this class is defined in a namespace.","type":"bool"}},{"kind":32,"name":"isAnonymous","modifiers":1,"children":[],"doc":{"description":"Checks if a class is an anonymous class.","type":"bool"}},{"kind":32,"name":"isIterateable","modifiers":1,"children":[],"doc":{"description":"Checks whether the class is iterateable.","type":"bool"}},{"kind":32,"name":"getConstant","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the constant.","type":"string"}}],"doc":{"description":"Gets the defined constant.","type":"mixed"}},{"kind":32,"name":"newInstanceWithoutConstructor","modifiers":1,"children":[],"doc":{"description":"Creates a new instance of the class without invoking the constructor.","type":"object"}},{"kind":32,"name":"getProperty","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The property name.","type":"string"}}],"doc":{"description":"Gets a ReflectionProperty for a class's property.","type":"ReflectionProperty"}},{"kind":32,"name":"isTrait","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"getDocComment","modifiers":1,"children":[],"doc":{"description":"Gets doc comments from a class.","type":"string"}},{"kind":32,"name":"newInstanceArgs","modifiers":1,"children":[{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"The parameters to be passed to the class constructor as an array.","type":"array"}}],"doc":{"description":"Creates a new instance of the class, the given arguments are passed to the class constructor.","type":"object"}},{"kind":32,"name":"getConstructor","modifiers":1,"children":[],"doc":{"description":"Gets the constructor of the reflected class.","type":"ReflectionMethod"}},{"kind":32,"name":"newInstance","modifiers":1,"children":[{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"Accepts a variable number of arguments which are passed to the class constructor, much like call_user_func().","type":"mixed"}}],"doc":{"description":"Creates a new instance of the class. The given arguments are passed to the class constructor.","type":"object"}},{"kind":32,"name":"isInstance","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object being compared to.","type":"object"}}],"doc":{"description":"Checks if an object is an instance of a class.","type":"bool"}},{"kind":32,"name":"getParentClass","modifiers":1,"description":"","children":[],"doc":{"type":"ReflectionClass"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"Returns the string representation of the ReflectionClass object.","type":"string"}},{"kind":32,"name":"getProperties","modifiers":1,"children":[{"kind":128,"name":"$filter","modifiers":0,"doc":{"description":"The optional filter, for filtering desired property types. It's configured using the ReflectionProperty constants, and defaults to all property types.","type":"int"}}],"doc":{"description":"Retrieves reflected properties.","type":"array"}},{"kind":32,"name":"hasConstant","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the constant being checked for.","type":"string"}}],"doc":{"description":"Checks whether the class has a specific constant defined or not.","type":"bool"}},{"kind":32,"name":"getExtensionName","modifiers":1,"children":[],"doc":{"description":"Gets the name of the extension which defined the class.","type":"string"}},{"kind":32,"name":"implementsInterface","modifiers":1,"children":[{"kind":128,"name":"$interface","modifiers":0,"doc":{"description":"The interface name.","type":"string"}}],"doc":{"description":"Checks whether it implements an interface.","type":"bool"}},{"kind":32,"name":"getTraitNames","modifiers":1,"description":"","children":[],"doc":{"type":"array"}},{"kind":32,"name":"getInterfaces","modifiers":1,"children":[],"doc":{"description":"Gets the interfaces.","type":"array"}},{"kind":32,"name":"isSubclassOf","modifiers":1,"children":[{"kind":128,"name":"$class","modifiers":0,"doc":{"description":"The class name being checked against.","type":"string"}}],"doc":{"description":"Checks if the class is a subclass of a specified class or implements a specified interface.","type":"bool"}},{"kind":32,"name":"getTraits","modifiers":1,"description":"","children":[],"doc":{"type":"array"}},{"kind":32,"name":"getInterfaceNames","modifiers":1,"children":[],"doc":{"description":"Get the interface names.","type":"array"}},{"kind":32,"name":"export","modifiers":32,"children":[{"kind":128,"name":"$argument","modifiers":0,"doc":{"description":"The reflection to export.","type":"mixed"}},{"kind":128,"name":"$return","modifiers":0,"value":"false","doc":{"description":"Setting to TRUE will return the export, as opposed to emitting it. Setting to FALSE (the default) will do the opposite.","type":"bool"}}],"doc":{"description":"Exports a reflected class.","type":"string"}},{"kind":32,"name":"getTraitAliases","modifiers":1,"description":"","children":[],"doc":{"type":"array"}},{"kind":32,"name":"getEndLine","modifiers":1,"children":[],"doc":{"description":"Gets end line number from a user-defined class definition.","type":"int"}},{"kind":32,"name":"hasProperty","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the property being checked for.","type":"string"}}],"doc":{"description":"Checks whether the specified property is defined.","type":"bool"}},{"kind":32,"name":"hasMethod","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the method being checked for.","type":"string"}}],"doc":{"description":"Checks whether a specific method is defined in a class.","type":"bool"}},{"kind":32,"name":"getStaticPropertyValue","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the static property for which to return a value.","type":"string"}},{"kind":128,"name":"$def_value","modifiers":1024,"doc":{"description":"A default value to return in case the class does not declare a static property with the given name. If the property does not exist and this argument is omitted, a ReflectionException is thrown.","type":"mixed"}}],"doc":{"description":"Gets the value of a static property on this class.","type":"mixed"}},{"kind":32,"name":"isInstantiable","modifiers":1,"children":[],"doc":{"description":"Checks if the class is instantiable.","type":"bool"}},{"kind":32,"name":"setStaticPropertyValue","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Property name.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"New property value.","type":"string"}}],"doc":{"description":"Sets static property value.","type":"void"}},{"kind":32,"name":"getStaticProperties","modifiers":1,"children":[],"doc":{"description":"Get the static properties.","type":"array"}},{"kind":32,"name":"isAbstract","modifiers":1,"children":[],"doc":{"description":"Checks if the class is abstract.","type":"bool"}},{"kind":32,"name":"isInterface","modifiers":1,"children":[],"doc":{"description":"Checks whether the class is an interface.","type":"bool"}},{"kind":32,"name":"getName","modifiers":1,"children":[],"doc":{"description":"Gets the class name.","type":"string"}},{"kind":32,"name":"getExtension","modifiers":1,"children":[],"doc":{"description":"Gets a ReflectionExtension object for the extension which defined the class.","type":"ReflectionExtension"}},{"kind":32,"name":"getNamespaceName","modifiers":1,"children":[],"doc":{"description":"Gets the namespace name.","type":"string"}},{"kind":32,"name":"isCloneable","modifiers":1,"children":[],"doc":{"description":"Returns whether this class is cloneable.","type":"bool"}},{"kind":32,"name":"getMethods","modifiers":1,"children":[{"kind":128,"name":"$filter","modifiers":0,"doc":{"description":"Filter the results to include only methods with certain attributes. Defaults to no filtering. Any bitwise disjunction of ReflectionMethod::IS_STATIC, ReflectionMethod::IS_PUBLIC, ReflectionMethod::IS_PROTECTED, ReflectionMethod::IS_PRIVATE, ReflectionMethod::IS_ABSTRACT, ReflectionMethod::IS_FINAL, so that all methods with any of the given attributes will be returned. Note: Note that other bitwise operations, for instance ~ will not work as expected. In other words, it is not possible to retrieve all non-static methods, for example.","type":"int"}}],"doc":{"description":"Gets an array of methods for the class.","type":"array"}},{"kind":32,"name":"getModifiers","modifiers":1,"children":[],"doc":{"description":"Returns a bitfield of the access modifiers for this class.","type":"int"}},{"kind":32,"name":"isInternal","modifiers":1,"children":[],"doc":{"description":"Checks if the class is defined internally by an extension, or the core, as opposed to user-defined.","type":"bool"}},{"kind":32,"name":"getStartLine","modifiers":1,"children":[],"doc":{"description":"Get the starting line number.","type":"int"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$argument","modifiers":0,"doc":{"description":"Either a string containing the name of the class to reflect, or an object.","type":"mixed"}}],"doc":{"description":"Constructs a new ReflectionClass object.","type":"public"}},{"kind":32,"name":"getDefaultProperties","modifiers":1,"children":[],"doc":{"description":"Gets default properties from a class (including inherited properties).","type":"array"}},{"kind":32,"name":"getMethod","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The method name to reflect.","type":"string"}}],"doc":{"description":"Gets a ReflectionMethod for a class method.","type":"ReflectionMethod"}},{"kind":32,"name":"isFinal","modifiers":1,"children":[],"doc":{"description":"Checks if a class is final.","type":"bool"}}],"doc":{"description":"The ReflectionClass class reports information about a class."}},{"kind":1,"name":"BadMethodCallException","modifiers":0,"associated":[{"kind":1,"name":"BadFunctionCallException"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown if a callback refers to an undefined method or if some arguments are missing."}},{"kind":1,"name":"DOMAttr","modifiers":0,"associated":[{"kind":1,"name":"DOMNode"}],"children":[{"kind":16,"name":"string","modifiers":1,"description":"","doc":{"type":"readonly"}},{"kind":16,"name":"DOMElement","modifiers":1,"description":"","doc":{"type":"readonly"}},{"kind":16,"name":"bool","modifiers":1,"description":"","doc":{"type":"readonly"}},{"kind":16,"name":"$value","modifiers":1,"doc":{"description":"The value of the attribute","type":"string"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The tag name of the attribute.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the attribute.","type":"string"}}],"doc":{"description":"Creates a new DOMAttr object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writable node, use DOMDocument::createAttribute.","type":"public"}},{"kind":32,"name":"isId","modifiers":1,"children":[],"doc":{"description":"This function checks if the attribute is a defined ID.","type":"bool"}}],"doc":{"description":"DOMAttr represents an attribute in the DOMElement object."}},{"kind":1,"name":"SQLite3Stmt","modifiers":0,"associated":[],"children":[{"kind":32,"name":"bindValue","modifiers":1,"children":[{"kind":128,"name":"$sql_param","modifiers":0,"doc":{"description":"Either a string or an int identifying the statement variable to which the value should be bound.","type":"mixed"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to bind to a statement variable.","type":"mixed"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The data type of the value to bind. SQLITE3_INTEGER: The value is a signed integer, stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value. SQLITE3_FLOAT: The value is a floating point value, stored as an 8-byte IEEE floating point number. SQLITE3_TEXT: The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16-LE). SQLITE3_BLOB: The value is a blob of data, stored exactly as it was input. SQLITE3_NULL: The value is a NULL value.","type":"int"}}],"doc":{"description":"Binds the value of a parameter to a statement variable.","type":"bool"}},{"kind":32,"name":"bindParam","modifiers":1,"children":[{"kind":128,"name":"$sql_param","modifiers":0,"doc":{"description":"Either a string or an int identifying the statement variable to which the parameter should be bound.","type":"mixed"}},{"kind":128,"name":"$param","modifiers":1024,"doc":{"description":"The parameter to bind to a statement variable.","type":"mixed"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The data type of the parameter to bind. SQLITE3_INTEGER: The value is a signed integer, stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value. SQLITE3_FLOAT: The value is a floating point value, stored as an 8-byte IEEE floating point number. SQLITE3_TEXT: The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16-LE). SQLITE3_BLOB: The value is a blob of data, stored exactly as it was input. SQLITE3_NULL: The value is a NULL value.","type":"int"}}],"doc":{"description":"Binds a parameter to a statement variable.","type":"bool"}},{"kind":32,"name":"paramCount","modifiers":1,"children":[],"doc":{"description":"Returns the number of parameters within the prepared statement.","type":"int"}},{"kind":32,"name":"readOnly","modifiers":1,"children":[],"doc":{"description":"Returns whether a statement is definitely read only. A statement is considered read only, if it makes no direct changes to the content of the database file. Note that user defined SQL functions might change the database indirectly as a side effect.","type":"bool"}},{"kind":32,"name":"execute","modifiers":1,"children":[],"doc":{"description":"Executes a prepared statement and returns a result set object.","type":"SQLite3Result"}},{"kind":32,"name":"clear","modifiers":1,"children":[],"doc":{"description":"Clears all current bound parameters.","type":"bool"}},{"kind":32,"name":"close","modifiers":1,"children":[],"doc":{"description":"Closes the prepared statement.","type":"bool"}},{"kind":32,"name":"reset","modifiers":1,"children":[],"doc":{"description":"Resets the prepared statement to its state prior to execution. All bindings remain intact after reset.","type":"bool"}}],"doc":{"description":"A class that handles prepared statements for the SQLite 3 extension."}},{"kind":1,"name":"SplStack","modifiers":0,"associated":[{"kind":1,"name":"SplDoublyLinkedList"},{"kind":2,"name":"Iterator"},{"kind":2,"name":"ArrayAccess"},{"kind":2,"name":"Countable"}],"children":[{"kind":32,"name":"setIteratorMode","modifiers":0,"description":"","children":[{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"There is only one iteration parameter you can modify. The behavior of the iterator (either one or the other): SplDoublyLinkedList::IT_MODE_DELETE (Elements are deleted by the iterator) SplDoublyLinkedList::IT_MODE_KEEP (Elements are traversed by the iterator) The default mode is 0x2 : SplDoublyLinkedList::IT_MODE_LIFO | SplDoublyLinkedList::IT_MODE_KEEP Warning The direction of iteration can no longer be changed for SplStacks. Trying to do so will result in a RuntimeException being thrown.","type":"int"}}],"doc":{"type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"This constructs a new empty stack.","type":"SplStack"}}],"doc":{"description":"The SplStack class provides the main functionalities of a stack implemented using a doubly linked list."}},{"kind":1,"name":"ErrorException","modifiers":0,"associated":[{"kind":1,"name":"Exception"}],"children":[{"kind":16,"name":"$severity","modifiers":2,"doc":{"description":"The severity of the exception","type":"int"}},{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$message","modifiers":0,"value":"\"\"","doc":{"description":"The Exception message to throw.","type":"string"}},{"kind":128,"name":"$code","modifiers":0,"value":"0","doc":{"description":"The Exception code.","type":"int"}},{"kind":128,"name":"$severity","modifiers":0,"value":"E_ERROR","doc":{"description":"The severity level of the exception. Note: While the severity can be any integer value, it is intended that the error constants be used.","type":"int"}},{"kind":128,"name":"$filename","modifiers":0,"value":"__FILE__","doc":{"description":"The filename where the exception is thrown.","type":"string"}},{"kind":128,"name":"$lineno","modifiers":0,"value":"__LINE__","doc":{"description":"The line number where the exception is thrown.","type":"int"}},{"kind":128,"name":"$previous","modifiers":0,"value":"NULL","doc":{"description":"The previous exception used for the exception chaining.","type":"Exception"}}],"doc":{"description":"Constructs the Exception.","type":"public"}},{"kind":32,"name":"getSeverity","modifiers":9,"children":[],"doc":{"description":"Returns the severity of the exception.","type":"int"}}],"doc":{"description":"An Error Exception."}},{"kind":1,"name":"ReflectionParameter","modifiers":0,"associated":[{"kind":2,"name":"Reflector"}],"children":[{"kind":32,"name":"getType","modifiers":1,"children":[],"doc":{"description":"Gets the associated type of a parameter.","type":"ReflectionType"}},{"kind":32,"name":"isVariadic","modifiers":1,"children":[],"doc":{"description":"Checks if the parameter was declared as a variadic parameter.","type":"bool"}},{"kind":32,"name":"isOptional","modifiers":1,"children":[],"doc":{"description":"Checks if the parameter is optional.","type":"bool"}},{"kind":32,"name":"export","modifiers":32,"children":[{"kind":128,"name":"$function","modifiers":0,"doc":{"description":"The function name.","type":"string"}},{"kind":128,"name":"$parameter","modifiers":0,"doc":{"description":"The parameter name.","type":"string"}},{"kind":128,"name":"$return","modifiers":0,"doc":{"description":"Setting to TRUE will return the export, as opposed to emitting it. Setting to FALSE (the default) will do the opposite.","type":"bool"}}],"doc":{"description":"Exports.","type":"string"}},{"kind":32,"name":"getName","modifiers":1,"children":[],"doc":{"description":"Gets the name of the parameter.","type":"string"}},{"kind":32,"name":"isDefaultValueAvailable","modifiers":1,"children":[],"doc":{"description":"Checks if a default value for the parameter is available.","type":"bool"}},{"kind":32,"name":"getDeclaringFunction","modifiers":1,"children":[],"doc":{"description":"Gets the declaring function.","type":"ReflectionFunctionAbstract"}},{"kind":32,"name":"getClass","modifiers":1,"children":[],"doc":{"description":"Gets the class type hinted for the parameter as a ReflectionClass object.","type":"ReflectionClass"}},{"kind":32,"name":"getDeclaringClass","modifiers":1,"children":[],"doc":{"description":"Gets the declaring class.","type":"ReflectionClass"}},{"kind":32,"name":"__clone","modifiers":12,"children":[],"doc":{"description":"Clones.","type":"void"}},{"kind":32,"name":"getPosition","modifiers":1,"children":[],"doc":{"description":"Gets the position of the parameter.","type":"int"}},{"kind":32,"name":"isCallable","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$function","modifiers":0,"doc":{"description":"The function to reflect parameters from.","type":"string"}},{"kind":128,"name":"$parameter","modifiers":0,"doc":{"description":"The parameter.","type":"string"}}],"doc":{"description":"Constructs a ReflectionParameter class.","type":"public"}},{"kind":32,"name":"isArray","modifiers":1,"children":[],"doc":{"description":"Checks if the parameter expects an array.","type":"bool"}},{"kind":32,"name":"getDefaultValue","modifiers":1,"children":[],"doc":{"description":"Gets the default value of the parameter for a user-defined function or method. If the parameter is not optional a ReflectionException will be thrown.","type":"mixed"}},{"kind":32,"name":"isDefaultValueConstant","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"isPassedByReference","modifiers":1,"children":[],"doc":{"description":"Checks if the parameter is passed in by reference.","type":"bool"}},{"kind":32,"name":"getDefaultValueConstantName","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"hasType","modifiers":1,"children":[],"doc":{"description":"Checks if the parameter has a type associated with it.","type":"bool"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"To string.","type":"string"}},{"kind":32,"name":"canBePassedByValue","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"allowsNull","modifiers":1,"children":[],"doc":{"description":"Checks whether the parameter allows NULL.","type":"bool"}}],"doc":{"description":"The ReflectionParameter class retrieves information about function's or method's parameters."}},{"kind":1,"name":"ReflectionFunctionAbstract","modifiers":0,"associated":[{"kind":2,"name":"Reflector"}],"children":[{"kind":32,"name":"getNamespaceName","modifiers":1,"children":[],"doc":{"description":"Get the namespace name where the class is defined.","type":"string"}},{"kind":32,"name":"getExtensionName","modifiers":1,"children":[],"doc":{"description":"Get the extensions name.","type":"string"}},{"kind":32,"name":"isVariadic","modifiers":1,"children":[],"doc":{"description":"Checks if the function is variadic.","type":"bool"}},{"kind":32,"name":"getParameters","modifiers":1,"children":[],"doc":{"description":"Get the parameters as an array of ReflectionParameter.","type":"array"}},{"kind":32,"name":"isUserDefined","modifiers":1,"children":[],"doc":{"description":"Checks whether the function is user-defined, as opposed to internal.","type":"bool"}},{"kind":32,"name":"getNumberOfParameters","modifiers":1,"children":[],"doc":{"description":"Get the number of parameters that a function defines, both optional and required.","type":"int"}},{"kind":32,"name":"__clone","modifiers":12,"children":[],"doc":{"description":"Clones a function.","type":"void"}},{"kind":32,"name":"getStartLine","modifiers":1,"children":[],"doc":{"description":"Gets the starting line number of the function.","type":"int"}},{"kind":32,"name":"getEndLine","modifiers":1,"children":[],"doc":{"description":"Get the ending line number.","type":"int"}},{"kind":32,"name":"getClosureScopeClass","modifiers":1,"description":"","children":[],"doc":{"type":"ReflectionClass"}},{"kind":32,"name":"getName","modifiers":1,"children":[],"doc":{"description":"Get the name of the function.","type":"string"}},{"kind":32,"name":"isClosure","modifiers":1,"children":[],"doc":{"description":"Checks whether the reflected function is a Closure.","type":"bool"}},{"kind":32,"name":"isInternal","modifiers":1,"children":[],"doc":{"description":"Checks whether the function is internal, as opposed to user-defined.","type":"bool"}},{"kind":32,"name":"isGenerator","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"To string.","type":"void"}},{"kind":32,"name":"getStaticVariables","modifiers":1,"children":[],"doc":{"description":"Get the static variables.","type":"array"}},{"kind":32,"name":"getClosureThis","modifiers":1,"description":"","children":[],"doc":{"type":"object"}},{"kind":32,"name":"getNumberOfRequiredParameters","modifiers":1,"children":[],"doc":{"description":"Get the number of required parameters that a function defines.","type":"int"}},{"kind":32,"name":"getExtension","modifiers":1,"children":[],"doc":{"description":"Get the extension information of a function.","type":"ReflectionExtension"}},{"kind":32,"name":"returnsReference","modifiers":1,"children":[],"doc":{"description":"Checks whether the function returns a reference.","type":"bool"}},{"kind":32,"name":"getDocComment","modifiers":1,"children":[],"doc":{"description":"Get a Doc comment from a function.","type":"string"}},{"kind":32,"name":"inNamespace","modifiers":1,"children":[],"doc":{"description":"Checks whether a function is defined in a namespace.","type":"bool"}},{"kind":32,"name":"hasReturnType","modifiers":1,"children":[],"doc":{"description":"Checks whether the reflected function has a return type specified.","type":"bool"}},{"kind":32,"name":"getFileName","modifiers":1,"children":[],"doc":{"description":"Gets the file name from a user-defined function.","type":"string"}},{"kind":32,"name":"getReturnType","modifiers":1,"children":[],"doc":{"description":"Gets the specified return type of a reflected function.","type":"ReflectionType"}},{"kind":32,"name":"getShortName","modifiers":1,"children":[],"doc":{"description":"Get the short name of the function (without the namespace part).","type":"string"}},{"kind":32,"name":"isDeprecated","modifiers":1,"children":[],"doc":{"description":"Checks whether the function is deprecated.","type":"bool"}}],"doc":{"description":"A parent class to ReflectionFunction, read its description for details."}},{"kind":8,"name":"SID","doc":{"description":"Constant containing either the session name and session ID in the form of \"name=ID\" or empty string if session ID was set in an appropriate session cookie. This is the same id as the one returned by session_id()."}},{"kind":8,"name":"PHP_SESSION_DISABLED","doc":{"description":"Since PHP 5.4.0. Return value of session_status() if sessions are disabled."}},{"kind":8,"name":"PHP_SESSION_NONE","doc":{"description":"Since PHP 5.4.0. Return value of session_status() if sessions are enabled, but no session exists."}},{"kind":8,"name":"PHP_SESSION_ACTIVE","doc":{"description":"Since PHP 5.4.0. Return value of session_status() if sessions are enabled, and a session exists."}},{"kind":1,"name":"PDOException","modifiers":0,"associated":[{"kind":1,"name":"RuntimeException"}],"children":[{"kind":16,"name":"$errorInfo","modifiers":1,"doc":{"description":"Corresponds to PDO::errorInfo() or PDOStatement::errorInfo()","type":"array"}},{"kind":16,"name":"$code","modifiers":2,"doc":{"description":"SQLSTATE error code. Use Exception::getCode() to access it.","type":"int"}},{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Represents an error raised by PDO. You should not throw a PDOException from your own code. See Exceptions for more information about Exceptions in PHP."}},{"kind":8,"name":"PHP_URL_SCHEME","description":""},{"kind":8,"name":"PHP_URL_HOST","doc":{"description":"Outputs the hostname of the URL parsed."}},{"kind":8,"name":"PHP_URL_PORT","doc":{"description":"Outputs the port of the URL parsed."}},{"kind":8,"name":"PHP_URL_USER","doc":{"description":"Outputs the user of the URL parsed."}},{"kind":8,"name":"PHP_URL_PASS","doc":{"description":"Outputs the password of the URL parsed."}},{"kind":8,"name":"PHP_URL_PATH","doc":{"description":"Outputs the path of the URL parsed."}},{"kind":8,"name":"PHP_URL_QUERY","doc":{"description":"Outputs the query string of the URL parsed."}},{"kind":8,"name":"PHP_URL_FRAGMENT","doc":{"description":"Outputs the fragment (string after the hashmark #) of the URL parsed."}},{"kind":8,"name":"PHP_QUERY_RFC1738","doc":{"description":"Encoding is performed per » RFC 1738 and the application/x-www-form-urlencoded media type, which implies that spaces are encoded as plus (+) signs."}},{"kind":8,"name":"PHP_QUERY_RFC3986","doc":{"description":"Encoding is performed according to » RFC 3986, and spaces will be percent encoded (%20)."}},{"kind":8,"name":"JSON_ERROR_NONE","doc":{"description":"No error has occurred. Available since PHP 5.3.0."}},{"kind":8,"name":"JSON_ERROR_DEPTH","doc":{"description":"The maximum stack depth has been exceeded. Available since PHP 5.3.0."}},{"kind":8,"name":"JSON_ERROR_STATE_MISMATCH","doc":{"description":"Occurs with underflow or with the modes mismatch. Available since PHP 5.3.0."}},{"kind":8,"name":"JSON_ERROR_CTRL_CHAR","doc":{"description":"Control character error, possibly incorrectly encoded. Available since PHP 5.3.0."}},{"kind":8,"name":"JSON_ERROR_SYNTAX","doc":{"description":"Syntax error. Available since PHP 5.3.0."}},{"kind":8,"name":"JSON_ERROR_UTF8","doc":{"description":"Malformed UTF-8 characters, possibly incorrectly encoded. Available since PHP 5.3.3."}},{"kind":8,"name":"JSON_ERROR_RECURSION","doc":{"description":"The object or array passed to json_encode() include recursive references and cannot be encoded. If the JSON_PARTIAL_OUTPUT_ON_ERROR option was given, NULL will be encoded in the place of the recursive reference. Available since PHP 5.5.0."}},{"kind":8,"name":"JSON_ERROR_INF_OR_NAN","doc":{"description":"The value passed to json_encode() includes either NAN or INF. If the JSON_PARTIAL_OUTPUT_ON_ERROR option was given, 0 will be encoded in the place of these special numbers. Available since PHP 5.5.0."}},{"kind":8,"name":"JSON_ERROR_UNSUPPORTED_TYPE","doc":{"description":"A value of an unsupported type was given to json_encode(), such as a resource. If the JSON_PARTIAL_OUTPUT_ON_ERROR option was given, NULL will be encoded in the place of the unsupported value. Available since PHP 5.5.0."}},{"kind":8,"name":"JSON_ERROR_INVALID_PROPERTY_NAME","doc":{"description":"Single unpaired UTF-16 surrogate in unicode escape contained in the JSON string passed to json_encode(). Available since PHP 7.0.0."}},{"kind":8,"name":"JSON_BIGINT_AS_STRING","doc":{"description":"Decodes large integers as their original string value. Available since PHP 5.4.0."}},{"kind":8,"name":"JSON_OBJECT_AS_ARRAY","doc":{"description":"Decodes JSON objects as PHP array. This option can be added automatically by calling json_decode() with the second parameter equal to TRUE. Available since PHP 5.4.0."}},{"kind":8,"name":"JSON_HEX_TAG","doc":{"description":"All < and > are converted to \\u003C and \\u003E. Available since PHP 5.3.0."}},{"kind":8,"name":"JSON_HEX_AMP","doc":{"description":"All &s are converted to \\u0026. Available since PHP 5.3.0."}},{"kind":8,"name":"JSON_HEX_APOS","doc":{"description":"All ' are converted to \\u0027. Available since PHP 5.3.0."}},{"kind":8,"name":"JSON_HEX_QUOT","doc":{"description":"All \" are converted to \\u0022. Available since PHP 5.3.0."}},{"kind":8,"name":"JSON_FORCE_OBJECT","doc":{"description":"Outputs an object rather than an array when a non-associative array is used. Especially useful when the recipient of the output is expecting an object and the array is empty. Available since PHP 5.3.0."}},{"kind":8,"name":"JSON_NUMERIC_CHECK","doc":{"description":"Encodes numeric strings as numbers. Available since PHP 5.3.3."}},{"kind":8,"name":"JSON_PRETTY_PRINT","doc":{"description":"Use whitespace in returned data to format it. Available since PHP 5.4.0."}},{"kind":8,"name":"JSON_UNESCAPED_SLASHES","doc":{"description":"Don't escape /. Available since PHP 5.4.0."}},{"kind":8,"name":"JSON_UNESCAPED_UNICODE","doc":{"description":"Encode multibyte Unicode characters literally (default is to escape as \\uXXXX). Available since PHP 5.4.0."}},{"kind":8,"name":"JSON_PARTIAL_OUTPUT_ON_ERROR","doc":{"description":"Substitute some unencodable values instead of failing. Available since PHP 5.5.0."}},{"kind":8,"name":"JSON_PRESERVE_ZERO_FRACTION","doc":{"description":"Ensures that float values are always encoded as a float value. Available since PHP 5.6.6."}},{"kind":8,"name":"JSON_UNESCAPED_LINE_TERMINATORS","doc":{"description":"The line terminators are kept unescaped when JSON_UNESCAPED_UNICODE is supplied. It uses the same behaviour as it was before PHP 7.1 without this constant. Available since PHP 7.1.0."}},{"kind":1,"name":"ReflectionExtension","modifiers":0,"associated":[{"kind":2,"name":"Reflector"}],"children":[{"kind":32,"name":"getDependencies","modifiers":1,"children":[],"doc":{"description":"Gets dependencies, by listing both required and conflicting dependencies.","type":"array"}},{"kind":32,"name":"isPersistent","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"__clone","modifiers":12,"children":[],"doc":{"description":"The clone method prevents an object from being cloned. Reflection objects cannot be cloned.","type":"void"}},{"kind":32,"name":"getName","modifiers":1,"children":[],"doc":{"description":"Gets the extensions name.","type":"string"}},{"kind":32,"name":"getVersion","modifiers":1,"children":[],"doc":{"description":"Gets the version of the extension.","type":"string"}},{"kind":32,"name":"info","modifiers":1,"children":[],"doc":{"description":"Prints out the \"phpinfo()\" snippet for the given extension.","type":"void"}},{"kind":32,"name":"getFunctions","modifiers":1,"children":[],"doc":{"description":"Get defined functions from an extension.","type":"array"}},{"kind":32,"name":"getClasses","modifiers":1,"children":[],"doc":{"description":"Gets a list of classes from an extension.","type":"array"}},{"kind":32,"name":"export","modifiers":32,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The reflection to export.","type":"string"}},{"kind":128,"name":"$return","modifiers":0,"value":"false","doc":{"description":"Setting to TRUE will return the export, as opposed to emitting it. Setting to FALSE (the default) will do the opposite.","type":"string"}}],"doc":{"description":"Exports a reflected extension. The output format of this function is the same as the CLI argument --re [extension].","type":"string"}},{"kind":32,"name":"getClassNames","modifiers":1,"children":[],"doc":{"description":"Gets a listing of class names as defined in the extension.","type":"array"}},{"kind":32,"name":"isTemporary","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"getConstants","modifiers":1,"children":[],"doc":{"description":"Get defined constants from an extension.","type":"array"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the extension.","type":"string"}}],"doc":{"description":"Construct a ReflectionExtension object.","type":"public"}},{"kind":32,"name":"getINIEntries","modifiers":1,"children":[],"doc":{"description":"Get the ini entries for an extension.","type":"array"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"Exports a reflected extension and returns it as a string. This is the same as the ReflectionExtension::export() with the return set to TRUE.","type":"string"}}],"doc":{"description":"The ReflectionExtension class reports information about an extension."}},{"kind":1,"name":"mysqli_result","modifiers":0,"associated":[{"kind":2,"name":"Traversable"}],"children":[{"kind":32,"name":"fetch_array","modifiers":0,"children":[{"kind":128,"name":"$resulttype","modifiers":0,"value":"MYSQLI_BOTH","doc":{"description":"This optional parameter is a constant indicating what type of array should be produced from the current row data. The possible values for this parameter are the constants MYSQLI_ASSOC, MYSQLI_NUM, or MYSQLI_BOTH. By using the MYSQLI_ASSOC constant this function will behave identically to the mysqli_fetch_assoc(), while MYSQLI_NUM will behave identically to the mysqli_fetch_row() function. The final option MYSQLI_BOTH will create a single array with the attributes of both.","type":"int"}}],"doc":{"description":"Returns an array that corresponds to the fetched row or NULL if there are no more rows for the resultset represented by the result parameter.","type":"mixed"}},{"kind":32,"name":"fetch_row","modifiers":0,"children":[],"doc":{"description":"Fetches one row of data from the result set and returns it as an enumerated array, where each column is stored in an array offset starting from 0 (zero). Each subsequent call to this function will return the next row within the result set, or NULL if there are no more rows.","type":"mixed"}},{"kind":32,"name":"fetch_fields","modifiers":0,"children":[],"doc":{"description":"This function serves an identical purpose to the mysqli_fetch_field() function with the single difference that, instead of returning one object at a time for each field, the columns are returned as an array of objects.","type":"array"}},{"kind":32,"name":"free","modifiers":0,"children":[],"doc":{"description":"Frees the memory associated with the result.","type":"void"}},{"kind":32,"name":"close","modifiers":0,"children":[],"doc":{"description":"Frees the memory associated with the result.","type":"void"}},{"kind":32,"name":"free_result","modifiers":0,"children":[],"doc":{"description":"Frees the memory associated with the result.","type":"void"}},{"kind":32,"name":"data_seek","modifiers":0,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The field offset. Must be between zero and the total number of rows minus one (0..mysqli_num_rows() - 1).","type":"int"}}],"doc":{"description":"The mysqli_data_seek() function seeks to an arbitrary result pointer specified by the offset in the result set.","type":"bool"}},{"kind":32,"name":"fetch_all","modifiers":0,"children":[{"kind":128,"name":"$resulttype","modifiers":0,"value":"MYSQLI_NUM","doc":{"description":"This optional parameter is a constant indicating what type of array should be produced from the current row data. The possible values for this parameter are the constants MYSQLI_ASSOC, MYSQLI_NUM, or MYSQLI_BOTH.","type":"int"}}],"doc":{"description":"mysqli_fetch_all() fetches all result rows and returns the result set as an associative array, a numeric array, or both.","type":"mixed"}},{"kind":32,"name":"fetch_object","modifiers":0,"children":[{"kind":128,"name":"$class_name","modifiers":0,"value":"\"stdClass\"","doc":{"description":"The name of the class to instantiate, set the properties of and return. If not specified, a stdClass object is returned.","type":"string"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"An optional array of parameters to pass to the constructor for class_name objects.","type":"array"}}],"doc":{"description":"The mysqli_fetch_object() will return the current row result set as an object where the attributes of the object represent the names of the fields found within the result set.","type":"object"}},{"kind":32,"name":"fetch_assoc","modifiers":0,"children":[],"doc":{"description":"Returns an associative array that corresponds to the fetched row or NULL if there are no more rows.","type":"array"}},{"kind":32,"name":"field_seek","modifiers":0,"children":[{"kind":128,"name":"$fieldnr","modifiers":0,"doc":{"description":"The field number. This value must be in the range from 0 to number of fields - 1.","type":"int"}}],"doc":{"description":"Sets the field cursor to the given offset. The next call to mysqli_fetch_field() will retrieve the field definition of the column associated with that offset.","type":"bool"}},{"kind":32,"name":"fetch_field_direct","modifiers":0,"children":[{"kind":128,"name":"$fieldnr","modifiers":0,"doc":{"description":"The field number. This value must be in the range from 0 to number of fields - 1.","type":"int"}}],"doc":{"description":"Returns an object which contains field definition information from the specified result set.","type":"object"}},{"kind":32,"name":"fetch_field","modifiers":0,"children":[],"doc":{"description":"Returns the definition of one column of a result set as an object. Call this function repeatedly to retrieve information about all columns in the result set.","type":"object"}}],"doc":{"description":"Represents the result set obtained from a query against the database."}},{"kind":1,"name":"SplFileObject","modifiers":0,"associated":[{"kind":1,"name":"SplFileInfo"},{"kind":2,"name":"RecursiveIterator"},{"kind":2,"name":"SeekableIterator"}],"children":[{"kind":1024,"name":"DROP_NEW_LINE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"READ_AHEAD","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SKIP_EMPTY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"READ_CSV","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"setFlags","modifiers":1,"children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"Bit mask of the flags to set. See SplFileObject constants for the available flags.","type":"int"}}],"doc":{"description":"Sets the flags to be used by the SplFileObject.","type":"void"}},{"kind":32,"name":"fstat","modifiers":1,"children":[],"doc":{"description":"Gathers the statistics of the file. Behaves identically to fstat().","type":"array"}},{"kind":32,"name":"setCsvControl","modifiers":1,"children":[{"kind":128,"name":"$delimiter","modifiers":0,"value":"\",\"","doc":{"description":"The field delimiter (one character only).","type":"string"}},{"kind":128,"name":"$enclosure","modifiers":0,"value":"\"\\\"\"","doc":{"description":"The field enclosure character (one character only).","type":"string"}},{"kind":128,"name":"$escape","modifiers":0,"value":"\"\\\\\"","doc":{"description":"The field escape character (one character only).","type":"string"}}],"doc":{"description":"Sets the delimiter, enclosure and escape character for parsing CSV fields.","type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The file to read. TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.","type":"string"}},{"kind":128,"name":"$open_mode","modifiers":0,"value":"\"r\"","doc":{"description":"The mode in which to open the file. See fopen() for a list of allowed modes.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"false","doc":{"description":"Whether to search in the include_path for filename.","type":"bool"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"A valid context resource created with stream_context_create().","type":"resource"}}],"doc":{"description":"Construct a new file object.","type":"public"}},{"kind":32,"name":"ftell","modifiers":1,"children":[],"doc":{"description":"Returns the position of the file pointer which represents the current offset in the file stream.","type":"int"}},{"kind":32,"name":"eof","modifiers":1,"children":[],"doc":{"description":"Determine whether the end of file has been reached","type":"bool"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Moves ahead to the next line in the file.","type":"void"}},{"kind":32,"name":"fread","modifiers":1,"children":[{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The number of bytes to read.","type":"int"}}],"doc":{"description":"Reads the given number of bytes from the file.","type":"string"}},{"kind":32,"name":"getFlags","modifiers":1,"children":[],"doc":{"description":"Gets the flags set for an instance of SplFileObject as an integer.","type":"int"}},{"kind":32,"name":"flock","modifiers":1,"children":[{"kind":128,"name":"$operation","modifiers":0,"doc":{"description":"operation is one of the following: LOCK_SH to acquire a shared lock (reader). LOCK_EX to acquire an exclusive lock (writer). LOCK_UN to release a lock (shared or exclusive). LOCK_NB to not block while locking (not supported on Windows).","type":"int"}},{"kind":128,"name":"$wouldblock","modifiers":1024,"doc":{"description":"Set to TRUE if the lock would block (EWOULDBLOCK errno condition).","type":"int"}}],"doc":{"description":"Locks or unlocks the file in the same portable way as flock().","type":"bool"}},{"kind":32,"name":"setMaxLineLen","modifiers":1,"children":[{"kind":128,"name":"$max_len","modifiers":0,"doc":{"description":"The maximum length of a line.","type":"int"}}],"doc":{"description":"Sets the maximum length of a line to be read.","type":"void"}},{"kind":32,"name":"fgets","modifiers":1,"children":[],"doc":{"description":"Gets a line from the file.","type":"string"}},{"kind":32,"name":"__toString","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"fpassthru","modifiers":1,"children":[],"doc":{"description":"Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.","type":"int"}},{"kind":32,"name":"ftruncate","modifiers":1,"children":[{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"The size to truncate to. Note: If size is larger than the file it is extended with null bytes. If size is smaller than the file, the extra data will be lost.","type":"int"}}],"doc":{"description":"Truncates the file to size bytes.","type":"bool"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Check whether EOF has been reached.","type":"bool"}},{"kind":32,"name":"getChildren","modifiers":1,"children":[],"doc":{"description":"An SplFileObject does not have children so this method returns NULL.","type":"void"}},{"kind":32,"name":"hasChildren","modifiers":1,"children":[],"doc":{"description":"An SplFileObject does not have children so this method always return FALSE.","type":"bool"}},{"kind":32,"name":"fscanf","modifiers":1,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The specified format as described in the sprintf() documentation.","type":"string"}},{"kind":128,"name":"$...","modifiers":1024,"doc":{"description":"The optional assigned values.","type":"mixed"}}],"doc":{"description":"Reads a line from the file and interprets it according to the specified format, which is described in the documentation for sprintf().","type":"mixed"}},{"kind":32,"name":"getMaxLineLen","modifiers":1,"children":[],"doc":{"description":"Gets the maximum line length as set by SplFileObject::setMaxLineLen().","type":"int"}},{"kind":32,"name":"fgetcsv","modifiers":1,"children":[{"kind":128,"name":"$delimiter","modifiers":0,"value":"\",\"","doc":{"description":"The field delimiter (one character only). Defaults as a comma or the value set using SplFileObject::setCsvControl().","type":"string"}},{"kind":128,"name":"$enclosure","modifiers":0,"value":"\"\\\"\"","doc":{"description":"The field enclosure character (one character only). Defaults as a double quotation mark or the value set using SplFileObject::setCsvControl().","type":"string"}},{"kind":128,"name":"$escape","modifiers":0,"value":"\"\\\\\"","doc":{"description":"The escape character (one character only). Defaults as a backslash (\\) or the value set using SplFileObject::setCsvControl().","type":"string"}}],"doc":{"description":"Gets a line from the file which is in CSV format and returns an array containing the fields read.","type":"array"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewinds the file back to the first line.","type":"void"}},{"kind":32,"name":"getCsvControl","modifiers":1,"children":[],"doc":{"description":"Gets the delimiter, enclosure and escape character used for parsing CSV fields.","type":"array"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Retrieves the current line of the file.","type":"string|array"}},{"kind":32,"name":"fseek","modifiers":1,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The offset. A negative value can be used to move backwards through the file which is useful when SEEK_END is used as the whence value.","type":"int"}},{"kind":128,"name":"$whence","modifiers":0,"value":"SEEK_SET","doc":{"description":"whence values are: SEEK_SET - Set position equal to offset bytes. SEEK_CUR - Set position to current location plus offset. SEEK_END - Set position to end-of-file plus offset. If whence is not specified, it is assumed to be SEEK_SET.","type":"int"}}],"doc":{"description":"Seek to a position in the file measured in bytes from the beginning of the file, obtained by adding offset to the position specified by whence.","type":"int"}},{"kind":32,"name":"seek","modifiers":1,"children":[{"kind":128,"name":"$line_pos","modifiers":0,"doc":{"description":"The zero-based line number to seek to.","type":"int"}}],"doc":{"description":"Seek to specified line in the file.","type":"void"}},{"kind":32,"name":"fwrite","modifiers":1,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to be written to the file.","type":"string"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"If the length argument is given, writing will stop after length bytes have been written or the end of string is reached, whichever comes first.","type":"int"}}],"doc":{"description":"Writes the contents of string to the file","type":"int"}},{"kind":32,"name":"fflush","modifiers":1,"children":[],"doc":{"description":"Forces a write of all buffered output to the file.","type":"bool"}},{"kind":32,"name":"fgetc","modifiers":1,"children":[],"doc":{"description":"Gets a character from the file.","type":"string"}},{"kind":32,"name":"fputcsv","modifiers":1,"children":[{"kind":128,"name":"$fields","modifiers":0,"doc":{"description":"An array of values.","type":"array"}},{"kind":128,"name":"$delimiter","modifiers":0,"value":"\",\"","doc":{"description":"The optional delimiter parameter sets the field delimiter (one character only).","type":"string"}},{"kind":128,"name":"$enclosure","modifiers":0,"value":"'\"'","doc":{"description":"The optional enclosure parameter sets the field enclosure (one character only).","type":"string"}},{"kind":128,"name":"$escape","modifiers":0,"value":"\"\\\"","doc":{"description":"The optional escape parameter sets the escape character (one character only).","type":"string"}}],"doc":{"description":"Writes the fields array to the file as a CSV line.","type":"int"}},{"kind":32,"name":"fgetss","modifiers":1,"children":[{"kind":128,"name":"$allowable_tags","modifiers":0,"doc":{"description":"Optional parameter to specify tags which should not be stripped.","type":"string"}}],"doc":{"description":"Identical to SplFileObject::fgets(), except that SplFileObject::fgetss() attempts to strip any HTML and PHP tags from the text it reads.","type":"string"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Gets the current line number.","type":"int"}}],"doc":{"description":"The SplFileObject class offers an object oriented interface for a file."}},{"kind":1,"name":"ReflectionZendExtension","modifiers":0,"associated":[{"kind":2,"name":"Reflector"}],"description":"","children":[{"kind":32,"name":"__construct","modifiers":0,"description":"","children":[{"kind":128,"name":"$name","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"public"}},{"kind":32,"name":"__clone","modifiers":12,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"getName","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"getAuthor","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"export","modifiers":32,"description":"","children":[{"kind":128,"name":"$name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$return","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"string"}},{"kind":32,"name":"getURL","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"__toString","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"getCopyright","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"getVersion","modifiers":1,"description":"","children":[],"doc":{"type":"string"}}]},{"kind":1,"name":"RecursiveRegexIterator","modifiers":0,"associated":[{"kind":1,"name":"RegexIterator"},{"kind":2,"name":"RecursiveIterator"}],"children":[{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The recursive iterator to apply this regex filter to.","type":"RecursiveIterator"}},{"kind":128,"name":"$regex","modifiers":0,"doc":{"description":"The regular expression to match.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"value":"self::MATCH","doc":{"description":"Operation mode, see RegexIterator::setMode() for a list of modes.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"Special flags, see RegexIterator::setFlags() for a list of available flags.","type":"int"}},{"kind":128,"name":"$preg_flags","modifiers":0,"value":"0","doc":{"description":"The regular expression flags. These flags depend on the operation mode parameter: RegexIterator preg_flags operation mode available flags RecursiveRegexIterator::ALL_MATCHES See preg_match_all(). RecursiveRegexIterator::GET_MATCH See preg_match(). RecursiveRegexIterator::MATCH See preg_match(). RecursiveRegexIterator::REPLACE none. RecursiveRegexIterator::SPLIT See preg_split().","type":"int"}}],"doc":{"description":"Creates a new regular expression iterator.","type":"public"}},{"kind":32,"name":"getChildren","modifiers":1,"children":[],"doc":{"description":"Returns an iterator for the current iterator entry.","type":"RecursiveRegexIterator"}},{"kind":32,"name":"hasChildren","modifiers":1,"children":[],"doc":{"description":"Returns whether an iterator can be obtained for the current entry. This iterator can be obtained via RecursiveRegexIterator::getChildren().","type":"bool"}}],"doc":{"description":"This recursive iterator can filter another recursive iterator via a regular expression."}},{"kind":1,"name":"DOMXPath","modifiers":0,"associated":[],"children":[{"kind":16,"name":"$document","modifiers":1,"description":"","doc":{"type":"DOMDocument"}},{"kind":32,"name":"evaluate","modifiers":1,"children":[{"kind":128,"name":"$expression","modifiers":0,"doc":{"description":"The XPath expression to execute.","type":"string"}},{"kind":128,"name":"$contextnode","modifiers":0,"doc":{"description":"The optional contextnode can be specified for doing relative XPath queries. By default, the queries are relative to the root element.","type":"DOMNode"}},{"kind":128,"name":"$registerNodeNS","modifiers":0,"value":"true","doc":{"description":"The optional registerNodeNS can be specified to disable automatic registration of the context node.","type":"bool"}}],"doc":{"description":"Executes the given XPath expression and returns a typed result if possible.","type":"mixed"}},{"kind":32,"name":"registerNamespace","modifiers":1,"children":[{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The prefix.","type":"string"}},{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The URI of the namespace.","type":"string"}}],"doc":{"description":"Registers the namespaceURI and prefix with the DOMXPath object.","type":"bool"}},{"kind":32,"name":"query","modifiers":1,"children":[{"kind":128,"name":"$expression","modifiers":0,"doc":{"description":"The XPath expression to execute.","type":"string"}},{"kind":128,"name":"$contextnode","modifiers":0,"doc":{"description":"The optional contextnode can be specified for doing relative XPath queries. By default, the queries are relative to the root element.","type":"DOMNode"}},{"kind":128,"name":"$registerNodeNS","modifiers":0,"value":"true","doc":{"description":"The optional registerNodeNS can be specified to disable automatic registration of the context node.","type":"bool"}}],"doc":{"description":"Executes the given XPath expression.","type":"DOMNodeList"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$doc","modifiers":0,"doc":{"description":"The DOMDocument associated with the DOMXPath.","type":"DOMDocument"}}],"doc":{"description":"Creates a new DOMXPath object.","type":"public"}},{"kind":32,"name":"registerPhpFunctions","modifiers":1,"children":[{"kind":128,"name":"$restrict","modifiers":0,"doc":{"description":"Use this parameter to only allow certain functions to be called from XPath. This parameter can be either a string (a function name) or an array of function names.","type":"mixed"}}],"doc":{"description":"This method enables the ability to use PHP functions within XPath expressions.","type":"void"}}],"doc":{"description":"Supports XPath 1.0"}},{"kind":1,"name":"ResourceBundle","modifiers":0,"associated":[],"children":[{"kind":32,"name":"getLocales","modifiers":1,"children":[{"kind":128,"name":"$bundlename","modifiers":0,"doc":{"description":"Path of ResourceBundle for which to get available locales, or empty string for default locales list.","type":"string"}}],"doc":{"description":"Get available locales from ResourceBundle name.","type":"array"}},{"kind":32,"name":"create","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"Locale for which the resources should be loaded (locale name, e.g. en_CA).","type":"string"}},{"kind":128,"name":"$bundlename","modifiers":0,"doc":{"description":"The directory where the data is stored or the name of the .dat file.","type":"string"}},{"kind":128,"name":"$fallback","modifiers":0,"doc":{"description":"Whether locale should match exactly or fallback to parent locale is allowed.","type":"bool"}}],"doc":{"description":"Creates a resource bundle.","type":"ResourceBundle"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"Locale for which the resources should be loaded (locale name, e.g. en_CA).","type":"string"}},{"kind":128,"name":"$bundlename","modifiers":0,"doc":{"description":"The directory where the data is stored or the name of the .dat file.","type":"string"}},{"kind":128,"name":"$fallback","modifiers":0,"doc":{"description":"Whether locale should match exactly or fallback to parent locale is allowed.","type":"bool"}}],"doc":{"description":"Creates a resource bundle.","type":"public"}},{"kind":32,"name":"get","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Data index, must be string or integer.","type":"string|int"}}],"doc":{"description":"Get the data from the bundle by index or string key.","type":"mixed"}},{"kind":32,"name":"getErrorMessage","modifiers":1,"children":[],"doc":{"description":"Get error message from the last function performed by the bundle object.","type":"string"}},{"kind":32,"name":"getErrorCode","modifiers":1,"children":[],"doc":{"description":"Get error code from the last function performed by the bundle object.","type":"int"}},{"kind":32,"name":"count","modifiers":1,"children":[],"doc":{"description":"Get the number of elements in the bundle.","type":"int"}}],"doc":{"description":"Localized software products often require sets of data that are to be customized depending on current locale, e.g.: messages, labels, formatting patterns. ICU resource mechanism allows to define sets of resources that the application can load on locale basis, while accessing them in unified locale-independent fashion."}},{"kind":1,"name":"finfo","modifiers":0,"associated":[],"children":[{"kind":32,"name":"set_flags","modifiers":1,"children":[{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"One or disjunction of more Fileinfo constants.","type":"int"}}],"doc":{"description":"This function sets various Fileinfo options. Options can be set also directly in finfo_open() or other Fileinfo functions.","type":"bool"}},{"kind":32,"name":"set_flags","modifiers":1,"children":[{"kind":128,"name":"$options","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"This function is an alias of: finfo_set_flags()","type":"bool"}},{"kind":32,"name":"file","modifiers":1,"children":[{"kind":128,"name":"$file_name","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}},{"kind":128,"name":"$options","modifiers":0,"description":"","value":"FILEINFO_NONE","doc":{"type":"int"}},{"kind":128,"name":"$context","modifiers":0,"description":"","value":"NULL","doc":{"type":"resource"}}],"doc":{"description":"This function is an alias of: finfo_file()","type":"string"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$options","modifiers":0,"description":"","value":"FILEINFO_NONE","doc":{"type":"int"}},{"kind":128,"name":"$magic_file","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}}],"doc":{"description":"This function is an alias of: finfo_open()","type":"public"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$options","modifiers":0,"value":"FILEINFO_NONE","doc":{"description":"One or disjunction of more Fileinfo constants.","type":"int"}},{"kind":128,"name":"$magic_file","modifiers":0,"value":"NULL","doc":{"description":"Name of a magic database file, usually something like /path/to/magic.mime. If not specified, the MAGIC environment variable is used. If the environment variable isn't set, then PHP's bundled magic database will be used. Passing NULL or an empty string will be equivalent to the default value.","type":"string"}}],"doc":{"description":"This function opens a magic database and returns its resource.","type":"public"}},{"kind":32,"name":"file","modifiers":1,"children":[{"kind":128,"name":"$file_name","modifiers":0,"value":"NULL","doc":{"description":"Name of a file to be checked.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"FILEINFO_NONE","doc":{"description":"One or disjunction of more Fileinfo constants.","type":"int"}},{"kind":128,"name":"$context","modifiers":0,"value":"NULL","doc":{"description":"For a description of contexts, refer to Stream Functions.","type":"resource"}}],"doc":{"description":"This function is used to get information about a file.","type":"string"}},{"kind":32,"name":"buffer","modifiers":1,"children":[{"kind":128,"name":"$string","modifiers":0,"value":"NULL","doc":{"description":"Content of a file to be checked.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"FILEINFO_NONE","doc":{"description":"One or disjunction of more Fileinfo constants.","type":"int"}},{"kind":128,"name":"$context","modifiers":0,"description":"","value":"NULL","doc":{"type":"resource"}}],"doc":{"description":"This function is used to get information about binary data in a string.","type":"string"}},{"kind":32,"name":"buffer","modifiers":1,"children":[{"kind":128,"name":"$string","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}},{"kind":128,"name":"$options","modifiers":0,"description":"","value":"FILEINFO_NONE","doc":{"type":"int"}},{"kind":128,"name":"$context","modifiers":0,"description":"","value":"NULL","doc":{"type":"resource"}}],"doc":{"description":"This function is an alias of: finfo_buffer()","type":"string"}}],"doc":{"description":"This class provides an object oriented interface into the fileinfo functions."}},{"kind":1,"name":"DOMImplementation","modifiers":0,"associated":[],"children":[{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"Creates a new DOMImplementation object.","type":"DOMImplementation"}},{"kind":32,"name":"createDocumentType","modifiers":1,"children":[{"kind":128,"name":"$qualifiedName","modifiers":0,"value":"NULL","doc":{"description":"The qualified name of the document type to create.","type":"string"}},{"kind":128,"name":"$publicId","modifiers":0,"value":"NULL","doc":{"description":"The external subset public identifier.","type":"string"}},{"kind":128,"name":"$systemId","modifiers":0,"value":"NULL","doc":{"description":"The external subset system identifier.","type":"string"}}],"doc":{"description":"Creates an empty DOMDocumentType object. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur.","type":"DOMDocumentType"}},{"kind":32,"name":"hasFeature","modifiers":1,"children":[{"kind":128,"name":"$feature","modifiers":0,"doc":{"description":"The feature to test.","type":"string"}},{"kind":128,"name":"$version","modifiers":0,"doc":{"description":"The version number of the feature to test. In level 2, this can be either 2.0 or 1.0.","type":"string"}}],"doc":{"description":"Test if the DOM implementation implements a specific feature.","type":"bool"}},{"kind":32,"name":"createDocument","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"value":"NULL","doc":{"description":"The namespace URI of the document element to create.","type":"string"}},{"kind":128,"name":"$qualifiedName","modifiers":0,"value":"NULL","doc":{"description":"The qualified name of the document element to create.","type":"string"}},{"kind":128,"name":"$doctype","modifiers":0,"value":"NULL","doc":{"description":"The type of document to create or NULL.","type":"DOMDocumentType"}}],"doc":{"description":"Creates a DOMDocument object of the specified type with its document element.","type":"DOMDocument"}}],"doc":{"description":"The DOMImplementation interface provides a number of methods for performing operations that are independent of any particular instance of the document object model."}},{"kind":1,"name":"IteratorIterator","modifiers":0,"associated":[{"kind":2,"name":"OuterIterator"}],"children":[{"kind":32,"name":"getInnerIterator","modifiers":1,"children":[],"doc":{"description":"Get the inner iterator.","type":"Traversable"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Get the value of the current element.","type":"mixed"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The traversable iterator.","type":"Traversable"}}],"doc":{"description":"Creates an iterator from anything that is traversable.","type":"public"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Get the key of the current element.","type":"scalar"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Checks if the iterator is valid.","type":"bool"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewinds to the first element.","type":"void"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Forward to the next element.","type":"void"}}],"doc":{"description":"This iterator wrapper allows the conversion of anything that is Traversable into an Iterator. It is important to understand that most classes that do not implement Iterators have reasons as most likely they do not allow the full Iterator feature set. If so, techniques should be provided to prevent misuse, otherwise expect exceptions or fatal errors."}},{"kind":1,"name":"RecursiveDirectoryIterator","modifiers":0,"associated":[{"kind":1,"name":"FilesystemIterator"},{"kind":2,"name":"SeekableIterator"},{"kind":2,"name":"RecursiveIterator"}],"children":[{"kind":32,"name":"key","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"getSubPath","modifiers":1,"children":[],"doc":{"description":"Gets the sub path.","type":"string"}},{"kind":32,"name":"next","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"getChildren","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"getSubPathname","modifiers":1,"children":[],"doc":{"description":"Gets the sub path and filename.","type":"string"}},{"kind":32,"name":"hasChildren","modifiers":1,"description":"","children":[{"kind":128,"name":"$allow_links","modifiers":0,"description":"","value":"false","doc":{"type":"bool"}}],"doc":{"type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The path of the directory to be iterated over.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"FilesystemIterator::KEY_AS_PATHNAME","doc":{"description":"Flags may be provided which will affect the behavior of some methods. A list of the flags can found under FilesystemIterator predefined constants. They can also be set later with FilesystemIterator::setFlags().","type":"int"}}],"doc":{"description":"Constructs a RecursiveDirectoryIterator() for the provided path.","type":"public"}},{"kind":32,"name":"rewind","modifiers":1,"description":"","children":[],"doc":{"type":"void"}}],"doc":{"description":"The RecursiveDirectoryIterator provides an interface for iterating recursively over filesystem directories."}},{"kind":8,"name":"SQLITE3_ASSOC","doc":{"description":"Specifies that the Sqlite3Result::fetchArray() method shall return an array indexed by column name as returned in the corresponding result set."}},{"kind":8,"name":"SQLITE3_NUM","doc":{"description":"Specifies that the Sqlite3Result::fetchArray() method shall return an array indexed by column number as returned in the corresponding result set, starting at column 0."}},{"kind":8,"name":"SQLITE3_BOTH","doc":{"description":"Specifies that the Sqlite3Result::fetchArray() method shall return an array indexed by both column name and number as returned in the corresponding result set, starting at column 0."}},{"kind":8,"name":"SQLITE3_INTEGER","doc":{"description":"Represents the SQLite3 INTEGER storage class."}},{"kind":8,"name":"SQLITE3_FLOAT","doc":{"description":"Represents the SQLite3 REAL (FLOAT) storage class."}},{"kind":8,"name":"SQLITE3_TEXT","doc":{"description":"Represents the SQLite3 TEXT storage class."}},{"kind":8,"name":"SQLITE3_BLOB","doc":{"description":"Represents the SQLite3 BLOB storage class."}},{"kind":8,"name":"SQLITE3_NULL","doc":{"description":"Represents the SQLite3 NULL storage class."}},{"kind":8,"name":"SQLITE3_OPEN_READONLY","doc":{"description":"Specifies that the SQLite3 database be opened for reading only."}},{"kind":8,"name":"SQLITE3_OPEN_READWRITE","doc":{"description":"Specifies that the SQLite3 database be opened for reading and writing."}},{"kind":8,"name":"SQLITE3_OPEN_CREATE","doc":{"description":"Specifies that the SQLite3 database be created if it does not already exist."}},{"kind":8,"name":"SQLITE3_DETERMINISTIC","doc":{"description":"Specifies that a function created with SQLite3::createFunction() is deterministic, i.e. it always returns the same result given the same inputs within a single SQL statement. (Available as of PHP 7.1.4.)"}},{"kind":1,"name":"DOMEntity","modifiers":0,"associated":[{"kind":1,"name":"DOMNode"}],"children":[{"kind":16,"name":"$publicId","modifiers":1,"doc":{"description":"The public identifier associated with the entity if specified, and NULL otherwise.","type":"string"}},{"kind":16,"name":"$systemId","modifiers":1,"doc":{"description":"The system identifier associated with the entity if specified, and NULL otherwise. This may be an absolute URI or not.","type":"string"}},{"kind":16,"name":"$notationName","modifiers":1,"doc":{"description":"For unparsed entities, the name of the notation for the entity. For parsed entities, this is NULL.","type":"string"}},{"kind":16,"name":"$actualEncoding","modifiers":1,"doc":{"description":"An attribute specifying the encoding used for this entity at the time of parsing, when it is an external parsed entity. This is NULL if it an entity from the internal subset or if it is not known.","type":"string"}},{"kind":16,"name":"$encoding","modifiers":1,"doc":{"description":"An attribute specifying, as part of the text declaration, the encoding of this entity, when it is an external parsed entity. This is NULL otherwise.","type":"string"}},{"kind":16,"name":"$version","modifiers":1,"doc":{"description":"An attribute specifying, as part of the text declaration, the version number of this entity, when it is an external parsed entity. This is NULL otherwise.","type":"string"}}],"doc":{"description":"This interface represents a known entity, either parsed or unparsed, in an XML document."}},{"kind":2,"name":"DateTimeInterface","modifiers":0,"associated":[],"children":[{"kind":32,"name":"format","modifiers":1,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"Format accepted by date().","type":"string"}}],"doc":{"description":"Returns date formatted according to given format.","type":"string"}},{"kind":32,"name":"diff","modifiers":1,"children":[{"kind":128,"name":"$datetime2","modifiers":0,"description":"","doc":{"type":"DateTimeInterface"}},{"kind":128,"name":"$absolute","modifiers":0,"value":"false","doc":{"description":"Should the interval be forced to be positive?","type":"bool"}}],"doc":{"description":"Returns the difference between two DateTimeInterface objects.","type":"DateInterval"}},{"kind":32,"name":"__wakeup","modifiers":0,"children":[],"doc":{"description":"The __wakeup() handler.","type":"public"}},{"kind":32,"name":"getTimestamp","modifiers":1,"children":[],"doc":{"description":"Gets the Unix timestamp.","type":"int"}},{"kind":32,"name":"getOffset","modifiers":1,"children":[],"doc":{"description":"Returns the timezone offset.","type":"int"}},{"kind":32,"name":"getTimezone","modifiers":1,"children":[],"doc":{"description":"Return time zone relative to given DateTime.","type":"DateTimeZone"}}],"doc":{"description":"DateTimeInterface is meant so that both DateTime and DateTimeImmutable can be type hinted for. It is not possible to implement this interface with userland classes."}},{"kind":1,"name":"DOMCharacterData","modifiers":0,"associated":[{"kind":1,"name":"DOMNode"}],"children":[{"kind":16,"name":"$data","modifiers":1,"doc":{"description":"The contents of the node.","type":"string"}},{"kind":16,"name":"$length","modifiers":1,"doc":{"description":"The length of the contents.","type":"int"}},{"kind":32,"name":"insertData","modifiers":0,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The character offset at which to insert.","type":"int"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The string to insert.","type":"string"}}],"doc":{"description":"Inserts string data at position offset.","type":"void"}},{"kind":32,"name":"deleteData","modifiers":0,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The offset from which to start removing.","type":"int"}},{"kind":128,"name":"$count","modifiers":0,"doc":{"description":"The number of characters to delete. If the sum of offset and count exceeds the length, then all characters to the end of the data are deleted.","type":"int"}}],"doc":{"description":"Deletes count characters starting from position offset.","type":"void"}},{"kind":32,"name":"substringData","modifiers":0,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"Start offset of substring to extract.","type":"int"}},{"kind":128,"name":"$count","modifiers":0,"doc":{"description":"The number of characters to extract.","type":"int"}}],"doc":{"description":"Returns the specified substring.","type":"string"}},{"kind":32,"name":"replaceData","modifiers":0,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The offset from which to start replacing.","type":"int"}},{"kind":128,"name":"$count","modifiers":0,"doc":{"description":"The number of characters to replace. If the sum of offset and count exceeds the length, then all characters to the end of the data are replaced.","type":"int"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The string with which the range must be replaced.","type":"string"}}],"doc":{"description":"Replace count characters starting from position offset with data.","type":"void"}},{"kind":32,"name":"appendData","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The string to append.","type":"string"}}],"doc":{"description":"Append the string data to the end of the character data of the node.","type":"void"}}],"doc":{"description":"Represents nodes with character data. No nodes directly correspond to this class, but other nodes do inherit from it."}},{"kind":1,"name":"tidyNode","modifiers":0,"associated":[],"children":[{"kind":32,"name":"isHtml","modifiers":0,"children":[],"doc":{"description":"Tells if the node is part of HTML document.","type":"bool"}},{"kind":32,"name":"hasSiblings","modifiers":0,"children":[],"doc":{"description":"Tells if the node has siblings.","type":"bool"}},{"kind":32,"name":"isText","modifiers":0,"children":[],"doc":{"description":"Tells if the node represents a text (without any markup).","type":"bool"}},{"kind":32,"name":"hasChildren","modifiers":0,"children":[],"doc":{"description":"Tells if the node has children.","type":"bool"}},{"kind":32,"name":"isPhp","modifiers":0,"children":[],"doc":{"description":"Tells if the node is PHP.","type":"bool"}},{"kind":32,"name":"isJste","modifiers":0,"children":[],"doc":{"description":"Tells if the node is JSTE.","type":"bool"}},{"kind":32,"name":"isComment","modifiers":0,"children":[],"doc":{"description":"Tells if the node is a comment.","type":"bool"}},{"kind":32,"name":"isAsp","modifiers":0,"children":[],"doc":{"description":"Tells whether the current node is ASP.","type":"bool"}},{"kind":32,"name":"getParent","modifiers":0,"children":[],"doc":{"description":"Returns the parent node of the current node.","type":"tidyNode"}}],"doc":{"description":"An HTML node in an HTML file, as detected by tidy."}},{"kind":8,"name":"FTP_ASCII","description":""},{"kind":8,"name":"FTP_AUTOSEEK","doc":{"description":"See ftp_set_option() for information."}},{"kind":8,"name":"FTP_AUTORESUME","doc":{"description":"Automatically determine resume position and start position for GET and PUT requests (only works if FTP_AUTOSEEK is enabled)"}},{"kind":8,"name":"FTP_FAILED","doc":{"description":"Asynchronous transfer has failed"}},{"kind":8,"name":"FTP_FINISHED","doc":{"description":"Asynchronous transfer has finished"}},{"kind":8,"name":"FTP_MOREDATA","doc":{"description":"Asynchronous transfer is still active"}},{"kind":8,"name":"FTP_TEXT","doc":{"description":"Alias of FTP_ASCII."}},{"kind":8,"name":"FTP_BINARY","description":""},{"kind":8,"name":"FTP_IMAGE","doc":{"description":"Alias of FTP_BINARY."}},{"kind":8,"name":"FTP_TIMEOUT_SEC","doc":{"description":"See ftp_set_option() for information."}},{"kind":1,"name":"SimpleXMLElement","modifiers":0,"associated":[{"kind":2,"name":"Traversable"}],"children":[{"kind":32,"name":"registerXPathNamespace","modifiers":1,"children":[{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The namespace prefix to use in the XPath query for the namespace given in ns.","type":"string"}},{"kind":128,"name":"$ns","modifiers":0,"doc":{"description":"The namespace to use for the XPath query. This must match a namespace in use by the XML document or the XPath query using prefix will not return any results.","type":"string"}}],"doc":{"description":"Creates a prefix/ns context for the next XPath query. In particular, this is helpful if the provider of the given XML document alters the namespace prefixes. registerXPathNamespace will create a prefix for the associated namespace, allowing one to access nodes in that namespace without the need to change code to allow for the new prefixes dictated by the provider.","type":"bool"}},{"kind":32,"name":"getName","modifiers":1,"children":[],"doc":{"description":"Gets the name of the XML element.","type":"string"}},{"kind":32,"name":"getDocNamespaces","modifiers":1,"children":[{"kind":128,"name":"$recursive","modifiers":0,"value":"false","doc":{"description":"If specified, returns all namespaces declared in parent and child nodes. Otherwise, returns only namespaces declared in root node.","type":"bool"}},{"kind":128,"name":"$from_root","modifiers":0,"value":"true","doc":{"description":"Allows you to recursively check namespaces under a child node instead of from the root of the XML doc.","type":"bool"}}],"doc":{"description":"Returns namespaces declared in document","type":"array"}},{"kind":32,"name":"addAttribute","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the attribute to add.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the attribute.","type":"string"}},{"kind":128,"name":"$namespace","modifiers":0,"doc":{"description":"If specified, the namespace to which the attribute belongs.","type":"string"}}],"doc":{"description":"Adds an attribute to the SimpleXML element.","type":"void"}},{"kind":32,"name":"addChild","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the child element to add.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"If specified, the value of the child element.","type":"string"}},{"kind":128,"name":"$namespace","modifiers":0,"doc":{"description":"If specified, the namespace to which the child element belongs.","type":"string"}}],"doc":{"description":"Adds a child element to the node and returns a SimpleXMLElement of the child.","type":"SimpleXMLElement"}},{"kind":32,"name":"getNamespaces","modifiers":1,"children":[{"kind":128,"name":"$recursive","modifiers":0,"value":"false","doc":{"description":"If specified, returns all namespaces used in parent and child nodes. Otherwise, returns only namespaces used in root node.","type":"bool"}}],"doc":{"description":"Returns namespaces used in document","type":"array"}},{"kind":32,"name":"xpath","modifiers":1,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"An XPath path","type":"string"}}],"doc":{"description":"The xpath method searches the SimpleXML node for children matching the XPath path.","type":"array"}},{"kind":32,"name":"children","modifiers":1,"children":[{"kind":128,"name":"$ns","modifiers":0,"doc":{"description":"An XML namespace.","type":"string"}},{"kind":128,"name":"$is_prefix","modifiers":0,"value":"false","doc":{"description":"If is_prefix is TRUE, ns will be regarded as a prefix. If FALSE, ns will be regarded as a namespace URL.","type":"bool"}}],"doc":{"description":"This method finds the children of an element. The result follows normal iteration rules.","type":"SimpleXMLElement"}},{"kind":32,"name":"__construct","modifiers":8,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"A well-formed XML string or the path or URL to an XML document if data_is_url is TRUE.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Optionally used to specify additional Libxml parameters. Note: It may be necessary to pass LIBXML_PARSEHUGE to be able to process deeply nested XML or very large text nodes.","type":"int"}},{"kind":128,"name":"$data_is_url","modifiers":0,"value":"false","doc":{"description":"By default, data_is_url is FALSE. Use TRUE to specify that data is a path or URL to an XML document instead of string data.","type":"bool"}},{"kind":128,"name":"$ns","modifiers":0,"value":"\"\"","doc":{"description":"Namespace prefix or URI.","type":"string"}},{"kind":128,"name":"$is_prefix","modifiers":0,"value":"false","doc":{"description":"TRUE if ns is a prefix, FALSE if it's a URI; defaults to FALSE.","type":"bool"}}],"doc":{"description":"Creates a new SimpleXMLElement object.","type":"public"}},{"kind":32,"name":"count","modifiers":1,"children":[],"doc":{"description":"This method counts the number of children of an element.","type":"int"}},{"kind":32,"name":"asXML","modifiers":1,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"If specified, the function writes the data to the file rather than returning it.","type":"string"}}],"doc":{"description":"The asXML method formats the parent object's data in XML version 1.0.","type":"mixed"}},{"kind":32,"name":"attributes","modifiers":1,"children":[{"kind":128,"name":"$ns","modifiers":0,"value":"NULL","doc":{"description":"An optional namespace for the retrieved attributes","type":"string"}},{"kind":128,"name":"$is_prefix","modifiers":0,"value":"false","doc":{"description":"Default to FALSE","type":"bool"}}],"doc":{"description":"This function provides the attributes and values defined within an xml tag.","type":"SimpleXMLElement"}}],"doc":{"description":"Represents an element in an XML document."}},{"kind":8,"name":"AF_UNIX","description":""},{"kind":8,"name":"AF_INET","description":""},{"kind":8,"name":"AF_INET6","doc":{"description":"Only available if compiled with IPv6 support."}},{"kind":8,"name":"SOCK_STREAM","description":""},{"kind":8,"name":"SOCK_DGRAM","description":""},{"kind":8,"name":"SOCK_RAW","description":""},{"kind":8,"name":"SOCK_SEQPACKET","description":""},{"kind":8,"name":"SOCK_RDM","description":""},{"kind":8,"name":"MSG_OOB","description":""},{"kind":8,"name":"MSG_WAITALL","description":""},{"kind":8,"name":"MSG_PEEK","description":""},{"kind":8,"name":"MSG_DONTROUTE","description":""},{"kind":8,"name":"MSG_EOR","doc":{"description":"Not available on Windows platforms."}},{"kind":8,"name":"MSG_EOF","doc":{"description":"Not available on Windows platforms."}},{"kind":8,"name":"SO_DEBUG","description":""},{"kind":8,"name":"SO_REUSEADDR","description":""},{"kind":8,"name":"SO_REUSEPORT","doc":{"description":"This constant is only available in PHP 5.4.10 or later on platforms that support the SO_REUSEPORT socket option: this includes Mac OS X and FreeBSD, but does not include Linux or Windows."}},{"kind":8,"name":"SO_KEEPALIVE","description":""},{"kind":8,"name":"SO_DONTROUTE","description":""},{"kind":8,"name":"SO_LINGER","description":""},{"kind":8,"name":"SO_BROADCAST","description":""},{"kind":8,"name":"SO_OOBINLINE","description":""},{"kind":8,"name":"SO_SNDBUF","description":""},{"kind":8,"name":"SO_RCVBUF","description":""},{"kind":8,"name":"SO_SNDLOWAT","description":""},{"kind":8,"name":"SO_RCVLOWAT","description":""},{"kind":8,"name":"SO_SNDTIMEO","description":""},{"kind":8,"name":"SO_RCVTIMEO","description":""},{"kind":8,"name":"SO_TYPE","description":""},{"kind":8,"name":"SO_ERROR","description":""},{"kind":8,"name":"TCP_NODELAY","doc":{"description":"Used to disable Nagle TCP algorithm. Added in PHP 5.2.7."}},{"kind":8,"name":"SOL_SOCKET","description":""},{"kind":8,"name":"PHP_NORMAL_READ","description":""},{"kind":8,"name":"PHP_BINARY_READ","description":""},{"kind":8,"name":"SOL_TCP","description":""},{"kind":8,"name":"SOL_UDP","description":""},{"kind":8,"name":"SOCKET_EINTR","doc":{"description":"Interrupted system call."}},{"kind":8,"name":"SOCKET_EBADF","doc":{"description":"Bad file number."}},{"kind":8,"name":"SOCKET_EACCES","doc":{"description":"Permission denied."}},{"kind":8,"name":"SOCKET_EFAULT","doc":{"description":"Bad address."}},{"kind":8,"name":"SOCKET_EINVAL","doc":{"description":"Invalid argument."}},{"kind":8,"name":"SOCKET_EMFILE","doc":{"description":"Too many open files."}},{"kind":8,"name":"SOCKET_ENAMETOOLONG","doc":{"description":"File name too long."}},{"kind":8,"name":"SOCKET_ENOTEMPTY","doc":{"description":"Directory not empty."}},{"kind":8,"name":"SOCKET_ELOOP","doc":{"description":"Too many symbolic links encountered."}},{"kind":8,"name":"SOCKET_EWOULDBLOCK","doc":{"description":"Operation would block."}},{"kind":8,"name":"SOCKET_EREMOTE","doc":{"description":"Object is remote."}},{"kind":8,"name":"SOCKET_EUSERS","doc":{"description":"Too many users."}},{"kind":8,"name":"SOCKET_ENOTSOCK","doc":{"description":"Socket operation on non-socket."}},{"kind":8,"name":"SOCKET_EDESTADDRREQ","doc":{"description":"Destination address required."}},{"kind":8,"name":"SOCKET_EMSGSIZE","doc":{"description":"Message too long."}},{"kind":8,"name":"SOCKET_EPROTOTYPE","doc":{"description":"Protocol wrong type for socket."}},{"kind":8,"name":"SOCKET_EPROTONOSUPPORT","doc":{"description":"Protocol not supported."}},{"kind":8,"name":"SOCKET_ESOCKTNOSUPPORT","doc":{"description":"Socket type not supported."}},{"kind":8,"name":"SOCKET_EOPNOTSUPP","doc":{"description":"Operation not supported on transport endpoint."}},{"kind":8,"name":"SOCKET_EPFNOSUPPORT","doc":{"description":"Protocol family not supported."}},{"kind":8,"name":"SOCKET_EAFNOSUPPORT","doc":{"description":"Address family not supported by protocol."}},{"kind":8,"name":"SOCKET_EADDRNOTAVAIL","doc":{"description":"Cannot assign requested address."}},{"kind":8,"name":"SOCKET_ENETDOWN","doc":{"description":"Network is down."}},{"kind":8,"name":"SOCKET_ENETUNREACH","doc":{"description":"Network is unreachable."}},{"kind":8,"name":"SOCKET_ENETRESET","doc":{"description":"Network dropped connection because of reset."}},{"kind":8,"name":"SOCKET_ECONNABORTED","doc":{"description":"Software caused connection abort."}},{"kind":8,"name":"SOCKET_ECONNRESET","doc":{"description":"Connection reset by peer."}},{"kind":8,"name":"SOCKET_ENOBUFS","doc":{"description":"No buffer space available."}},{"kind":8,"name":"SOCKET_EISCONN","doc":{"description":"Transport endpoint is already connected."}},{"kind":8,"name":"SOCKET_ENOTCONN","doc":{"description":"Transport endpoint is not connected."}},{"kind":8,"name":"SOCKET_ESHUTDOWN","doc":{"description":"Cannot send after transport endpoint shutdown."}},{"kind":8,"name":"SOCKET_ETIMEDOUT","doc":{"description":"Connection timed out."}},{"kind":8,"name":"SOCKET_ECONNREFUSED","doc":{"description":"Connection refused."}},{"kind":8,"name":"SOCKET_EHOSTDOWN","doc":{"description":"Host is down."}},{"kind":8,"name":"SOCKET_EHOSTUNREACH","doc":{"description":"No route to host."}},{"kind":8,"name":"SOCKET_EALREADY","doc":{"description":"Operation already in progress."}},{"kind":8,"name":"SOCKET_EINPROGRESS","doc":{"description":"Operation now in progress."}},{"kind":8,"name":"SOCKET_ENOPROTOOPT","description":""},{"kind":8,"name":"SOCKET_EADDRINUSE","description":""},{"kind":8,"name":"SOCKET_ETOOMYREFS","description":""},{"kind":8,"name":"SOCKET_EPROCLIM","description":""},{"kind":8,"name":"SOCKET_EDUOT","description":""},{"kind":8,"name":"SOCKET_ESTALE","description":""},{"kind":8,"name":"SOCKET_EDISCON","description":""},{"kind":8,"name":"SOCKET_SYSNOTREADY","description":""},{"kind":8,"name":"SOCKET_VERNOTSUPPORTED","description":""},{"kind":8,"name":"SOCKET_NOTINITIALISED","description":""},{"kind":8,"name":"SOCKET_HOST_NOT_FOUND","description":""},{"kind":8,"name":"SOCKET_TRY_AGAIN","description":""},{"kind":8,"name":"SOCKET_NO_RECOVERY","description":""},{"kind":8,"name":"SOCKET_NO_DATA","description":""},{"kind":8,"name":"SOCKET_NO_ADDRESS","description":""},{"kind":8,"name":"SOCKET_EPERM","doc":{"description":"Operation not permitted."}},{"kind":8,"name":"SOCKET_ENOENT","doc":{"description":"No such file or directory."}},{"kind":8,"name":"SOCKET_EIO","doc":{"description":"I/O error."}},{"kind":8,"name":"SOCKET_ENXIO","doc":{"description":"No such device or address."}},{"kind":8,"name":"SOCKET_E2BIG","doc":{"description":"Arg list too long."}},{"kind":8,"name":"SOCKET_EAGAIN","doc":{"description":"Try again."}},{"kind":8,"name":"SOCKET_ENOMEM","doc":{"description":"Out of memory."}},{"kind":8,"name":"SOCKET_ENOTBLK","doc":{"description":"Block device required."}},{"kind":8,"name":"SOCKET_EBUSY","doc":{"description":"Device or resource busy."}},{"kind":8,"name":"SOCKET_EEXIST","doc":{"description":"File exists."}},{"kind":8,"name":"SOCKET_EXDEV","doc":{"description":"Cross-device link."}},{"kind":8,"name":"SOCKET_ENODEV","doc":{"description":"No such device."}},{"kind":8,"name":"SOCKET_ENOTDIR","doc":{"description":"Not a directory."}},{"kind":8,"name":"SOCKET_EISDIR","doc":{"description":"Is a directory."}},{"kind":8,"name":"SOCKET_ENFILE","doc":{"description":"File table overflow."}},{"kind":8,"name":"SOCKET_ENOTTY","doc":{"description":"Not a typewriter."}},{"kind":8,"name":"SOCKET_ENOSPC","doc":{"description":"No space left on device."}},{"kind":8,"name":"SOCKET_ESPIPE","doc":{"description":"Illegal seek."}},{"kind":8,"name":"SOCKET_EROFS","doc":{"description":"Read-only file system."}},{"kind":8,"name":"SOCKET_EMLINK","doc":{"description":"Too many links."}},{"kind":8,"name":"SOCKET_EPIPE","doc":{"description":"Broken pipe."}},{"kind":8,"name":"SOCKET_ENOLCK","doc":{"description":"No record locks available."}},{"kind":8,"name":"SOCKET_ENOSYS","doc":{"description":"Function not implemented."}},{"kind":8,"name":"SOCKET_ENOMSG","doc":{"description":"No message of desired type."}},{"kind":8,"name":"SOCKET_EIDRM","doc":{"description":"Identifier removed."}},{"kind":8,"name":"SOCKET_ECHRNG","doc":{"description":"Channel number out of range."}},{"kind":8,"name":"SOCKET_EL2NSYNC","doc":{"description":"Level 2 not synchronized."}},{"kind":8,"name":"SOCKET_EL3HLT","doc":{"description":"Level 3 halted."}},{"kind":8,"name":"SOCKET_EL3RST","doc":{"description":"Level 3 reset."}},{"kind":8,"name":"SOCKET_ELNRNG","doc":{"description":"Link number out of range."}},{"kind":8,"name":"SOCKET_EUNATCH","doc":{"description":"Protocol driver not attached."}},{"kind":8,"name":"SOCKET_ENOCSI","doc":{"description":"No CSI structure available."}},{"kind":8,"name":"SOCKET_EL2HLT","doc":{"description":"Level 2 halted."}},{"kind":8,"name":"SOCKET_EBADE","doc":{"description":"Invalid exchange."}},{"kind":8,"name":"SOCKET_EBADR","doc":{"description":"Invalid request descriptor."}},{"kind":8,"name":"SOCKET_EXFULL","doc":{"description":"Exchange full."}},{"kind":8,"name":"SOCKET_ENOANO","doc":{"description":"No anode."}},{"kind":8,"name":"SOCKET_EBADRQC","doc":{"description":"Invalid request code."}},{"kind":8,"name":"SOCKET_EBADSLT","doc":{"description":"Invalid slot."}},{"kind":8,"name":"SOCKET_ENOSTR","doc":{"description":"Device not a stream."}},{"kind":8,"name":"SOCKET_ENODATA","doc":{"description":"No data available."}},{"kind":8,"name":"SOCKET_ETIME","doc":{"description":"Timer expired."}},{"kind":8,"name":"SOCKET_ENOSR","doc":{"description":"Out of streams resources."}},{"kind":8,"name":"SOCKET_ENONET","doc":{"description":"Machine is not on the network."}},{"kind":8,"name":"SOCKET_ENOLINK","doc":{"description":"Link has been severed."}},{"kind":8,"name":"SOCKET_EADV","doc":{"description":"Advertise error."}},{"kind":8,"name":"SOCKET_ESRMNT","doc":{"description":"Srmount error."}},{"kind":8,"name":"SOCKET_ECOMM","doc":{"description":"Communication error on send."}},{"kind":8,"name":"SOCKET_EPROTO","doc":{"description":"Protocol error."}},{"kind":8,"name":"SOCKET_EMULTIHOP","doc":{"description":"Multihop attempted."}},{"kind":8,"name":"SOCKET_EBADMSG","doc":{"description":"Not a data message."}},{"kind":8,"name":"SOCKET_ENOTUNIQ","doc":{"description":"Name not unique on network."}},{"kind":8,"name":"SOCKET_EBADFD","doc":{"description":"File descriptor in bad state."}},{"kind":8,"name":"SOCKET_EREMCHG","doc":{"description":"Remote address changed."}},{"kind":8,"name":"SOCKET_ERESTART","doc":{"description":"Interrupted system call should be restarted."}},{"kind":8,"name":"SOCKET_ESTRPIPE","doc":{"description":"Streams pipe error."}},{"kind":8,"name":"SOCKET_EPROTOOPT","doc":{"description":"Protocol not available."}},{"kind":8,"name":"SOCKET_ADDRINUSE","doc":{"description":"Address already in use."}},{"kind":8,"name":"SOCKET_ETOOMANYREFS","doc":{"description":"Too many references: cannot splice."}},{"kind":8,"name":"SOCKET_EISNAM","doc":{"description":"Is a named type file."}},{"kind":8,"name":"SOCKET_EREMOTEIO","doc":{"description":"Remote I/O error."}},{"kind":8,"name":"SOCKET_EDQUOT","doc":{"description":"Quota exceeded."}},{"kind":8,"name":"SOCKET_ENOMEDIUM","doc":{"description":"No medium found."}},{"kind":8,"name":"SOCKET_EMEDIUMTYPE","doc":{"description":"Wrong medium type."}},{"kind":1,"name":"DOMDocumentType","modifiers":0,"associated":[{"kind":1,"name":"DOMNode"}],"children":[{"kind":16,"name":"$publicId","modifiers":1,"doc":{"description":"The public identifier of the external subset.","type":"string"}},{"kind":16,"name":"$systemId","modifiers":1,"doc":{"description":"The system identifier of the external subset. This may be an absolute URI or not.","type":"string"}},{"kind":16,"name":"$name","modifiers":1,"doc":{"description":"The name of DTD; i.e., the name immediately following the DOCTYPE keyword.","type":"string"}},{"kind":16,"name":"$entities","modifiers":1,"doc":{"description":"A DOMNamedNodeMap containing the general entities, both external and internal, declared in the DTD.","type":"DOMNamedNodeMap"}},{"kind":16,"name":"$notations","modifiers":1,"doc":{"description":"A DOMNamedNodeMap containing the notations declared in the DTD.","type":"DOMNamedNodeMap"}},{"kind":16,"name":"$internalSubset","modifiers":1,"doc":{"description":"The internal subset as a string, or null if there is none. This does not contain the delimiting square brackets.","type":"string"}}],"doc":{"description":"Each DOMDocument has a doctype attribute whose value is either NULL or a DOMDocumentType object."}},{"kind":2,"name":"SessionHandlerInterface","modifiers":0,"associated":[],"children":[{"kind":32,"name":"write","modifiers":1,"children":[{"kind":128,"name":"$session_id","modifiers":0,"doc":{"description":"The session id.","type":"string"}},{"kind":128,"name":"$session_data","modifiers":0,"doc":{"description":"The encoded session data. This data is the result of the PHP internally encoding the $_SESSION superglobal to a serialized string and passing it as this parameter. Please note sessions use an alternative serialization method.","type":"string"}}],"doc":{"description":"Writes the session data to the session storage. Called by session_write_close(), when session_register_shutdown() fails, or during a normal shutdown. Note: SessionHandlerInterface::close() is called immediately after this function.","type":"bool"}},{"kind":32,"name":"open","modifiers":1,"children":[{"kind":128,"name":"$save_path","modifiers":0,"doc":{"description":"The path where to store/retrieve the session.","type":"string"}},{"kind":128,"name":"$session_name","modifiers":0,"doc":{"description":"The session name.","type":"string"}}],"doc":{"description":"Re-initialize existing session, or creates a new one. Called when a session starts or when session_start() is invoked.","type":"bool"}},{"kind":32,"name":"destroy","modifiers":1,"children":[{"kind":128,"name":"$session_id","modifiers":0,"doc":{"description":"The session ID being destroyed.","type":"string"}}],"doc":{"description":"Destroys a session. Called by session_regenerate_id() (with $destroy = TRUE), session_destroy() and when session_decode() fails.","type":"bool"}},{"kind":32,"name":"close","modifiers":1,"children":[],"doc":{"description":"Closes the current session. This function is automatically executed when closing the session, or explicitly via session_write_close().","type":"bool"}},{"kind":32,"name":"read","modifiers":1,"children":[{"kind":128,"name":"$session_id","modifiers":0,"doc":{"description":"The session id.","type":"string"}}],"doc":{"description":"Reads the session data from the session storage, and returns the results. Called right after the session starts or when session_start() is called. Please note that before this method is called SessionHandlerInterface::open() is invoked.","type":"string"}},{"kind":32,"name":"gc","modifiers":1,"children":[{"kind":128,"name":"$maxlifetime","modifiers":0,"doc":{"description":"Sessions that have not updated for the last maxlifetime seconds will be removed.","type":"int"}}],"doc":{"description":"Cleans up expired sessions. Called by session_start(), based on session.gc_divisor, session.gc_probability and session.gc_maxlifetime settings.","type":"bool"}}],"doc":{"description":"SessionHandlerInterface is an interface which defines a prototype for creating a custom session handler. In order to pass a custom session handler to session_set_save_handler() using its OOP invocation, the class must implement this interface."}},{"kind":1,"name":"SNMP","modifiers":0,"associated":[],"children":[{"kind":16,"name":"$max_oids","modifiers":1,"doc":{"description":"Maximum OID per GET/SET/GETBULK request","type":"int"}},{"kind":16,"name":"$valueretrieval","modifiers":1,"doc":{"description":"Controls the method how the SNMP values will be returned SNMP_VALUE_LIBRARYThe return values will be as returned by the Net-SNMP library.SNMP_VALUE_PLAINThe return values will be the plain value without the SNMP type hint.SNMP_VALUE_OBJECT The return values will be objects with the properties \"value\" and \"type\", where the latter is one of the SNMP_OCTET_STR, SNMP_COUNTER etc. constants. The way \"value\" is returned is based on which one of SNMP_VALUE_LIBRARY, SNMP_VALUE_PLAIN is set","type":"int"}},{"kind":16,"name":"$quick_print","modifiers":1,"doc":{"description":"Value of quick_print within the NET-SNMP library Sets the value of quick_print within the NET-SNMP library. When this is set (1), the SNMP library will return 'quick printed' values. This means that just the value will be printed. When quick_print is not enabled (default) the UCD SNMP library prints extra information including the type of the value (i.e. IpAddress or OID). Additionally, if quick_print is not enabled, the library prints additional hex values for all strings of three characters or less.","type":"bool"}},{"kind":16,"name":"$enum_print","modifiers":1,"doc":{"description":"Controls the way enum values are printed Parameter toggles if walk/get etc. should automatically lookup enum values in the MIB and return them together with their human readable string.","type":"bool"}},{"kind":16,"name":"$oid_output_format","modifiers":1,"doc":{"description":"Controls OID output format OID .1.3.6.1.2.1.1.3.0 representation for various oid_output_format values SNMP_OID_OUTPUT_FULL.iso.org.dod.internet.mgmt.mib-2.system.sysUpTime.sysUpTimeInstanceSNMP_OID_OUTPUT_NUMERIC.1.3.6.1.2.1.1.3.0 SNMP_OID_OUTPUT_MODULEDISMAN-EVENT-MIB::sysUpTimeInstanceSNMP_OID_OUTPUT_SUFFIXsysUpTimeInstanceSNMP_OID_OUTPUT_UCDsystem.sysUpTime.sysUpTimeInstanceSNMP_OID_OUTPUT_NONEUndefined","type":"int"}},{"kind":16,"name":"$oid_increasing_check","modifiers":1,"doc":{"description":"Controls disabling check for increasing OID while walking OID tree Some SNMP agents are known for returning OIDs out of order but can complete the walk anyway. Other agents return OIDs that are out of order and can cause SNMP::walk() to loop indefinitely until memory limit will be reached. PHP SNMP library by default performs OID increasing check and stops walking on OID tree when it detects possible loop with issuing warning about non-increasing OID faced. Set oid_increasing_check to FALSE to disable this check.","type":"bool"}},{"kind":16,"name":"$exceptions_enabled","modifiers":1,"doc":{"description":"Controls which failures will raise SNMPException instead of warning. Use bitwise OR'ed SNMP::ERRNO_* constants. By default all SNMP exceptions are disabled.","type":"int"}},{"kind":16,"name":"$info","modifiers":1,"doc":{"description":"Read-only property with remote agent configuration: hostname, port, default timeout, default retries count","type":"array"}},{"kind":1024,"name":"ERRNO_NOERROR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ERRNO_GENERIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ERRNO_TIMEOUT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ERRNO_ERROR_IN_REPLY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ERRNO_OID_NOT_INCREASING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ERRNO_OID_PARSING_ERROR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ERRNO_MULTIPLE_SET_QUERIES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ERRNO_ANY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"VERSION_1","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"VERSION_2C","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"VERSION_2c","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"VERSION_3","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"getError","modifiers":1,"children":[],"doc":{"description":"Returns string with error from last SNMP request.","type":"string"}},{"kind":32,"name":"getErrno","modifiers":1,"children":[],"doc":{"description":"Returns error code from last SNMP request.","type":"int"}},{"kind":32,"name":"walk","modifiers":1,"children":[{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"Root of subtree to be fetched","type":"string"}},{"kind":128,"name":"$suffix_as_key","modifiers":0,"value":"FALSE","doc":{"description":"By default full OID notation is used for keys in output array. If set to TRUE subtree prefix will be removed from keys leaving only suffix of object_id.","type":"bool"}},{"kind":128,"name":"$max_repetitions","modifiers":0,"doc":{"description":"This specifies the maximum number of iterations over the repeating variables. The default is to use this value from SNMP object.","type":"int"}},{"kind":128,"name":"$non_repeaters","modifiers":0,"doc":{"description":"This specifies the number of supplied variables that should not be iterated over. The default is to use this value from SNMP object.","type":"int"}}],"doc":{"description":"SNMP::walk() is used to read SNMP subtree rooted at specified object_id.","type":"array"}},{"kind":32,"name":"close","modifiers":1,"children":[],"doc":{"description":"Frees previously allocated SNMP session object.","type":"bool"}},{"kind":32,"name":"setSecurity","modifiers":1,"children":[{"kind":128,"name":"$sec_level","modifiers":0,"doc":{"description":"the security level (noAuthNoPriv|authNoPriv|authPriv)","type":"string"}},{"kind":128,"name":"$auth_protocol","modifiers":0,"doc":{"description":"the authentication protocol (MD5 or SHA)","type":"string"}},{"kind":128,"name":"$auth_passphrase","modifiers":0,"doc":{"description":"the authentication pass phrase","type":"string"}},{"kind":128,"name":"$priv_protocol","modifiers":0,"doc":{"description":"the privacy protocol (DES or AES)","type":"string"}},{"kind":128,"name":"$priv_passphrase","modifiers":0,"doc":{"description":"the privacy pass phrase","type":"string"}},{"kind":128,"name":"$contextName","modifiers":0,"doc":{"description":"the context name","type":"string"}},{"kind":128,"name":"$contextEngineID","modifiers":0,"doc":{"description":"the context EngineID","type":"string"}}],"doc":{"description":"setSecurity configures security-related session parameters used in SNMP protocol version 3","type":"bool"}},{"kind":32,"name":"getnext","modifiers":1,"children":[{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object (OID) or objects","type":"mixed"}}],"doc":{"description":"Fetch an SNMP object that follows specified object_id.","type":"mixed"}},{"kind":32,"name":"set","modifiers":1,"children":[{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object id When count of OIDs in object_id array is greater than max_oids object property set method will have to use multiple queries to perform requested value updates. In this case type and value checks are made per-chunk so second or subsequent requests may fail due to wrong type or value for OID requested. To mark this a warning is raised when count of OIDs in object_id array is greater than max_oids.","type":"mixed"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The MIB defines the type of each object id. It has to be specified as a single character from the below list. types =The type is taken from the MIBiINTEGER uINTEGERsSTRINGxHEX STRINGdDECIMAL STRINGnNULLOBJoOBJIDtTIMETICKSaIPADDRESSbBITS If OPAQUE_SPECIAL_TYPES was defined while compiling the SNMP library, the following are also valid: types Uunsigned int64Isigned int64FfloatDdouble Most of these will use the obvious corresponding ASN.1 type. 's', 'x', 'd' and 'b' are all different ways of specifying an OCTET STRING value, and the 'u' unsigned type is also used for handling Gauge32 values. If the MIB-Files are loaded by into the MIB Tree with \"snmp_read_mib\" or by specifying it in the libsnmp config, '=' may be used as the type parameter for all object ids as the type can then be automatically read from the MIB. Note that there are two ways to set a variable of the type BITS like e.g. \"SYNTAX BITS {telnet(0), ftp(1), http(2), icmp(3), snmp(4), ssh(5), https(6)}\": Using type \"b\" and a list of bit numbers. This method is not recommended since GET query for the same OID would return e.g. 0xF8. Using type \"x\" and a hex number but without(!) the usual \"0x\" prefix. See examples section for more details.","type":"mixed"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The new value.","type":"mixed"}}],"doc":{"description":"Requests remote SNMP agent setting the value of one or more SNMP objects specified by the object_id.","type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$version","modifiers":0,"doc":{"description":"SNMP protocol version: SNMP::VERSION_1, SNMP::VERSION_2C, SNMP::VERSION_3.","type":"int"}},{"kind":128,"name":"$hostname","modifiers":0,"doc":{"description":"The SNMP agent. hostname may be suffixed with optional SNMP agent port after colon. IPv6 addresses must be enclosed in square brackets if used with port. If FQDN is used for hostname it will be resolved by php-snmp library, not by Net-SNMP engine. Usage of IPv6 addresses when specifying FQDN may be forced by enclosing FQDN into square brackets. Here it is some examples: IPv4 with default port127.0.0.1IPv6 with default port::1 or [::1]IPv4 with specific port127.0.0.1:1161IPv6 with specific port[::1]:1161FQDN with default porthost.domainFQDN with specific porthost.domain:1161FQDN with default port, force usage of IPv6 address[host.domain]FQDN with specific port, force usage of IPv6 address[host.domain]:1161","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The purpuse of community is SNMP version specific: SNMP::VERSION_1SNMP communitySNMP::VERSION_2CSNMP communitySNMP::VERSION_3SNMPv3 securityName","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"int"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of retries in case timeout occurs.","type":"int"}}],"doc":{"description":"The function description goes here.","type":"public"}},{"kind":32,"name":"get","modifiers":1,"children":[{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object (OID) or objects","type":"mixed"}},{"kind":128,"name":"$preserve_keys","modifiers":0,"value":"false","doc":{"description":"When object_id is a array and preserve_keys set to TRUE keys in results will be taken exactly as in object_id, otherwise SNMP::oid_output_format property is used to determinate the form of keys.","type":"bool"}}],"doc":{"description":"Fetch an SNMP object specified in object_id using GET query.","type":"mixed"}}],"doc":{"description":"Represents SNMP session."}},{"kind":1,"name":"SoapVar","modifiers":0,"associated":[],"children":[{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$encoding","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$type_name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$type_namespace","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$node_name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$node_namespace","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"This function is an alias of: SoapVar::SoapVar()","type":"SoapVar"}},{"kind":32,"name":"SoapVar","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to pass or return.","type":"mixed"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding ID, one of the XSD_... constants.","type":"string"}},{"kind":128,"name":"$type_name","modifiers":0,"doc":{"description":"The type name.","type":"string"}},{"kind":128,"name":"$type_namespace","modifiers":0,"doc":{"description":"The type namespace.","type":"string"}},{"kind":128,"name":"$node_name","modifiers":0,"doc":{"description":"The XML node name.","type":"string"}},{"kind":128,"name":"$node_namespace","modifiers":0,"doc":{"description":"The XML node namespace.","type":"string"}}],"doc":{"description":"Constructs a new SoapVar object.","type":"void"}}],"doc":{"description":"A class representing a variable or object for use with SOAP services."}},{"kind":1,"name":"OCI-Lob","modifiers":0,"associated":[],"children":[{"kind":32,"name":"tell","modifiers":0,"children":[],"doc":{"description":"Gets the current position of a LOB's internal pointer.","type":"int"}},{"kind":32,"name":"export","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"Indicates from where to start exporting.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"Indicates the length of data to be exported.","type":"int"}}],"doc":{"description":"Exports LOB contents to a file.","type":"bool"}},{"kind":32,"name":"load","modifiers":0,"children":[],"doc":{"description":"Returns large object's contents. As script execution is terminated when the memory_limit is reached, ensure that the LOB does not exceed this limit. In most cases it's recommended to use OCI-Lob::read instead.","type":"string"}},{"kind":32,"name":"write","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to write in the LOB.","type":"string"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"If this parameter is given, writing will stop after length bytes have been written or the end of data is reached, whichever comes first.","type":"int"}}],"doc":{"description":"Writes data from the parameter data into the current position of LOB's internal pointer.","type":"int"}},{"kind":32,"name":"read","modifiers":0,"children":[{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The length of data to read, in bytes. Large values will be rounded down to 1 MB.","type":"int"}}],"doc":{"description":"Reads length bytes from the current position of LOB's internal pointer.","type":"string"}},{"kind":32,"name":"seek","modifiers":0,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"Indicates the amount of bytes, on which internal pointer should be moved from the position, pointed by whence.","type":"int"}},{"kind":128,"name":"$whence","modifiers":0,"value":"OCI_SEEK_SET","doc":{"description":"May be one of: OCI_SEEK_SET - sets the position equal to offset OCI_SEEK_CUR - adds offset bytes to the current position OCI_SEEK_END - adds offset bytes to the end of large object (use negative value to move to a position before the end of large object)","type":"int"}}],"doc":{"description":"Sets the internal pointer of the large object.","type":"bool"}},{"kind":32,"name":"size","modifiers":0,"children":[],"doc":{"description":"Gets the size of the large object.","type":"int"}},{"kind":32,"name":"free","modifiers":0,"children":[],"doc":{"description":"Frees resources associated with the descriptor, previously allocated with oci_new_descriptor().","type":"bool"}},{"kind":32,"name":"import","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Writes data from the filename in to the current position of large object.","type":"bool"}},{"kind":32,"name":"getBuffering","modifiers":0,"children":[],"doc":{"description":"Tells whether the buffering for the large object is on or off.","type":"bool"}},{"kind":32,"name":"append","modifiers":0,"children":[{"kind":128,"name":"$lob_from","modifiers":0,"doc":{"description":"The copied LOB.","type":"OCI-Lob"}}],"doc":{"description":"Appends data from the large object to the end of another large object.","type":"bool"}},{"kind":32,"name":"truncate","modifiers":0,"children":[{"kind":128,"name":"$length","modifiers":0,"value":"0","doc":{"description":"If provided, this method will truncate the LOB to length bytes. Otherwise, it will completely purge the LOB.","type":"int"}}],"doc":{"description":"Truncates the LOB.","type":"bool"}},{"kind":32,"name":"close","modifiers":0,"children":[],"doc":{"description":"Closes descriptor of LOB or FILE. This function should be used only with OCI-Lob::writeTemporary.","type":"bool"}},{"kind":32,"name":"save","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to be saved.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"Can be used to indicate offset from the beginning of the large object.","type":"int"}}],"doc":{"description":"Saves data to the large object.","type":"bool"}},{"kind":32,"name":"rewind","modifiers":0,"children":[],"doc":{"description":"Sets the internal pointer to the beginning of the large object.","type":"bool"}},{"kind":32,"name":"eof","modifiers":0,"children":[],"doc":{"description":"Tells whether the internal pointer of large object is at the end of LOB.","type":"bool"}},{"kind":32,"name":"setBuffering","modifiers":0,"children":[{"kind":128,"name":"$on_off","modifiers":0,"doc":{"description":"TRUE for on and FALSE for off.","type":"bool"}}],"doc":{"description":"Sets the buffering for the large object, depending on the value of the on_off parameter.","type":"bool"}},{"kind":32,"name":"writeTemporary","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to write.","type":"string"}},{"kind":128,"name":"$lob_type","modifiers":0,"value":"OCI_TEMP_CLOB","doc":{"description":"Can be one of the following: OCI_TEMP_BLOB is used to create temporary BLOBs OCI_TEMP_CLOB is used to create temporary CLOBs","type":"int"}}],"doc":{"description":"Creates a temporary large object and writes data to it.","type":"bool"}},{"kind":32,"name":"flush","modifiers":0,"children":[{"kind":128,"name":"$flag","modifiers":0,"doc":{"description":"By default, resources are not freed, but using flag OCI_LOB_BUFFER_FREE you can do it explicitly. Be sure you know what you're doing - next read/write operation to the same part of LOB will involve a round-trip to the server and initialize new buffer resources. It is recommended to use OCI_LOB_BUFFER_FREE flag only when you are not going to work with the LOB anymore.","type":"int"}}],"doc":{"description":"OCI-Lob::flush() actually writes data to the server.","type":"bool"}},{"kind":32,"name":"erase","modifiers":0,"children":[{"kind":128,"name":"$offset","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$length","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Erases a specified portion of the internal LOB data starting at a specified offset. If called without parameters, it erases all LOB data.","type":"int"}}],"doc":{"description":"OCI8 LOB functionality for large binary (BLOB) and character (CLOB) objects."}},{"kind":1,"name":"SplHeap","modifiers":16,"associated":[{"kind":2,"name":"Iterator"},{"kind":2,"name":"Countable"}],"children":[{"kind":32,"name":"compare","modifiers":2,"children":[{"kind":128,"name":"$value1","modifiers":0,"doc":{"description":"The value of the first node being compared.","type":"mixed"}},{"kind":128,"name":"$value2","modifiers":0,"doc":{"description":"The value of the second node being compared.","type":"mixed"}}],"doc":{"description":"Compare value1 with value2.","type":"int"}},{"kind":32,"name":"top","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"recoverFromCorruption","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"extract","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"This rewinds the iterator to the beginning. This is a no-op for heaps as the iterator is virtual and in fact never moves from the top of the heap.","type":"void"}},{"kind":32,"name":"insert","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to insert.","type":"mixed"}}],"doc":{"description":"Insert value in the heap.","type":"void"}},{"kind":32,"name":"isEmpty","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Checks if the heap contains any more nodes.","type":"bool"}},{"kind":32,"name":"count","modifiers":1,"description":"","children":[],"doc":{"type":"int"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Get the current datastructure node.","type":"mixed"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Move to the next node. This will delete the top node of the heap.","type":"void"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"This function returns the current node index","type":"mixed"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"This constructs a new empty heap.","type":"public"}}],"doc":{"description":"The SplHeap class provides the main functionalities of a Heap."}},{"kind":1,"name":"SoapParam","modifiers":0,"associated":[],"children":[{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$name","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"This function is an alias of: SoapParam::SoapParam()","type":"SoapParam"}},{"kind":32,"name":"SoapParam","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to pass or return. This parameter can be passed directly as PHP value, but in this case it will be named as paramN and the SOAP service may not understand it.","type":"mixed"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The parameter name.","type":"string"}}],"doc":{"description":"Constructs a new SoapParam object.","type":"void"}}],"doc":{"description":"Represents parameter to a SOAP call."}},{"kind":1,"name":"MultipleIterator","modifiers":0,"associated":[{"kind":2,"name":"Iterator"}],"children":[{"kind":1024,"name":"MIT_NEED_ANY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"MIT_NEED_ALL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"MIT_KEYS_NUMERIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"MIT_KEYS_ASSOC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"setFlags","modifiers":1,"children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The flags to set, according to the Flag Constants","type":"int"}}],"doc":{"description":"Sets flags.","type":"void"}},{"kind":32,"name":"attachIterator","modifiers":1,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The new iterator to attach.","type":"Iterator"}},{"kind":128,"name":"$infos","modifiers":0,"doc":{"description":"The associative information for the Iterator, which must be an integer, a string, or NULL.","type":"string"}}],"doc":{"description":"Attaches iterator information.","type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$flags","modifiers":0,"value":"MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC","doc":{"description":"The flags to set, according to the Flag Constants. MultipleIterator::MIT_NEED_ALL or MultipleIterator::MIT_NEED_ANY MultipleIterator::MIT_KEYS_NUMERIC or MultipleIterator::MIT_KEYS_ASSOC Defaults to MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC.","type":"int"}}],"doc":{"description":"Construct a new MultipleIterator.","type":"public"}},{"kind":32,"name":"containsIterator","modifiers":1,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator to check.","type":"Iterator"}}],"doc":{"description":"Checks if an iterator is attached or not.","type":"bool"}},{"kind":32,"name":"detachIterator","modifiers":1,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator to detach.","type":"Iterator"}}],"doc":{"description":"Detaches an iterator.","type":"void"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Moves all attached iterator instances forward.","type":"void"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Get the registered iterator instances current() result.","type":"array"}},{"kind":32,"name":"countIterators","modifiers":1,"children":[],"doc":{"description":"Gets the number of attached iterator instances.","type":"int"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewinds all attached iterator instances.","type":"void"}},{"kind":32,"name":"getFlags","modifiers":1,"children":[],"doc":{"description":"Gets information about the flags.","type":"int"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Get the registered iterator instances key() result.","type":"array"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Checks the validity of sub iterators.","type":"bool"}}],"doc":{"description":"An Iterator that sequentially iterates over all attached iterators"}},{"kind":8,"name":"CASE_LOWER","doc":{"description":"CASE_LOWER is used with array_change_key_case() and is used to convert array keys to lower case. This is also the default case for array_change_key_case()."}},{"kind":8,"name":"CASE_UPPER","doc":{"description":"CASE_UPPER is used with array_change_key_case() and is used to convert array keys to upper case."}},{"kind":8,"name":"SORT_ASC","doc":{"description":"SORT_ASC is used with array_multisort() to sort in ascending order."}},{"kind":8,"name":"SORT_DESC","doc":{"description":"SORT_DESC is used with array_multisort() to sort in descending order."}},{"kind":8,"name":"SORT_REGULAR","doc":{"description":"SORT_REGULAR is used to compare items normally."}},{"kind":8,"name":"SORT_NUMERIC","doc":{"description":"SORT_NUMERIC is used to compare items numerically."}},{"kind":8,"name":"SORT_STRING","doc":{"description":"SORT_STRING is used to compare items as strings."}},{"kind":8,"name":"SORT_LOCALE_STRING","doc":{"description":"SORT_LOCALE_STRING is used to compare items as strings, based on the current locale. Added in PHP 5.0.2."}},{"kind":8,"name":"SORT_NATURAL","doc":{"description":"SORT_NATURAL is used to compare items as strings using \"natural ordering\" like natsort(). Added in PHP 5.4.0."}},{"kind":8,"name":"SORT_FLAG_CASE","doc":{"description":"SORT_FLAG_CASE can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively. Added in PHP 5.4.0."}},{"kind":8,"name":"ARRAY_FILTER_USE_KEY","doc":{"description":"ARRAY_FILTER_USE_KEY is used with array_filter() to pass each key as the first argument to the given callback function. Added in PHP 5.6.0."}},{"kind":8,"name":"ARRAY_FILTER_USE_BOTH","doc":{"description":"ARRAY_FILTER_USE_BOTH is used with array_filter() to pass both value and key to the given callback function. Added in PHP 5.6.0."}},{"kind":8,"name":"COUNT_NORMAL","description":""},{"kind":8,"name":"COUNT_RECURSIVE","description":""},{"kind":8,"name":"EXTR_OVERWRITE","description":""},{"kind":8,"name":"EXTR_SKIP","description":""},{"kind":8,"name":"EXTR_PREFIX_SAME","description":""},{"kind":8,"name":"EXTR_PREFIX_ALL","description":""},{"kind":8,"name":"EXTR_PREFIX_INVALID","description":""},{"kind":8,"name":"EXTR_PREFIX_IF_EXISTS","description":""},{"kind":8,"name":"EXTR_IF_EXISTS","description":""},{"kind":8,"name":"EXTR_REFS","description":""},{"kind":8,"name":"GMP_ROUND_ZERO","description":""},{"kind":8,"name":"GMP_ROUND_PLUSINF","description":""},{"kind":8,"name":"GMP_ROUND_MINUSINF","description":""},{"kind":8,"name":"GMP_MSW_FIRST","description":""},{"kind":8,"name":"GMP_LSW_FIRST","description":""},{"kind":8,"name":"GMP_LITTLE_ENDIAN","description":""},{"kind":8,"name":"GMP_BIG_ENDIAN","description":""},{"kind":8,"name":"GMP_NATIVE_ENDIAN","description":""},{"kind":8,"name":"GMP_VERSION","doc":{"description":"The GMP library version"}},{"kind":1,"name":"Closure","modifiers":0,"associated":[],"children":[{"kind":32,"name":"bind","modifiers":32,"children":[{"kind":128,"name":"$closure","modifiers":0,"doc":{"description":"The anonymous functions to bind.","type":"Closure"}},{"kind":128,"name":"$newthis","modifiers":0,"doc":{"description":"The object to which the given anonymous function should be bound, or NULL for the closure to be unbound.","type":"object"}},{"kind":128,"name":"$newscope","modifiers":0,"value":"\"static\"","doc":{"description":"The class scope to which associate the closure is to be associated, or 'static' to keep the current one. If an object is given, the type of the object will be used instead. This determines the visibility of protected and private methods of the bound object. It is not allowed to pass (an object of) an internal class as this parameter.","type":"mixed"}}],"doc":{"description":"This method is a static version of Closure::bindTo(). See the documentation of that method for more information.","type":"Closure"}},{"kind":32,"name":"fromCallable","modifiers":32,"children":[{"kind":128,"name":"$callable","modifiers":0,"doc":{"description":"The callable to convert.","type":"callable"}}],"doc":{"description":"Create and return a new anonymous function from given callable using the current scope. This method checks if the callable is callable in the current scope and throws a TypeError if it is not.","type":"Closure"}},{"kind":32,"name":"call","modifiers":1,"children":[{"kind":128,"name":"$newthis","modifiers":0,"doc":{"description":"The object to bind the closure to for the duration of the call.","type":"object"}}],"doc":{"description":"Temporarily binds the closure to newthis, and calls it with any given parameters.","type":"mixed"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"This method exists only to disallow instantiation of the Closure class. Objects of this class are created in the fashion described on the anonymous functions page.","type":"private"}},{"kind":32,"name":"bindTo","modifiers":1,"children":[{"kind":128,"name":"$newthis","modifiers":0,"doc":{"description":"The object to which the given anonymous function should be bound, or NULL for the closure to be unbound.","type":"object"}},{"kind":128,"name":"$newscope","modifiers":0,"value":"\"static\"","doc":{"description":"The class scope to which associate the closure is to be associated, or 'static' to keep the current one. If an object is given, the type of the object will be used instead. This determines the visibility of protected and private methods of the bound object. It is not allowed to pass (an object of) an internal class as this parameter.","type":"mixed"}}],"doc":{"description":"Create and return a new anonymous function with the same body and bound variables as this one, but possibly with a different bound object and a new class scope.","type":"Closure"}}],"doc":{"description":"Class used to represent anonymous functions."}},{"kind":1,"name":"IntlChar","modifiers":0,"associated":[],"children":[{"kind":1024,"name":"UNICODE_VERSION","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":1024,"name":"CODEPOINT_MIN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CODEPOINT_MAX","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"NO_NUMERIC_VALUE","modifiers":1,"description":"","doc":{"type":"float"}},{"kind":1024,"name":"PROPERTY_ALPHABETIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_BINARY_START","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_ASCII_HEX_DIGIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_BIDI_CONTROL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_BIDI_MIRRORED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_DASH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_DEFAULT_IGNORABLE_CODE_POINT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_DEPRECATED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_DIACRITIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_EXTENDER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_FULL_COMPOSITION_EXCLUSION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_GRAPHEME_BASE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_GRAPHEME_EXTEND","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_GRAPHEME_LINK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_HEX_DIGIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_HYPHEN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_ID_CONTINUE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_ID_START","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_IDEOGRAPHIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_IDS_BINARY_OPERATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_IDS_TRINARY_OPERATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_JOIN_CONTROL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_LOGICAL_ORDER_EXCEPTION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_LOWERCASE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_MATH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NONCHARACTER_CODE_POINT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_QUOTATION_MARK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_RADICAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_SOFT_DOTTED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_TERMINAL_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_UNIFIED_IDEOGRAPH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_UPPERCASE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_WHITE_SPACE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_XID_CONTINUE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_XID_START","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_CASE_SENSITIVE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_S_TERM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_VARIATION_SELECTOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NFD_INERT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NFKD_INERT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NFC_INERT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NFKC_INERT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_SEGMENT_STARTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_PATTERN_SYNTAX","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_PATTERN_WHITE_SPACE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_POSIX_ALNUM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_POSIX_BLANK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_POSIX_GRAPH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_POSIX_PRINT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_POSIX_XDIGIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_CASED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_CASE_IGNORABLE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_CHANGES_WHEN_LOWERCASED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_CHANGES_WHEN_UPPERCASED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_CHANGES_WHEN_TITLECASED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_CHANGES_WHEN_CASEFOLDED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_CHANGES_WHEN_CASEMAPPED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_CHANGES_WHEN_NFKC_CASEFOLDED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_BINARY_LIMIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_BIDI_CLASS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_INT_START","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_BLOCK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_CANONICAL_COMBINING_CLASS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_DECOMPOSITION_TYPE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_EAST_ASIAN_WIDTH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_GENERAL_CATEGORY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_JOINING_GROUP","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_JOINING_TYPE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_LINE_BREAK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NUMERIC_TYPE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_SCRIPT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_HANGUL_SYLLABLE_TYPE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NFD_QUICK_CHECK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NFKD_QUICK_CHECK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NFC_QUICK_CHECK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NFKC_QUICK_CHECK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_LEAD_CANONICAL_COMBINING_CLASS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_TRAIL_CANONICAL_COMBINING_CLASS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_GRAPHEME_CLUSTER_BREAK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_SENTENCE_BREAK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_WORD_BREAK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_BIDI_PAIRED_BRACKET_TYPE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_INT_LIMIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_GENERAL_CATEGORY_MASK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_MASK_START","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_MASK_LIMIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NUMERIC_VALUE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_DOUBLE_START","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_DOUBLE_LIMIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_AGE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_STRING_START","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_BIDI_MIRRORING_GLYPH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_CASE_FOLDING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_ISO_COMMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_LOWERCASE_MAPPING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NAME","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_SIMPLE_CASE_FOLDING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_SIMPLE_LOWERCASE_MAPPING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_SIMPLE_TITLECASE_MAPPING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_SIMPLE_UPPERCASE_MAPPING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_TITLECASE_MAPPING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_UNICODE_1_NAME","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_UPPERCASE_MAPPING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_BIDI_PAIRED_BRACKET","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_STRING_LIMIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_SCRIPT_EXTENSIONS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_OTHER_PROPERTY_START","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_OTHER_PROPERTY_LIMIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_INVALID_CODE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_UNASSIGNED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_GENERAL_OTHER_TYPES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_UPPERCASE_LETTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_LOWERCASE_LETTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_TITLECASE_LETTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_MODIFIER_LETTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_OTHER_LETTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_NON_SPACING_MARK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_ENCLOSING_MARK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_COMBINING_SPACING_MARK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_DECIMAL_DIGIT_NUMBER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_LETTER_NUMBER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_OTHER_NUMBER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_SPACE_SEPARATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_LINE_SEPARATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_PARAGRAPH_SEPARATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_CONTROL_CHAR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_FORMAT_CHAR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_PRIVATE_USE_CHAR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_SURROGATE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_DASH_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_START_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_END_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_CONNECTOR_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_OTHER_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_MATH_SYMBOL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_CURRENCY_SYMBOL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_MODIFIER_SYMBOL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_OTHER_SYMBOL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_INITIAL_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_FINAL_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_CATEGORY_CHAR_CATEGORY_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_LEFT_TO_RIGHT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_RIGHT_TO_LEFT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_EUROPEAN_NUMBER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_EUROPEAN_NUMBER_SEPARATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_EUROPEAN_NUMBER_TERMINATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_ARABIC_NUMBER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_COMMON_NUMBER_SEPARATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_BLOCK_SEPARATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_SEGMENT_SEPARATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_WHITE_SPACE_NEUTRAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_OTHER_NEUTRAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_LEFT_TO_RIGHT_EMBEDDING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_LEFT_TO_RIGHT_OVERRIDE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_RIGHT_TO_LEFT_ARABIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_RIGHT_TO_LEFT_EMBEDDING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_RIGHT_TO_LEFT_OVERRIDE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_POP_DIRECTIONAL_FORMAT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_DIR_NON_SPACING_MARK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_BOUNDARY_NEUTRAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_FIRST_STRONG_ISOLATE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_LEFT_TO_RIGHT_ISOLATE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_RIGHT_TO_LEFT_ISOLATE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_POP_DIRECTIONAL_ISOLATE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_DIRECTION_CHAR_DIRECTION_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_NO_BLOCK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BASIC_LATIN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LATIN_1_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LATIN_EXTENDED_A","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LATIN_EXTENDED_B","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_IPA_EXTENSIONS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SPACING_MODIFIER_LETTERS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_COMBINING_DIACRITICAL_MARKS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_GREEK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CYRILLIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ARMENIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_HEBREW","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ARABIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SYRIAC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_THAANA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_DEVANAGARI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BENGALI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_GURMUKHI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_GUJARATI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ORIYA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TAMIL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TELUGU","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_KANNADA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MALAYALAM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SINHALA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_THAI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LAO","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TIBETAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MYANMAR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_GEORGIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_HANGUL_JAMO","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ETHIOPIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CHEROKEE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_OGHAM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_RUNIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_KHMER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MONGOLIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LATIN_EXTENDED_ADDITIONAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_GREEK_EXTENDED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_GENERAL_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SUPERSCRIPTS_AND_SUBSCRIPTS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CURRENCY_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_COMBINING_MARKS_FOR_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LETTERLIKE_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_NUMBER_FORMS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ARROWS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MATHEMATICAL_OPERATORS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MISCELLANEOUS_TECHNICAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CONTROL_PICTURES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_OPTICAL_CHARACTER_RECOGNITION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ENCLOSED_ALPHANUMERICS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BOX_DRAWING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BLOCK_ELEMENTS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_GEOMETRIC_SHAPES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MISCELLANEOUS_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_DINGBATS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BRAILLE_PATTERNS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_RADICALS_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_KANGXI_RADICALS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_IDEOGRAPHIC_DESCRIPTION_CHARACTERS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_SYMBOLS_AND_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_HIRAGANA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_KATAKANA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BOPOMOFO","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_HANGUL_COMPATIBILITY_JAMO","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_KANBUN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BOPOMOFO_EXTENDED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ENCLOSED_CJK_LETTERS_AND_MONTHS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_COMPATIBILITY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_UNIFIED_IDEOGRAPHS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_YI_SYLLABLES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_YI_RADICALS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_HANGUL_SYLLABLES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_HIGH_SURROGATES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_HIGH_PRIVATE_USE_SURROGATES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LOW_SURROGATES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_PRIVATE_USE_AREA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_PRIVATE_USE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_COMPATIBILITY_IDEOGRAPHS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ALPHABETIC_PRESENTATION_FORMS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ARABIC_PRESENTATION_FORMS_A","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_COMBINING_HALF_MARKS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_COMPATIBILITY_FORMS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SMALL_FORM_VARIANTS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ARABIC_PRESENTATION_FORMS_B","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SPECIALS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_HALFWIDTH_AND_FULLWIDTH_FORMS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_OLD_ITALIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_GOTHIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_DESERET","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BYZANTINE_MUSICAL_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MUSICAL_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MATHEMATICAL_ALPHANUMERIC_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TAGS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CYRILLIC_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CYRILLIC_SUPPLEMENTARY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TAGALOG","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_HANUNOO","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BUHID","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TAGBANWA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SUPPLEMENTAL_ARROWS_A","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SUPPLEMENTAL_ARROWS_B","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SUPPLEMENTAL_MATHEMATICAL_OPERATORS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_KATAKANA_PHONETIC_EXTENSIONS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_VARIATION_SELECTORS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SUPPLEMENTARY_PRIVATE_USE_AREA_A","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SUPPLEMENTARY_PRIVATE_USE_AREA_B","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LIMBU","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TAI_LE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_KHMER_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_PHONETIC_EXTENSIONS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MISCELLANEOUS_SYMBOLS_AND_ARROWS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_YIJING_HEXAGRAM_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LINEAR_B_SYLLABARY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LINEAR_B_IDEOGRAMS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_AEGEAN_NUMBERS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_UGARITIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SHAVIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_OSMANYA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CYPRIOT_SYLLABARY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TAI_XUAN_JING_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_VARIATION_SELECTORS_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ANCIENT_GREEK_MUSICAL_NOTATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ANCIENT_GREEK_NUMBERS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ARABIC_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BUGINESE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_STROKES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_COPTIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ETHIOPIC_EXTENDED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ETHIOPIC_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_GEORGIAN_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_GLAGOLITIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_KHAROSHTHI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MODIFIER_TONE_LETTERS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_NEW_TAI_LUE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_OLD_PERSIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_PHONETIC_EXTENSIONS_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SUPPLEMENTAL_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SYLOTI_NAGRI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TIFINAGH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_VERTICAL_FORMS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_NKO","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BALINESE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LATIN_EXTENDED_C","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LATIN_EXTENDED_D","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_PHAGS_PA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_PHOENICIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CUNEIFORM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CUNEIFORM_NUMBERS_AND_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_COUNTING_ROD_NUMERALS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SUNDANESE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LEPCHA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_OL_CHIKI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CYRILLIC_EXTENDED_A","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_VAI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CYRILLIC_EXTENDED_B","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SAURASHTRA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_KAYAH_LI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_REJANG","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CHAM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ANCIENT_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_PHAISTOS_DISC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LYCIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CARIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LYDIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MAHJONG_TILES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_DOMINO_TILES","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SAMARITAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TAI_THAM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_VEDIC_EXTENSIONS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_LISU","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BAMUM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_COMMON_INDIC_NUMBER_FORMS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_DEVANAGARI_EXTENDED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_HANGUL_JAMO_EXTENDED_A","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_JAVANESE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MYANMAR_EXTENDED_A","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TAI_VIET","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MEETEI_MAYEK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_HANGUL_JAMO_EXTENDED_B","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_IMPERIAL_ARAMAIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_OLD_SOUTH_ARABIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_AVESTAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_INSCRIPTIONAL_PARTHIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_INSCRIPTIONAL_PAHLAVI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_OLD_TURKIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_RUMI_NUMERAL_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_KAITHI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_EGYPTIAN_HIEROGLYPHS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ENCLOSED_ALPHANUMERIC_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MANDAIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BATAK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ETHIOPIC_EXTENDED_A","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BRAHMI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_BAMUM_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_KANA_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_PLAYING_CARDS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_EMOTICONS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TRANSPORT_AND_MAP_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ALCHEMICAL_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ARABIC_EXTENDED_A","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_CHAKMA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MEETEI_MAYEK_EXTENSIONS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MEROITIC_CURSIVE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MEROITIC_HIEROGLYPHS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_MIAO","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SHARADA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SORA_SOMPENG","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_SUNDANESE_SUPPLEMENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_TAKRI","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BLOCK_CODE_INVALID_CODE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BPT_NONE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BPT_OPEN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BPT_CLOSE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BPT_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"EA_NEUTRAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"EA_AMBIGUOUS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"EA_HALFWIDTH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"EA_FULLWIDTH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"EA_NARROW","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"EA_WIDE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"EA_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UNICODE_CHAR_NAME","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UNICODE_10_CHAR_NAME","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"EXTENDED_CHAR_NAME","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_NAME_ALIAS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_NAME_CHOICE_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SHORT_PROPERTY_NAME","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LONG_PROPERTY_NAME","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PROPERTY_NAME_CHOICE_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_NONE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_CANONICAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_COMPAT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_CIRCLE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_FINAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_FONT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_FRACTION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_INITIAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_ISOLATED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_MEDIAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_NARROW","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_NOBREAK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_SMALL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_SQUARE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_SUB","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_SUPER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_VERTICAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_WIDE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DT_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JT_NON_JOINING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JT_JOIN_CAUSING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JT_DUAL_JOINING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JT_LEFT_JOINING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JT_RIGHT_JOINING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JT_TRANSPARENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JT_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_NO_JOINING_GROUP","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_AIN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_ALAPH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_ALEF","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_BEH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_BETH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_DAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_DALATH_RISH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_E","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_FEH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_FINAL_SEMKATH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_GAF","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_GAMAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_HAH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_TEH_MARBUTA_GOAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_HAMZA_ON_HEH_GOAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_HE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_HEH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_HEH_GOAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_HETH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_KAF","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_KAPH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_KNOTTED_HEH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_LAM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_LAMADH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_MEEM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_MIM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_NOON","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_NUN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_PE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_QAF","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_QAPH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_REH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_REVERSED_PE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_SAD","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_SADHE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_SEEN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_SEMKATH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_SHIN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_SWASH_KAF","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_SYRIAC_WAW","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_TAH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_TAW","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_TEH_MARBUTA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_TETH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_WAW","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_YEH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_YEH_BARREE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_YEH_WITH_TAIL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_YUDH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_YUDH_HE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_ZAIN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_FE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_KHAPH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_ZHAIN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_BURUSHASKI_YEH_BARREE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_FARSI_YEH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_NYA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_ROHINGYA_YEH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"JG_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_OTHER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_CONTROL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_CR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_EXTEND","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_L","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_LF","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_LV","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_LVT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_T","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_V","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_SPACING_MARK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_PREPEND","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_REGIONAL_INDICATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"GCB_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_OTHER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_ALETTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_FORMAT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_KATAKANA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_MIDLETTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_MIDNUM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_NUMERIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_EXTENDNUMLET","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_CR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_EXTEND","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_LF","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_MIDNUMLET","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_NEWLINE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_REGIONAL_INDICATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_HEBREW_LETTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_SINGLE_QUOTE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_DOUBLE_QUOTE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WB_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_OTHER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_ATERM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_CLOSE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_FORMAT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_LOWER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_NUMERIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_OLETTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_SEP","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_SP","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_STERM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_UPPER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_CR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_EXTEND","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_LF","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_SCONTINUE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SB_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_UNKNOWN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_AMBIGUOUS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_ALPHABETIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_BREAK_BOTH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_BREAK_AFTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_BREAK_BEFORE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_MANDATORY_BREAK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_CONTINGENT_BREAK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_CLOSE_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_COMBINING_MARK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_CARRIAGE_RETURN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_EXCLAMATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_GLUE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_HYPHEN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_IDEOGRAPHIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_INSEPARABLE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_INSEPERABLE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_INFIX_NUMERIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_LINE_FEED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_NONSTARTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_NUMERIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_OPEN_PUNCTUATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_POSTFIX_NUMERIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_PREFIX_NUMERIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_QUOTATION","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_COMPLEX_CONTEXT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_SURROGATE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_SPACE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_BREAK_SYMBOLS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_ZWSPACE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_NEXT_LINE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_WORD_JOINER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_H2","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_H3","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_JL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_JT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_JV","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_CLOSE_PARENTHESIS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_CONDITIONAL_JAPANESE_STARTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_HEBREW_LETTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_REGIONAL_INDICATOR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LB_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"NT_NONE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"NT_DECIMAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"NT_DIGIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"NT_NUMERIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"NT_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"HST_NOT_APPLICABLE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"HST_LEADING_JAMO","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"HST_VOWEL_JAMO","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"HST_TRAILING_JAMO","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"HST_LV_SYLLABLE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"HST_LVT_SYLLABLE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"HST_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"isWhitespace","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines if the specified code point is a whitespace character according to ICU.","type":"bool"}},{"kind":32,"name":"isUAlphabetic","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Check if a code point has the Alphabetic Unicode property.","type":"bool"}},{"kind":32,"name":"islower","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point has the general category \"Ll\" (lowercase letter).","type":"bool"}},{"kind":32,"name":"getCombiningClass","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Returns the combining class of the code point.","type":"int"}},{"kind":32,"name":"charAge","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Gets the \"age\" of the code point.","type":"array"}},{"kind":32,"name":"isUUppercase","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Check if a code point has the Uppercase Unicode property.","type":"bool"}},{"kind":32,"name":"isUWhiteSpace","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Check if a code point has the White_Space Unicode property.","type":"bool"}},{"kind":32,"name":"isprint","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is a printable character.","type":"bool"}},{"kind":32,"name":"tolower","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"The given character is mapped to its lowercase equivalent. If the character has no lowercase equivalent, the original character itself is returned.","type":"mixed"}},{"kind":32,"name":"isspace","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines if the specified character is a space character or not.","type":"bool"}},{"kind":32,"name":"isalnum","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is an alphanumeric character (letter or digit). TRUE for characters with general categories \"L\" (letters) and \"Nd\" (decimal digit numbers).","type":"bool"}},{"kind":32,"name":"isbase","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is a base character. TRUE for general categories \"L\" (letters), \"N\" (numbers), \"Mc\" (spacing combining marks), and \"Me\" (enclosing marks).","type":"bool"}},{"kind":32,"name":"isIDPart","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines if the specified character is permissible in an identifier.","type":"bool"}},{"kind":32,"name":"isdefined","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is \"defined\", which usually means that it is assigned a character.","type":"bool"}},{"kind":32,"name":"charMirror","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Maps the specified character to a \"mirror-image\" character.","type":"mixed"}},{"kind":32,"name":"getPropertyEnum","modifiers":32,"children":[{"kind":128,"name":"$alias","modifiers":0,"doc":{"description":"The property name to be matched. The name is compared using \"loose matching\" as described in PropertyAliases.txt.","type":"string"}}],"doc":{"description":"Returns the property constant value for a given property name, as specified in the Unicode database file PropertyAliases.txt. Short, long, and any other variants are recognized.","type":"int"}},{"kind":32,"name":"totitle","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"The given character is mapped to its titlecase equivalent. If the character has no titlecase equivalent, the original character itself is returned.","type":"mixed"}},{"kind":32,"name":"isIDStart","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines if the specified character is permissible as the first character in an identifier according to Unicode (The Unicode Standard, Version 3.0, chapter 5.16 Identifiers).","type":"bool"}},{"kind":32,"name":"foldCase","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}},{"kind":128,"name":"$options","modifiers":0,"value":"IntlChar::FOLD_CASE_DEFAULT","doc":{"description":"Either IntlChar::FOLD_CASE_DEFAULT (default) or IntlChar::FOLD_CASE_EXCLUDE_SPECIAL_I.","type":"int"}}],"doc":{"description":"The given character is mapped to its case folding equivalent; if the character has no case folding equivalent, the character itself is returned.","type":"mixed"}},{"kind":32,"name":"getBidiPairedBracket","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Maps the specified character to its paired bracket character.","type":"mixed"}},{"kind":32,"name":"isJavaIDStart","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines if the specified character is permissible as the start of a Java identifier.","type":"bool"}},{"kind":32,"name":"charFromName","modifiers":32,"children":[{"kind":128,"name":"$characterName","modifiers":0,"doc":{"description":"Full name of the Unicode character.","type":"string"}},{"kind":128,"name":"$nameChoice","modifiers":0,"value":"IntlChar::UNICODE_CHAR_NAME","doc":{"description":"Which set of names to use for the lookup. Can be any of these constants: IntlChar::UNICODE_CHAR_NAME (default) IntlChar::UNICODE_10_CHAR_NAME IntlChar::EXTENDED_CHAR_NAME IntlChar::CHAR_NAME_ALIAS IntlChar::CHAR_NAME_CHOICE_COUNT","type":"int"}}],"doc":{"description":"Finds a Unicode character by its name and returns its code point value.","type":"int"}},{"kind":32,"name":"isxdigit","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is a hexadecimal digit.","type":"bool"}},{"kind":32,"name":"getUnicodeVersion","modifiers":32,"children":[],"doc":{"description":"Gets the Unicode version information.","type":"array"}},{"kind":32,"name":"getIntPropertyMinValue","modifiers":32,"children":[{"kind":128,"name":"$property","modifiers":0,"doc":{"description":"The Unicode property to lookup (see the IntlChar::PROPERTY_* constants).","type":"int"}}],"doc":{"description":"Gets the minimum value for an enumerated/integer/binary Unicode property.","type":"int"}},{"kind":32,"name":"toupper","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"The given character is mapped to its uppercase equivalent. If the character has no uppercase equivalent, the character itself is returned.","type":"mixed"}},{"kind":32,"name":"isupper","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point has the general category \"Lu\" (uppercase letter).","type":"bool"}},{"kind":32,"name":"getIntPropertyValue","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}},{"kind":128,"name":"$property","modifiers":0,"doc":{"description":"The Unicode property to lookup (see the IntlChar::PROPERTY_* constants).","type":"int"}}],"doc":{"description":"Gets the property value for an enumerated or integer Unicode property for a code point. Also returns binary and mask property values.","type":"int"}},{"kind":32,"name":"isalpha","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is a letter character. TRUE for general categories \"L\" (letters).","type":"bool"}},{"kind":32,"name":"isISOControl","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is an ISO control code.","type":"bool"}},{"kind":32,"name":"getPropertyValueEnum","modifiers":32,"children":[{"kind":128,"name":"$property","modifiers":0,"doc":{"description":"The Unicode property to lookup (see the IntlChar::PROPERTY_* constants). If out of range, or this method doesn't work with the given value, IntlChar::PROPERTY_INVALID_CODE is returned.","type":"int"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The value name to be matched. The name is compared using \"loose matching\" as described in PropertyValueAliases.txt.","type":"string"}}],"doc":{"description":"Returns the property value integer for a given value name, as specified in the Unicode database file PropertyValueAliases.txt. Short, long, and any other variants are recognized.","type":"int"}},{"kind":32,"name":"charDirection","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Returns the bidirectional category value for the code point, which is used in the » Unicode bidirectional algorithm (UAX #9).","type":"int"}},{"kind":32,"name":"isIDIgnorable","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines if the specified character should be regarded as an ignorable character in an identifier.","type":"bool"}},{"kind":32,"name":"enumCharTypes","modifiers":32,"children":[{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The function that is to be called for each contiguous range of code points with the same general category. The following three arguments will be passed into it: integer $start - The starting code point of the range integer $end - The ending code point of the range integer $name - The category type (one of the IntlChar::CHAR_CATEGORY_* constants)","type":"callable"}}],"doc":{"description":"Enumerates efficiently all code points with their Unicode general categories. This is useful for building data structures, for enumerating all assigned code points, etc.","type":"void"}},{"kind":32,"name":"isJavaIDPart","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines if the specified character is permissible in a Java identifier.","type":"bool"}},{"kind":32,"name":"hasBinaryProperty","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}},{"kind":128,"name":"$property","modifiers":0,"doc":{"description":"The Unicode property to lookup (see the IntlChar::PROPERTY_* constants).","type":"int"}}],"doc":{"description":"Checks a binary Unicode property for a code point.","type":"bool"}},{"kind":32,"name":"charName","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}},{"kind":128,"name":"$nameChoice","modifiers":0,"value":"IntlChar::UNICODE_CHAR_NAME","doc":{"description":"Which set of names to use for the lookup. Can be any of these constants: IntlChar::UNICODE_CHAR_NAME (default) IntlChar::UNICODE_10_CHAR_NAME IntlChar::EXTENDED_CHAR_NAME IntlChar::CHAR_NAME_ALIAS IntlChar::CHAR_NAME_CHOICE_COUNT","type":"int"}}],"doc":{"description":"Retrieves the name of a Unicode character.","type":"string"}},{"kind":32,"name":"getBlockCode","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Returns the Unicode allocation block that contains the character.","type":"int"}},{"kind":32,"name":"isblank","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is a \"blank\" or \"horizontal space\", a character that visibly separates words on a line.","type":"bool"}},{"kind":32,"name":"isJavaSpaceChar","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determine if the specified code point is a space character according to Java.","type":"bool"}},{"kind":32,"name":"isMirrored","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the code point has the Bidi_Mirrored property.","type":"bool"}},{"kind":32,"name":"charType","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Returns the general category value for the code point.","type":"int"}},{"kind":32,"name":"istitle","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is a titlecase letter.","type":"bool"}},{"kind":32,"name":"enumCharNames","modifiers":32,"children":[{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"The first code point in the enumeration range.","type":"mixed"}},{"kind":128,"name":"$limit","modifiers":0,"doc":{"description":"One more than the last code point in the enumeration range (the first one after the range).","type":"mixed"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The function that is to be called for each character name. The following three arguments will be passed into it: integer $codepoint - The numeric code point value integer $nameChoice - The same value as the nameChoice parameter below string $name - The name of the character","type":"callable"}},{"kind":128,"name":"$nameChoice","modifiers":0,"value":"IntlChar::UNICODE_CHAR_NAME","doc":{"description":"Selector for which kind of names to enumerate. Can be any of these constants: IntlChar::UNICODE_CHAR_NAME (default) IntlChar::UNICODE_10_CHAR_NAME IntlChar::EXTENDED_CHAR_NAME IntlChar::CHAR_NAME_ALIAS IntlChar::CHAR_NAME_CHOICE_COUNT","type":"int"}}],"doc":{"description":"Enumerate all assigned Unicode characters between the start and limit code points (start inclusive, limit exclusive) and call a function for each, passing the code point value and the character name.","type":"void"}},{"kind":32,"name":"charDigitValue","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Returns the decimal digit value of a decimal digit character.","type":"int"}},{"kind":32,"name":"chr","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Returns a string containing the character specified by the Unicode code point value.","type":"string"}},{"kind":32,"name":"ord","modifiers":32,"children":[{"kind":128,"name":"$character","modifiers":0,"doc":{"description":"A Unicode character.","type":"mixed"}}],"doc":{"description":"Returns the Unicode code point value of the given character.","type":"int"}},{"kind":32,"name":"getPropertyName","modifiers":32,"children":[{"kind":128,"name":"$property","modifiers":0,"doc":{"description":"The Unicode property to lookup (see the IntlChar::PROPERTY_* constants). IntlChar::PROPERTY_INVALID_CODE should not be used. Also, if property is out of range, FALSE is returned.","type":"int"}},{"kind":128,"name":"$nameChoice","modifiers":0,"value":"IntlChar::LONG_PROPERTY_NAME","doc":{"description":"Selector for which name to get. If out of range, FALSE is returned. All properties have a long name. Most have a short name, but some do not. Unicode allows for additional names; if present these will be returned by adding 1, 2, etc. to IntlChar::LONG_PROPERTY_NAME.","type":"int"}}],"doc":{"description":"Returns the Unicode name for a given property, as given in the Unicode database file PropertyAliases.txt.","type":"string"}},{"kind":32,"name":"iscntrl","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is a control character.","type":"bool"}},{"kind":32,"name":"isgraph","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is a \"graphic\" character (printable, excluding spaces).","type":"bool"}},{"kind":32,"name":"getPropertyValueName","modifiers":32,"children":[{"kind":128,"name":"$property","modifiers":0,"doc":{"description":"The Unicode property to lookup (see the IntlChar::PROPERTY_* constants). If out of range, or this method doesn't work with the given value, FALSE is returned.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Selector for a value for the given property. If out of range, FALSE is returned. In general, valid values range from 0 up to some maximum. There are a couple exceptions: IntlChar::PROPERTY_BLOCK values begin at the non-zero value IntlChar::BLOCK_CODE_BASIC_LATIN IntlChar::PROPERTY_CANONICAL_COMBINING_CLASS values are not contiguous and range from 0..240.","type":"int"}},{"kind":128,"name":"$nameChoice","modifiers":0,"value":"IntlChar::LONG_PROPERTY_NAME","doc":{"description":"Selector for which name to get. If out of range, FALSE is returned. All values have a long name. Most have a short name, but some do not. Unicode allows for additional names; if present these will be returned by adding 1, 2, etc. to IntlChar::LONG_PROPERTY_NAME.","type":"int"}}],"doc":{"description":"Returns the Unicode name for a given property value, as given in the Unicode database file PropertyValueAliases.txt.","type":"string"}},{"kind":32,"name":"getFC_NFKC_Closure","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Gets the FC_NFKC_Closure property string for a character.","type":"string"}},{"kind":32,"name":"ispunct","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is a punctuation character.","type":"bool"}},{"kind":32,"name":"forDigit","modifiers":32,"children":[{"kind":128,"name":"$digit","modifiers":0,"doc":{"description":"The number to convert to a character.","type":"int"}},{"kind":128,"name":"$radix","modifiers":0,"value":"10","doc":{"description":"The radix (defaults to 10).","type":"int"}}],"doc":{"description":"Determines the character representation for a specific digit in the specified radix.","type":"int"}},{"kind":32,"name":"isULowercase","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Check if a code point has the Lowercase Unicode property.","type":"bool"}},{"kind":32,"name":"digit","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"string"}},{"kind":128,"name":"$radix","modifiers":0,"value":"10","doc":{"description":"The radix (defaults to 10).","type":"int"}}],"doc":{"description":"Returns the decimal digit value of the code point in the specified radix.","type":"int"}},{"kind":32,"name":"isdigit","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Determines whether the specified code point is a digit character.","type":"bool"}},{"kind":32,"name":"getIntPropertyMaxValue","modifiers":32,"children":[{"kind":128,"name":"$property","modifiers":0,"doc":{"description":"The Unicode property to lookup (see the IntlChar::PROPERTY_* constants).","type":"int"}}],"doc":{"description":"Gets the maximum value for an enumerated/integer/binary Unicode property.","type":"int"}},{"kind":32,"name":"getNumericValue","modifiers":32,"children":[{"kind":128,"name":"$codepoint","modifiers":0,"doc":{"description":"The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string (e.g. \"\\u{2603}\")","type":"mixed"}}],"doc":{"description":"Gets the numeric value for a Unicode code point as defined in the Unicode Character Database.","type":"float"}}],"doc":{"description":"IntlChar provides access to a number of utility methods that can be used to access information about Unicode characters."}},{"kind":2,"name":"SplSubject","modifiers":0,"associated":[],"children":[{"kind":32,"name":"attach","modifiers":1,"children":[{"kind":128,"name":"$observer","modifiers":0,"doc":{"description":"The SplObserver to attach.","type":"SplObserver"}}],"doc":{"description":"Attaches an SplObserver so that it can be notified of updates.","type":"void"}},{"kind":32,"name":"notify","modifiers":1,"children":[],"doc":{"description":"Notifies all attached observers.","type":"void"}},{"kind":32,"name":"detach","modifiers":1,"children":[{"kind":128,"name":"$observer","modifiers":0,"doc":{"description":"The SplObserver to detach.","type":"SplObserver"}}],"doc":{"description":"Detaches an observer from the subject to no longer notify it of updates.","type":"void"}}],"doc":{"description":"The SplSubject interface is used alongside SplObserver to implement the Observer Design Pattern."}},{"kind":1,"name":"FilesystemIterator","modifiers":0,"associated":[{"kind":1,"name":"DirectoryIterator"},{"kind":2,"name":"SeekableIterator"}],"children":[{"kind":1024,"name":"CURRENT_AS_PATHNAME","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CURRENT_AS_FILEINFO","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CURRENT_AS_SELF","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CURRENT_MODE_MASK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"KEY_AS_PATHNAME","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"KEY_AS_FILENAME","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FOLLOW_SYMLINKS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"KEY_MODE_MASK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"NEW_CURRENT_AND_KEY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SKIP_DOTS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UNIX_PATHS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The path of the filesystem item to be iterated over.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"FilesystemIterator::KEY_AS_PATHNAME","doc":{"description":"Flags may be provided which will affect the behavior of some methods. A list of the flags can found under FilesystemIterator predefined constants. They can also be set later with FilesystemIterator::setFlags()","type":"int"}}],"doc":{"description":"Constructs a new filesystem iterator from the path.","type":"public"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Move to the next file.","type":"void"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewinds the directory back to the start.","type":"void"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Get file information of the current element.","type":"mixed"}},{"kind":32,"name":"getFlags","modifiers":1,"children":[],"doc":{"description":"Gets the handling flags, as set in FilesystemIterator::__construct() or FilesystemIterator::setFlags().","type":"int"}},{"kind":32,"name":"key","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"setFlags","modifiers":1,"children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The handling flags to set. See the FilesystemIterator constants.","type":"int"}}],"doc":{"description":"Sets handling flags.","type":"void"}}],"doc":{"description":"The Filesystem iterator"}},{"kind":1,"name":"OCI-Collection","modifiers":0,"associated":[],"children":[{"kind":32,"name":"trim","modifiers":0,"children":[{"kind":128,"name":"$num","modifiers":0,"doc":{"description":"The number of elements to be trimmed.","type":"int"}}],"doc":{"description":"Trims num of elements from the end of the collection.","type":"bool"}},{"kind":32,"name":"assignElem","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The element index. First index is 0.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Can be a string or a number.","type":"mixed"}}],"doc":{"description":"Assigns a value to the element with index index.","type":"bool"}},{"kind":32,"name":"max","modifiers":0,"children":[],"doc":{"description":"Returns the maximum number of elements in the collection.","type":"int"}},{"kind":32,"name":"append","modifiers":0,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to be added to the collection. Can be a string or a number.","type":"mixed"}}],"doc":{"description":"Appends element to the end of the collection.","type":"bool"}},{"kind":32,"name":"getElem","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The element index. First index is 0.","type":"int"}}],"doc":{"description":"Returns element's value with the index index (0-based).","type":"mixed"}},{"kind":32,"name":"assign","modifiers":0,"children":[{"kind":128,"name":"$from","modifiers":0,"doc":{"description":"An instance of OCI-Collection.","type":"OCI-Collection"}}],"doc":{"description":"Assigns a value to the collection from another, previously created collection. Both collections must be created with oci_new_collection() prior to using them.","type":"bool"}},{"kind":32,"name":"free","modifiers":0,"children":[],"doc":{"description":"Frees the resources associated with the collection object.","type":"bool"}},{"kind":32,"name":"size","modifiers":0,"children":[],"doc":{"description":"Returns the size of the collection.","type":"int"}}],"doc":{"description":"OCI8 Collection functionality."}},{"kind":1,"name":"LogicException","modifiers":0,"associated":[{"kind":1,"name":"Exception"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception that represents error in the program logic. This kind of exception should lead directly to a fix in your code."}},{"kind":8,"name":"MB_OVERLOAD_MAIL","description":""},{"kind":8,"name":"MB_OVERLOAD_STRING","description":""},{"kind":8,"name":"MB_OVERLOAD_REGEX","description":""},{"kind":8,"name":"MB_CASE_UPPER","description":""},{"kind":8,"name":"MB_CASE_LOWER","description":""},{"kind":8,"name":"MB_CASE_TITLE","description":""},{"kind":1,"name":"SplMaxHeap","modifiers":0,"associated":[{"kind":1,"name":"SplHeap"},{"kind":2,"name":"Iterator"},{"kind":2,"name":"Countable"}],"children":[{"kind":32,"name":"compare","modifiers":2,"children":[{"kind":128,"name":"$value1","modifiers":0,"doc":{"description":"The value of the first node being compared.","type":"mixed"}},{"kind":128,"name":"$value2","modifiers":0,"doc":{"description":"The value of the second node being compared.","type":"mixed"}}],"doc":{"description":"Compare value1 with value2.","type":"int"}}],"doc":{"description":"The SplMaxHeap class provides the main functionalities of a heap, keeping the maximum on the top."}},{"kind":1,"name":"Phar","modifiers":0,"associated":[{"kind":1,"name":"RecursiveDirectoryIterator"},{"kind":2,"name":"Countable"},{"kind":2,"name":"ArrayAccess"}],"children":[{"kind":32,"name":"isValidPharFilename","modifiers":32,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The name or full path to a phar archive not yet created","type":"string"}},{"kind":128,"name":"$executable","modifiers":0,"value":"true","doc":{"description":"This parameter determines whether the filename should be treated as a phar executable archive, or a data non-executable archive","type":"bool"}}],"doc":{"description":"Returns whether the given filename is a valid phar filename that will be recognized as a phar archive by the phar extension. This can be used to test a name without having to instantiate a phar archive and catch the inevitable Exception that will be thrown if an invalid name is specified.","type":"bool"}},{"kind":32,"name":"unlinkArchive","modifiers":32,"children":[{"kind":128,"name":"$archive","modifiers":0,"doc":{"description":"The path on disk to the phar archive.","type":"string"}}],"doc":{"description":"Removes a phar archive from disk and memory.","type":"bool"}},{"kind":32,"name":"count","modifiers":1,"description":"","children":[],"doc":{"type":"int"}},{"kind":32,"name":"interceptFileFuncs","modifiers":32,"children":[],"doc":{"description":"instructs phar to intercept fopen(), readfile(), file_get_contents(), opendir(), and all of the stat-related functions. If any of these functions is called from within a phar archive with a relative path, the call is modified to access a file within the phar archive. Absolute paths are assumed to be attempts to load external files from the filesystem.","type":"void"}},{"kind":32,"name":"delMetadata","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"stopBuffering","modifiers":1,"children":[],"doc":{"description":"Phar::stopBuffering() is used in conjunction with the Phar::startBuffering() method. Phar::startBuffering() can provide a significant performance boost when creating or modifying a Phar archive with a large number of files. Ordinarily, every time a file within a Phar archive is created or modified in any way, the entire Phar archive will be recreated with the changes. In this way, the archive will be up-to-date with the activity performed on it.","type":"void"}},{"kind":32,"name":"setSignatureAlgorithm","modifiers":1,"description":"","children":[{"kind":128,"name":"$sigtype","modifiers":0,"doc":{"description":"One of Phar::MD5, Phar::SHA1, Phar::SHA256, Phar::SHA512, or Phar::OPENSSL","type":"int"}},{"kind":128,"name":"$privatekey","modifiers":0,"doc":{"description":"The contents of an OpenSSL private key, as extracted from a certificate or OpenSSL key file: <?php$private = openssl_get_privatekey(file_get_contents('private.pem'));$pkey = '';openssl_pkey_export($private, $pkey);$p->setSignatureAlgorithm(Phar::OPENSSL, $pkey);?> See phar introduction for instructions on naming and placement of the public key file.","type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"setSignatureAlgorithm","modifiers":1,"description":"","children":[{"kind":128,"name":"$sigtype","modifiers":0,"doc":{"description":"One of Phar::MD5, Phar::SHA1, Phar::SHA256, Phar::SHA512, or Phar::PGP","type":"int"}}],"doc":{"type":"void"}},{"kind":32,"name":"getVersion","modifiers":1,"children":[],"doc":{"description":"Returns the API version of an opened Phar archive.","type":"string"}},{"kind":32,"name":"decompressFiles","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"buildFromDirectory","modifiers":1,"description":"","children":[{"kind":128,"name":"$base_dir","modifiers":0,"doc":{"description":"The full or relative path to the directory that contains all files to add to the archive.","type":"string"}},{"kind":128,"name":"$regex","modifiers":0,"doc":{"description":"An optional pcre regular expression that is used to filter the list of files. Only file paths matching the regular expression will be included in the archive.","type":"string"}}],"doc":{"type":"array"}},{"kind":32,"name":"setStub","modifiers":1,"description":"","children":[{"kind":128,"name":"$stub","modifiers":0,"doc":{"description":"A string or an open stream handle to use as the executable stub for this phar archive.","type":"string"}},{"kind":128,"name":"$len","modifiers":0,"description":"","value":"-1","doc":{"type":"int"}}],"doc":{"type":"bool"}},{"kind":32,"name":"startBuffering","modifiers":1,"children":[],"doc":{"description":"Although technically unnecessary, the Phar::startBuffering() method can provide a significant performance boost when creating or modifying a Phar archive with a large number of files. Ordinarily, every time a file within a Phar archive is created or modified in any way, the entire Phar archive will be recreated with the changes. In this way, the archive will be up-to-date with the activity performed on it.","type":"void"}},{"kind":32,"name":"running","modifiers":32,"children":[{"kind":128,"name":"$retphar","modifiers":0,"value":"true","doc":{"description":"If FALSE, the full path on disk to the phar archive is returned. If TRUE, a full phar URL is returned.","type":"bool"}}],"doc":{"description":"Returns the full path to the running phar archive. This is intended for use much like the __FILE__ magic constant, and only has effect inside an executing phar archive.","type":"string"}},{"kind":32,"name":"setMetadata","modifiers":1,"description":"","children":[{"kind":128,"name":"$metadata","modifiers":0,"doc":{"description":"Any PHP variable containing information to store that describes the phar archive","type":"mixed"}}],"doc":{"type":"void"}},{"kind":32,"name":"isCompressed","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"setAlias","modifiers":1,"description":"","children":[{"kind":128,"name":"$alias","modifiers":0,"doc":{"description":"A shorthand string that this archive can be referred to in phar stream wrapper access.","type":"string"}}],"doc":{"type":"bool"}},{"kind":32,"name":"loadPhar","modifiers":32,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"the full or relative path to the phar archive to open","type":"string"}},{"kind":128,"name":"$alias","modifiers":0,"doc":{"description":"The alias that may be used to refer to the phar archive. Note that many phar archives specify an explicit alias inside the phar archive, and a PharException will be thrown if a new alias is specified in this case.","type":"string"}}],"doc":{"description":"This can be used to read the contents of an external Phar archive. This is most useful for assigning an alias to a phar so that subsequent references to the phar can use the shorter alias, or for loading Phar archives that only contain data and are not intended for execution/inclusion in PHP scripts.","type":"bool"}},{"kind":32,"name":"getStub","modifiers":1,"children":[],"doc":{"description":"Phar archives contain a bootstrap loader, or stub written in PHP that is executed when the archive is executed in PHP either via include:","type":"string"}},{"kind":32,"name":"apiVersion","modifiers":32,"children":[],"doc":{"description":"Return the API version of the phar file format that will be used when creating phars. The Phar extension supports reading API version 1.0.0 or newer. API version 1.1.0 is required for SHA-256 and SHA-512 hash, and API version 1.1.1 is required to store empty directories.","type":"string"}},{"kind":32,"name":"decompress","modifiers":1,"description":"","children":[{"kind":128,"name":"$extension","modifiers":0,"doc":{"description":"For decompressing, the default file extensions are .phar and .phar.tar. Use this parameter to specify another file extension. Be aware that all executable phar archives must contain .phar in their filename.","type":"string"}}],"doc":{"type":"object"}},{"kind":32,"name":"isFileFormat","modifiers":1,"description":"","children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"Either Phar::PHAR, Phar::TAR, or Phar::ZIP to test for the format of the archive.","type":"int"}}],"doc":{"type":"bool"}},{"kind":32,"name":"getModified","modifiers":1,"children":[],"doc":{"description":"This method can be used to determine whether a phar has either had an internal file deleted, or contents of a file changed in some way.","type":"bool"}},{"kind":32,"name":"getSupportedSignatures","modifiers":32,"children":[],"doc":{"description":"Return array of supported signature types","type":"array"}},{"kind":32,"name":"hasMetadata","modifiers":1,"children":[],"doc":{"description":"Returns whether phar has global meta-data set.","type":"bool"}},{"kind":32,"name":"offsetUnset","modifiers":1,"description":"","children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The filename (relative path) to modify in a Phar.","type":"string"}}],"doc":{"type":"bool"}},{"kind":32,"name":"addFile","modifiers":1,"children":[{"kind":128,"name":"$file","modifiers":0,"doc":{"description":"Full or relative path to a file on disk to be added to the phar archive.","type":"string"}},{"kind":128,"name":"$localname","modifiers":0,"doc":{"description":"Path that the file will be stored in the archive.","type":"string"}}],"doc":{"description":"With this method, any file or URL can be added to the tar/zip archive. If the optional second parameter localname is specified, the file will be stored in the archive with that name, otherwise the file parameter is used as the path to store within the archive. URLs must have a localname or an exception is thrown. This method is similar to ZipArchive::addFile().","type":"void"}},{"kind":32,"name":"isBuffering","modifiers":1,"children":[],"doc":{"description":"This method can be used to determine whether a Phar will save changes to disk immediately, or whether a call to Phar::stopBuffering() is needed to enable saving changes.","type":"bool"}},{"kind":32,"name":"offsetGet","modifiers":1,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The filename (relative path) to look for in a Phar.","type":"string"}}],"doc":{"description":"This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a Phar archive using array access brackets. Phar::offsetGet() is used for retrieving files from a Phar archive.","type":"int"}},{"kind":32,"name":"delete","modifiers":1,"description":"","children":[{"kind":128,"name":"$entry","modifiers":0,"doc":{"description":"Path within an archive to the file to delete.","type":"string"}}],"doc":{"type":"bool"}},{"kind":32,"name":"getMetadata","modifiers":1,"children":[],"doc":{"description":"Retrieve archive meta-data. Meta-data can be any PHP variable that can be serialized.","type":"mixed"}},{"kind":32,"name":"convertToData","modifiers":1,"children":[{"kind":128,"name":"$format","modifiers":0,"value":"9021976","doc":{"description":"This should be one of Phar::TAR or Phar::ZIP. If set to NULL, the existing file format will be preserved.","type":"int"}},{"kind":128,"name":"$compression","modifiers":0,"value":"9021976","doc":{"description":"This should be one of Phar::NONE for no whole-archive compression, Phar::GZ for zlib-based compression, and Phar::BZ2 for bzip-based compression.","type":"int"}},{"kind":128,"name":"$extension","modifiers":0,"doc":{"description":"This parameter is used to override the default file extension for a converted archive. Note that .phar cannot be used anywhere in the filename for a non-executable tar or zip archive. If converting to a tar-based phar archive, the default extensions are .tar, .tar.gz, and .tar.bz2 depending on specified compression. For zip-based archives, the default extension is .zip.","type":"string"}}],"doc":{"description":"This method is used to convert an executable phar archive to either a tar or zip file. To make the tar or zip non-executable, the phar stub and phar alias files are removed from the newly created archive.","type":"PharData"}},{"kind":32,"name":"copy","modifiers":1,"description":"","children":[{"kind":128,"name":"$oldfile","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$newfile","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":32,"name":"offsetExists","modifiers":1,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The filename (relative path) to look for in a Phar.","type":"string"}}],"doc":{"description":"This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a Phar archive using array access brackets.","type":"bool"}},{"kind":32,"name":"convertToExecutable","modifiers":1,"description":"","children":[{"kind":128,"name":"$format","modifiers":0,"value":"9021976","doc":{"description":"This should be one of Phar::PHAR, Phar::TAR, or Phar::ZIP. If set to NULL, the existing file format will be preserved.","type":"int"}},{"kind":128,"name":"$compression","modifiers":0,"value":"9021976","doc":{"description":"This should be one of Phar::NONE for no whole-archive compression, Phar::GZ for zlib-based compression, and Phar::BZ2 for bzip-based compression.","type":"int"}},{"kind":128,"name":"$extension","modifiers":0,"doc":{"description":"This parameter is used to override the default file extension for a converted archive. Note that all zip- and tar-based phar archives must contain .phar in their file extension in order to be processed as a phar archive. If converting to a phar-based archive, the default extensions are .phar, .phar.gz, or .phar.bz2 depending on the specified compression. For tar-based phar archives, the default extensions are .phar.tar, .phar.tar.gz, and .phar.tar.bz2. For zip-based phar archives, the default extension is .phar.zip.","type":"string"}}],"doc":{"type":"Phar"}},{"kind":32,"name":"getSupportedCompression","modifiers":32,"description":"","children":[],"doc":{"type":"array"}},{"kind":32,"name":"offsetSet","modifiers":1,"description":"","children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The filename (relative path) to modify in a Phar.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Content of the file.","type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"canCompress","modifiers":32,"children":[{"kind":128,"name":"$type","modifiers":0,"value":"0","doc":{"description":"Either Phar::GZ or Phar::BZ2 can be used to test whether compression is possible with a specific compression algorithm (zlib or bzip2).","type":"int"}}],"doc":{"description":"This should be used to test whether compression is possible prior to loading a phar archive containing compressed files.","type":"bool"}},{"kind":32,"name":"compressAllFilesBZIP2","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"compressAllFilesGZ","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"compress","modifiers":1,"description":"","children":[{"kind":128,"name":"$compression","modifiers":0,"doc":{"description":"Compression must be one of Phar::GZ, Phar::BZ2 to add compression, or Phar::NONE to remove compression.","type":"int"}},{"kind":128,"name":"$extension","modifiers":0,"doc":{"description":"By default, the extension is .phar.gz or .phar.bz2 for compressing phar archives, and .phar.tar.gz or .phar.tar.bz2 for compressing tar archives. For decompressing, the default file extensions are .phar and .phar.tar.","type":"string"}}],"doc":{"type":"object"}},{"kind":32,"name":"buildFromIterator","modifiers":1,"description":"","children":[{"kind":128,"name":"$iter","modifiers":0,"doc":{"description":"Any iterator that either associatively maps phar file to location or returns SplFileInfo objects","type":"Iterator"}},{"kind":128,"name":"$base_directory","modifiers":0,"doc":{"description":"For iterators that return SplFileInfo objects, the portion of each file's full path to remove when adding to the phar archive","type":"string"}}],"doc":{"type":"array"}},{"kind":32,"name":"canWrite","modifiers":32,"children":[],"doc":{"description":"This static method determines whether write access has been disabled in the system php.ini via the phar.readonly ini variable.","type":"bool"}},{"kind":32,"name":"buildFromDirectory","modifiers":1,"children":[{"kind":128,"name":"$base_dir","modifiers":0,"doc":{"description":"The full or relative path to the directory that contains all files to add to the archive.","type":"string"}},{"kind":128,"name":"$regex","modifiers":0,"doc":{"description":"An optional pcre regular expression that is used to filter the list of files. Only file paths matching the regular expression will be included in the archive.","type":"string"}}],"doc":{"description":"Populate a tar/zip archive from directory contents. The optional second parameter is a regular expression (pcre) that is used to exclude files. Any filename that matches the regular expression will be included, all others will be excluded. For more fine-grained control, use PharData::buildFromIterator().","type":"array"}},{"kind":32,"name":"getSignature","modifiers":1,"children":[],"doc":{"description":"Returns the verification signature of a phar archive in a hexadecimal string.","type":"array"}},{"kind":32,"name":"webPhar","modifiers":32,"children":[{"kind":128,"name":"$alias","modifiers":0,"doc":{"description":"The alias that can be used in phar:// URLs to refer to this archive, rather than its full path.","type":"string"}},{"kind":128,"name":"$index","modifiers":0,"value":"\"index.php\"","doc":{"description":"The location within the phar of the directory index.","type":"string"}},{"kind":128,"name":"$f404","modifiers":0,"doc":{"description":"The location of the script to run when a file is not found. This script should output the proper HTTP 404 headers.","type":"string"}},{"kind":128,"name":"$mimetypes","modifiers":0,"doc":{"description":"An array mapping additional file extensions to MIME type. If the default mapping is sufficient, pass an empty array. By default, these extensions are mapped to these MIME types: <?php$mimes = array(    'phps' => Phar::PHPS, // pass to highlight_file()    'c' => 'text/plain',    'cc' => 'text/plain',    'cpp' => 'text/plain',    'c++' => 'text/plain',    'dtd' => 'text/plain',    'h' => 'text/plain',    'log' => 'text/plain',    'rng' => 'text/plain',    'txt' => 'text/plain',    'xsd' => 'text/plain',    'php' => Phar::PHP, // parse as PHP    'inc' => Phar::PHP, // parse as PHP    'avi' => 'video/avi',    'bmp' => 'image/bmp',    'css' => 'text/css',    'gif' => 'image/gif',    'htm' => 'text/html',    'html' => 'text/html',    'htmls' => 'text/html',    'ico' => 'image/x-ico',    'jpe' => 'image/jpeg',    'jpg' => 'image/jpeg',    'jpeg' => 'image/jpeg',    'js' => 'application/x-javascript',    'midi' => 'audio/midi',    'mid' => 'audio/midi',    'mod' => 'audio/mod',    'mov' => 'movie/quicktime',    'mp3' => 'audio/mp3',    'mpg' => 'video/mpeg',    'mpeg' => 'video/mpeg',    'pdf' => 'application/pdf',    'png' => 'image/png',    'swf' => 'application/shockwave-flash',    'tif' => 'image/tiff',    'tiff' => 'image/tiff',    'wav' => 'audio/wav',    'xbm' => 'image/xbm',    'xml' => 'text/xml',);?>","type":"array"}},{"kind":128,"name":"$rewrites","modifiers":0,"doc":{"description":"The rewrites function is passed a string as its only parameter and must return a string or FALSE. If you are using fast-cgi or cgi then the parameter passed to the function is the value of the $_SERVER['PATH_INFO'] variable. Otherwise, the parameter passed to the function is the value of the $_SERVER['REQUEST_URI'] variable. If a string is returned it is used as the internal file path. If FALSE is returned then webPhar() will send a HTTP 403 Denied Code.","type":"callable"}}],"doc":{"description":"Phar::mapPhar() for web-based phars. This method parses $_SERVER['REQUEST_URI'] and routes a request from a web browser to an internal file within the phar archive. In essence, it simulates a web server, routing requests to the correct file, echoing the correct headers and parsing PHP files as needed. This powerful method is part of what makes it easy to convert an existing PHP application into a phar archive. Combined with Phar::mungServer() and Phar::interceptFileFuncs(), any web application can be used unmodified from a phar archive.","type":"void"}},{"kind":32,"name":"mapPhar","modifiers":32,"children":[{"kind":128,"name":"$alias","modifiers":0,"doc":{"description":"The alias that can be used in phar:// URLs to refer to this archive, rather than its full path.","type":"string"}},{"kind":128,"name":"$dataoffset","modifiers":0,"value":"0","doc":{"description":"Unused variable, here for compatibility with PEAR's PHP_Archive.","type":"int"}}],"doc":{"description":"This static method can only be used inside a Phar archive's loader stub in order to initialize the phar when it is directly executed, or when it is included in another script.","type":"bool"}},{"kind":32,"name":"setMetadata","modifiers":1,"description":"","children":[{"kind":128,"name":"$metadata","modifiers":0,"doc":{"description":"Any PHP variable containing information to store that describes the phar archive","type":"mixed"}}],"doc":{"type":"void"}},{"kind":32,"name":"compressFiles","modifiers":1,"description":"","children":[{"kind":128,"name":"$compression","modifiers":0,"doc":{"description":"Compression must be one of Phar::GZ, Phar::BZ2 to add compression, or Phar::NONE to remove compression.","type":"int"}}],"doc":{"type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"description":"","children":[{"kind":128,"name":"$fname","modifiers":0,"doc":{"description":"Path to an existing Phar archive or to-be-created archive. The file name's extension must contain .phar.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"Flags to pass to parent class RecursiveDirectoryIterator.","type":"int"}},{"kind":128,"name":"$alias","modifiers":0,"doc":{"description":"Alias with which this Phar archive should be referred to in calls to stream functionality.","type":"string"}}],"doc":{"type":"public"}},{"kind":32,"name":"mount","modifiers":32,"children":[{"kind":128,"name":"$pharpath","modifiers":0,"doc":{"description":"The internal path within the phar archive to use as the mounted path location. This must be a relative path within the phar archive, and must not already exist.","type":"string"}},{"kind":128,"name":"$externalpath","modifiers":0,"doc":{"description":"A path or URL to an external file or directory to mount within the phar archive","type":"string"}}],"doc":{"description":"Much like the unix file system concept of mounting external devices to paths within the directory tree, Phar::mount() allows referring to external files and directories as if they were inside of an archive. This allows powerful abstraction such as referring to external configuration files as if they were inside the archive.","type":"void"}}],"doc":{"description":"The Phar class provides a high-level interface to accessing and creating phar archives."}},{"kind":2,"name":"RecursiveIterator","modifiers":0,"associated":[{"kind":1,"name":"Iterator"}],"children":[{"kind":32,"name":"getChildren","modifiers":1,"children":[],"doc":{"description":"Returns an iterator for the current iterator entry.","type":"RecursiveIterator"}},{"kind":32,"name":"hasChildren","modifiers":1,"children":[],"doc":{"description":"Returns if an iterator can be created for the current entry. RecursiveIterator::getChildren().","type":"bool"}}],"doc":{"description":"Classes implementing RecursiveIterator can be used to iterate over iterators recursively."}},{"kind":8,"name":"XML_ERROR_NONE","description":""},{"kind":8,"name":"XML_ERROR_NO_MEMORY","description":""},{"kind":8,"name":"XML_ERROR_SYNTAX","description":""},{"kind":8,"name":"XML_ERROR_NO_ELEMENTS","description":""},{"kind":8,"name":"XML_ERROR_INVALID_TOKEN","description":""},{"kind":8,"name":"XML_ERROR_UNCLOSED_TOKEN","description":""},{"kind":8,"name":"XML_ERROR_PARTIAL_CHAR","description":""},{"kind":8,"name":"XML_ERROR_TAG_MISMATCH","description":""},{"kind":8,"name":"XML_ERROR_DUPLICATE_ATTRIBUTE","description":""},{"kind":8,"name":"XML_ERROR_JUNK_AFTER_DOC_ELEMENT","description":""},{"kind":8,"name":"XML_ERROR_PARAM_ENTITY_REF","description":""},{"kind":8,"name":"XML_ERROR_UNDEFINED_ENTITY","description":""},{"kind":8,"name":"XML_ERROR_RECURSIVE_ENTITY_REF","description":""},{"kind":8,"name":"XML_ERROR_ASYNC_ENTITY","description":""},{"kind":8,"name":"XML_ERROR_BAD_CHAR_REF","description":""},{"kind":8,"name":"XML_ERROR_BINARY_ENTITY_REF","description":""},{"kind":8,"name":"XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF","description":""},{"kind":8,"name":"XML_ERROR_MISPLACED_XML_PI","description":""},{"kind":8,"name":"XML_ERROR_UNKNOWN_ENCODING","description":""},{"kind":8,"name":"XML_ERROR_INCORRECT_ENCODING","description":""},{"kind":8,"name":"XML_ERROR_UNCLOSED_CDATA_SECTION","description":""},{"kind":8,"name":"XML_ERROR_EXTERNAL_ENTITY_HANDLING","description":""},{"kind":8,"name":"XML_OPTION_CASE_FOLDING","description":""},{"kind":8,"name":"XML_OPTION_TARGET_ENCODING","description":""},{"kind":8,"name":"XML_OPTION_SKIP_TAGSTART","description":""},{"kind":8,"name":"XML_OPTION_SKIP_WHITE","description":""},{"kind":8,"name":"XML_SAX_IMPL","doc":{"description":"Holds the SAX implementation method. Can be libxml or expat."}},{"kind":1,"name":"DateInterval","modifiers":0,"associated":[],"children":[{"kind":16,"name":"$y","modifiers":1,"doc":{"description":"Number of years.","type":"integer"}},{"kind":16,"name":"$m","modifiers":1,"doc":{"description":"Number of months.","type":"integer"}},{"kind":16,"name":"$d","modifiers":1,"doc":{"description":"Number of days.","type":"integer"}},{"kind":16,"name":"$h","modifiers":1,"doc":{"description":"Number of hours.","type":"integer"}},{"kind":16,"name":"$i","modifiers":1,"doc":{"description":"Number of minutes.","type":"integer"}},{"kind":16,"name":"$s","modifiers":1,"doc":{"description":"Number of seconds.","type":"integer"}},{"kind":16,"name":"$invert","modifiers":1,"doc":{"description":"Is 1 if the interval represents a negative time period and 0 otherwise. See DateInterval::format().","type":"integer"}},{"kind":16,"name":"$days","modifiers":1,"doc":{"description":"If the DateInterval object was created by DateTime::diff(), then this is the total number of days between the start and end dates. Otherwise, days will be FALSE. Before PHP 5.4.20/5.5.4 instead of FALSE you will receive -99999 upon accessing the property.","type":"mixed"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$interval_spec","modifiers":0,"doc":{"description":"An interval specification. The format starts with the letter P, for \"period.\" Each duration period is represented by an integer value followed by a period designator. If the duration contains time elements, that portion of the specification is preceded by the letter T. interval_spec Period Designators Period Designator Description Y years M months D days W weeks. These get converted into days, so can not be combined with D. H hours M minutes S seconds Here are some simple examples. Two days is P2D. Two seconds is PT2S. Six years and five minutes is P6YT5M. Note: The unit types must be entered from the largest scale unit on the left to the smallest scale unit on the right. So years before months, months before days, days before minutes, etc. Thus one year and four days must be represented as P1Y4D, not P4D1Y. The specification can also be represented as a date time. A sample of one year and four days would be P0001-00-04T00:00:00. But the values in this format can not exceed a given period's roll-over-point (e.g. 25 hours is invalid). These formats are based on the » ISO 8601 duration specification.","type":"string"}}],"doc":{"description":"Creates a new DateInterval object.","type":"public"}},{"kind":32,"name":"format","modifiers":1,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The following characters are recognized in the format parameter string. Each format character must be prefixed by a percent sign (%). format character Description Example values % Literal % % Y Years, numeric, at least 2 digits with leading 0 01, 03 y Years, numeric 1, 3 M Months, numeric, at least 2 digits with leading 0 01, 03, 12 m Months, numeric 1, 3, 12 D Days, numeric, at least 2 digits with leading 0 01, 03, 31 d Days, numeric 1, 3, 31 a Total number of days as a result of a DateTime::diff() or (unknown) otherwise 4, 18, 8123 H Hours, numeric, at least 2 digits with leading 0 01, 03, 23 h Hours, numeric 1, 3, 23 I Minutes, numeric, at least 2 digits with leading 0 01, 03, 59 i Minutes, numeric 1, 3, 59 S Seconds, numeric, at least 2 digits with leading 0 01, 03, 57 s Seconds, numeric 1, 3, 57 R Sign \"-\" when negative, \"+\" when positive -, + r Sign \"-\" when negative, empty when positive -,","type":"string"}}],"doc":{"description":"Formats the interval.","type":"string"}},{"kind":32,"name":"createFromDateString","modifiers":32,"children":[{"kind":128,"name":"$time","modifiers":0,"doc":{"description":"A date with relative parts. Specifically, the relative formats supported by the parser used for strtotime() and DateTime will be used to construct the DateInterval.","type":"string"}}],"doc":{"description":"Uses the normal date parsers and sets up a DateInterval from the relative parts of the parsed string.","type":"DateInterval"}}],"doc":{"description":"Represents a date interval."}},{"kind":2,"name":"Traversable","modifiers":0,"associated":[],"children":[],"doc":{"description":"Interface to detect if a class is traversable using foreach."}},{"kind":8,"name":"DBX_MYSQL","description":""},{"kind":8,"name":"DBX_ODBC","description":""},{"kind":8,"name":"DBX_PGSQL","description":""},{"kind":8,"name":"DBX_MSSQL","description":""},{"kind":8,"name":"DBX_FBSQL","description":""},{"kind":8,"name":"DBX_OCI8","description":""},{"kind":8,"name":"DBX_SYBASECT","description":""},{"kind":8,"name":"DBX_SQLITE","description":""},{"kind":8,"name":"DBX_PERSISTENT","description":""},{"kind":8,"name":"DBX_RESULT_INFO","description":""},{"kind":8,"name":"DBX_RESULT_INDEX","description":""},{"kind":8,"name":"DBX_RESULT_ASSOC","description":""},{"kind":8,"name":"DBX_RESULT_UNBUFFERED","description":""},{"kind":8,"name":"DBX_COLNAMES_UNCHANGED","description":""},{"kind":8,"name":"DBX_COLNAMES_UPPERCASE","description":""},{"kind":8,"name":"DBX_COLNAMES_LOWERCASE","description":""},{"kind":8,"name":"DBX_CMP_NATIVE","description":""},{"kind":8,"name":"DBX_CMP_TEXT","description":""},{"kind":8,"name":"DBX_CMP_NUMBER","description":""},{"kind":8,"name":"DBX_CMP_ASC","description":""},{"kind":8,"name":"DBX_CMP_DESC","description":""},{"kind":1,"name":"libXMLError","modifiers":0,"associated":[],"children":[{"kind":16,"name":"$level","modifiers":1,"doc":{"description":"the severity of the error (one of the following constants: LIBXML_ERR_WARNING, LIBXML_ERR_ERROR or LIBXML_ERR_FATAL)","type":"int"}},{"kind":16,"name":"$code","modifiers":1,"doc":{"description":"The error's code.","type":"int"}},{"kind":16,"name":"$column","modifiers":1,"doc":{"description":"The column where the error occurred. Note: This property isn't entirely implemented in libxml and therefore 0 is often returned.","type":"int"}},{"kind":16,"name":"$message","modifiers":1,"doc":{"description":"The error message, if any.","type":"string"}},{"kind":16,"name":"$file","modifiers":1,"doc":{"description":"The filename, or empty if the XML was loaded from a string.","type":"string"}},{"kind":16,"name":"$line","modifiers":1,"doc":{"description":"The line where the error occurred.","type":"int"}}],"doc":{"description":"Contains various information about errors thrown by libxml. The error codes are described within the official » xmlError API documentation."}},{"kind":1,"name":"mysqli_driver","modifiers":0,"associated":[],"children":[{"kind":16,"name":"string","modifiers":1,"description":"","doc":{"type":"readonly"}},{"kind":16,"name":"$reconnect","modifiers":1,"doc":{"description":"Allow or prevent reconnect (see the mysqli.reconnect INI directive)","type":"bool"}},{"kind":16,"name":"$report_mode","modifiers":1,"doc":{"description":"Set to MYSQLI_REPORT_OFF, MYSQLI_REPORT_ALL or any combination of MYSQLI_REPORT_STRICT (throw Exceptions for errors), MYSQLI_REPORT_ERROR (report errors) and MYSQLI_REPORT_INDEX (errors regarding indexes). See also mysqli_report().","type":"int"}},{"kind":32,"name":"embedded_server_end","modifiers":0,"children":[],"doc":{"description":"Procedural style","type":"void"}},{"kind":32,"name":"embedded_server_start","modifiers":0,"children":[{"kind":128,"name":"$start","modifiers":0,"description":"","doc":{"type":"bool"}},{"kind":128,"name":"$arguments","modifiers":0,"description":"","doc":{"type":"array"}},{"kind":128,"name":"$groups","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"Procedural style","type":"bool"}}],"doc":{"description":"MySQLi Driver."}},{"kind":1,"name":"NoRewindIterator","modifiers":0,"associated":[{"kind":1,"name":"IteratorIterator"}],"children":[{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Gets the current value.","type":"mixed"}},{"kind":32,"name":"getInnerIterator","modifiers":1,"children":[],"doc":{"description":"Gets the inner iterator, that was passed in to NoRewindIterator.","type":"iterator"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Gets the current key.","type":"mixed"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator being used.","type":"Iterator"}}],"doc":{"description":"Constructs a NoRewindIterator.","type":"public"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Checks whether the iterator is valid.","type":"bool"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Forwards to the next element.","type":"void"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Prevents the rewind operation on the inner iterator.","type":"void"}}],"doc":{"description":"This iterator cannot be rewound."}},{"kind":1,"name":"mysqli_sql_exception","modifiers":0,"associated":[{"kind":1,"name":"RuntimeException"}],"children":[{"kind":16,"name":"$sqlstate","modifiers":2,"doc":{"description":"The sql state with the error.","type":"string"}},{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"The mysqli exception handling class."}},{"kind":8,"name":"SUNFUNCS_RET_TIMESTAMP","doc":{"description":"Timestamp"}},{"kind":8,"name":"SUNFUNCS_RET_STRING","doc":{"description":"Hours:minutes (example: 08:02)"}},{"kind":8,"name":"SUNFUNCS_RET_DOUBLE","doc":{"description":"Hours as floating point number (example 8.75)"}},{"kind":1,"name":"SoapClient","modifiers":0,"associated":[],"children":[{"kind":32,"name":"__doRequest","modifiers":1,"children":[{"kind":128,"name":"$request","modifiers":0,"doc":{"description":"The XML SOAP request.","type":"string"}},{"kind":128,"name":"$location","modifiers":0,"doc":{"description":"The URL to request.","type":"string"}},{"kind":128,"name":"$action","modifiers":0,"doc":{"description":"The SOAP action.","type":"string"}},{"kind":128,"name":"$version","modifiers":0,"doc":{"description":"The SOAP version.","type":"int"}},{"kind":128,"name":"$one_way","modifiers":0,"value":"0","doc":{"description":"If one_way is set to 1, this method returns nothing. Use this where a response is not expected.","type":"int"}}],"doc":{"description":"Performs SOAP request over HTTP.","type":"string"}},{"kind":32,"name":"__setSoapHeaders","modifiers":1,"children":[{"kind":128,"name":"$soapheaders","modifiers":0,"doc":{"description":"The headers to be set. It could be SoapHeader object or array of SoapHeader objects. If not specified or set to NULL, the headers will be deleted.","type":"mixed"}}],"doc":{"description":"Defines headers to be sent along with the SOAP requests.","type":"bool"}},{"kind":32,"name":"__soapCall","modifiers":1,"children":[{"kind":128,"name":"$function_name","modifiers":0,"doc":{"description":"The name of the SOAP function to call.","type":"string"}},{"kind":128,"name":"$arguments","modifiers":0,"doc":{"description":"An array of the arguments to pass to the function. This can be either an ordered or an associative array. Note that most SOAP servers require parameter names to be provided, in which case this must be an associative array.","type":"array"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"An associative array of options to pass to the client. The location option is the URL of the remote Web service. The uri option is the target namespace of the SOAP service. The soapaction option is the action to call.","type":"array"}},{"kind":128,"name":"$input_headers","modifiers":0,"doc":{"description":"An array of headers to be sent along with the SOAP request.","type":"mixed"}},{"kind":128,"name":"$output_headers","modifiers":1024,"doc":{"description":"If supplied, this array will be filled with the headers from the SOAP response.","type":"array"}}],"doc":{"description":"This is a low level API function that is used to make a SOAP call. Usually, in WSDL mode, SOAP functions can be called as methods of the SoapClient object. This method is useful in non-WSDL mode when soapaction is unknown, uri differs from the default or when sending and/or receiving SOAP Headers.","type":"mixed"}},{"kind":32,"name":"__setCookie","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the cookie.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the cookie. If not specified, the cookie will be deleted.","type":"string"}}],"doc":{"description":"Defines a cookie to be sent along with the SOAP requests.","type":"void"}},{"kind":32,"name":"__getLastRequestHeaders","modifiers":1,"children":[],"doc":{"description":"Returns the SOAP headers from the last request.","type":"string"}},{"kind":32,"name":"__getLastResponseHeaders","modifiers":1,"children":[],"doc":{"description":"Returns the SOAP headers from the last response.","type":"string"}},{"kind":32,"name":"__setLocation","modifiers":1,"children":[{"kind":128,"name":"$new_location","modifiers":0,"doc":{"description":"The new endpoint URL.","type":"string"}}],"doc":{"description":"Sets the endpoint URL that will be touched by following SOAP requests. This is equivalent to specifying the location option when constructing the SoapClient.","type":"string"}},{"kind":32,"name":"__getFunctions","modifiers":1,"children":[],"doc":{"description":"Returns an array of functions described in the WSDL for the Web service.","type":"array"}},{"kind":32,"name":"__getLastRequest","modifiers":1,"children":[],"doc":{"description":"Returns the XML sent in the last SOAP request.","type":"string"}},{"kind":32,"name":"__getLastResponse","modifiers":1,"children":[],"doc":{"description":"Returns the XML received in the last SOAP response.","type":"string"}},{"kind":32,"name":"SoapClient","modifiers":0,"children":[{"kind":128,"name":"$wsdl","modifiers":0,"doc":{"description":"URI of the WSDL file or NULL if working in non-WSDL mode. Note: During development, WSDL caching may be disabled by the use of the soap.wsdl_cache_ttl php.ini setting otherwise changes made to the WSDL file will have no effect until soap.wsdl_cache_ttl is expired.","type":"mixed"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"An array of options. If working in WSDL mode, this parameter is optional. If working in non-WSDL mode, the location and uri options must be set, where location is the URL of the SOAP server to send the request to, and uri is the target namespace of the SOAP service. The style and use options only work in non-WSDL mode. In WSDL mode, they come from the WSDL file. The soap_version option should be one of either SOAP_1_1 or SOAP_1_2 to select SOAP 1.1 or 1.2, respectively. If omitted, 1.1 is used. For HTTP authentication, the login and password options can be used to supply credentials. For making an HTTP connection through a proxy server, the options proxy_host, proxy_port, proxy_login and proxy_password are also available. For HTTPS client certificate authentication use local_cert and passphrase options. An authentication may be supplied in the authentication option. The authentication method may be either SOAP_AUTHENTICATION_BASIC (default) or SOAP_AUTHENTICATION_DIGEST. The compression option allows to use compression of HTTP SOAP requests and responses. The encoding option defines internal character encoding. This option does not change the encoding of SOAP requests (it is always utf-8), but converts strings into it. The trace option enables tracing of request so faults can be backtraced. This defaults to FALSE The classmap option can be used to map some WSDL types to PHP classes. This option must be an array with WSDL types as keys and names of PHP classes as values. Setting the boolean trace option enables use of the methods SoapClient->__getLastRequest, SoapClient->__getLastRequestHeaders, SoapClient->__getLastResponse and SoapClient->__getLastResponseHeaders. The exceptions option is a boolean value defining whether soap errors throw exceptions of type SoapFault. The connection_timeout option defines a timeout in seconds for the connection to the SOAP service. This option does not define a timeout for services with slow responses. To limit the time to wait for calls to finish the default_socket_timeout setting is available. The typemap option is an array of type mappings. Type mapping is an array with keys type_name, type_ns (namespace URI), from_xml (callback accepting one string parameter) and to_xml (callback accepting one object parameter). The cache_wsdl option is one of WSDL_CACHE_NONE, WSDL_CACHE_DISK, WSDL_CACHE_MEMORY or WSDL_CACHE_BOTH. The user_agent option specifies string to use in User-Agent header. The stream_context option is a resource for context. The features option is a bitmask of SOAP_SINGLE_ELEMENT_ARRAYS, SOAP_USE_XSI_ARRAY_TYPE, SOAP_WAIT_ONE_WAY_CALLS. The keep_alive option is a boolean value defining whether to send the Connection: Keep-Alive header or Connection: close. The ssl_method option is one of SOAP_SSL_METHOD_TLS, SOAP_SSL_METHOD_SSLv2, SOAP_SSL_METHOD_SSLv3 or SOAP_SSL_METHOD_SSLv23.","type":"array"}}],"doc":{"description":"This constructor creates SoapClient objects in WSDL or non-WSDL mode.","type":"public"}},{"kind":32,"name":"__getTypes","modifiers":1,"children":[],"doc":{"description":"Returns an array of types described in the WSDL for the Web service.","type":"array"}},{"kind":32,"name":"SoapClient","modifiers":0,"children":[{"kind":128,"name":"$wsdl","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$options","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"This function is an alias of: SoapClient::SoapClient()","type":"public"}},{"kind":32,"name":"__call","modifiers":1,"children":[{"kind":128,"name":"$function_name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$arguments","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Calling this method directly is deprecated. Usually, SOAP functions can be called as methods of the SoapClient object; in situations where this is not possible or additional options are needed, use SoapClient::__soapCall().","type":"mixed"}}],"doc":{"description":"The SoapClient class provides a client for » SOAP 1.1, » SOAP 1.2 servers. It can be used in WSDL or non-WSDL mode."}},{"kind":2,"name":"Iterator","modifiers":0,"associated":[{"kind":1,"name":"Traversable"}],"children":[{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewinds back to the first element of the Iterator.","type":"void"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"This method is called after Iterator::rewind() and Iterator::next() to check if the current position is valid.","type":"boolean"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Returns the current element.","type":"mixed"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Moves the current position to the next element.","type":"void"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Returns the key of the current element.","type":"scalar"}}],"doc":{"description":"Interface for external iterators or objects that can be iterated themselves internally."}},{"kind":8,"name":"FBSQL_ASSOC","description":""},{"kind":8,"name":"FBSQL_NUM","description":""},{"kind":8,"name":"FBSQL_BOTH","description":""},{"kind":8,"name":"FBSQL_LOCK_DEFERRED","description":""},{"kind":8,"name":"FBSQL_LOCK_OPTIMISTIC","description":""},{"kind":8,"name":"FBSQL_LOCK_PESSIMISTIC","description":""},{"kind":8,"name":"FBSQL_ISO_READ_UNCOMMITTED","description":""},{"kind":8,"name":"FBSQL_ISO_READ_COMMITTED","description":""},{"kind":8,"name":"FBSQL_ISO_REPEATABLE_READ","description":""},{"kind":8,"name":"FBSQL_ISO_SERIALIZABLE","description":""},{"kind":8,"name":"FBSQL_ISO_VERSIONED","description":""},{"kind":8,"name":"FBSQL_UNKNOWN","description":""},{"kind":8,"name":"FBSQL_STOPPED","description":""},{"kind":8,"name":"FBSQL_STARTING","description":""},{"kind":8,"name":"FBSQL_RUNNING","description":""},{"kind":8,"name":"FBSQL_STOPPING","description":""},{"kind":8,"name":"FBSQL_NOEXEC","description":""},{"kind":8,"name":"FBSQL_LOB_DIRECT","description":""},{"kind":8,"name":"FBSQL_LOB_HANDLE","description":""},{"kind":2,"name":"SplObserver","modifiers":0,"associated":[],"children":[{"kind":32,"name":"update","modifiers":1,"children":[{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The SplSubject notifying the observer of an update.","type":"SplSubject"}}],"doc":{"description":"This method is called when any SplSubject to which the observer is attached calls SplSubject::notify().","type":"void"}}],"doc":{"description":"The SplObserver interface is used alongside SplSubject to implement the Observer Design Pattern."}},{"kind":8,"name":"HASH_HMAC","doc":{"description":"Optional flag for hash_init(). Indicates that the HMAC digest-keying algorithm should be applied to the current hashing context."}},{"kind":1,"name":"XMLReader","modifiers":0,"associated":[],"children":[{"kind":1024,"name":"NONE","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"ELEMENT","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"ATTRIBUTE","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"TEXT","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"CDATA","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"ENTITY_REF","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"ENTITY","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"PI","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"COMMENT","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"DOC","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"DOC_TYPE","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"DOC_FRAGMENT","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"NOTATION","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"WHITESPACE","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"SIGNIFICANT_WHITESPACE","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"END_ELEMENT","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"END_ENTITY","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"XML_DECLARATION","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"LOADDTD","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"DEFAULTATTRS","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"VALIDATE","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":1024,"name":"SUBST_ENTITIES","modifiers":1,"description":"","doc":{"type":"int"}},{"kind":16,"name":"int","modifiers":1,"description":"","doc":{"type":"readonly"}},{"kind":16,"name":"string","modifiers":1,"description":"","doc":{"type":"readonly"}},{"kind":16,"name":"bool","modifiers":1,"description":"","doc":{"type":"readonly"}},{"kind":32,"name":"setRelaxNGSchema","modifiers":1,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"filename or URI pointing to a RelaxNG Schema.","type":"string"}}],"doc":{"description":"Set the filename or URI for the RelaxNG Schema to use for validation.","type":"bool"}},{"kind":32,"name":"lookupNamespace","modifiers":1,"children":[{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"String containing the prefix.","type":"string"}}],"doc":{"description":"Lookup in scope namespace for a given prefix.","type":"string"}},{"kind":32,"name":"next","modifiers":1,"children":[{"kind":128,"name":"$localname","modifiers":0,"doc":{"description":"The name of the next node to move to.","type":"string"}}],"doc":{"description":"Positions cursor on the next node skipping all subtrees.","type":"bool"}},{"kind":32,"name":"moveToElement","modifiers":1,"children":[],"doc":{"description":"Moves cursor to the parent Element of current Attribute.","type":"bool"}},{"kind":32,"name":"xml","modifiers":1,"children":[{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"String containing the XML to be parsed.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The document encoding or NULL.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"A bitmask of the LIBXML_* constants.","type":"int"}}],"doc":{"description":"Set the data containing the XML to parse.","type":"bool"}},{"kind":32,"name":"isValid","modifiers":1,"children":[],"doc":{"description":"Returns a boolean indicating if the document being parsed is currently valid.","type":"bool"}},{"kind":32,"name":"setParserProperty","modifiers":1,"children":[{"kind":128,"name":"$property","modifiers":0,"doc":{"description":"One of the parser option constants.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"If set to TRUE the option will be enabled otherwise will be disabled.","type":"bool"}}],"doc":{"description":"Set parser options. The options must be set after XMLReader::open() or XMLReader::xml() are called and before the first XMLReader::read() call.","type":"bool"}},{"kind":32,"name":"getParserProperty","modifiers":1,"children":[{"kind":128,"name":"$property","modifiers":0,"doc":{"description":"One of the parser option constants.","type":"int"}}],"doc":{"description":"Indicates if specified property has been set.","type":"bool"}},{"kind":32,"name":"moveToAttributeNo","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The position of the attribute.","type":"int"}}],"doc":{"description":"Positions cursor on attribute based on its position.","type":"bool"}},{"kind":32,"name":"readInnerXML","modifiers":1,"children":[],"doc":{"description":"Reads the contents of the current node, including child nodes and markup.","type":"string"}},{"kind":32,"name":"open","modifiers":1,"children":[{"kind":128,"name":"$URI","modifiers":0,"doc":{"description":"URI pointing to the document.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The document encoding or NULL.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"A bitmask of the LIBXML_* constants.","type":"int"}}],"doc":{"description":"Set the URI containing the XML document to be parsed.","type":"bool"}},{"kind":32,"name":"getAttribute","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the attribute.","type":"string"}}],"doc":{"description":"Returns the value of a named attribute or NULL if the attribute does not exist or not positioned on an element node.","type":"string"}},{"kind":32,"name":"getAttributeNo","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The position of the attribute.","type":"int"}}],"doc":{"description":"Returns the value of an attribute based on its position or an empty string if attribute does not exist or not positioned on an element node.","type":"string"}},{"kind":32,"name":"setRelaxNGSchemaSource","modifiers":1,"children":[{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"String containing the RelaxNG Schema.","type":"string"}}],"doc":{"description":"Set the data containing a RelaxNG Schema to use for validation.","type":"bool"}},{"kind":32,"name":"getAttributeNs","modifiers":1,"children":[{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name.","type":"string"}},{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}}],"doc":{"description":"Returns the value of an attribute by name and namespace URI or an empty string if attribute does not exist or not positioned on an element node.","type":"string"}},{"kind":32,"name":"moveToFirstAttribute","modifiers":1,"children":[],"doc":{"description":"Moves cursor to the first Attribute.","type":"bool"}},{"kind":32,"name":"readOuterXML","modifiers":1,"children":[],"doc":{"description":"Reads the contents of the current node, including the node itself.","type":"string"}},{"kind":32,"name":"moveToNextAttribute","modifiers":1,"children":[],"doc":{"description":"Moves cursor to the next Attribute if positioned on an Attribute or moves to first attribute if positioned on an Element.","type":"bool"}},{"kind":32,"name":"setSchema","modifiers":1,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The filename of the XSD schema.","type":"string"}}],"doc":{"description":"Use W3C XSD schema to validate the document as it is processed. Activation is only possible before the first Read().","type":"bool"}},{"kind":32,"name":"read","modifiers":1,"children":[],"doc":{"description":"Moves cursor to the next node in the document.","type":"bool"}},{"kind":32,"name":"moveToAttribute","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the attribute.","type":"string"}}],"doc":{"description":"Positions cursor on the named attribute.","type":"bool"}},{"kind":32,"name":"moveToAttributeNs","modifiers":1,"children":[{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name.","type":"string"}},{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}}],"doc":{"description":"Positions cursor on the named attribute in specified namespace.","type":"bool"}},{"kind":32,"name":"close","modifiers":1,"children":[],"doc":{"description":"Closes the input the XMLReader object is currently parsing.","type":"bool"}},{"kind":32,"name":"readString","modifiers":1,"children":[],"doc":{"description":"Reads the contents of the current node as a string.","type":"string"}},{"kind":32,"name":"expand","modifiers":1,"children":[{"kind":128,"name":"$basenode","modifiers":0,"doc":{"description":"A DOMNode defining the target DOMDocument for the created DOM object.","type":"DOMNode"}}],"doc":{"description":"This method copies the current node and returns the appropriate DOM object.","type":"DOMNode"}}],"doc":{"description":"The XMLReader extension is an XML Pull parser. The reader acts as a cursor going forward on the document stream and stopping at each node on the way."}},{"kind":8,"name":"POSIX_RLIMIT_AS","doc":{"description":"The maximum size of the process's address space in bytes. See also PHP's memory_limit configuration directive."}},{"kind":8,"name":"POSIX_RLIMIT_CORE","doc":{"description":"The maximum size of a core file. If the limit is set to 0, no core file will be generated."}},{"kind":8,"name":"POSIX_RLIMIT_CPU","doc":{"description":"The maximum amount of CPU time that the process can use, in seconds. When the soft limit is hit, a SIGXCPU signal will be sent, which can be caught with pcntl_signal(). Depending on the operating system, additional SIGXCPU signals may be sent each second until the hard limit is hit, at which point an uncatchable SIGKILL signal is sent. See also set_time_limit()."}},{"kind":8,"name":"POSIX_RLIMIT_DATA","doc":{"description":"The maximum size of the process's data segment, in bytes. It is extremely unlikely that this will have any effect on the execution of PHP unless an extension is in use that calls brk() or sbrk()."}},{"kind":8,"name":"POSIX_RLIMIT_FSIZE","doc":{"description":"The maximum size of files that the process can create, in bytes."}},{"kind":8,"name":"POSIX_RLIMIT_LOCKS","doc":{"description":"The maximum number of locks that the process can create. This is only supported on extremely old Linux kernels."}},{"kind":8,"name":"POSIX_RLIMIT_MEMLOCK","doc":{"description":"The maximum number of bytes that can be locked into memory."}},{"kind":8,"name":"POSIX_RLIMIT_MSGQUEUE","doc":{"description":"The maximum number of bytes that can be allocated for POSIX message queues. PHP does not ship with support for POSIX message queues, so this limit will not have any effect unless you are using an extension that implements that support."}},{"kind":8,"name":"POSIX_RLIMIT_NICE","doc":{"description":"The maximum value to which the process can be reniced to. The value that will be used will be 20 - limit, as resource limit values cannot be negative."}},{"kind":8,"name":"POSIX_RLIMIT_NOFILE","doc":{"description":"A value one greater than the maximum file descriptor number that can be opened by this process."}},{"kind":8,"name":"POSIX_RLIMIT_NPROC","doc":{"description":"The maximum number of processes (and/or threads, on some operating systems) that can be created for the real user ID of the process."}},{"kind":8,"name":"POSIX_RLIMIT_RSS","doc":{"description":"The maximum size of the process's resident set, in pages."}},{"kind":8,"name":"POSIX_RLIMIT_RTPRIO","doc":{"description":"The maximum real time priority that can be set via the sched_setscheduler() and sched_setparam() system calls."}},{"kind":8,"name":"POSIX_RLIMIT_RTTIME","doc":{"description":"The maximum amount of CPU time, in microseconds, that the process can consume without making a blocking system call if it is using real time scheduling."}},{"kind":8,"name":"POSIX_RLIMIT_SIGPENDING","doc":{"description":"The maximum number of signals that can be queued for the real user ID of the process."}},{"kind":8,"name":"POSIX_RLIMIT_STACK","doc":{"description":"The maximum size of the process stack, in bytes."}},{"kind":8,"name":"POSIX_RLIMIT_INFINITY","doc":{"description":"Used to indicate an infinite value for a resource limit."}},{"kind":8,"name":"CAL_EASTER_DEFAULT","description":""},{"kind":8,"name":"CAL_EASTER_ROMAN","description":""},{"kind":8,"name":"CAL_EASTER_ALWAYS_GREGORIAN","description":""},{"kind":8,"name":"CAL_EASTER_ALWAYS_JULIAN","description":""},{"kind":8,"name":"CAL_GREGORIAN","description":""},{"kind":8,"name":"CAL_JULIAN","description":""},{"kind":8,"name":"CAL_JEWISH","description":""},{"kind":8,"name":"CAL_JEWISH_ADD_ALAFIM_GERESH","description":""},{"kind":8,"name":"CAL_JEWISH_ADD_ALAFIM","description":""},{"kind":8,"name":"CAL_JEWISH_ADD_GERESHAYIM","description":""},{"kind":8,"name":"CAL_FRENCH","description":""},{"kind":8,"name":"CAL_NUM_CALS","description":""},{"kind":8,"name":"CAL_DOW_DAYNO","description":""},{"kind":8,"name":"CAL_DOW_SHORT","description":""},{"kind":8,"name":"CAL_DOW_LONG","description":""},{"kind":8,"name":"CAL_MONTH_GREGORIAN_SHORT","description":""},{"kind":8,"name":"CAL_MONTH_GREGORIAN_LONG","description":""},{"kind":8,"name":"CAL_MONTH_JULIAN_SHORT","description":""},{"kind":8,"name":"CAL_MONTH_JULIAN_LONG","description":""},{"kind":8,"name":"CAL_MONTH_JEWISH","description":""},{"kind":8,"name":"CAL_MONTH_FRENCH","description":""},{"kind":1,"name":"DateTime","modifiers":0,"associated":[{"kind":2,"name":"DateTimeInterface"}],"children":[{"kind":1024,"name":"ATOM","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":1024,"name":"COOKIE","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":1024,"name":"ISO8601","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":1024,"name":"RFC822","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":1024,"name":"RFC850","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":1024,"name":"RFC1036","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":1024,"name":"RFC1123","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":1024,"name":"RFC2822","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":1024,"name":"RFC3339","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":1024,"name":"RSS","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":1024,"name":"W3C","modifiers":1,"description":"","doc":{"type":"string"}},{"kind":32,"name":"setTime","modifiers":1,"children":[{"kind":128,"name":"$hour","modifiers":0,"doc":{"description":"Hour of the time.","type":"int"}},{"kind":128,"name":"$minute","modifiers":0,"doc":{"description":"Minute of the time.","type":"int"}},{"kind":128,"name":"$second","modifiers":0,"value":"0","doc":{"description":"Second of the time.","type":"int"}}],"doc":{"description":"Resets the current time of the DateTime object to a different time.","type":"DateTime"}},{"kind":32,"name":"setISODate","modifiers":1,"children":[{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"Year of the date.","type":"int"}},{"kind":128,"name":"$week","modifiers":0,"doc":{"description":"Week of the date.","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"value":"1","doc":{"description":"Offset from the first day of the week.","type":"int"}}],"doc":{"description":"Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.","type":"DateTime"}},{"kind":32,"name":"sub","modifiers":1,"children":[{"kind":128,"name":"$interval","modifiers":0,"doc":{"description":"A DateInterval object","type":"DateInterval"}}],"doc":{"description":"Subtracts the specified DateInterval object from the specified DateTime object.","type":"DateTime"}},{"kind":32,"name":"modify","modifiers":1,"children":[{"kind":128,"name":"$modify","modifiers":0,"doc":{"description":"A date/time string. Valid formats are explained in Date and Time Formats.","type":"string"}}],"doc":{"description":"Alter the timestamp of a DateTime object by incrementing or decrementing in a format accepted by strtotime().","type":"DateTime"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$time","modifiers":0,"value":"\"now\"","doc":{"description":"A date/time string. Valid formats are explained in Date and Time Formats. Enter NULL here to obtain the current time when using the $timezone parameter.","type":"string"}},{"kind":128,"name":"$timezone","modifiers":0,"value":"NULL","doc":{"description":"A DateTimeZone object representing the timezone of $time. If $timezone is omitted, the current timezone will be used. Note: The $timezone parameter and the current timezone are ignored when the $time parameter either is a UNIX timestamp (e.g. @946684800) or specifies a timezone (e.g. 2010-01-28T15:00:00+02:00).","type":"DateTimeZone"}}],"doc":{"description":"Returns new DateTime object.","type":"public"}},{"kind":32,"name":"format","modifiers":1,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"Format accepted by date().","type":"string"}}],"doc":{"description":"Returns date formatted according to given format.","type":"string"}},{"kind":32,"name":"diff","modifiers":1,"children":[{"kind":128,"name":"$datetime2","modifiers":0,"description":"","doc":{"type":"DateTimeInterface"}},{"kind":128,"name":"$absolute","modifiers":0,"value":"false","doc":{"description":"Should the interval be forced to be positive?","type":"bool"}}],"doc":{"description":"Returns the difference between two DateTimeInterface objects.","type":"DateInterval"}},{"kind":32,"name":"setTimestamp","modifiers":1,"children":[{"kind":128,"name":"$unixtimestamp","modifiers":0,"doc":{"description":"Unix timestamp representing the date.","type":"int"}}],"doc":{"description":"Sets the date and time based on an Unix timestamp.","type":"DateTime"}},{"kind":32,"name":"add","modifiers":1,"children":[{"kind":128,"name":"$interval","modifiers":0,"doc":{"description":"A DateInterval object","type":"DateInterval"}}],"doc":{"description":"Adds the specified DateInterval object to the specified DateTime object.","type":"DateTime"}},{"kind":32,"name":"__wakeup","modifiers":0,"children":[],"doc":{"description":"The __wakeup() handler.","type":"public"}},{"kind":32,"name":"getLastErrors","modifiers":32,"children":[],"doc":{"description":"Returns an array of warnings and errors found while parsing a date/time string.","type":"array"}},{"kind":32,"name":"setDate","modifiers":1,"children":[{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"Year of the date.","type":"int"}},{"kind":128,"name":"$month","modifiers":0,"doc":{"description":"Month of the date.","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"doc":{"description":"Day of the date.","type":"int"}}],"doc":{"description":"Resets the current date of the DateTime object to a different date.","type":"DateTime"}},{"kind":32,"name":"getTimestamp","modifiers":1,"children":[],"doc":{"description":"Gets the Unix timestamp.","type":"int"}},{"kind":32,"name":"getOffset","modifiers":1,"children":[],"doc":{"description":"Returns the timezone offset.","type":"int"}},{"kind":32,"name":"getTimezone","modifiers":1,"children":[],"doc":{"description":"Return time zone relative to given DateTime.","type":"DateTimeZone"}},{"kind":32,"name":"createFromFormat","modifiers":32,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The format that the passed in string should be in. See the formatting options below. In most cases, the same letters as for the date() can be used. The following characters are recognized in the format parameter string format character Description Example parsable values Day --- --- d and j Day of the month, 2 digits with or without leading zeros 01 to 31 or 1 to 31 D and l A textual representation of a day Mon through Sun or Sunday through Saturday S English ordinal suffix for the day of the month, 2 characters. It's ignored while processing. st, nd, rd or th. z The day of the year (starting from 0) 0 through 365 Month --- --- F and M A textual representation of a month, such as January or Sept January through December or Jan through Dec m and n Numeric representation of a month, with or without leading zeros 01 through 12 or 1 through 12 Year --- --- Y A full numeric representation of a year, 4 digits Examples: 1999 or 2003 y A two digit representation of a year (which is assumed to be in the range 1970-2069, inclusive) Examples: 99 or 03 (which will be interpreted as 1999 and 2003, respectively) Time --- --- a and A Ante meridiem and Post meridiem am or pm g and h 12-hour format of an hour with or without leading zero 1 through 12 or 01 through 12 G and H 24-hour format of an hour with or without leading zeros 0 through 23 or 00 through 23 i Minutes with leading zeros 00 to 59 s Seconds, with leading zeros 00 through 59 u Microseconds (up to six digits) Example: 45, 654321 Timezone --- --- e, O, P and T Timezone identifier, or difference to UTC in hours, or difference to UTC with colon between hours and minutes, or timezone abbreviation Examples: UTC, GMT, Atlantic/Azores or +0200 or +02:00 or EST, MDT Full Date/Time --- --- U Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT) Example: 1292177455 Whitespace and Separators --- --- (space) One space or one tab Example: # One of the following separation symbol: ;, :, /, ., ,, -, ( or ) Example: / ;, :, /, ., ,, -, ( or ) The specified character. Example: - ? A random byte Example: ^ (Be aware that for UTF-8 characters you might need more than one ?. In this case, using * is probably what you want instead) * Random bytes until the next separator or digit Example: * in Y-*-d with the string 2009-aWord-08 will match aWord ! Resets all fields (year, month, day, hour, minute, second, fraction and timzone information) to the Unix Epoch Without !, all fields will be set to the current date and time. | Resets all fields (year, month, day, hour, minute, second, fraction and timzone information) to the Unix Epoch if they have not been parsed yet Y-m-d| will set the year, month and day to the information found in the string to parse, and sets the hour, minute and second to 0. + If this format specifier is present, trailing data in the string will not cause an error, but a warning instead Use DateTime::getLastErrors() to find out whether trailing data was present. Unrecognized characters in the format string will cause the parsing to fail and an error message is appended to the returned structure. You can query error messages with DateTime::getLastErrors(). To include literal characters in format, you have to escape them with a backslash (\\). If format does not contain the character ! then portions of the generated time which are not specified in format will be set to the current system time. If format contains the character !, then portions of the generated time not provided in format, as well as values to the left-hand side of the !, will be set to corresponding values from the Unix epoch. The Unix epoch is 1970-01-01 00:00:00 UTC.","type":"string"}},{"kind":128,"name":"$time","modifiers":0,"doc":{"description":"String representing the time.","type":"string"}},{"kind":128,"name":"$timezone","modifiers":0,"doc":{"description":"A DateTimeZone object representing the desired time zone. If timezone is omitted and time contains no timezone, the current timezone will be used. Note: The timezone parameter and the current timezone are ignored when the time parameter either contains a UNIX timestamp (e.g. 946684800) or specifies a timezone (e.g. 2010-01-28T15:00:00+02:00).","type":"DateTimeZone"}}],"doc":{"description":"Returns a new DateTime object representing the date and time specified by the time string, which was formatted in the given format.","type":"DateTime"}},{"kind":32,"name":"__set_state","modifiers":32,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"Initialization array.","type":"array"}}],"doc":{"description":"The __set_state() handler.","type":"DateTime"}},{"kind":32,"name":"setTimezone","modifiers":1,"children":[{"kind":128,"name":"$timezone","modifiers":0,"doc":{"description":"A DateTimeZone object representing the desired time zone.","type":"DateTimeZone"}}],"doc":{"description":"Sets a new timezone for a DateTime object.","type":"DateTime"}}],"doc":{"description":"Representation of date and time."}},{"kind":1,"name":"SNMPException","modifiers":0,"associated":[{"kind":1,"name":"RuntimeException"}],"children":[{"kind":16,"name":"$code","modifiers":2,"doc":{"description":"SNMPlibrary error code. Use Exception::getCode() to access it.","type":"int"}},{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Represents an error raised by SNMP. You should not throw a SNMPException from your own code. See Exceptions for more information about Exceptions in PHP."}},{"kind":1,"name":"LimitIterator","modifiers":0,"associated":[{"kind":1,"name":"IteratorIterator"},{"kind":2,"name":"OuterIterator"}],"children":[{"kind":32,"name":"seek","modifiers":1,"children":[{"kind":128,"name":"$position","modifiers":0,"doc":{"description":"The position to seek to.","type":"int"}}],"doc":{"description":"Moves the iterator to the offset specified by position.","type":"int"}},{"kind":32,"name":"getPosition","modifiers":1,"children":[],"doc":{"description":"Gets the current zero-based position of the inner Iterator.","type":"int"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Checks whether the current element is valid.","type":"bool"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Gets the key for the current item in the inner Iterator.","type":"mixed"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewinds the iterator to the starting offset specified in LimitIterator::__construct().","type":"void"}},{"kind":32,"name":"getInnerIterator","modifiers":1,"children":[],"doc":{"description":"Gets the inner Iterator.","type":"Iterator"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Moves the iterator forward.","type":"void"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Gets the current element of the inner Iterator.","type":"mixed"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The Iterator to limit.","type":"Iterator"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"Optional offset of the limit.","type":"int"}},{"kind":128,"name":"$count","modifiers":0,"value":"-1","doc":{"description":"Optional count of the limit.","type":"int"}}],"doc":{"description":"Constructs a new LimitIterator from an iterator with a given starting offset and maximum count.","type":"public"}}],"doc":{"description":"The LimitIterator class allows iteration over a limited subset of items in an Iterator."}},{"kind":1,"name":"SoapServer","modifiers":0,"associated":[],"children":[{"kind":32,"name":"addFunction","modifiers":1,"children":[{"kind":128,"name":"$functions","modifiers":0,"doc":{"description":"To export one function, pass the function name into this parameter as a string. To export several functions, pass an array of function names. To export all the functions, pass a special constant SOAP_FUNCTIONS_ALL. Note: functions must receive all input arguments in the same order as defined in the WSDL file (They should not receive any output parameters as arguments) and return one or more values. To return several values they must return an array with named output parameters.","type":"mixed"}}],"doc":{"description":"Exports one or more functions for remote clients","type":"void"}},{"kind":32,"name":"SoapServer","modifiers":0,"children":[{"kind":128,"name":"$wsdl","modifiers":0,"doc":{"description":"To use the SoapServer in WSDL mode, pass the URI of a WSDL file. Otherwise, pass NULL and set the uri option to the target namespace for the server.","type":"mixed"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Allow setting a default SOAP version (soap_version), internal character encoding (encoding), and actor URI (actor). The classmap option can be used to map some WSDL types to PHP classes. This option must be an array with WSDL types as keys and names of PHP classes as values. The typemap option is an array of type mappings. Type mapping is an array with keys type_name, type_ns (namespace URI), from_xml (callback accepting one string parameter) and to_xml (callback accepting one object parameter). The cache_wsdl option is one of WSDL_CACHE_NONE, WSDL_CACHE_DISK, WSDL_CACHE_MEMORY or WSDL_CACHE_BOTH. There is also a features option which can be set to SOAP_WAIT_ONE_WAY_CALLS, SOAP_SINGLE_ELEMENT_ARRAYS, SOAP_USE_XSI_ARRAY_TYPE. The send_errors option can be set to FALSE to sent a generic error message (\"Internal error\") instead of the specific error message sent otherwise.","type":"array"}}],"doc":{"description":"This constructor allows the creation of SoapServer objects in WSDL or non-WSDL mode.","type":"public"}},{"kind":32,"name":"setClass","modifiers":1,"children":[{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"The name of the exported class.","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"These optional parameters will be passed to the default class constructor during object creation.","type":"mixed"}}],"doc":{"description":"Exports all methods from specified class.","type":"void"}},{"kind":32,"name":"handle","modifiers":1,"children":[{"kind":128,"name":"$soap_request","modifiers":0,"doc":{"description":"The SOAP request. If this argument is omitted, the request is assumed to be in the raw POST data of the HTTP request.","type":"string"}}],"doc":{"description":"Processes a SOAP request, calls necessary functions, and sends a response back.","type":"void"}},{"kind":32,"name":"fault","modifiers":1,"children":[{"kind":128,"name":"$code","modifiers":0,"doc":{"description":"The error code to return","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"A brief description of the error","type":"string"}},{"kind":128,"name":"$actor","modifiers":0,"doc":{"description":"A string identifying the actor that caused the fault.","type":"string"}},{"kind":128,"name":"$details","modifiers":0,"doc":{"description":"More details of the fault","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the fault. This can be used to select a name from a WSDL file.","type":"string"}}],"doc":{"description":"Sends a response to the client of the current request indicating an error.","type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$wsdl","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$options","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"This function is an alias of: SoapServer::SoapServer()","type":"public"}},{"kind":32,"name":"getFunctions","modifiers":1,"children":[],"doc":{"description":"Returns a list of the defined functions in the SoapServer object. This method returns the list of all functions added by SoapServer::addFunction() or SoapServer::setClass().","type":"array"}},{"kind":32,"name":"setObject","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object to handle the requests.","type":"object"}}],"doc":{"description":"This sets a specific object as the handler for SOAP requests, rather than just a class as in SoapServer::setClass().","type":"void"}},{"kind":32,"name":"setPersistence","modifiers":1,"children":[{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"One of the SOAP_PERSISTENCE_XXX constants. SOAP_PERSISTENCE_REQUEST - SoapServer data does not persist between requests. This is the default behavior of any SoapServer object after setClass is called. SOAP_PERSISTENCE_SESSION - SoapServer data persists between requests. This is accomplished by serializing the SoapServer class data into $_SESSION['_bogus_session_name'], because of this session_start() must be called before this persistence mode is set.","type":"int"}}],"doc":{"description":"This function allows changing the persistence state of a SoapServer object between requests. This function allows saving data between requests utilizing PHP sessions. This method only has an affect on a SoapServer after it has exported functions utilizing SoapServer::setClass().","type":"void"}},{"kind":32,"name":"addSoapHeader","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The header to be returned.","type":"SoapHeader"}}],"doc":{"description":"Adds a SOAP header to be returned with the response to the current request.","type":"void"}}],"doc":{"description":"The SoapServer class provides a server for the » SOAP 1.1 and » SOAP 1.2 protocols. It can be used with or without a WSDL service description."}},{"kind":1,"name":"SessionHandler","modifiers":0,"associated":[{"kind":2,"name":"SessionHandlerInterface"}],"children":[{"kind":32,"name":"close","modifiers":1,"children":[],"doc":{"description":"Closes the current session. This method is automatically executed internally by PHP when closing the session, or explicitly via session_write_close() (which first calls the SessionHandler::write()).","type":"bool"}},{"kind":32,"name":"open","modifiers":1,"children":[{"kind":128,"name":"$save_path","modifiers":0,"doc":{"description":"The path where to store/retrieve the session.","type":"string"}},{"kind":128,"name":"$session_name","modifiers":0,"doc":{"description":"The session name.","type":"string"}}],"doc":{"description":"Create new session, or re-initialize existing session. Called internally by PHP when a session starts either automatically or when session_start() is invoked.","type":"bool"}},{"kind":32,"name":"write","modifiers":1,"children":[{"kind":128,"name":"$session_id","modifiers":0,"doc":{"description":"The session id.","type":"string"}},{"kind":128,"name":"$session_data","modifiers":0,"doc":{"description":"The encoded session data. This data is the result of the PHP internally encoding the $_SESSION superglobal to a serialized string and passing it as this parameter. Please note sessions use an alternative serialization method.","type":"string"}}],"doc":{"description":"Writes the session data to the session storage. Called by normal PHP shutdown, by session_write_close(), or when session_register_shutdown() fails. PHP will call SessionHandler::close() immediately after this method returns.","type":"bool"}},{"kind":32,"name":"read","modifiers":1,"children":[{"kind":128,"name":"$session_id","modifiers":0,"doc":{"description":"The session id to read data for.","type":"string"}}],"doc":{"description":"Reads the session data from the session storage, and returns the result back to PHP for internal processing. This method is called automatically by PHP when a session is started (either automatically or explicity with session_start() and is preceeded by an internal call to the SessionHandler::open().","type":"string"}},{"kind":32,"name":"gc","modifiers":1,"children":[{"kind":128,"name":"$maxlifetime","modifiers":0,"doc":{"description":"Sessions that have not updated for the last maxlifetime seconds will be removed.","type":"int"}}],"doc":{"description":"Cleans up expired sessions. Called randomly by PHP internally when a session starts or when session_start() is invoked. The frequency this is called is based on the session.gc_divisor and session.gc_probability configuration directives.","type":"bool"}},{"kind":32,"name":"create_sid","modifiers":1,"children":[],"doc":{"description":"Generates and returns a new session ID.","type":"string"}},{"kind":32,"name":"destroy","modifiers":1,"children":[{"kind":128,"name":"$session_id","modifiers":0,"doc":{"description":"The session ID being destroyed.","type":"string"}}],"doc":{"description":"Destroys a session. Called internally by PHP with session_regenerate_id() (assuming the $destroy is set to TRUE, by session_destroy() or when session_decode() fails.","type":"bool"}}],"doc":{"description":"SessionHandler is a special class that can be used to expose the current internal PHP session save handler by inheritance. There are seven methods which wrap the seven internal session save handler callbacks (open, close, read, write, destroy, gc and create_sid). By default, this class will wrap whatever internal save handler is set as defined by the session.save_handler configuration directive which is usually files by default. Other internal session save handlers are provided by PHP extensions such as SQLite (as sqlite), Memcache (as memcache), and Memcached (as memcached)."}},{"kind":8,"name":"XSL_CLONE_AUTO","description":""},{"kind":8,"name":"XSL_CLONE_NEVER","description":""},{"kind":8,"name":"XSL_CLONE_ALWAYS","description":""},{"kind":8,"name":"LIBXSLT_VERSION","doc":{"description":"libxslt version like 10117. Available as of PHP 5.1.2."}},{"kind":8,"name":"LIBXSLT_DOTTED_VERSION","doc":{"description":"libxslt version like 1.1.17. Available as of PHP 5.1.2."}},{"kind":8,"name":"LIBEXSLT_VERSION","doc":{"description":"libexslt version like 813. Available as of PHP 5.1.2."}},{"kind":8,"name":"LIBEXSLT_DOTTED_VERSION","doc":{"description":"libexslt version like 1.1.17. Available as of PHP 5.1.2."}},{"kind":8,"name":"XSL_SECPREF_NONE","doc":{"description":"Deactivate all security restrictions."}},{"kind":8,"name":"XSL_SECPREF_READ_FILE","doc":{"description":"Disallows reading files."}},{"kind":8,"name":"XSL_SECPREF_WRITE_FILE","doc":{"description":"Disallows writing files."}},{"kind":8,"name":"XSL_SECPREF_CREATE_DIRECTORY","doc":{"description":"Disallows creating directories."}},{"kind":8,"name":"XSL_SECPREF_READ_NETWORK","doc":{"description":"Disallows reading network files."}},{"kind":8,"name":"XSL_SECPREF_WRITE_NETWORK","doc":{"description":"Disallows writing network files."}},{"kind":8,"name":"XSL_SECPREF_DEFAULT","doc":{"description":"Disallows all write access, i.e. a bitmask of XSL_SECPREF_WRITE_NETWORK | XSL_SECPREF_CREATE_DIRECTORY | XSL_SECPREF_WRITE_FILE."}},{"kind":1,"name":"FilterIterator","modifiers":16,"associated":[{"kind":1,"name":"IteratorIterator"},{"kind":2,"name":"OuterIterator"}],"children":[{"kind":32,"name":"current","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"accept","modifiers":0,"children":[],"doc":{"description":"Returns whether the current element of the iterator is acceptable through this filter.","type":"bool"}},{"kind":32,"name":"valid","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"key","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"rewind","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"getInnerIterator","modifiers":1,"description":"","children":[],"doc":{"type":"Iterator"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator that is being filtered.","type":"Iterator"}}],"doc":{"description":"Constructs a new FilterIterator, which consists of a passed in iterator with filters applied to it.","type":"public"}},{"kind":32,"name":"next","modifiers":1,"description":"","children":[],"doc":{"type":"void"}}],"doc":{"description":"This abstract iterator filters out unwanted values. This class should be extended to implement custom iterator filters. The FilterIterator::accept() must be implemented in the subclass."}},{"kind":1,"name":"DOMComment","modifiers":0,"associated":[{"kind":1,"name":"DOMCharacterData"}],"children":[{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the comment.","type":"string"}}],"doc":{"description":"Creates a new DOMComment object. This object is read only. It may be appended to a document, but additional nodes may not be appended to this node until the node is associated with a document. To create a writeable node, use DOMDocument::createComment.","type":"public"}}],"doc":{"description":"Represents comment nodes, characters delimited by <!-- and -->."}},{"kind":1,"name":"ArithmeticError","modifiers":0,"associated":[{"kind":1,"name":"Error"}],"children":[],"doc":{"description":"ArithmeticError is thrown when an error occurs while performing mathematical operations. In PHP 7.0, these errors include attempting to perform a bitshift by a negative amount, and any call to intdiv() that would result in a value outside the possible bounds of an integer."}},{"kind":1,"name":"php_user_filter","modifiers":0,"associated":[],"children":[{"kind":32,"name":"onClose","modifiers":1,"children":[],"doc":{"description":"This method is called upon filter shutdown (typically, this is also during stream shutdown), and is executed after the flush method is called. If any resources were allocated or initialized during onCreate() this would be the time to destroy or dispose of them.","type":"void"}},{"kind":32,"name":"onCreate","modifiers":1,"children":[],"doc":{"description":"This method is called during instantiation of the filter class object. If your filter allocates or initializes any other resources (such as a buffer), this is the place to do it.","type":"bool"}},{"kind":32,"name":"filter","modifiers":1,"children":[{"kind":128,"name":"$in","modifiers":0,"doc":{"description":"in is a resource pointing to a bucket brigade which contains one or more bucket objects containing data to be filtered.","type":"resource"}},{"kind":128,"name":"$out","modifiers":0,"doc":{"description":"out is a resource pointing to a second bucket brigade into which your modified buckets should be placed.","type":"resource"}},{"kind":128,"name":"$consumed","modifiers":1024,"doc":{"description":"consumed, which must always be declared by reference, should be incremented by the length of the data which your filter reads in and alters. In most cases this means you will increment consumed by $bucket->datalen for each $bucket.","type":"int"}},{"kind":128,"name":"$closing","modifiers":0,"doc":{"description":"If the stream is in the process of closing (and therefore this is the last pass through the filterchain), the closing parameter will be set to TRUE.","type":"bool"}}],"doc":{"description":"This method is called whenever data is read from or written to the attached stream (such as with fread() or fwrite()).","type":"int"}}],"doc":{"description":"Children of this class are passed to stream_filter_register()."}},{"kind":1,"name":"SQLite3Result","modifiers":0,"associated":[],"children":[{"kind":32,"name":"numColumns","modifiers":1,"children":[],"doc":{"description":"Returns the number of columns in the result set.","type":"int"}},{"kind":32,"name":"columnType","modifiers":1,"children":[{"kind":128,"name":"$column_number","modifiers":0,"doc":{"description":"The numeric zero-based index of the column.","type":"int"}}],"doc":{"description":"Returns the type of the column identified by column_number.","type":"int"}},{"kind":32,"name":"fetchArray","modifiers":1,"children":[{"kind":128,"name":"$mode","modifiers":0,"value":"SQLITE3_BOTH","doc":{"description":"Controls how the next row will be returned to the caller. This value must be one of either SQLITE3_ASSOC, SQLITE3_NUM, or SQLITE3_BOTH. SQLITE3_ASSOC: returns an array indexed by column name as returned in the corresponding result set SQLITE3_NUM: returns an array indexed by column number as returned in the corresponding result set, starting at column 0 SQLITE3_BOTH: returns an array indexed by both column name and number as returned in the corresponding result set, starting at column 0","type":"int"}}],"doc":{"description":"Fetches a result row as an associative or numerically indexed array or both. By default, fetches as both.","type":"array"}},{"kind":32,"name":"reset","modifiers":1,"children":[],"doc":{"description":"Resets the result set back to the first row.","type":"bool"}},{"kind":32,"name":"finalize","modifiers":1,"children":[],"doc":{"description":"Closes the result set.","type":"bool"}},{"kind":32,"name":"columnName","modifiers":1,"children":[{"kind":128,"name":"$column_number","modifiers":0,"doc":{"description":"The numeric zero-based index of the column.","type":"int"}}],"doc":{"description":"Returns the name of the column specified by the column_number.","type":"string"}}],"doc":{"description":"A class that handles result sets for the SQLite 3 extension."}},{"kind":1,"name":"IntlException","modifiers":0,"associated":[{"kind":1,"name":"Exception"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"This class is used for generating exceptions when errors occur inside intl functions. Such exceptions are only generated when intl.use_exceptions is enabled."}},{"kind":8,"name":"PGSQL_LIBPQ_VERSION","doc":{"description":"Short libpq version that contains only numbers and dots."}},{"kind":8,"name":"PGSQL_LIBPQ_VERSION_STR","doc":{"description":"Long libpq version that includes compiler information."}},{"kind":8,"name":"PGSQL_ASSOC","doc":{"description":"Passed to pg_fetch_array(). Return an associative array of field names and values."}},{"kind":8,"name":"PGSQL_NUM","doc":{"description":"Passed to pg_fetch_array(). Return a numerically indexed array of field numbers and values."}},{"kind":8,"name":"PGSQL_BOTH","doc":{"description":"Passed to pg_fetch_array(). Return an array of field values that is both numerically indexed (by field number) and associated (by field name)."}},{"kind":8,"name":"PGSQL_CONNECT_FORCE_NEW","doc":{"description":"Passed to pg_connect() to force the creation of a new connection, rather than re-using an existing identical connection."}},{"kind":8,"name":"PGSQL_CONNECT_ASYNC","doc":{"description":"Passed to pg_connect() to create an asynchronous connection. Added in PHP 5.6.0."}},{"kind":8,"name":"PGSQL_CONNECTION_BAD","doc":{"description":"Returned by pg_connection_status() indicating that the database connection is in an invalid state."}},{"kind":8,"name":"PGSQL_CONNECTION_OK","doc":{"description":"Returned by pg_connection_status() indicating that the database connection is in a valid state."}},{"kind":8,"name":"PGSQL_SEEK_SET","doc":{"description":"Passed to pg_lo_seek(). Seek operation is to begin from the start of the object."}},{"kind":8,"name":"PGSQL_SEEK_CUR","doc":{"description":"Passed to pg_lo_seek(). Seek operation is to begin from the current position."}},{"kind":8,"name":"PGSQL_SEEK_END","doc":{"description":"Passed to pg_lo_seek(). Seek operation is to begin from the end of the object."}},{"kind":8,"name":"PGSQL_EMPTY_QUERY","doc":{"description":"Returned by pg_result_status(). The string sent to the server was empty."}},{"kind":8,"name":"PGSQL_COMMAND_OK","doc":{"description":"Returned by pg_result_status(). Successful completion of a command returning no data."}},{"kind":8,"name":"PGSQL_TUPLES_OK","doc":{"description":"Returned by pg_result_status(). Successful completion of a command returning data (such as a SELECT or SHOW)."}},{"kind":8,"name":"PGSQL_COPY_OUT","doc":{"description":"Returned by pg_result_status(). Copy Out (from server) data transfer started."}},{"kind":8,"name":"PGSQL_COPY_IN","doc":{"description":"Returned by pg_result_status(). Copy In (to server) data transfer started."}},{"kind":8,"name":"PGSQL_BAD_RESPONSE","doc":{"description":"Returned by pg_result_status(). The server's response was not understood."}},{"kind":8,"name":"PGSQL_NONFATAL_ERROR","doc":{"description":"Returned by pg_result_status(). A nonfatal error (a notice or warning) occurred."}},{"kind":8,"name":"PGSQL_FATAL_ERROR","doc":{"description":"Returned by pg_result_status(). A fatal error occurred."}},{"kind":8,"name":"PGSQL_TRANSACTION_IDLE","doc":{"description":"Returned by pg_transaction_status(). Connection is currently idle, not in a transaction."}},{"kind":8,"name":"PGSQL_TRANSACTION_ACTIVE","doc":{"description":"Returned by pg_transaction_status(). A command is in progress on the connection. A query has been sent via the connection and not yet completed."}},{"kind":8,"name":"PGSQL_TRANSACTION_INTRANS","doc":{"description":"Returned by pg_transaction_status(). The connection is idle, in a transaction block."}},{"kind":8,"name":"PGSQL_TRANSACTION_INERROR","doc":{"description":"Returned by pg_transaction_status(). The connection is idle, in a failed transaction block."}},{"kind":8,"name":"PGSQL_TRANSACTION_UNKNOWN","doc":{"description":"Returned by pg_transaction_status(). The connection is bad."}},{"kind":8,"name":"PGSQL_DIAG_SEVERITY","doc":{"description":"Passed to pg_result_error_field(). The severity; the field contents are ERROR, FATAL, or PANIC (in an error message), or WARNING, NOTICE, DEBUG, INFO, or LOG (in a notice message), or a localized translation of one of these. Always present."}},{"kind":8,"name":"PGSQL_DIAG_SQLSTATE","doc":{"description":"Passed to pg_result_error_field(). The SQLSTATE code for the error. The SQLSTATE code identifies the type of error that has occurred; it can be used by front-end applications to perform specific operations (such as error handling) in response to a particular database error. This field is not localizable, and is always present."}},{"kind":8,"name":"PGSQL_DIAG_MESSAGE_PRIMARY","doc":{"description":"Passed to pg_result_error_field(). The primary human-readable error message (typically one line). Always present."}},{"kind":8,"name":"PGSQL_DIAG_MESSAGE_DETAIL","doc":{"description":"Passed to pg_result_error_field(). Detail: an optional secondary error message carrying more detail about the problem. May run to multiple lines."}},{"kind":8,"name":"PGSQL_DIAG_MESSAGE_HINT","doc":{"description":"Passed to pg_result_error_field(). Hint: an optional suggestion what to do about the problem. This is intended to differ from detail in that it offers advice (potentially inappropriate) rather than hard facts. May run to multiple lines."}},{"kind":8,"name":"PGSQL_DIAG_STATEMENT_POSITION","doc":{"description":"Passed to pg_result_error_field(). A string containing a decimal integer indicating an error cursor position as an index into the original statement string. The first character has index 1, and positions are measured in characters not bytes."}},{"kind":8,"name":"PGSQL_DIAG_INTERNAL_POSITION","doc":{"description":"Passed to pg_result_error_field(). This is defined the same as the PG_DIAG_STATEMENT_POSITION field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client. The PG_DIAG_INTERNAL_QUERY field will always appear when this field appears."}},{"kind":8,"name":"PGSQL_DIAG_INTERNAL_QUERY","doc":{"description":"Passed to pg_result_error_field(). The text of a failed internally-generated command. This could be, for example, a SQL query issued by a PL/pgSQL function."}},{"kind":8,"name":"PGSQL_DIAG_CONTEXT","doc":{"description":"Passed to pg_result_error_field(). An indication of the context in which the error occurred. Presently this includes a call stack traceback of active procedural language functions and internally-generated queries. The trace is one entry per line, most recent first."}},{"kind":8,"name":"PGSQL_DIAG_SOURCE_FILE","doc":{"description":"Passed to pg_result_error_field(). The file name of the PostgreSQL source-code location where the error was reported."}},{"kind":8,"name":"PGSQL_DIAG_SOURCE_LINE","doc":{"description":"Passed to pg_result_error_field(). The line number of the PostgreSQL source-code location where the error was reported."}},{"kind":8,"name":"PGSQL_DIAG_SOURCE_FUNCTION","doc":{"description":"Passed to pg_result_error_field(). The name of the PostgreSQL source-code function reporting the error."}},{"kind":8,"name":"PGSQL_ERRORS_TERSE","doc":{"description":"Passed to pg_set_error_verbosity(). Specified that returned messages include severity, primary text, and position only; this will normally fit on a single line."}},{"kind":8,"name":"PGSQL_ERRORS_DEFAULT","doc":{"description":"Passed to pg_set_error_verbosity(). The default mode produces messages that include the above plus any detail, hint, or context fields (these may span multiple lines)."}},{"kind":8,"name":"PGSQL_ERRORS_VERBOSE","doc":{"description":"Passed to pg_set_error_verbosity(). The verbose mode includes all available fields."}},{"kind":8,"name":"PGSQL_STATUS_LONG","doc":{"description":"Passed to pg_result_status(). Indicates that numerical result code is desired."}},{"kind":8,"name":"PGSQL_STATUS_STRING","doc":{"description":"Passed to pg_result_status(). Indicates that textual result command tag is desired."}},{"kind":8,"name":"PGSQL_CONV_IGNORE_DEFAULT","doc":{"description":"Passed to pg_convert(). Ignore default values in the table during conversion."}},{"kind":8,"name":"PGSQL_CONV_FORCE_NULL","doc":{"description":"Passed to pg_convert(). Use SQL NULL in place of an empty string."}},{"kind":8,"name":"PGSQL_CONV_IGNORE_NOT_NULL","doc":{"description":"Passed to pg_convert(). Ignore conversion of NULL into SQL NOT NULL columns."}},{"kind":8,"name":"PGSQL_DML_NO_CONV","doc":{"description":"Passed to pg_insert(), pg_select(), pg_update() and pg_delete(). All parameters passed as is. Manual escape is required if parameters contain user supplied data. Use pg_escape_string() for it."}},{"kind":8,"name":"PGSQL_DML_EXEC","doc":{"description":"Passed to pg_insert(), pg_select(), pg_update() and pg_delete(). Execute query by these functions."}},{"kind":8,"name":"PGSQL_DML_ASYNC","doc":{"description":"Passed to pg_insert(), pg_select(), pg_update() and pg_delete(). Execute asynchronous query by these functions."}},{"kind":8,"name":"PGSQL_DML_STRING","doc":{"description":"Passed to pg_insert(), pg_select(), pg_update() and pg_delete(). Return executed query string."}},{"kind":8,"name":"PGSQL_DML_ESCAPE","doc":{"description":"Passed to pg_insert(), pg_select(), pg_update() and pg_delete(). Apply escape to all parameters instead of calling pg_convert() internally. This option omits meta data look up. Query could be as fast as pg_query() and pg_send_query()."}},{"kind":8,"name":"PGSQL_POLLING_FAILED","doc":{"description":"Returned by pg_connect_poll() to indicate that the connection attempt failed."}},{"kind":8,"name":"PGSQL_POLLING_READING","doc":{"description":"Returned by pg_connect_poll() to indicate that the connection is waiting for the PostgreSQL socket to be readable."}},{"kind":8,"name":"PGSQL_POLLING_WRITING","doc":{"description":"Returned by pg_connect_poll() to indicate that the connection is waiting for the PostgreSQL socket to be writable."}},{"kind":8,"name":"PGSQL_POLLING_OK","doc":{"description":"Returned by pg_connect_poll() to indicate that the connection is ready to be used."}},{"kind":8,"name":"PGSQL_POLLING_ACTIVE","doc":{"description":"Returned by pg_connect_poll() to indicate that the connection is currently active."}},{"kind":1,"name":"DOMCdataSection","modifiers":0,"associated":[{"kind":1,"name":"DOMText"}],"children":[{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the CDATA node. If not supplied, an empty CDATA node is created.","type":"string"}}],"doc":{"description":"Constructs a new CDATA node. This works like the DOMText class.","type":"public"}}],"doc":{"description":"The DOMCdataSection inherits from DOMText for textural representation of CData constructs."}},{"kind":1,"name":"BadFunctionCallException","modifiers":0,"associated":[{"kind":1,"name":"LogicException"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown if a callback refers to an undefined function or if some arguments are missing."}},{"kind":1,"name":"ParentIterator","modifiers":0,"associated":[{"kind":1,"name":"RecursiveFilterIterator"},{"kind":2,"name":"RecursiveIterator"},{"kind":2,"name":"OuterIterator"}],"children":[{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewinds the iterator.","type":"void"}},{"kind":32,"name":"getChildren","modifiers":1,"children":[],"doc":{"description":"Get the inner iterator's children contained in a ParentIterator.","type":"ParentIterator"}},{"kind":32,"name":"accept","modifiers":1,"children":[],"doc":{"description":"Determines if the current element has children.","type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator being constructed upon.","type":"RecursiveIterator"}}],"doc":{"description":"Constructs a ParentIterator on an iterator.","type":"public"}},{"kind":32,"name":"hasChildren","modifiers":1,"children":[],"doc":{"description":"Check whether the inner iterator's current element has children.","type":"bool"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Moves the iterator forward.","type":"void"}}],"doc":{"description":"This extended FilterIterator allows a recursive iteration using RecursiveIteratorIterator that only shows those elements which have children."}},{"kind":2,"name":"Countable","modifiers":0,"associated":[],"children":[{"kind":32,"name":"count","modifiers":1,"children":[],"doc":{"description":"This method is executed when using the count() function on an object implementing Countable.","type":"int"}}],"doc":{"description":"Classes implementing Countable can be used with the count() function."}},{"kind":2,"name":"IteratorAggregate","modifiers":0,"associated":[{"kind":1,"name":"Traversable"}],"children":[{"kind":32,"name":"getIterator","modifiers":1,"children":[],"doc":{"description":"Returns an external iterator.","type":"Traversable"}}],"doc":{"description":"Interface to create an external Iterator."}},{"kind":1,"name":"SplTempFileObject","modifiers":0,"associated":[{"kind":1,"name":"SplFileObject"},{"kind":2,"name":"SeekableIterator"},{"kind":2,"name":"RecursiveIterator"}],"children":[{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$max_memory","modifiers":0,"doc":{"description":"The maximum amount of memory (in bytes, default is 2 MB) for the temporary file to use. If the temporary file exceeds this size, it will be moved to a file in the system's temp directory. If max_memory is negative, only memory will be used. If max_memory is zero, no memory will be used.","type":"int"}}],"doc":{"description":"Construct a new temporary file object.","type":"public"}}],"doc":{"description":"The SplTempFileObject class offers an object oriented interface for a temporary file."}},{"kind":8,"name":"SEEK_SET","description":""},{"kind":8,"name":"SEEK_CUR","description":""},{"kind":8,"name":"SEEK_END","description":""},{"kind":8,"name":"LOCK_SH","description":""},{"kind":8,"name":"LOCK_EX","description":""},{"kind":8,"name":"LOCK_UN","description":""},{"kind":8,"name":"LOCK_NB","description":""},{"kind":8,"name":"GLOB_BRACE","description":""},{"kind":8,"name":"GLOB_ONLYDIR","description":""},{"kind":8,"name":"GLOB_MARK","description":""},{"kind":8,"name":"GLOB_NOSORT","description":""},{"kind":8,"name":"GLOB_NOCHECK","description":""},{"kind":8,"name":"GLOB_NOESCAPE","description":""},{"kind":8,"name":"GLOB_AVAILABLE_FLAGS","description":""},{"kind":8,"name":"PATHINFO_DIRNAME","description":""},{"kind":8,"name":"PATHINFO_BASENAME","description":""},{"kind":8,"name":"PATHINFO_EXTENSION","description":""},{"kind":8,"name":"PATHINFO_FILENAME","doc":{"description":"Since PHP 5.2.0."}},{"kind":8,"name":"FILE_USE_INCLUDE_PATH","doc":{"description":"Search for filename in include_path (since PHP 5)."}},{"kind":8,"name":"FILE_NO_DEFAULT_CONTEXT","description":""},{"kind":8,"name":"FILE_APPEND","doc":{"description":"Append content to existing file."}},{"kind":8,"name":"FILE_IGNORE_NEW_LINES","doc":{"description":"Strip EOL characters (since PHP 5)."}},{"kind":8,"name":"FILE_SKIP_EMPTY_LINES","doc":{"description":"Skip empty lines (since PHP 5)."}},{"kind":8,"name":"FILE_BINARY","doc":{"description":"Binary mode (since PHP 5.2.7). Note: This constant has no effect, and is only available for forward compatibility."}},{"kind":8,"name":"FILE_TEXT","doc":{"description":"Text mode (since PHP 5.2.7). Note: This constant has no effect, and is only available for forward compatibility."}},{"kind":8,"name":"INI_SCANNER_NORMAL","doc":{"description":"Normal INI scanner mode (since PHP 5.3)."}},{"kind":8,"name":"INI_SCANNER_RAW","doc":{"description":"Raw INI scanner mode (since PHP 5.3)."}},{"kind":8,"name":"INI_SCANNER_TYPED","doc":{"description":"Typed INI scanner mode (since PHP 5.6.1)."}},{"kind":8,"name":"FNM_NOESCAPE","doc":{"description":"Disable backslash escaping."}},{"kind":8,"name":"FNM_PATHNAME","doc":{"description":"Slash in string only matches slash in the given pattern."}},{"kind":8,"name":"FNM_PERIOD","doc":{"description":"Leading period in string must be exactly matched by period in the given pattern."}},{"kind":8,"name":"FNM_CASEFOLD","doc":{"description":"Caseless match. Part of the GNU extension."}},{"kind":1,"name":"Spoofchecker","modifiers":0,"associated":[],"children":[{"kind":1024,"name":"SINGLE_SCRIPT_CONFUSABLE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"MIXED_SCRIPT_CONFUSABLE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WHOLE_SCRIPT_CONFUSABLE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ANY_CASE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SINGLE_SCRIPT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"INVISIBLE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CHAR_LIMIT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"Creates new instance of Spoofchecker.","type":"public"}},{"kind":32,"name":"isSuspicious","modifiers":1,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"String to test.","type":"string"}},{"kind":128,"name":"$error","modifiers":1024,"doc":{"description":"This variable is set by-reference to string containing an error, if there were any.","type":"string"}}],"doc":{"description":"Checks if given string contains any suspicious characters like letters which are almost identical visually, but are Unicode characters from different sets.","type":"bool"}},{"kind":32,"name":"areConfusable","modifiers":1,"children":[{"kind":128,"name":"$str1","modifiers":0,"doc":{"description":"First string to check.","type":"string"}},{"kind":128,"name":"$str2","modifiers":0,"doc":{"description":"Second string to check.","type":"string"}},{"kind":128,"name":"$error","modifiers":1024,"doc":{"description":"This variable is set by-reference to string containing an error, if there were any.","type":"string"}}],"doc":{"description":"Checks whether two given strings can easily be mistaken.","type":"bool"}},{"kind":32,"name":"setAllowedLocales","modifiers":1,"description":"","children":[{"kind":128,"name":"$locale_list","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"setChecks","modifiers":1,"description":"","children":[{"kind":128,"name":"$checks","modifiers":0,"description":"","doc":{"type":"long"}}],"doc":{"type":"void"}}],"doc":{"description":"This class is provided because Unicode contains large number of characters and incorporates the varied writing systems of the world and their incorrect usage can expose programs or systems to possible security attacks using characters similarity."}},{"kind":1,"name":"IntlTimeZone","modifiers":0,"associated":[],"description":"","children":[{"kind":1024,"name":"DISPLAY_SHORT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DISPLAY_LONG","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"getErrorMessage","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"getTZDataVersion","modifiers":32,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"getDisplayName","modifiers":1,"description":"","children":[{"kind":128,"name":"$isDaylight","modifiers":0,"description":"","doc":{"type":"bool"}},{"kind":128,"name":"$style","modifiers":0,"description":"","doc":{"type":"integer"}},{"kind":128,"name":"$locale","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"string"}},{"kind":32,"name":"fromDateTimeZone","modifiers":32,"description":"","children":[{"kind":128,"name":"$zoneId","modifiers":0,"description":"","doc":{"type":"DateTimeZone"}}],"doc":{"type":"IntlTimeZone"}},{"kind":32,"name":"getEquivalentID","modifiers":32,"description":"","children":[{"kind":128,"name":"$zoneId","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$index","modifiers":0,"description":"","doc":{"type":"integer"}}],"doc":{"type":"string"}},{"kind":32,"name":"createEnumeration","modifiers":32,"description":"","children":[{"kind":128,"name":"$countryOrRawOffset","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"type":"IntlIterator"}},{"kind":32,"name":"getCanonicalID","modifiers":32,"description":"","children":[{"kind":128,"name":"$zoneId","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$isSystemID","modifiers":1024,"description":"","doc":{"type":"bool"}}],"doc":{"type":"string"}},{"kind":32,"name":"getGMT","modifiers":32,"description":"","children":[],"doc":{"type":"IntlTimeZone"}},{"kind":32,"name":"createDefault","modifiers":32,"description":"","children":[],"doc":{"type":"IntlTimeZone"}},{"kind":32,"name":"createTimeZone","modifiers":32,"description":"","children":[{"kind":128,"name":"$zoneId","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"IntlTimeZone"}},{"kind":32,"name":"getRawOffset","modifiers":1,"description":"","children":[],"doc":{"type":"integer"}},{"kind":32,"name":"getOffset","modifiers":1,"description":"","children":[{"kind":128,"name":"$date","modifiers":0,"description":"","doc":{"type":"float"}},{"kind":128,"name":"$local","modifiers":0,"description":"","doc":{"type":"bool"}},{"kind":128,"name":"$rawOffset","modifiers":1024,"description":"","doc":{"type":"integer"}},{"kind":128,"name":"$dstOffset","modifiers":1024,"description":"","doc":{"type":"integer"}}],"doc":{"type":"integer"}},{"kind":32,"name":"hasSameRules","modifiers":1,"description":"","children":[{"kind":128,"name":"$otherTimeZone","modifiers":0,"description":"","doc":{"type":"IntlTimeZone"}}],"doc":{"type":"bool"}},{"kind":32,"name":"countEquivalentIDs","modifiers":32,"description":"","children":[{"kind":128,"name":"$zoneId","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"integer"}},{"kind":32,"name":"useDaylightTime","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"getDSTSavings","modifiers":1,"description":"","children":[],"doc":{"type":"integer"}},{"kind":32,"name":"getID","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"toDateTimeZone","modifiers":1,"description":"","children":[],"doc":{"type":"DateTimeZone"}},{"kind":32,"name":"getErrorCode","modifiers":1,"description":"","children":[],"doc":{"type":"integer"}}]},{"kind":1,"name":"CachingIterator","modifiers":0,"associated":[{"kind":1,"name":"IteratorIterator"},{"kind":2,"name":"OuterIterator"},{"kind":2,"name":"ArrayAccess"},{"kind":2,"name":"Countable"}],"children":[{"kind":1024,"name":"CALL_TOSTRING","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CATCH_GET_CHILD","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"TOSTRING_USE_KEY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"TOSTRING_USE_CURRENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"TOSTRING_USE_INNER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FULL_CACHE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"valid","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"__toString","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"hasNext","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"offsetGet","modifiers":1,"description":"","children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Description...","type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"offsetExists","modifiers":1,"description":"","children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index being checked.","type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"setFlags","modifiers":1,"description":"","children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"Bitmask of the flags to set.","type":"int"}}],"doc":{"type":"void"}},{"kind":32,"name":"offsetSet","modifiers":1,"description":"","children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index of the element to be set.","type":"string"}},{"kind":128,"name":"$newval","modifiers":0,"doc":{"description":"The new value for the index.","type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"getFlags","modifiers":1,"description":"","children":[],"doc":{"type":"int"}},{"kind":32,"name":"key","modifiers":1,"description":"","children":[],"doc":{"type":"scalar"}},{"kind":32,"name":"getCache","modifiers":1,"children":[],"doc":{"description":"Retrieve the contents of the cache.","type":"array"}},{"kind":32,"name":"current","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"offsetUnset","modifiers":1,"description":"","children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index of the element to be unset.","type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"next","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"count","modifiers":1,"description":"","children":[],"doc":{"type":"int"}},{"kind":32,"name":"__construct","modifiers":0,"description":"","children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"Iterator to cache","type":"Iterator"}},{"kind":128,"name":"$flags","modifiers":0,"value":"self::CALL_TOSTRING","doc":{"description":"Bitmask of flags.","type":"int"}}],"doc":{"type":"public"}},{"kind":32,"name":"rewind","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"getInnerIterator","modifiers":1,"description":"","children":[],"doc":{"type":"Iterator"}}],"doc":{"description":"This object supports cached iteration over another iterator."}},{"kind":1,"name":"DomainException","modifiers":0,"associated":[{"kind":1,"name":"LogicException"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown if a value does not adhere to a defined valid data domain."}},{"kind":1,"name":"ReflectionFunction","modifiers":0,"associated":[{"kind":1,"name":"ReflectionFunctionAbstract"},{"kind":2,"name":"Reflector"}],"children":[{"kind":1024,"name":"IS_DEPRECATED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"invokeArgs","modifiers":1,"children":[{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"The passed arguments to the function as an array, much like call_user_func_array() works.","type":"array"}}],"doc":{"description":"Invokes the function and pass its arguments as array.","type":"mixed"}},{"kind":32,"name":"isDisabled","modifiers":1,"children":[],"doc":{"description":"Checks if the function is disabled, via the disable_functions directive.","type":"bool"}},{"kind":32,"name":"export","modifiers":32,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The reflection to export.","type":"string"}},{"kind":128,"name":"$return","modifiers":0,"doc":{"description":"Setting to TRUE will return the export, as opposed to emitting it. Setting to FALSE (the default) will do the opposite.","type":"string"}}],"doc":{"description":"Exports a Reflected function.","type":"string"}},{"kind":32,"name":"getClosure","modifiers":1,"description":"","children":[],"doc":{"type":"Closure"}},{"kind":32,"name":"invoke","modifiers":1,"children":[{"kind":128,"name":"$parameter","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Invokes a reflected function.","type":"mixed"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"To string.","type":"string"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the function to reflect or a closure.","type":"mixed"}}],"doc":{"description":"Constructs a ReflectionFunction object.","type":"public"}}],"doc":{"description":"The ReflectionFunction class reports information about a function."}},{"kind":1,"name":"UnderflowException","modifiers":0,"associated":[{"kind":1,"name":"RuntimeException"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown when performing an invalid operation on an empty container, such as removing an element."}},{"kind":1,"name":"streamWrapper","modifiers":0,"associated":[],"children":[{"kind":16,"name":"$context","modifiers":1,"description":"","doc":{"type":"resource"}},{"kind":32,"name":"rename","modifiers":1,"children":[{"kind":128,"name":"$path_from","modifiers":0,"doc":{"description":"The URL to the current file.","type":"string"}},{"kind":128,"name":"$path_to","modifiers":0,"doc":{"description":"The URL which the path_from should be renamed to.","type":"string"}}],"doc":{"description":"This method is called in response to rename().","type":"bool"}},{"kind":32,"name":"stream_read","modifiers":1,"children":[{"kind":128,"name":"$count","modifiers":0,"doc":{"description":"How many bytes of data from the current position should be returned.","type":"int"}}],"doc":{"description":"This method is called in response to fread() and fgets().","type":"string"}},{"kind":32,"name":"url_stat","modifiers":1,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The file path or URL to stat. Note that in the case of a URL, it must be a :// delimited URL. Other URL forms are not supported.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"Holds additional flags set by the streams API. It can hold one or more of the following values OR'd together. Flag Description STREAM_URL_STAT_LINK For resources with the ability to link to other resource (such as an HTTP Location: forward, or a filesystem symlink). This flag specified that only information about the link itself should be returned, not the resource pointed to by the link. This flag is set in response to calls to lstat(), is_link(), or filetype(). STREAM_URL_STAT_QUIET If this flag is set, your wrapper should not raise any errors. If this flag is not set, you are responsible for reporting errors using the trigger_error() function during stating of the path.","type":"int"}}],"doc":{"description":"This method is called in response to all stat() related functions, such as:","type":"array"}},{"kind":32,"name":"__destruct","modifiers":0,"children":[],"doc":{"description":"Called when closing the stream wrapper, right before streamWrapper::stream_flush().","type":"void"}},{"kind":32,"name":"stream_set_option","modifiers":1,"children":[{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"One of: STREAM_OPTION_BLOCKING (The method was called in response to stream_set_blocking()) STREAM_OPTION_READ_TIMEOUT (The method was called in response to stream_set_timeout()) STREAM_OPTION_WRITE_BUFFER (The method was called in response to stream_set_write_buffer())","type":"int"}},{"kind":128,"name":"$arg1","modifiers":0,"doc":{"description":"If option is STREAM_OPTION_BLOCKING: requested blocking mode (1 meaning block 0 not blocking). STREAM_OPTION_READ_TIMEOUT: the timeout in seconds. STREAM_OPTION_WRITE_BUFFER: buffer mode (STREAM_BUFFER_NONE or STREAM_BUFFER_FULL).","type":"int"}},{"kind":128,"name":"$arg2","modifiers":0,"doc":{"description":"If option is STREAM_OPTION_BLOCKING: This option is not set. STREAM_OPTION_READ_TIMEOUT: the timeout in microseconds. STREAM_OPTION_WRITE_BUFFER: the requested buffer size.","type":"int"}}],"doc":{"description":"This method is called to set options on the stream.","type":"bool"}},{"kind":32,"name":"unlink","modifiers":1,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The file URL which should be deleted.","type":"string"}}],"doc":{"description":"This method is called in response to unlink().","type":"bool"}},{"kind":32,"name":"stream_tell","modifiers":1,"children":[],"doc":{"description":"This method is called in response to fseek() to determine the current position.","type":"int"}},{"kind":32,"name":"dir_opendir","modifiers":1,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"Specifies the URL that was passed to opendir(). Note: The URL can be broken apart with parse_url().","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Whether or not to enforce safe_mode (0x04).","type":"int"}}],"doc":{"description":"This method is called in response to opendir().","type":"bool"}},{"kind":32,"name":"dir_closedir","modifiers":1,"children":[],"doc":{"description":"This method is called in response to closedir().","type":"bool"}},{"kind":32,"name":"dir_rewinddir","modifiers":1,"children":[],"doc":{"description":"This method is called in response to rewinddir().","type":"bool"}},{"kind":32,"name":"stream_open","modifiers":1,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"Specifies the URL that was passed to the original function. Note: The URL can be broken apart with parse_url(). Note that only URLs delimited by :// are supported. : and :/ while technically valid URLs, are not.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The mode used to open the file, as detailed for fopen(). Note: Remember to check if the mode is valid for the path requested.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Holds additional flags set by the streams API. It can hold one or more of the following values OR'd together. Flag Description STREAM_USE_PATH If path is relative, search for the resource using the include_path. STREAM_REPORT_ERRORS If this flag is set, you are responsible for raising errors using trigger_error() during opening of the stream. If this flag is not set, you should not raise any errors.","type":"int"}},{"kind":128,"name":"$opened_path","modifiers":1024,"doc":{"description":"If the path is opened successfully, and STREAM_USE_PATH is set in options, opened_path should be set to the full path of the file/resource that was actually opened.","type":"string"}}],"doc":{"description":"This method is called immediately after the wrapper is initialized (f.e. by fopen() and file_get_contents()).","type":"bool"}},{"kind":32,"name":"mkdir","modifiers":1,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"Directory which should be created.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The value passed to mkdir().","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.","type":"int"}}],"doc":{"description":"This method is called in response to mkdir().","type":"bool"}},{"kind":32,"name":"rmdir","modifiers":1,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The directory URL which should be removed.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.","type":"int"}}],"doc":{"description":"This method is called in response to rmdir().","type":"bool"}},{"kind":32,"name":"stream_seek","modifiers":1,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The stream offset to seek to.","type":"int"}},{"kind":128,"name":"$whence","modifiers":0,"value":"SEEK_SET","doc":{"description":"Possible values: SEEK_SET - Set position equal to offset bytes. SEEK_CUR - Set position to current location plus offset. SEEK_END - Set position to end-of-file plus offset.","type":"int"}}],"doc":{"description":"This method is called in response to fseek().","type":"bool"}},{"kind":32,"name":"stream_stat","modifiers":1,"children":[],"doc":{"description":"This method is called in response to fstat().","type":"array"}},{"kind":32,"name":"stream_eof","modifiers":1,"children":[],"doc":{"description":"This method is called in response to feof().","type":"bool"}},{"kind":32,"name":"stream_cast","modifiers":1,"children":[{"kind":128,"name":"$cast_as","modifiers":0,"doc":{"description":"Can be STREAM_CAST_FOR_SELECT when stream_select() is calling stream_cast() or STREAM_CAST_AS_STREAM when stream_cast() is called for other uses.","type":"int"}}],"doc":{"description":"This method is called in response to stream_select().","type":"resource"}},{"kind":32,"name":"stream_flush","modifiers":1,"children":[],"doc":{"description":"This method is called in response to fflush() and when the stream is being closed while any unflushed data has been written to it before.","type":"bool"}},{"kind":32,"name":"stream_metadata","modifiers":1,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The file path or URL to set metadata. Note that in the case of a URL, it must be a :// delimited URL. Other URL forms are not supported.","type":"string"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"One of: STREAM_META_TOUCH (The method was called in response to touch()) STREAM_META_OWNER_NAME (The method was called in response to chown() with string parameter) STREAM_META_OWNER (The method was called in response to chown()) STREAM_META_GROUP_NAME (The method was called in response to chgrp()) STREAM_META_GROUP (The method was called in response to chgrp()) STREAM_META_ACCESS (The method was called in response to chmod())","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"If option is STREAM_META_TOUCH: Array consisting of two arguments of the touch() function. STREAM_META_OWNER_NAME or STREAM_META_GROUP_NAME: The name of the owner user/group as string. STREAM_META_OWNER or STREAM_META_GROUP: The value owner user/group argument as integer. STREAM_META_ACCESS: The argument of the chmod() as integer.","type":"mixed"}}],"doc":{"description":"This method is called to set metadata on the stream. It is called when one of the following functions is called on a stream URL:","type":"bool"}},{"kind":32,"name":"stream_lock","modifiers":1,"children":[{"kind":128,"name":"$operation","modifiers":0,"doc":{"description":"operation is one of the following: LOCK_SH to acquire a shared lock (reader). LOCK_EX to acquire an exclusive lock (writer). LOCK_UN to release a lock (shared or exclusive). LOCK_NB if you don't want flock() to block while locking. (not supported on Windows)","type":"int"}}],"doc":{"description":"This method is called in response to flock(), when file_put_contents() (when flags contains LOCK_EX), stream_set_blocking() and when closing the stream (LOCK_UN).","type":"bool"}},{"kind":32,"name":"stream_close","modifiers":1,"children":[],"doc":{"description":"This method is called in response to fclose().","type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"Called when opening the stream wrapper, right before streamWrapper::stream_open().","type":"streamWrapper"}},{"kind":32,"name":"stream_write","modifiers":1,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"Should be stored into the underlying stream. Note: If there is not enough room in the underlying stream, store as much as possible.","type":"string"}}],"doc":{"description":"This method is called in response to fwrite().","type":"int"}},{"kind":32,"name":"dir_readdir","modifiers":1,"children":[],"doc":{"description":"This method is called in response to readdir().","type":"string"}},{"kind":32,"name":"stream_truncate","modifiers":1,"children":[{"kind":128,"name":"$new_size","modifiers":0,"doc":{"description":"The new size.","type":"int"}}],"doc":{"description":"Will respond to truncation, e.g., through ftruncate().","type":"bool"}}],"doc":{"description":"Allows you to implement your own protocol handlers and streams for use with all the other filesystem functions (such as fopen(), fread() etc.)."}},{"kind":1,"name":"SplMinHeap","modifiers":0,"associated":[{"kind":1,"name":"SplHeap"},{"kind":2,"name":"Iterator"},{"kind":2,"name":"Countable"}],"children":[{"kind":32,"name":"compare","modifiers":2,"children":[{"kind":128,"name":"$value1","modifiers":0,"doc":{"description":"The value of the first node being compared.","type":"mixed"}},{"kind":128,"name":"$value2","modifiers":0,"doc":{"description":"The value of the second node being compared.","type":"mixed"}}],"doc":{"description":"Compare value1 with value2.","type":"int"}}],"doc":{"description":"The SplMinHeap class provides the main functionalities of a heap, keeping the minimum on the top."}},{"kind":8,"name":"CRYPT_SALT_LENGTH","description":""},{"kind":8,"name":"CRYPT_STD_DES","description":""},{"kind":8,"name":"CRYPT_EXT_DES","description":""},{"kind":8,"name":"CRYPT_MD5","description":""},{"kind":8,"name":"CRYPT_BLOWFISH","description":""},{"kind":8,"name":"HTML_SPECIALCHARS","description":""},{"kind":8,"name":"HTML_ENTITIES","description":""},{"kind":8,"name":"ENT_COMPAT","description":""},{"kind":8,"name":"ENT_QUOTES","description":""},{"kind":8,"name":"ENT_NOQUOTES","description":""},{"kind":8,"name":"ENT_IGNORE","description":""},{"kind":8,"name":"ENT_SUBSTITUTE","description":""},{"kind":8,"name":"ENT_DISALLOWED","description":""},{"kind":8,"name":"ENT_HTML401","description":""},{"kind":8,"name":"ENT_XML1","description":""},{"kind":8,"name":"ENT_XHTML","description":""},{"kind":8,"name":"ENT_HTML5","description":""},{"kind":8,"name":"CHAR_MAX","description":""},{"kind":8,"name":"LC_CTYPE","description":""},{"kind":8,"name":"LC_NUMERIC","description":""},{"kind":8,"name":"LC_TIME","description":""},{"kind":8,"name":"LC_COLLATE","description":""},{"kind":8,"name":"LC_MONETARY","description":""},{"kind":8,"name":"LC_ALL","description":""},{"kind":8,"name":"LC_MESSAGES","description":""},{"kind":8,"name":"STR_PAD_LEFT","description":""},{"kind":8,"name":"STR_PAD_RIGHT","description":""},{"kind":8,"name":"STR_PAD_BOTH","description":""},{"kind":1,"name":"ZipArchive","modifiers":0,"associated":[],"children":[{"kind":32,"name":"addFile","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The path to the file to add.","type":"string"}},{"kind":128,"name":"$localname","modifiers":0,"value":"NULL","doc":{"description":"If supplied, this is the local name inside the ZIP archive that will override the filename.","type":"string"}},{"kind":128,"name":"$start","modifiers":0,"value":"0","doc":{"description":"This parameter is not used but is required to extend ZipArchive.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"value":"0","doc":{"description":"This parameter is not used but is required to extend ZipArchive.","type":"int"}}],"doc":{"description":"Adds a file to a ZIP archive from a given path.","type":"bool"}},{"kind":32,"name":"addPattern","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"A PCRE pattern against which files will be matched.","type":"string"}},{"kind":128,"name":"$path","modifiers":0,"value":"\".\"","doc":{"description":"The directory that will be scanned. Defaults to the current working directory.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"array()","doc":{"description":"An associative array of options accepted by ZipArchive::addGlob().","type":"array"}}],"doc":{"description":"Add files from a directory which match the regular expression pattern. The operation is not recursive. The pattern will be matched against the file name only.","type":"bool"}},{"kind":32,"name":"extractTo","modifiers":0,"children":[{"kind":128,"name":"$destination","modifiers":0,"doc":{"description":"Location where to extract the files.","type":"string"}},{"kind":128,"name":"$entries","modifiers":0,"doc":{"description":"The entries to extract. It accepts either a single entry name or an array of names.","type":"mixed"}}],"doc":{"description":"Extract the complete archive or the given files to the specified destination.","type":"bool"}},{"kind":32,"name":"getExternalAttributesName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the entry.","type":"string"}},{"kind":128,"name":"$opsys","modifiers":1024,"doc":{"description":"On success, receive the operating system code defined by one of the ZipArchive::OPSYS_ constants.","type":"int"}},{"kind":128,"name":"$attr","modifiers":1024,"doc":{"description":"On success, receive the external attributes. Value depends on operating system.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged attributes are returned.","type":"int"}}],"doc":{"description":"Retrieve the external attributes of an entry defined by its name.","type":"bool"}},{"kind":32,"name":"setCommentName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the entry.","type":"string"}},{"kind":128,"name":"$comment","modifiers":0,"doc":{"description":"The contents of the comment.","type":"string"}}],"doc":{"description":"Set the comment of an entry defined by its name.","type":"bool"}},{"kind":32,"name":"setPassword","modifiers":1,"children":[{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password to be used for the archive.","type":"string"}}],"doc":{"description":"Sets the password for the active archive.","type":"bool"}},{"kind":32,"name":"getStatusString","modifiers":0,"children":[],"doc":{"description":"Returns the status error message, system and/or zip messages.","type":"string"}},{"kind":32,"name":"setExternalAttributesIndex","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the entry.","type":"int"}},{"kind":128,"name":"$opsys","modifiers":0,"doc":{"description":"The operating system code defined by one of the ZipArchive::OPSYS_ constants.","type":"int"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"The external attributes. Value depends on operating system.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"Optional flags. Currently unused.","type":"int"}}],"doc":{"description":"Set the external attributes of an entry defined by its index.","type":"bool"}},{"kind":32,"name":"unchangeArchive","modifiers":0,"children":[],"doc":{"description":"Revert all global changes to the archive. For now, this only reverts archive comment changes.","type":"bool"}},{"kind":32,"name":"setArchiveComment","modifiers":0,"children":[{"kind":128,"name":"$comment","modifiers":0,"doc":{"description":"The contents of the comment.","type":"string"}}],"doc":{"description":"Set the comment of a ZIP archive.","type":"bool"}},{"kind":32,"name":"getFromName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the entry","type":"string"}},{"kind":128,"name":"$length","modifiers":0,"value":"0","doc":{"description":"The length to be read from the entry. If 0, then the entire entry is read.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The flags to use to find the entry. The following values may be ORed. ZipArchive::FL_UNCHANGED ZipArchive::FL_COMPRESSED ZipArchive::FL_NOCASE","type":"int"}}],"doc":{"description":"Returns the entry contents using its name.","type":"string"}},{"kind":32,"name":"statName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the entry","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The flags argument specifies how the name lookup should be done. Also, ZipArchive::FL_UNCHANGED may be ORed to it to request information about the original file in the archive, ignoring any changes made. ZipArchive::FL_NOCASE ZipArchive::FL_NODIR ZipArchive::FL_UNCHANGED","type":"int"}}],"doc":{"description":"The function obtains information about the entry defined by its name.","type":"array"}},{"kind":32,"name":"renameIndex","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the entry to rename.","type":"int"}},{"kind":128,"name":"$newname","modifiers":0,"doc":{"description":"New name.","type":"string"}}],"doc":{"description":"Renames an entry defined by its index.","type":"bool"}},{"kind":32,"name":"setEncryptionName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the entry.","type":"string"}},{"kind":128,"name":"$method","modifiers":0,"doc":{"description":"The encryption method defined by one of the ZipArchive::EM_ constants.","type":"int"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"Optional password, default used when missing.","type":"string"}}],"doc":{"description":"Set the encryption method of an entry defined by its name.","type":"bool"}},{"kind":32,"name":"addGlob","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"A glob() pattern against which files will be matched.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"A bit mask of glob() flags.","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"value":"array()","doc":{"description":"An associative array of options. Available options are: \"add_path\" Prefix to prepend when translating to the local path of the file within the archive. This is applied after any remove operations defined by the \"remove_path\" or \"remove_all_path\" options. \"remove_path\" Prefix to remove from matching file paths before adding to the archive. \"remove_all_path\" TRUE to use the file name only and add to the root of the archive.","type":"array"}}],"doc":{"description":"Add files from a directory which match the glob pattern.","type":"bool"}},{"kind":32,"name":"GetExternalAttributesIndex","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the entry.","type":"int"}},{"kind":128,"name":"$opsys","modifiers":1024,"doc":{"description":"On success, receive the operating system code defined by one of the ZipArchive::OPSYS_ constants.","type":"int"}},{"kind":128,"name":"$attr","modifiers":1024,"doc":{"description":"On success, receive the external attributes. Value depends on operating system.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged attributes are returned.","type":"int"}}],"doc":{"description":"Retrieve the external attributes of an entry defined by its index.","type":"bool"}},{"kind":32,"name":"setExternalAttributesName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the entry.","type":"string"}},{"kind":128,"name":"$opsys","modifiers":0,"doc":{"description":"The operating system code defined by one of the ZipArchive::OPSYS_ constants.","type":"int"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"The external attributes. Value depends on operating system.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"Optional flags. Currently unused.","type":"int"}}],"doc":{"description":"Set the external attributes of an entry defined by its name.","type":"bool"}},{"kind":32,"name":"open","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The file name of the ZIP archive to open.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The mode to use to open the archive. ZipArchive::OVERWRITE ZipArchive::CREATE ZipArchive::EXCL ZipArchive::CHECKCONS","type":"int"}}],"doc":{"description":"Opens a new zip archive for reading, writing or modifying.","type":"mixed"}},{"kind":32,"name":"locateName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the entry to look up","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The flags are specified by ORing the following values, or 0 for none of them. ZipArchive::FL_NOCASE ZipArchive::FL_NODIR","type":"int"}}],"doc":{"description":"Locates an entry using its name.","type":"int"}},{"kind":32,"name":"addFromString","modifiers":0,"children":[{"kind":128,"name":"$localname","modifiers":0,"doc":{"description":"The name of the entry to create.","type":"string"}},{"kind":128,"name":"$contents","modifiers":0,"doc":{"description":"The contents to use to create the entry. It is used in a binary safe mode.","type":"string"}}],"doc":{"description":"Add a file to a ZIP archive using its contents.","type":"bool"}},{"kind":32,"name":"setCompressionName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the entry.","type":"string"}},{"kind":128,"name":"$comp_method","modifiers":0,"doc":{"description":"The compression method. Either ZipArchive::CM_DEFAULT, ZipArchive::CM_STORE or ZipArchive::CM_DEFLATE.","type":"int"}},{"kind":128,"name":"$comp_flags","modifiers":0,"value":"0","doc":{"description":"Compression flags. Currently unused.","type":"int"}}],"doc":{"description":"Set the compression method of an entry defined by its name.","type":"bool"}},{"kind":32,"name":"unchangeName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the entry.","type":"string"}}],"doc":{"description":"Revert all changes done to an entry.","type":"bool"}},{"kind":32,"name":"addEmptyDir","modifiers":0,"children":[{"kind":128,"name":"$dirname","modifiers":0,"doc":{"description":"The directory to add.","type":"string"}}],"doc":{"description":"Adds an empty directory in the archive.","type":"bool"}},{"kind":32,"name":"statIndex","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the entry","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"ZipArchive::FL_UNCHANGED may be ORed to it to request information about the original file in the archive, ignoring any changes made.","type":"int"}}],"doc":{"description":"The function obtains information about the entry defined by its index.","type":"array"}},{"kind":32,"name":"setCompressionIndex","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the entry.","type":"int"}},{"kind":128,"name":"$comp_method","modifiers":0,"doc":{"description":"The compression method. Either ZipArchive::CM_DEFAULT, ZipArchive::CM_STORE or ZipArchive::CM_DEFLATE.","type":"int"}},{"kind":128,"name":"$comp_flags","modifiers":0,"value":"0","doc":{"description":"Compression flags. Currently unused.","type":"int"}}],"doc":{"description":"Set the compression method of an entry defined by its index.","type":"bool"}},{"kind":32,"name":"getCommentIndex","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the entry","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged comment is returned.","type":"int"}}],"doc":{"description":"Returns the comment of an entry using the entry index.","type":"string"}},{"kind":32,"name":"getNameIndex","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the entry.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged name is returned.","type":"int"}}],"doc":{"description":"Returns the name of an entry using its index.","type":"string"}},{"kind":32,"name":"renameName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the entry to rename.","type":"string"}},{"kind":128,"name":"$newname","modifiers":0,"doc":{"description":"New name.","type":"string"}}],"doc":{"description":"Renames an entry defined by its name.","type":"bool"}},{"kind":32,"name":"getStream","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the entry to use.","type":"string"}}],"doc":{"description":"Get a file handler to the entry defined by its name. For now it only supports read operations.","type":"resource"}},{"kind":32,"name":"setEncryptionIndex","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the entry.","type":"int"}},{"kind":128,"name":"$method","modifiers":0,"doc":{"description":"The encryption method defined by one of the ZipArchive::EM_ constants.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"Optional password, default used when missing.","type":"string"}}],"doc":{"description":"Set the encryption method of an entry defined by its index.","type":"bool"}},{"kind":32,"name":"getCommentName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the entry","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged comment is returned.","type":"int"}}],"doc":{"description":"Returns the comment of an entry using the entry name.","type":"string"}},{"kind":32,"name":"close","modifiers":0,"children":[],"doc":{"description":"Close opened or created archive and save changes. This method is automatically called at the end of the script.","type":"bool"}},{"kind":32,"name":"unchangeAll","modifiers":0,"children":[],"doc":{"description":"Undo all changes done in the archive.","type":"bool"}},{"kind":32,"name":"setCommentIndex","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the entry.","type":"int"}},{"kind":128,"name":"$comment","modifiers":0,"doc":{"description":"The contents of the comment.","type":"string"}}],"doc":{"description":"Set the comment of an entry defined by its index.","type":"bool"}},{"kind":32,"name":"deleteIndex","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the entry to delete.","type":"int"}}],"doc":{"description":"Delete an entry in the archive using its index.","type":"bool"}},{"kind":32,"name":"unchangeIndex","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the entry.","type":"int"}}],"doc":{"description":"Revert all changes done to an entry at the given index.","type":"bool"}},{"kind":32,"name":"getArchiveComment","modifiers":0,"children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"If flags is set to ZipArchive::FL_UNCHANGED, the original unchanged comment is returned.","type":"int"}}],"doc":{"description":"Returns the Zip archive comment.","type":"string"}},{"kind":32,"name":"deleteName","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the entry to delete.","type":"string"}}],"doc":{"description":"Delete an entry in the archive using its name.","type":"bool"}}],"doc":{"description":"A file archive, compressed with Zip."}},{"kind":1,"name":"CallbackFilterIterator","modifiers":0,"associated":[{"kind":1,"name":"FilterIterator"},{"kind":2,"name":"OuterIterator"}],"description":"","children":[{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator to be filtered.","type":"Iterator"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The callback, which should return TRUE to accept the current item or FALSE otherwise. See Examples. May be any valid callable value.","type":"callable"}}],"doc":{"description":"Creates a filtered iterator using the callback to determine which items are accepted or rejected.","type":"public"}},{"kind":32,"name":"accept","modifiers":1,"children":[],"doc":{"description":"This method calls the callback with the current value, current key and the inner iterator.","type":"string"}}]},{"kind":1,"name":"CURLFile","modifiers":0,"associated":[],"children":[{"kind":32,"name":"setPostFilename","modifiers":1,"description":"","children":[{"kind":128,"name":"$postname","modifiers":0,"doc":{"description":"Filename to be used in POST data.","type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"getPostFilename","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"__wakeup","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file which will be uploaded.","type":"string"}},{"kind":128,"name":"$mimetype","modifiers":0,"doc":{"description":"Mimetype of the file.","type":"string"}},{"kind":128,"name":"$postname","modifiers":0,"doc":{"description":"Name of the file to be used in the upload data.","type":"string"}}],"doc":{"description":"Creates a CURLFile object, used to upload a file with CURLOPT_POSTFIELDS.","type":"public"}},{"kind":32,"name":"getMimeType","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"setMimeType","modifiers":1,"description":"","children":[{"kind":128,"name":"$mime","modifiers":0,"doc":{"description":"MIME type to be used in POST data.","type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"getFilename","modifiers":1,"description":"","children":[],"doc":{"type":"string"}}],"doc":{"description":"CURLFile should be used to upload a file with CURLOPT_POSTFIELDS."}},{"kind":1,"name":"RecursiveCallbackFilterIterator","modifiers":0,"associated":[{"kind":1,"name":"CallbackFilterIterator"},{"kind":2,"name":"OuterIterator"},{"kind":2,"name":"RecursiveIterator"}],"description":"","children":[{"kind":32,"name":"hasChildren","modifiers":1,"children":[],"doc":{"description":"Returns TRUE if the current element has children, FALSE otherwise.","type":"bool"}},{"kind":32,"name":"getChildren","modifiers":1,"children":[],"doc":{"description":"Fetches the filtered children of the inner iterator.","type":"RecursiveCallbackFilterIterator"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The recursive iterator to be filtered.","type":"RecursiveIterator"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The callback, which should return TRUE to accept the current item or FALSE otherwise. See Examples. May be any valid callable value.","type":"string"}}],"doc":{"description":"Creates a filtered iterator from a RecursiveIterator using the callback to determine which items are accepted or rejected.","type":"public"}}]},{"kind":8,"name":"POSIX_F_OK","doc":{"description":"Check whether the file exists."}},{"kind":8,"name":"POSIX_R_OK","doc":{"description":"Check whether the file exists and has read permissions."}},{"kind":8,"name":"POSIX_W_OK","doc":{"description":"Check whether the file exists and has write permissions."}},{"kind":8,"name":"POSIX_X_OK","doc":{"description":"Check whether the file exists and has execute permissions."}},{"kind":1,"name":"OverflowException","modifiers":0,"associated":[{"kind":1,"name":"RuntimeException"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown when adding an element to a full container."}},{"kind":2,"name":"ArrayAccess","modifiers":0,"associated":[],"children":[{"kind":32,"name":"offsetUnset","modifiers":1,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The offset to unset.","type":"mixed"}}],"doc":{"description":"Unsets an offset.","type":"void"}},{"kind":32,"name":"offsetGet","modifiers":1,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The offset to retrieve.","type":"mixed"}}],"doc":{"description":"Returns the value at specified offset.","type":"mixed"}},{"kind":32,"name":"offsetExists","modifiers":1,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"An offset to check for.","type":"mixed"}}],"doc":{"description":"Whether or not an offset exists.","type":"boolean"}},{"kind":32,"name":"offsetSet","modifiers":1,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The offset to assign the value to.","type":"mixed"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to set.","type":"mixed"}}],"doc":{"description":"Assigns a value to the specified offset.","type":"void"}}],"doc":{"description":"Interface to provide accessing objects as arrays."}},{"kind":1,"name":"InvalidArgumentException","modifiers":0,"associated":[{"kind":1,"name":"LogicException"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown if an argument is not of the expected type."}},{"kind":1,"name":"GMP","modifiers":0,"associated":[{"kind":2,"name":"Serializable"}],"children":[],"doc":{"description":"A GMP number. These objects support overloaded arithmetic, bitwise and comparison operators."}},{"kind":1,"name":"ReflectionException","modifiers":0,"associated":[{"kind":1,"name":"Exception"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"The ReflectionException class."}},{"kind":1,"name":"PharFileInfo","modifiers":0,"associated":[{"kind":1,"name":"SplFileInfo"}],"children":[{"kind":32,"name":"hasMetadata","modifiers":1,"children":[],"doc":{"description":"Returns the metadata of a file within a phar archive.","type":"bool"}},{"kind":32,"name":"isCompressed","modifiers":1,"children":[{"kind":128,"name":"$compression_type","modifiers":0,"value":"9021976","doc":{"description":"One of Phar::GZ or Phar::BZ2, defaults to any compression.","type":"int"}}],"doc":{"description":"This returns whether a file is compressed within a Phar archive with either Gzip or Bzip2 compression.","type":"bool"}},{"kind":32,"name":"getMetadata","modifiers":1,"children":[],"doc":{"description":"Return meta-data that was saved in the Phar archive's manifest for this file.","type":"mixed"}},{"kind":32,"name":"setMetadata","modifiers":1,"children":[{"kind":128,"name":"$metadata","modifiers":0,"doc":{"description":"Any PHP variable containing information to store alongside a file","type":"mixed"}}],"doc":{"description":"PharFileInfo::setMetadata() should only be used to store customized data in a file that cannot be represented with existing information stored with a file. Meta-data can significantly slow down the performance of loading a phar archive if the data is large, or if there are many files containing meta-data. It is important to note that file permissions are natively supported inside a phar; it is possible to set them with the PharFileInfo::chmod() method. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed if the file is within a Phar archive. Files within PharData archives do not have this restriction.","type":"void"}},{"kind":32,"name":"compress","modifiers":1,"children":[{"kind":128,"name":"$compression","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"This method compresses the file inside the Phar archive using either bzip2 compression or zlib compression. The bzip2 or zlib extension must be enabled to take advantage of this feature. In addition, if the file is already compressed, the respective extension must be enabled in order to decompress the file. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed if the file is within a Phar archive. Files within PharData archives do not have this restriction.","type":"bool"}},{"kind":32,"name":"getCompressedSize","modifiers":1,"children":[],"doc":{"description":"This returns the size of the file within the Phar archive. Uncompressed files will return the same value for getCompressedSize as they will with filesize()","type":"int"}},{"kind":32,"name":"setUncompressed","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"delMetadata","modifiers":1,"children":[],"doc":{"description":"Deletes the metadata of the entry, if any.","type":"bool"}},{"kind":32,"name":"getCRC32","modifiers":1,"children":[],"doc":{"description":"This returns the crc32() checksum of the file within the Phar archive.","type":"int"}},{"kind":32,"name":"isCompressedBZIP2","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"chmod","modifiers":1,"children":[{"kind":128,"name":"$permissions","modifiers":0,"doc":{"description":"permissions (see chmod())","type":"int"}}],"doc":{"description":"PharFileInfo::chmod() allows setting of the executable file permissions bit, as well as read-only bits. Writeable bits are ignored, and set at runtime based on the phar.readonly INI variable. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed if the file is within a Phar archive. Files within PharData archives do not have this restriction.","type":"void"}},{"kind":32,"name":"getPharFlags","modifiers":1,"children":[],"doc":{"description":"This returns the flags set in the manifest for a Phar. This will always return 0 in the current implementation.","type":"int"}},{"kind":32,"name":"setCompressedGZ","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"isCRCChecked","modifiers":1,"children":[],"doc":{"description":"This returns whether a file within a Phar archive has had its CRC verified.","type":"bool"}},{"kind":32,"name":"setCompressedBZIP2","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$entry","modifiers":0,"doc":{"description":"The full url to retrieve a file. If you wish to retrieve the information for the file my/file.php from the phar boo.phar, the entry should be phar://boo.phar/my/file.php.","type":"string"}}],"doc":{"description":"This should not be called directly. Instead, a PharFileInfo object is initialized by calling Phar::offsetGet() through array access.","type":"public"}},{"kind":32,"name":"isCompressedGZ","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"decompress","modifiers":1,"children":[],"doc":{"description":"This method decompresses the file inside the Phar archive. Depending on how the file is compressed, the bzip2 or zlib extensions must be enabled to take advantage of this feature. As with all functionality that modifies the contents of a phar, the phar.readonly INI variable must be off in order to succeed if the file is within a Phar archive. Files within PharData archives do not have this restriction.","type":"bool"}}],"doc":{"description":"The PharFileInfo class provides a high-level interface to the contents and attributes of a single file within a phar archive."}},{"kind":1,"name":"DatePeriod","modifiers":0,"associated":[{"kind":2,"name":"Traversable"}],"children":[{"kind":1024,"name":"EXCLUDE_START_DATE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$isostr","modifiers":0,"doc":{"description":"An ISO 8601 repeating interval specification.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Can be set to DatePeriod::EXCLUDE_START_DATE to exclude the start date from the set of recurring dates within the period.","type":"int"}}],"doc":{"description":"Creates a new DatePeriod object.","type":"public"}},{"kind":32,"name":"getEndDate","modifiers":1,"children":[],"doc":{"description":"Gets the end date of the period.","type":"DateTimeInterface"}},{"kind":32,"name":"getDateInterval","modifiers":1,"children":[],"doc":{"description":"Gets a DateInterval object representing the interval used for the period.","type":"DateInterval"}},{"kind":32,"name":"getStartDate","modifiers":1,"children":[],"doc":{"description":"Gets the start date of the period.","type":"DateTimeInterface"}}],"doc":{"description":"Represents a date period."}},{"kind":8,"name":"CONNECTION_ABORTED","description":""},{"kind":8,"name":"CONNECTION_NORMAL","description":""},{"kind":8,"name":"CONNECTION_TIMEOUT","description":""},{"kind":8,"name":"__COMPILER_HALT_OFFSET__","doc":{"description":"Available since PHP 5.1.0"}},{"kind":1,"name":"MessageFormatter","modifiers":0,"associated":[],"children":[{"kind":32,"name":"getLocale","modifiers":1,"children":[],"doc":{"description":"Get the locale for which the formatter was created.","type":"string"}},{"kind":32,"name":"parse","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The string to parse","type":"string"}}],"doc":{"description":"Parses input string and return any extracted items as an array.","type":"array"}},{"kind":32,"name":"formatMessage","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to use for formatting locale-dependent parts","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern string to insert things into. The pattern uses an 'apostrophe-friendly' syntax; it is run through » umsg_autoQuoteApostrophe before being interpreted.","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"The array of values to insert into the format string","type":"array"}}],"doc":{"description":"Quick formatting function that formats the string without having to explicitly create the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.","type":"string"}},{"kind":32,"name":"getPattern","modifiers":1,"children":[],"doc":{"description":"Get the pattern used by the formatter","type":"string"}},{"kind":32,"name":"parseMessage","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to use for parsing locale-dependent parts","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern with which to parse the value.","type":"string"}},{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"The string to parse, conforming to the pattern.","type":"string"}}],"doc":{"description":"Parses input string without explicitly creating the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.","type":"array"}},{"kind":32,"name":"format","modifiers":1,"children":[{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"Arguments to insert into the format string","type":"array"}}],"doc":{"description":"Format the message by substituting the data into the format string according to the locale rules","type":"string"}},{"kind":32,"name":"setPattern","modifiers":1,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern string to use in this message formatter. The pattern uses an 'apostrophe-friendly' syntax; it is run through » umsg_autoQuoteApostrophe before being interpreted.","type":"string"}}],"doc":{"description":"Set the pattern used by the formatter","type":"bool"}},{"kind":32,"name":"create","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to use when formatting arguments","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern string to stick arguments into. The pattern uses an 'apostrophe-friendly' syntax; it is run through » umsg_autoQuoteApostrophe before being interpreted.","type":"string"}}],"doc":{"description":"Constructs a new Message Formatter","type":"MessageFormatter"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to use when formatting arguments","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern string to stick arguments into. The pattern uses an 'apostrophe-friendly' syntax; it is run through » umsg_autoQuoteApostrophe before being interpreted.","type":"string"}}],"doc":{"description":"Constructs a new Message Formatter","type":"public"}},{"kind":32,"name":"getErrorMessage","modifiers":1,"children":[],"doc":{"description":"Get the error text from the last operation.","type":"string"}},{"kind":32,"name":"getErrorCode","modifiers":1,"children":[],"doc":{"description":"Get the error code from last operation.","type":"int"}}],"doc":{"description":"MessageFormatter is a concrete class that enables users to produce concatenated, language-neutral messages. The methods supplied in this class are used to build all the messages that are seen by end users."}},{"kind":1,"name":"Collator","modifiers":0,"associated":[],"children":[{"kind":32,"name":"sortWithSortKeys","modifiers":1,"children":[{"kind":128,"name":"$arr","modifiers":1024,"doc":{"description":"Array of strings to sort","type":"array"}}],"doc":{"description":"Similar to collator_sort() but uses ICU sorting keys produced by ucol_getSortKey() to gain more speed on large arrays.","type":"bool"}},{"kind":32,"name":"getAttribute","modifiers":1,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute to get value for.","type":"int"}}],"doc":{"description":"Get a value of an integer collator attribute.","type":"int"}},{"kind":32,"name":"setStrength","modifiers":1,"children":[{"kind":128,"name":"$strength","modifiers":0,"doc":{"description":"Strength to set. Possible values are: Collator::PRIMARY Collator::SECONDARY Collator::TERTIARY Collator::QUATERNARY Collator::IDENTICAL Collator::DEFAULT_STRENGTH","type":"int"}}],"doc":{"description":"The » ICU Collation Service supports many levels of comparison (named \"Levels\", but also known as \"Strengths\"). Having these categories enables ICU to sort strings precisely according to local conventions. However, by allowing the levels to be selectively employed, searching for a string in text can be performed with various matching conditions.","type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale whose collation rules should be used. Special values for locales can be passed in - if null is passed for the locale, the default locale's collation rules will be used. If \"root\" is passed, UCA rules will be used. The Locale attribute is typically the most important attribute for correct sorting and matching, according to the user expectations in different countries and regions. The default » UCA ordering will only sort a few languages such as Dutch and Portuguese correctly (\"correctly\" meaning according to the normal expectations for users of the languages). Otherwise, you need to supply the locale to UCA in order to properly collate text for a given language. Thus a locale needs to be supplied so as to choose a collator that is correctly tailored for that locale. The choice of a locale will automatically preset the values for all of the attributes to something that is reasonable for that locale. Thus most of the time the other attributes do not need to be explicitly set. In some cases, the choice of locale will make a difference in string comparison performance and/or sort key length.","type":"string"}}],"doc":{"description":"Creates a new instance of Collator.","type":"public"}},{"kind":32,"name":"compare","modifiers":1,"children":[{"kind":128,"name":"$str1","modifiers":0,"doc":{"description":"The first string to compare.","type":"string"}},{"kind":128,"name":"$str2","modifiers":0,"doc":{"description":"The second string to compare.","type":"string"}}],"doc":{"description":"Compare two Unicode strings according to collation rules.","type":"int"}},{"kind":32,"name":"setAttribute","modifiers":1,"description":"","children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute.","type":"int"}},{"kind":128,"name":"$val","modifiers":0,"doc":{"description":"Attribute value.","type":"int"}}],"doc":{"type":"bool"}},{"kind":32,"name":"getStrength","modifiers":1,"description":"","children":[],"doc":{"type":"int"}},{"kind":32,"name":"asort","modifiers":1,"children":[{"kind":128,"name":"$arr","modifiers":1024,"doc":{"description":"Array of strings to sort.","type":"array"}},{"kind":128,"name":"$sort_flag","modifiers":0,"doc":{"description":"Optional sorting type, one of the following: Collator::SORT_REGULAR - compare items normally (don't change types) Collator::SORT_NUMERIC - compare items numerically Collator::SORT_STRING - compare items as strings Default $sort_flag value is Collator::SORT_REGULAR. It is also used if an invalid $sort_flag value has been specified.","type":"int"}}],"doc":{"description":"This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant. Array elements will have sort order according to current locale rules.","type":"bool"}},{"kind":32,"name":"getErrorMessage","modifiers":1,"children":[],"doc":{"description":"Retrieves the message for the last error.","type":"string"}},{"kind":32,"name":"create","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale containing the required collation rules. Special values for locales can be passed in - if null is passed for the locale, the default locale collation rules will be used. If empty string (\"\") or \"root\" are passed, » UCA rules will be used.","type":"string"}}],"doc":{"description":"The strings will be compared using the options already specified.","type":"Collator"}},{"kind":32,"name":"getErrorCode","modifiers":1,"description":"","children":[],"doc":{"type":"int"}},{"kind":32,"name":"sort","modifiers":1,"children":[{"kind":128,"name":"$arr","modifiers":1024,"doc":{"description":"Array of strings to sort.","type":"array"}},{"kind":128,"name":"$sort_flag","modifiers":0,"doc":{"description":"Optional sorting type, one of the following: Collator::SORT_REGULAR - compare items normally (don't change types) Collator::SORT_NUMERIC - compare items numerically Collator::SORT_STRING - compare items as strings Default sorting type is Collator::SORT_REGULAR. It is also used if an invalid sort_flag value has been specified.","type":"int"}}],"doc":{"description":"This function sorts an array according to current locale rules.","type":"bool"}},{"kind":32,"name":"getLocale","modifiers":1,"children":[{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"You can choose between valid and actual locale ( Locale::VALID_LOCALE and Locale::ACTUAL_LOCALE, respectively).","type":"int"}}],"doc":{"description":"Get collector locale name.","type":"string"}},{"kind":32,"name":"getSortKey","modifiers":1,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to produce the key from.","type":"string"}}],"doc":{"description":"Return collation key for a string.","type":"string"}}],"doc":{"description":"Provides string comparison capability with support for appropriate locale-sensitive sort orderings."}},{"kind":8,"name":"EXIF_USE_MBSTRING","description":""},{"kind":8,"name":"SQLITE_ASSOC","doc":{"description":"Columns are returned into the array having the field name as the array index."}},{"kind":8,"name":"SQLITE_BOTH","doc":{"description":"Columns are returned into the array having both a numerical index and the field name as the array index."}},{"kind":8,"name":"SQLITE_NUM","doc":{"description":"Columns are returned into the array having a numerical index to the fields. This index starts with 0, the first field in the result."}},{"kind":8,"name":"SQLITE_OK","doc":{"description":"Successful result."}},{"kind":8,"name":"SQLITE_ERROR","doc":{"description":"SQL error or missing database."}},{"kind":8,"name":"SQLITE_INTERNAL","doc":{"description":"An internal logic error in SQLite."}},{"kind":8,"name":"SQLITE_PERM","doc":{"description":"Access permission denied."}},{"kind":8,"name":"SQLITE_ABORT","doc":{"description":"Callback routine requested an abort."}},{"kind":8,"name":"SQLITE_BUSY","doc":{"description":"The database file is locked."}},{"kind":8,"name":"SQLITE_LOCKED","doc":{"description":"A table in the database is locked."}},{"kind":8,"name":"SQLITE_NOMEM","doc":{"description":"Memory allocation failed."}},{"kind":8,"name":"SQLITE_READONLY","doc":{"description":"Attempt to write a readonly database."}},{"kind":8,"name":"SQLITE_INTERRUPT","doc":{"description":"Operation terminated internally."}},{"kind":8,"name":"SQLITE_IOERR","doc":{"description":"Disk I/O error occurred."}},{"kind":8,"name":"SQLITE_NOTADB","doc":{"description":"File opened that is not a database file."}},{"kind":8,"name":"SQLITE_CORRUPT","doc":{"description":"The database disk image is malformed."}},{"kind":8,"name":"SQLITE_FORMAT","doc":{"description":"Auxiliary database format error."}},{"kind":8,"name":"SQLITE_NOTFOUND","doc":{"description":"(Internal) Table or record not found."}},{"kind":8,"name":"SQLITE_FULL","doc":{"description":"Insertion failed because database is full."}},{"kind":8,"name":"SQLITE_CANTOPEN","doc":{"description":"Unable to open the database file."}},{"kind":8,"name":"SQLITE_PROTOCOL","doc":{"description":"Database lock protocol error."}},{"kind":8,"name":"SQLITE_EMPTY","doc":{"description":"(Internal) Database table is empty."}},{"kind":8,"name":"SQLITE_SCHEMA","doc":{"description":"The database schema changed."}},{"kind":8,"name":"SQLITE_TOOBIG","doc":{"description":"Too much data for one row of a table."}},{"kind":8,"name":"SQLITE_CONSTRAINT","doc":{"description":"Abort due to constraint violation."}},{"kind":8,"name":"SQLITE_MISMATCH","doc":{"description":"Data type mismatch."}},{"kind":8,"name":"SQLITE_MISUSE","doc":{"description":"Library used incorrectly."}},{"kind":8,"name":"SQLITE_NOLFS","doc":{"description":"Uses of OS features not supported on host."}},{"kind":8,"name":"SQLITE_AUTH","doc":{"description":"Authorized failed."}},{"kind":8,"name":"SQLITE_ROW","doc":{"description":"Internal process has another row ready."}},{"kind":8,"name":"SQLITE_DONE","doc":{"description":"Internal process has finished executing."}},{"kind":2,"name":"OuterIterator","modifiers":0,"associated":[{"kind":1,"name":"Iterator"}],"children":[{"kind":32,"name":"getInnerIterator","modifiers":1,"children":[],"doc":{"description":"Returns the inner iterator for the current iterator entry.","type":"Iterator"}}],"doc":{"description":"Classes implementing OuterIterator can be used to iterate over iterators."}},{"kind":1,"name":"SplObjectStorage","modifiers":0,"associated":[{"kind":2,"name":"Countable"},{"kind":2,"name":"Iterator"},{"kind":2,"name":"Serializable"},{"kind":2,"name":"ArrayAccess"}],"children":[{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Returns the current storage entry.","type":"object"}},{"kind":32,"name":"count","modifiers":1,"children":[],"doc":{"description":"Counts the number of objects in the storage.","type":"int"}},{"kind":32,"name":"getHash","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object whose identifier is to be calculated.","type":"object"}}],"doc":{"description":"This method calculates an identifier for the objects added to an SplObjectStorage object.","type":"string"}},{"kind":32,"name":"offsetUnset","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object to remove.","type":"object"}}],"doc":{"description":"Removes an object from the storage.","type":"void"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Returns the index at which the iterator currently is.","type":"int"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewind the iterator to the first storage element.","type":"void"}},{"kind":32,"name":"removeAll","modifiers":1,"children":[{"kind":128,"name":"$storage","modifiers":0,"doc":{"description":"The storage containing the elements to remove.","type":"SplObjectStorage"}}],"doc":{"description":"Removes objects contained in another storage from the current storage.","type":"void"}},{"kind":32,"name":"setInfo","modifiers":1,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to associate with the current iterator entry.","type":"mixed"}}],"doc":{"description":"Associates data, or info, with the object currently pointed to by the iterator.","type":"void"}},{"kind":32,"name":"attach","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object to add.","type":"object"}},{"kind":128,"name":"$data","modifiers":0,"value":"NULL","doc":{"description":"The data to associate with the object.","type":"mixed"}}],"doc":{"description":"Adds an object inside the storage, and optionally associate it to some data.","type":"void"}},{"kind":32,"name":"unserialize","modifiers":1,"children":[{"kind":128,"name":"$serialized","modifiers":0,"doc":{"description":"The serialized representation of a storage.","type":"string"}}],"doc":{"description":"Unserializes storage entries and attach them to the current storage.","type":"void"}},{"kind":32,"name":"removeAllExcept","modifiers":1,"children":[{"kind":128,"name":"$storage","modifiers":0,"doc":{"description":"The storage containing the elements to retain in the current storage.","type":"SplObjectStorage"}}],"doc":{"description":"Removes all objects except for those contained in another storage from the current storage.","type":"void"}},{"kind":32,"name":"detach","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object to remove.","type":"object"}}],"doc":{"description":"Removes the object from the storage.","type":"void"}},{"kind":32,"name":"offsetExists","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object to look for.","type":"object"}}],"doc":{"description":"Checks whether an object exists in the storage.","type":"bool"}},{"kind":32,"name":"offsetSet","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object to associate data with.","type":"object"}},{"kind":128,"name":"$data","modifiers":0,"value":"NULL","doc":{"description":"The data to associate with the object.","type":"mixed"}}],"doc":{"description":"Associate data to an object in the storage.","type":"void"}},{"kind":32,"name":"addAll","modifiers":1,"children":[{"kind":128,"name":"$storage","modifiers":0,"doc":{"description":"The storage you want to import.","type":"SplObjectStorage"}}],"doc":{"description":"Adds all objects-data pairs from a different storage in the current storage.","type":"void"}},{"kind":32,"name":"getInfo","modifiers":1,"children":[],"doc":{"description":"Returns the data, or info, associated with the object pointed by the current iterator position.","type":"mixed"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Returns if the current iterator entry is valid.","type":"bool"}},{"kind":32,"name":"contains","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object to look for.","type":"object"}}],"doc":{"description":"Checks if the storage contains the object provided.","type":"bool"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Moves the iterator to the next object in the storage.","type":"void"}},{"kind":32,"name":"serialize","modifiers":1,"children":[],"doc":{"description":"Returns a string representation of the storage.","type":"string"}},{"kind":32,"name":"offsetGet","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object to look for.","type":"object"}}],"doc":{"description":"Returns the data associated with an object in the storage.","type":"mixed"}}],"doc":{"description":"The SplObjectStorage class provides a map from objects to data or, by ignoring data, an object set. This dual purpose can be useful in many cases involving the need to uniquely identify objects."}},{"kind":1,"name":"ReflectionObject","modifiers":0,"associated":[{"kind":1,"name":"ReflectionClass"},{"kind":2,"name":"Reflector"}],"children":[{"kind":1024,"name":"IS_IMPLICIT_ABSTRACT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_EXPLICIT_ABSTRACT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_FINAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$argument","modifiers":0,"doc":{"description":"An object instance.","type":"object"}}],"doc":{"description":"Constructs a ReflectionObject.","type":"public"}},{"kind":32,"name":"export","modifiers":32,"children":[{"kind":128,"name":"$argument","modifiers":0,"doc":{"description":"The reflection to export.","type":"string"}},{"kind":128,"name":"$return","modifiers":0,"doc":{"description":"Setting to TRUE will return the export, as opposed to emitting it. Setting to FALSE (the default) will do the opposite.","type":"bool"}}],"doc":{"description":"Exports a reflection.","type":"string"}}],"doc":{"description":"The ReflectionObject class reports information about an object."}},{"kind":1,"name":"SplFixedArray","modifiers":0,"associated":[{"kind":2,"name":"Iterator"},{"kind":2,"name":"ArrayAccess"},{"kind":2,"name":"Countable"}],"children":[{"kind":32,"name":"__wakeup","modifiers":1,"children":[],"doc":{"description":"Reinitialises the array after being unserialised.","type":"void"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Move the iterator to the next array entry.","type":"void"}},{"kind":32,"name":"offsetExists","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index being checked.","type":"int"}}],"doc":{"description":"Checks whether the requested index index exists.","type":"bool"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Returns the current array index.","type":"int"}},{"kind":32,"name":"toArray","modifiers":1,"children":[],"doc":{"description":"Returns a PHP array from the fixed array.","type":"array"}},{"kind":32,"name":"offsetUnset","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index being unset.","type":"int"}}],"doc":{"description":"Unsets the value at the specified index.","type":"void"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewinds the iterator to the beginning.","type":"void"}},{"kind":32,"name":"count","modifiers":1,"children":[],"doc":{"description":"Returns the size of the array.","type":"int"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Checks if the array contains any more elements.","type":"bool"}},{"kind":32,"name":"setSize","modifiers":1,"children":[{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"The new array size. This should be a value between 0 and PHP_INT_MAX.","type":"int"}}],"doc":{"description":"Change the size of an array to the new size of size. If size is less than the current array size, any values after the new size will be discarded. If size is greater than the current array size, the array will be padded with NULL values.","type":"int"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Get the current array element.","type":"mixed"}},{"kind":32,"name":"getSize","modifiers":1,"children":[],"doc":{"description":"Gets the size of the array.","type":"int"}},{"kind":32,"name":"offsetSet","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index being set.","type":"int"}},{"kind":128,"name":"$newval","modifiers":0,"doc":{"description":"The new value for the index.","type":"mixed"}}],"doc":{"description":"Sets the value at the specified index to newval.","type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$size","modifiers":0,"value":"0","doc":{"description":"The size of the fixed array. This expects a number between 0 and PHP_INT_MAX.","type":"int"}}],"doc":{"description":"Initializes a fixed array with a number of NULL values equal to size.","type":"public"}},{"kind":32,"name":"fromArray","modifiers":32,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The array to import.","type":"array"}},{"kind":128,"name":"$save_indexes","modifiers":0,"value":"true","doc":{"description":"Try to save the numeric indexes used in the original array.","type":"bool"}}],"doc":{"description":"Import the PHP array array in a new SplFixedArray instance","type":"SplFixedArray"}},{"kind":32,"name":"offsetGet","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index with the value.","type":"int"}}],"doc":{"description":"Returns the value at the index index.","type":"mixed"}}],"doc":{"description":"The SplFixedArray class provides the main functionalities of array. The main differences between a SplFixedArray and a normal PHP array is that the SplFixedArray is of fixed length and allows only integers within the range as indexes. The advantage is that it allows a faster array implementation."}},{"kind":1,"name":"XSLTProcessor","modifiers":0,"associated":[],"description":"","children":[{"kind":32,"name":"getSecurityPrefs","modifiers":1,"children":[],"doc":{"description":"Gets the security preferences.","type":"int"}},{"kind":32,"name":"setSecurityPrefs","modifiers":1,"children":[{"kind":128,"name":"$securityPrefs","modifiers":0,"doc":{"description":"The new security preferences. The following constants can be ORed: XSL_SECPREF_READ_FILE, XSL_SECPREF_WRITE_FILE, XSL_SECPREF_CREATE_DIRECTORY, XSL_SECPREF_READ_NETWORK, XSL_SECPREF_WRITE_NETWORK. Alternatively, XSL_SECPREF_NONE or XSL_SECPREF_DEFAULT can be passed.","type":"int"}}],"doc":{"description":"Sets the security preferences.","type":"int"}},{"kind":32,"name":"importStylesheet","modifiers":1,"children":[{"kind":128,"name":"$stylesheet","modifiers":0,"doc":{"description":"The imported style sheet as a DOMDocument or SimpleXMLElement object.","type":"object"}}],"doc":{"description":"This method imports the stylesheet into the XSLTProcessor for transformations.","type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"Creates a new XSLTProcessor object.","type":"XSLTProcessor"}},{"kind":32,"name":"setParameter","modifiers":0,"children":[{"kind":128,"name":"$namespace","modifiers":0,"doc":{"description":"The namespace URI of the XSLT parameter.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"An array of name => value pairs. This syntax is available since PHP 5.1.0.","type":"array"}}],"doc":{"description":"Sets the value of one or more parameters to be used in subsequent transformations with XSLTProcessor. If the parameter doesn't exist in the stylesheet it will be ignored.","type":"bool"}},{"kind":32,"name":"transformToURI","modifiers":0,"children":[{"kind":128,"name":"$doc","modifiers":0,"doc":{"description":"The document to transform.","type":"DOMDocument"}},{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The target URI for the transformation.","type":"string"}}],"doc":{"description":"Transforms the source node to an URI applying the stylesheet given by the XSLTProcessor::importStylesheet() method.","type":"int"}},{"kind":32,"name":"registerPHPFunctions","modifiers":0,"children":[{"kind":128,"name":"$restrict","modifiers":0,"doc":{"description":"Use this parameter to only allow certain functions to be called from XSLT. This parameter can be either a string (a function name) or an array of functions.","type":"mixed"}}],"doc":{"description":"This method enables the ability to use PHP functions as XSLT functions within XSL stylesheets.","type":"void"}},{"kind":32,"name":"setProfiling","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file to dump profiling information.","type":"string"}}],"doc":{"description":"Sets the file to output profiling information when processing a stylesheet.","type":"bool"}},{"kind":32,"name":"transformToXML","modifiers":0,"children":[{"kind":128,"name":"$doc","modifiers":0,"doc":{"description":"The DOMDocument or SimpleXMLElement object to be transformed.","type":"object"}}],"doc":{"description":"Transforms the source node to a string applying the stylesheet given by the xsltprocessor::importStylesheet() method.","type":"string"}},{"kind":32,"name":"removeParameter","modifiers":0,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI of the XSLT parameter.","type":"string"}},{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name of the XSLT parameter.","type":"string"}}],"doc":{"description":"Removes a parameter, if set. This will make the processor use the default value for the parameter as specified in the stylesheet.","type":"bool"}},{"kind":32,"name":"getParameter","modifiers":0,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI of the XSLT parameter.","type":"string"}},{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name of the XSLT parameter.","type":"string"}}],"doc":{"description":"Gets a parameter if previously set by XSLTProcessor::setParameter().","type":"string"}},{"kind":32,"name":"hasExsltSupport","modifiers":0,"children":[],"doc":{"description":"This method determines if PHP was built with the » EXSLT library.","type":"bool"}},{"kind":32,"name":"transformToDoc","modifiers":0,"children":[{"kind":128,"name":"$doc","modifiers":0,"doc":{"description":"The node to be transformed.","type":"DOMNode"}}],"doc":{"description":"Transforms the source node to a DOMDocument applying the stylesheet given by the XSLTProcessor::importStylesheet() method.","type":"DOMDocument"}}]},{"kind":1,"name":"ReflectionProperty","modifiers":0,"associated":[{"kind":2,"name":"Reflector"}],"children":[{"kind":1024,"name":"IS_STATIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_PUBLIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_PROTECTED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_PRIVATE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"isProtected","modifiers":1,"children":[],"doc":{"description":"Checks whether the property is protected.","type":"bool"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"To string.","type":"string"}},{"kind":32,"name":"getValue","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"If the property is non-static an object must be provided to fetch the property from. If you want to fetch the default property without providing an object use ReflectionClass::getDefaultProperties() instead.","type":"object"}}],"doc":{"description":"Gets the property's value.","type":"mixed"}},{"kind":32,"name":"export","modifiers":32,"children":[{"kind":128,"name":"$class","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The property name.","type":"string"}},{"kind":128,"name":"$return","modifiers":0,"doc":{"description":"Setting to TRUE will return the export, as opposed to emitting it. Setting to FALSE (the default) will do the opposite.","type":"bool"}}],"doc":{"description":"Exports a reflection.","type":"string"}},{"kind":32,"name":"__clone","modifiers":12,"children":[],"doc":{"description":"Clones.","type":"void"}},{"kind":32,"name":"getDeclaringClass","modifiers":1,"children":[],"doc":{"description":"Gets the declaring class.","type":"ReflectionClass"}},{"kind":32,"name":"__construct","modifiers":0,"description":"","children":[{"kind":128,"name":"$class","modifiers":0,"doc":{"description":"The class name, that contains the property.","type":"mixed"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the property being reflected.","type":"string"}}],"doc":{"type":"public"}},{"kind":32,"name":"setAccessible","modifiers":1,"children":[{"kind":128,"name":"$accessible","modifiers":0,"doc":{"description":"TRUE to allow accessibility, or FALSE.","type":"bool"}}],"doc":{"description":"Sets a property to be accessible. For example, it may allow protected and private properties to be accessed.","type":"void"}},{"kind":32,"name":"getName","modifiers":1,"children":[],"doc":{"description":"Gets the properties name.","type":"string"}},{"kind":32,"name":"isStatic","modifiers":1,"children":[],"doc":{"description":"Checks whether the property is static.","type":"bool"}},{"kind":32,"name":"isPrivate","modifiers":1,"children":[],"doc":{"description":"Checks whether the property is private.","type":"bool"}},{"kind":32,"name":"isPublic","modifiers":1,"children":[],"doc":{"description":"Checks whether the property is public.","type":"bool"}},{"kind":32,"name":"setValue","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The new value.","type":"mixed"}}],"doc":{"description":"Sets (changes) the property's value.","type":"void"}},{"kind":32,"name":"isDefault","modifiers":1,"children":[],"doc":{"description":"Checks whether the property was declared at compile-time, or whether the property was dynamically declared at run-time.","type":"bool"}},{"kind":32,"name":"getDocComment","modifiers":1,"children":[],"doc":{"description":"Gets the doc comment for a property.","type":"string"}},{"kind":32,"name":"getModifiers","modifiers":1,"children":[],"doc":{"description":"Gets the modifiers.","type":"int"}}],"doc":{"description":"The ReflectionProperty class reports information about classes properties."}},{"kind":1,"name":"ReflectionMethod","modifiers":0,"associated":[{"kind":1,"name":"ReflectionFunctionAbstract"},{"kind":2,"name":"Reflector"}],"children":[{"kind":1024,"name":"IS_STATIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_PUBLIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_PROTECTED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_PRIVATE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_ABSTRACT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IS_FINAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"getDeclaringClass","modifiers":1,"children":[],"doc":{"description":"Gets the declaring class for the reflected method.","type":"ReflectionClass"}},{"kind":32,"name":"setAccessible","modifiers":1,"children":[{"kind":128,"name":"$accessible","modifiers":0,"doc":{"description":"TRUE to allow accessibility, or FALSE.","type":"bool"}}],"doc":{"description":"Sets a method to be accessible. For example, it may allow protected and private methods to be invoked.","type":"void"}},{"kind":32,"name":"invokeArgs","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object to invoke the method on. In case of static methods, you can pass null to this parameter.","type":"object"}},{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"The parameters to be passed to the function, as an array.","type":"array"}}],"doc":{"description":"Invokes the reflected method and pass its arguments as array.","type":"mixed"}},{"kind":32,"name":"isPublic","modifiers":1,"children":[],"doc":{"description":"Checks if the method is public.","type":"bool"}},{"kind":32,"name":"isDestructor","modifiers":1,"children":[],"doc":{"description":"Checks if the method is a destructor.","type":"bool"}},{"kind":32,"name":"getClosure","modifiers":1,"description":"","children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Forbidden for static methods, required for other methods.","type":"object"}}],"doc":{"type":"Closure"}},{"kind":32,"name":"isPrivate","modifiers":1,"children":[],"doc":{"description":"Checks if the method is private.","type":"bool"}},{"kind":32,"name":"getModifiers","modifiers":1,"children":[],"doc":{"description":"Returns a bitfield of the access modifiers for this method.","type":"int"}},{"kind":32,"name":"getPrototype","modifiers":1,"children":[],"doc":{"description":"Returns the methods prototype.","type":"ReflectionMethod"}},{"kind":32,"name":"__toString","modifiers":1,"children":[],"doc":{"description":"Returns the string representation of the Reflection method object.","type":"string"}},{"kind":32,"name":"isProtected","modifiers":1,"children":[],"doc":{"description":"Checks if the method is protected.","type":"bool"}},{"kind":32,"name":"invoke","modifiers":1,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The object to invoke the method on. For static methods, pass null to this parameter.","type":"object"}},{"kind":128,"name":"$parameter","modifiers":0,"doc":{"description":"Zero or more parameters to be passed to the method. It accepts a variable number of parameters which are passed to the method.","type":"mixed"}}],"doc":{"description":"Invokes a reflected method.","type":"mixed"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$class_method","modifiers":0,"doc":{"description":"Class name and method name delimited by ::.","type":"string"}}],"doc":{"description":"Constructs a new ReflectionMethod.","type":"public"}},{"kind":32,"name":"isAbstract","modifiers":1,"children":[],"doc":{"description":"Checks if the method is abstract.","type":"bool"}},{"kind":32,"name":"isConstructor","modifiers":1,"children":[],"doc":{"description":"Checks if the method is a constructor.","type":"bool"}},{"kind":32,"name":"isFinal","modifiers":1,"children":[],"doc":{"description":"Checks if the method is final.","type":"bool"}},{"kind":32,"name":"export","modifiers":32,"children":[{"kind":128,"name":"$class","modifiers":0,"doc":{"description":"The class name.","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the method.","type":"string"}},{"kind":128,"name":"$return","modifiers":0,"value":"false","doc":{"description":"Setting to TRUE will return the export, as opposed to emitting it. Setting to FALSE (the default) will do the opposite.","type":"bool"}}],"doc":{"description":"Exports a ReflectionMethod.","type":"string"}},{"kind":32,"name":"isStatic","modifiers":1,"children":[],"doc":{"description":"Checks if the method is static.","type":"bool"}}],"doc":{"description":"The ReflectionMethod class reports information about a method."}},{"kind":1,"name":"EmptyIterator","modifiers":0,"associated":[{"kind":2,"name":"Iterator"}],"children":[{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"No operation, nothing to do.","type":"void"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"The EmptyIterator valid() method.","type":"bool"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"This function must not be called. It throws an exception upon access.","type":"scalar"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"This function must not be called. It throws an exception upon access.","type":"mixed"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"No operation, nothing to do.","type":"void"}}],"doc":{"description":"The EmptyIterator class for an empty iterator."}},{"kind":1,"name":"SplDoublyLinkedList","modifiers":0,"associated":[{"kind":2,"name":"Iterator"},{"kind":2,"name":"ArrayAccess"},{"kind":2,"name":"Countable"}],"children":[{"kind":32,"name":"isEmpty","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"add","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index where the new value is to be inserted.","type":"mixed"}},{"kind":128,"name":"$newval","modifiers":0,"doc":{"description":"The new value for the index.","type":"mixed"}}],"doc":{"description":"Insert the value newval at the specified index, shuffling the previous value at that index (and all subsequent values) up through the list.","type":"void"}},{"kind":32,"name":"getIteratorMode","modifiers":1,"description":"","children":[],"doc":{"type":"int"}},{"kind":32,"name":"bottom","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"prev","modifiers":1,"children":[],"doc":{"description":"Move the iterator to the previous node.","type":"void"}},{"kind":32,"name":"push","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to push.","type":"mixed"}}],"doc":{"description":"Pushes value at the end of the doubly linked list.","type":"void"}},{"kind":32,"name":"offsetUnset","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index being unset.","type":"mixed"}}],"doc":{"description":"Unsets the value at the specified index.","type":"void"}},{"kind":32,"name":"unserialize","modifiers":1,"children":[{"kind":128,"name":"$serialized","modifiers":0,"doc":{"description":"The serialized string.","type":"string"}}],"doc":{"description":"Unserializes the storage, from SplDoublyLinkedList::serialize().","type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"This constructs a new empty doubly linked list.","type":"public"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Checks if the doubly linked list contains any more nodes.","type":"bool"}},{"kind":32,"name":"offsetGet","modifiers":1,"description":"","children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index with the value.","type":"mixed"}}],"doc":{"type":"mixed"}},{"kind":32,"name":"pop","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"This rewinds the iterator to the beginning.","type":"void"}},{"kind":32,"name":"setIteratorMode","modifiers":1,"description":"","children":[{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"There are two orthogonal sets of modes that can be set: The direction of the iteration (either one or the other): SplDoublyLinkedList::IT_MODE_LIFO (Stack style) SplDoublyLinkedList::IT_MODE_FIFO (Queue style) The behavior of the iterator (either one or the other): SplDoublyLinkedList::IT_MODE_DELETE (Elements are deleted by the iterator) SplDoublyLinkedList::IT_MODE_KEEP (Elements are traversed by the iterator) The default mode is: SplDoublyLinkedList::IT_MODE_FIFO | SplDoublyLinkedList::IT_MODE_KEEP","type":"int"}}],"doc":{"type":"void"}},{"kind":32,"name":"top","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"shift","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Move the iterator to the next node.","type":"void"}},{"kind":32,"name":"serialize","modifiers":1,"children":[],"doc":{"description":"Serializes the storage.","type":"string"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Get the current doubly linked list node.","type":"mixed"}},{"kind":32,"name":"unshift","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to unshift.","type":"mixed"}}],"doc":{"description":"Prepends value at the beginning of the doubly linked list.","type":"void"}},{"kind":32,"name":"offsetSet","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index being set.","type":"mixed"}},{"kind":128,"name":"$newval","modifiers":0,"doc":{"description":"The new value for the index.","type":"mixed"}}],"doc":{"description":"Sets the value at the specified index to newval.","type":"void"}},{"kind":32,"name":"offsetExists","modifiers":1,"description":"","children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index being checked.","type":"mixed"}}],"doc":{"type":"bool"}},{"kind":32,"name":"count","modifiers":1,"description":"","children":[],"doc":{"type":"int"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"This function returns the current node index","type":"mixed"}}],"doc":{"description":"The SplDoublyLinkedList class provides the main functionalities of a doubly linked list."}},{"kind":1,"name":"DivisionByZeroError","modifiers":0,"associated":[{"kind":1,"name":"ArithmeticError"}],"children":[],"doc":{"description":"DivisionByZeroError is thrown when an attempt is made to divide a number by zero."}},{"kind":1,"name":"DateTimeZone","modifiers":0,"associated":[],"children":[{"kind":1024,"name":"AFRICA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"AMERICA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ANTARCTICA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ARCTIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ASIA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ATLANTIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"AUSTRALIA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"EUROPE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"INDIAN","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PACIFIC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UTC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ALL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ALL_WITH_BC","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PER_COUNTRY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"getLocation","modifiers":1,"children":[],"doc":{"description":"Returns location information for a timezone, including country code, latitude/longitude and comments.","type":"array"}},{"kind":32,"name":"getOffset","modifiers":1,"children":[{"kind":128,"name":"$datetime","modifiers":0,"doc":{"description":"DateTime that contains the date/time to compute the offset from.","type":"DateTime"}}],"doc":{"description":"This function returns the offset to GMT for the date/time specified in the datetime parameter. The GMT offset is calculated with the timezone information contained in the DateTimeZone object being used.","type":"int"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$timezone","modifiers":0,"doc":{"description":"One of the supported timezone names or an offset value (+0200).","type":"string"}}],"doc":{"description":"Creates new DateTimeZone object.","type":"public"}},{"kind":32,"name":"listAbbreviations","modifiers":32,"children":[],"doc":{"description":"Procedural style","type":"array"}},{"kind":32,"name":"getTransitions","modifiers":1,"children":[{"kind":128,"name":"$timestamp_begin","modifiers":0,"doc":{"description":"Begin timestamp.","type":"int"}},{"kind":128,"name":"$timestamp_end","modifiers":0,"doc":{"description":"End timestamp.","type":"int"}}],"doc":{"description":"Procedural style","type":"array"}},{"kind":32,"name":"getName","modifiers":1,"children":[],"doc":{"description":"Returns the name of the timezone.","type":"string"}},{"kind":32,"name":"listIdentifiers","modifiers":32,"children":[{"kind":128,"name":"$what","modifiers":0,"value":"DateTimeZone::ALL","doc":{"description":"One of DateTimeZone class constants.","type":"int"}},{"kind":128,"name":"$country","modifiers":0,"value":"NULL","doc":{"description":"A two-letter ISO 3166-1 compatible country code. Note: This option is only used when what is set to DateTimeZone::PER_COUNTRY.","type":"string"}}],"doc":{"description":"Procedural style","type":"array"}}],"doc":{"description":"Representation of time zone."}},{"kind":2,"name":"JsonSerializable","modifiers":0,"associated":[],"children":[{"kind":32,"name":"jsonSerialize","modifiers":1,"children":[],"doc":{"description":"Serializes the object to a value that can be serialized natively by json_encode().","type":"mixed"}}],"doc":{"description":"Objects implementing JsonSerializable can customize their JSON representation when encoded with json_encode()."}},{"kind":1,"name":"Reflection","modifiers":0,"associated":[],"children":[{"kind":32,"name":"export","modifiers":32,"children":[{"kind":128,"name":"$reflector","modifiers":0,"doc":{"description":"The reflection to export.","type":"Reflector"}},{"kind":128,"name":"$return","modifiers":0,"value":"false","doc":{"description":"Setting to TRUE will return the export, as opposed to emitting it. Setting to FALSE (the default) will do the opposite.","type":"bool"}}],"doc":{"description":"Exports a reflection.","type":"string"}},{"kind":32,"name":"getModifierNames","modifiers":32,"children":[{"kind":128,"name":"$modifiers","modifiers":0,"doc":{"description":"Bitfield of the modifiers to get.","type":"int"}}],"doc":{"description":"Gets modifier names.","type":"array"}}],"doc":{"description":"The reflection class."}},{"kind":1,"name":"IntlCalendar","modifiers":0,"associated":[],"description":"","children":[{"kind":1024,"name":"FIELD_ERA","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_YEAR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_MONTH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_WEEK_OF_YEAR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_WEEK_OF_MONTH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_DATE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_DAY_OF_YEAR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_DAY_OF_WEEK","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_DAY_OF_WEEK_IN_MONTH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_AM_PM","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_HOUR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_HOUR_OF_DAY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_MINUTE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_SECOND","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_MILLISECOND","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_ZONE_OFFSET","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_DST_OFFSET","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_YEAR_WOY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_DOW_LOCAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_EXTENDED_YEAR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_JULIAN_DAY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_MILLISECONDS_IN_DAY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_IS_LEAP_MONTH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_FIELD_COUNT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"FIELD_DAY_OF_MONTH","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DOW_SUNDAY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DOW_MONDAY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DOW_TUESDAY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DOW_WEDNESDAY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DOW_THURSDAY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DOW_FRIDAY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DOW_SATURDAY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DOW_TYPE_WEEKDAY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DOW_TYPE_WEEKEND","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DOW_TYPE_WEEKEND_OFFSET","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DOW_TYPE_WEEKEND_CEASE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WALLTIME_FIRST","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WALLTIME_LAST","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"WALLTIME_NEXT_VALID","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"getGreatestMinimum","modifiers":1,"children":[{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Returns the largest local minimum for a field. This should be a value larger or equal to that returned by IntlCalendar::getActualMinimum(), which is in its turn larger or equal to that returned by IntlCalendar::getMinimum(). All these three functions return the same value for the Gregorian calendar.","type":"int"}},{"kind":32,"name":"getRepeatedWallTimeOption","modifiers":1,"children":[],"doc":{"description":"Gets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is IntlCalendar::WALLTIME_LAST.","type":"int"}},{"kind":32,"name":"toDateTime","modifiers":1,"children":[],"doc":{"description":"Create a DateTime object that represents the same instant (up to second precision, with a rounding error of less than 1 second) and has an analog timezone to this object (the difference being DateTimeʼs timezone will be backed by PHPʼs timezone while IntlCalendarʼs timezone is backed by ICUʼs).","type":"DateTime"}},{"kind":32,"name":"add","modifiers":1,"children":[{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}},{"kind":128,"name":"$amount","modifiers":0,"doc":{"description":"The signed amount to add to the current field. If the amount is positive, the instant will be moved forward; if it is negative, the instant wil be moved into the past. The unit is implicit to the field type. For instance, hours for IntlCalendar::FIELD_HOUR_OF_DAY.","type":"int"}}],"doc":{"description":"Add a signed amount to a field. Adding a positive amount allows advances in time, even if the numeric value of the field decreases (e.g. when working with years in BC dates).","type":"bool"}},{"kind":32,"name":"getDayOfWeekType","modifiers":1,"children":[{"kind":128,"name":"$dayOfWeek","modifiers":0,"doc":{"description":"One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, …, IntlCalendar::DOW_SATURDAY.","type":"int"}}],"doc":{"description":"Returns whether the passed day is a weekday (IntlCalendar::DOW_TYPE_WEEKDAY), a weekend day (IntlCalendar::DOW_TYPE_WEEKEND), a day during which a transition occurs into the weekend (IntlCalendar::DOW_TYPE_WEEKEND_OFFSET) or a day during which the weekend ceases (IntlCalendar::DOW_TYPE_WEEKEND_CEASE).","type":"int"}},{"kind":32,"name":"getErrorCode","modifiers":1,"children":[],"doc":{"description":"Returns the numeric ICU error code for the last call on this object (including cloning) or the IntlCalendar given for the calendar parameter (in the procedural‒style version). This may indicate only a warning (negative error code) or no error at all (U_ZERO_ERROR). The actual presence of an error can be tested with intl_is_failure().","type":"int"}},{"kind":32,"name":"set","modifiers":1,"children":[{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"The new value for IntlCalendar::FIELD_YEAR.","type":"int"}},{"kind":128,"name":"$month","modifiers":0,"doc":{"description":"The new value for IntlCalendar::FIELD_MONTH.","type":"int"}},{"kind":128,"name":"$dayOfMonth","modifiers":0,"value":"NULL","doc":{"description":"The new value for IntlCalendar::FIELD_DAY_OF_MONTH. The month sequence is zero-based, i.e., January is represented by 0, February by 1, …, December is 11 and Undecember (if the calendar has it) is 12.","type":"int"}},{"kind":128,"name":"$hour","modifiers":0,"value":"NULL","doc":{"description":"The new value for IntlCalendar::FIELD_HOUR_OF_DAY.","type":"int"}},{"kind":128,"name":"$minute","modifiers":0,"value":"NULL","doc":{"description":"The new value for IntlCalendar::FIELD_MINUTE.","type":"int"}},{"kind":128,"name":"$second","modifiers":0,"value":"NULL","doc":{"description":"The new value for IntlCalendar::FIELD_SECOND.","type":"int"}}],"doc":{"description":"Sets either a specific field to the given value, or sets at once several common fields. The range of values that are accepted depend on whether the calendar is using the lenient mode.","type":"bool"}},{"kind":32,"name":"getMinimalDaysInFirstWeek","modifiers":1,"children":[],"doc":{"description":"Returns the smallest number of days the first week of a year or month must have in the new year or month. For instance, in the Gregorian calendar, if this value is 1, then the first week of the year will necessarily include January 1st, while if this value is 7, then the week with January 1st will be the first week of the year only if the day of the week for January 1st matches the day of the week returned by IntlCalendar::getFirstDayOfWeek(); otherwise it will be the previous yearʼs last week.","type":"int"}},{"kind":32,"name":"setLenient","modifiers":1,"children":[{"kind":128,"name":"$isLenient","modifiers":0,"doc":{"description":"Use TRUE to activate the lenient mode; FALSE otherwise.","type":"string"}}],"doc":{"description":"Defines whether the calendar is ‘lenient mode’. In such a mode, some of out-of-bounds values for some fields are accepted, the behavior being similar to that of IntlCalendar::add() (i.e., the value wraps around, carrying into more significant fields each time). If the lenient mode is off, then such values will generate an error.","type":"ReturnType"}},{"kind":32,"name":"getNow","modifiers":32,"children":[],"doc":{"description":"The number of milliseconds that have passed since the reference date. This number is derived from the system time.","type":"float"}},{"kind":32,"name":"getMaximum","modifiers":1,"children":[{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Gets the global maximum for a field, in this specific calendar. This value is larger or equal to that returned by IntlCalendar::getActualMaximum(), which is in its turn larger or equal to that returned by IntlCalendar::getLeastMaximum().","type":"int"}},{"kind":32,"name":"setTime","modifiers":1,"children":[{"kind":128,"name":"$date","modifiers":0,"doc":{"description":"An instant represented by the number of number of milliseconds between such instant and the epoch, ignoring leap seconds.","type":"float"}}],"doc":{"description":"Sets the instant represented by this object. The instant is represented by a float whose value should be an integer number of milliseconds since the epoch (1 Jan 1970 00:00:00.000 UTC), ignoring leap seconds. All the field values will be recalculated accordingly.","type":"bool"}},{"kind":32,"name":"inDaylightTime","modifiers":1,"children":[],"doc":{"description":"Whether, for the instant represented by this object and for this objectʼs timezone, daylight saving time is in place.","type":"bool"}},{"kind":32,"name":"getTime","modifiers":1,"children":[],"doc":{"description":"Returns the time associated with this object, expressed as the number of milliseconds since the epoch.","type":"float"}},{"kind":32,"name":"getLocale","modifiers":1,"children":[{"kind":128,"name":"$localeType","modifiers":0,"doc":{"description":"Whether to fetch the actual locale (the locale from which the calendar data originates, with Locale::ACTUAL_LOCALE) or the valid locale, i.e., the most specific locale supported by ICU relatively to the requested locale – see Locale::VALID_LOCALE. From the most general to the most specific, the locales are ordered in this fashion – actual locale, valid locale, requested locale.","type":"int"}}],"doc":{"description":"Returns the locale used by this calendar object.","type":"string"}},{"kind":32,"name":"getErrorMessage","modifiers":1,"children":[],"doc":{"description":"Returns the error message (if any) associated with the error reported by IntlCalendar::getErrorCode() or intlcal_get_error_code(). If there is no associated error message, only the string representation of the name of the error constant will be returned. Otherwise, the message also includes a message set on the side of the PHP binding.","type":"string"}},{"kind":32,"name":"getFirstDayOfWeek","modifiers":1,"children":[],"doc":{"description":"The week day deemed to start a week, either the default value for this locale or the value set with IntlCalendar::setFirstDayOfWeek().","type":"int"}},{"kind":32,"name":"isWeekend","modifiers":1,"children":[{"kind":128,"name":"$date","modifiers":0,"value":"NULL","doc":{"description":"An optional timestamp representing the number of milliseconds since the epoch, excluding leap seconds. If NULL, this objectʼs current time is used instead.","type":"float"}}],"doc":{"description":"Returns whether either the obejctʼs current time or the provided timestamp occur during a weekend in this objectʼs calendar system.","type":"bool"}},{"kind":32,"name":"getWeekendTransition","modifiers":1,"children":[{"kind":128,"name":"$dayOfWeek","modifiers":0,"doc":{"description":"One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, …, IntlCalendar::DOW_SATURDAY.","type":"string"}}],"doc":{"description":"Returns the number of milliseconds after midnight at which the weekend begins or ends.","type":"int"}},{"kind":32,"name":"roll","modifiers":1,"children":[{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}},{"kind":128,"name":"$amountOrUpOrDown","modifiers":0,"doc":{"description":"The (signed) amount to add to the field, TRUE for rolling up (adding 1), or FALSE for rolling down (subtracting 1).","type":"mixed"}}],"doc":{"description":"Adds a (signed) amount to a field. The difference with respect to IntlCalendar::add() is that when the field value overflows, it does not carry into more significant fields.","type":"bool"}},{"kind":32,"name":"getType","modifiers":1,"children":[],"doc":{"description":"A string describing the type of this calendar. This is one of the valid values for the calendar keyword value 'calendar'.","type":"string"}},{"kind":32,"name":"createInstance","modifiers":32,"children":[{"kind":128,"name":"$timeZone","modifiers":0,"value":"NULL","doc":{"description":"The timezone to use. NULL, in which case the default timezone will be used, as specified in the ini setting date.timezone or through the function date_default_timezone_set() and as returned by date_default_timezone_get(). An IntlTimeZone, which will be used directly. A DateTimeZone. Its identifier will be extracted and an ICU timezone object will be created; the timezone will be backed by ICUʼs database, not PHPʼs. A string, which should be a valid ICU timezone identifier. See IntlTimeZone::createTimeZoneIDEnumeration(). Raw offsets such as \"GMT+08:30\" are also accepted.","type":"mixed"}},{"kind":128,"name":"$locale","modifiers":0,"value":"\"\"","doc":{"description":"A locale to use or NULL to use the default locale.","type":"string"}}],"doc":{"description":"Given a timezone and locale, this method creates an IntlCalendar object. This factory method may return a subclass of IntlCalendar.","type":"IntlCalendar"}},{"kind":32,"name":"getActualMinimum","modifiers":1,"children":[{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Returns a fieldʼs relative minimum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the greatest relative minimum for the field and would decrement it until reaching the global minimum or the field value wraps around, in which the value returned would be the global minimum or the value before the wrapping, respectively.","type":"int"}},{"kind":32,"name":"setRepeatedWallTimeOption","modifiers":1,"children":[{"kind":128,"name":"$wallTimeOption","modifiers":0,"doc":{"description":"One of the constants IntlCalendar::WALLTIME_FIRST or IntlCalendar::WALLTIME_LAST.","type":"int"}}],"doc":{"description":"Sets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is IntlCalendar::WALLTIME_LAST (take the post-DST instant). The other possible value is IntlCalendar::WALLTIME_FIRST (take the instant that occurs during DST).","type":"bool"}},{"kind":32,"name":"setTimeZone","modifiers":1,"children":[{"kind":128,"name":"$timeZone","modifiers":0,"doc":{"description":"The new timezone to be used by this calendar. It can be specified in the following ways: NULL, in which case the default timezone will be used, as specified in the ini setting date.timezone or through the function date_default_timezone_set() and as returned by date_default_timezone_get(). An IntlTimeZone, which will be used directly. A DateTimeZone. Its identifier will be extracted and an ICU timezone object will be created; the timezone will be backed by ICUʼs database, not PHPʼs. A string, which should be a valid ICU timezone identifier. See IntlTimeZone::createTimeZoneIDEnumeration(). Raw offsets such as \"GMT+08:30\" are also accepted.","type":"mixed"}}],"doc":{"description":"Defines a new timezone for this calendar. The time represented by the object is preserved to the detriment of the field values.","type":"bool"}},{"kind":32,"name":"getActualMaximum","modifiers":1,"children":[{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Returns a fieldʼs relative maximum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the smallest relative maximum for the field and would increment it until reaching the global maximum or the field value wraps around, in which the value returned would be the global maximum or the value before the wrapping, respectively.","type":"int"}},{"kind":32,"name":"getLeastMaximum","modifiers":1,"children":[{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Returns the smallest local maximumw for a field. This should be a value smaller or equal to that returned by IntlCalendar::getActualMaxmimum(), which is in its turn smaller or equal to that returned by IntlCalendar::getMaximum().","type":"int"}},{"kind":32,"name":"after","modifiers":1,"children":[{"kind":128,"name":"$other","modifiers":0,"doc":{"description":"The calendar whose time will be checked against the primary objectʼs time.","type":"IntlCalendar"}}],"doc":{"description":"Returns whether this objectʼs time succeeds the argumentʼs time.","type":"bool"}},{"kind":32,"name":"fieldDifference","modifiers":1,"children":[{"kind":128,"name":"$when","modifiers":0,"doc":{"description":"The time against which to compare the quantity represented by the field. For the result to be positive, the time given for this parameter must be ahead of the time of the object the method is being invoked on.","type":"float"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"The field that represents the quantity being compared. One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Return the difference between the given time and the time this object is set to, with respect to the quantity specified the field parameter.","type":"int"}},{"kind":32,"name":"isLenient","modifiers":1,"children":[],"doc":{"description":"Returns whether the current date/time interpretations is lenient (the default). If that is case, some out of range values for fields will be accepted instead of raising an error.","type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"A private constructor for disallowing instantiation with the new operator.","type":"private"}},{"kind":32,"name":"before","modifiers":1,"children":[{"kind":128,"name":"$other","modifiers":0,"doc":{"description":"The calendar whose time will be checked against the primary objectʼs time.","type":"IntlCalendar"}}],"doc":{"description":"Returns whether this objectʼs time precedes the argumentʼs time.","type":"bool"}},{"kind":32,"name":"setFirstDayOfWeek","modifiers":1,"children":[{"kind":128,"name":"$dayOfWeek","modifiers":0,"doc":{"description":"One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, …, IntlCalendar::DOW_SATURDAY.","type":"int"}}],"doc":{"description":"Defines the day of week deemed to start the week. This affects the behavior of fields that depend on the concept of week start and end such as IntlCalendar::FIELD_WEEK_OF_YEAR and IntlCalendar::FIELD_YEAR_WOY.","type":"bool"}},{"kind":32,"name":"setSkippedWallTimeOption","modifiers":1,"children":[{"kind":128,"name":"$wallTimeOption","modifiers":0,"doc":{"description":"One of the constants IntlCalendar::WALLTIME_FIRST, IntlCalendar::WALLTIME_LAST or IntlCalendar::WALLTIME_NEXT_VALID.","type":"int"}}],"doc":{"description":"Sets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is IntlCalendar::WALLTIME_LAST (take it as being the same instant as the one when the wall time is one hour more). Alternative values are IntlCalendar::WALLTIME_FIRST (same instant as the one with a wall time of one hour less) and IntlCalendar::WALLTIME_NEXT_VALID (same instant as when DST begins).","type":"bool"}},{"kind":32,"name":"getKeywordValuesForLocale","modifiers":32,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The locale keyword for which relevant values are to be queried. Only 'calendar' is supported.","type":"string"}},{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale onto which the keyword/value pair are to be appended.","type":"string"}},{"kind":128,"name":"$commonlyUsed","modifiers":0,"doc":{"description":"Whether to show only the values commonly used for the specified locale.","type":"boolean"}}],"doc":{"description":"For a given locale key, get the set of values for that key that would result in a different behavior. For now, only the 'calendar' keyword is supported.","type":"Iterator"}},{"kind":32,"name":"getTimeZone","modifiers":1,"children":[],"doc":{"description":"Returns the IntlTimeZone object associated with this calendar.","type":"IntlTimeZone"}},{"kind":32,"name":"get","modifiers":1,"children":[{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Gets the value for a specific field.","type":"int"}},{"kind":32,"name":"isSet","modifiers":1,"children":[{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Returns whether a field is set (as opposed to clear). Set fields take priority over unset fields and their default values when the date/time is being calculated. Fields set later take priority over fields set earlier.","type":"bool"}},{"kind":32,"name":"fromDateTime","modifiers":32,"children":[{"kind":128,"name":"$dateTime","modifiers":0,"doc":{"description":"A DateTime object or a string that can be passed to DateTime::__construct().","type":"mixed"}}],"doc":{"description":"Creates an IntlCalendar object either from a DateTime object or from a string from which a DateTime object can be built.","type":"IntlCalendar"}},{"kind":32,"name":"getMinimum","modifiers":1,"children":[{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Gets the global minimum for a field, in this specific calendar. This value is smaller or equal to that returned by IntlCalendar::getActualMinimum(), which is in its turn smaller or equal to that returned by IntlCalendar::getGreatestMinimum(). For the Gregorian calendar, these three functions always return the same value (for each field).","type":"int"}},{"kind":32,"name":"getSkippedWallTimeOption","modifiers":1,"children":[],"doc":{"description":"Gets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is IntlCalendar::WALLTIME_LAST.","type":"int"}},{"kind":32,"name":"getAvailableLocales","modifiers":32,"children":[],"doc":{"description":"Gives the list of locales for which calendars are installed. As of ICU 51, this is the list of all installed ICU locales.","type":"array"}},{"kind":32,"name":"clear","modifiers":1,"children":[{"kind":128,"name":"$field","modifiers":0,"value":"NULL","doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Clears either all of the fields or a specific field. A cleared field is marked as unset, giving it the lowest priority against overlapping fields or even default values when calculating the time. Additionally, its value is set to 0, though given the fieldʼs low priority, its value may have been internally set to another value by the time the field has finished been queried.","type":"bool"}},{"kind":32,"name":"isEquivalentTo","modifiers":1,"children":[{"kind":128,"name":"$other","modifiers":0,"doc":{"description":"The other calendar against which the comparison is to be made.","type":"IntlCalendar"}}],"doc":{"description":"Returns whether this and the given object are equivalent for all purposes except as to the time they have set. The locales do not have to match, as long as no change in behavior results from such mismatch. This includes the timezone, whether the lenient mode is set, the repeated and skipped wall time settings, the days of the week when the weekend starts and ceases and the times where such transitions occur. It may also include other calendar specific settings, such as the Gregorian/Julian transition instant.","type":"bool"}},{"kind":32,"name":"equals","modifiers":1,"children":[{"kind":128,"name":"$other","modifiers":0,"doc":{"description":"The calendar to compare with the primary object.","type":"IntlCalendar"}}],"doc":{"description":"Returns true if this calendar and the given calendar have the same time. The settings, calendar types and field states do not have to be the same.","type":"bool"}}]},{"kind":1,"name":"RecursiveArrayIterator","modifiers":0,"associated":[{"kind":1,"name":"ArrayIterator"},{"kind":2,"name":"RecursiveIterator"}],"children":[{"kind":1024,"name":"CHILD_ARRAYS_ONLY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"getChildren","modifiers":1,"children":[],"doc":{"description":"Returns an iterator for the current iterator entry.","type":"RecursiveArrayIterator"}},{"kind":32,"name":"hasChildren","modifiers":1,"children":[],"doc":{"description":"Returns whether current entry is an array or an object for which an iterator can be obtained via RecursiveArrayIterator::getChildren().","type":"bool"}}],"doc":{"description":"This iterator allows to unset and modify values and keys while iterating over Arrays and Objects in the same way as the ArrayIterator. Additionally it is possible to iterate over the current iterator entry."}},{"kind":8,"name":"PHP_VERSION","doc":{"description":"The current PHP version as a string in \"major.minor.release[extra]\" notation."}},{"kind":8,"name":"PHP_MAJOR_VERSION","doc":{"description":"The current PHP \"major\" version as an integer (e.g., int(5) from version \"5.2.7-extra\"). Available since PHP 5.2.7."}},{"kind":8,"name":"PHP_MINOR_VERSION","doc":{"description":"The current PHP \"minor\" version as an integer (e.g., int(2) from version \"5.2.7-extra\"). Available since PHP 5.2.7."}},{"kind":8,"name":"PHP_RELEASE_VERSION","doc":{"description":"The current PHP \"release\" version as an integer (e.g., int(7) from version \"5.2.7-extra\"). Available since PHP 5.2.7."}},{"kind":8,"name":"PHP_VERSION_ID","doc":{"description":"The current PHP version as an integer, useful for version comparisons (e.g., int(50207) from version \"5.2.7-extra\"). Available since PHP 5.2.7."}},{"kind":8,"name":"PHP_EXTRA_VERSION","doc":{"description":"The current PHP \"extra\" version as a string (e.g., '-extra' from version \"5.2.7-extra\"). Often used by distribution vendors to indicate a package version. Available since PHP 5.2.7."}},{"kind":8,"name":"PHP_ZTS","doc":{"description":"Available since PHP 5.2.7."}},{"kind":8,"name":"PHP_DEBUG","doc":{"description":"Available since PHP 5.2.7."}},{"kind":8,"name":"PHP_MAXPATHLEN","doc":{"description":"The maximum length of filenames (including path) supported by this build of PHP. Available since PHP 5.3.0."}},{"kind":8,"name":"PHP_OS","doc":{"description":"The operating system PHP was built for."}},{"kind":8,"name":"PHP_OS_FAMILY","doc":{"description":"The operating system family PHP was built for. Either of 'Windows', 'BSD', 'OSX', 'Solaris', 'Linux' or 'Unknown'. Available as of PHP 7.2.0."}},{"kind":8,"name":"PHP_SAPI","doc":{"description":"The Server API for this build of PHP. See also php_sapi_name()."}},{"kind":8,"name":"PHP_EOL","doc":{"description":"The correct 'End Of Line' symbol for this platform. Available since PHP 5.0.2"}},{"kind":8,"name":"PHP_INT_MAX","doc":{"description":"The largest integer supported in this build of PHP. Usually int(2147483647). Available since PHP 5.0.5"}},{"kind":8,"name":"PHP_INT_MIN","doc":{"description":"The smallest integer supported in this build of PHP. Usually int(-2147483648) in 32 bit systems and int(-9223372036854775808) in 64 bit systems. Available since PHP 7.0.0. Usually, PHP_INT_MIN === ~PHP_INT_MAX."}},{"kind":8,"name":"PHP_INT_SIZE","doc":{"description":"The size of an integer in bytes in this build of PHP. Available since PHP 5.0.5"}},{"kind":8,"name":"PHP_FLOAT_DIG","doc":{"description":"Number of decimal digits that can be rounded into a float and back without precision loss. Available as of PHP 7.2.0."}},{"kind":8,"name":"PHP_FLOAT_EPSILON","doc":{"description":"Smallest representable positive number x, so that x + 1.0 != 1.0. Available as of PHP 7.2.0."}},{"kind":8,"name":"PHP_FLOAT_MIN","doc":{"description":"Smallest representable floating point number. Available as of PHP 7.2.0."}},{"kind":8,"name":"PHP_FLOAT_MAX","doc":{"description":"Largest representable floating point number. Available as of PHP 7.2.0."}},{"kind":8,"name":"DEFAULT_INCLUDE_PATH","description":""},{"kind":8,"name":"PEAR_INSTALL_DIR","description":""},{"kind":8,"name":"PEAR_EXTENSION_DIR","description":""},{"kind":8,"name":"PHP_EXTENSION_DIR","description":""},{"kind":8,"name":"PHP_PREFIX","doc":{"description":"The value \"--prefix\" was set to at configure."}},{"kind":8,"name":"PHP_BINDIR","doc":{"description":"Specifies where the binaries were installed into."}},{"kind":8,"name":"PHP_BINARY","doc":{"description":"Specifies the PHP binary path during script execution. Available since PHP 5.4."}},{"kind":8,"name":"PHP_MANDIR","doc":{"description":"Specifies where the manpages were installed into. Available since PHP 5.3.7."}},{"kind":8,"name":"PHP_LIBDIR","description":""},{"kind":8,"name":"PHP_DATADIR","description":""},{"kind":8,"name":"PHP_SYSCONFDIR","description":""},{"kind":8,"name":"PHP_LOCALSTATEDIR","description":""},{"kind":8,"name":"PHP_CONFIG_FILE_PATH","description":""},{"kind":8,"name":"PHP_CONFIG_FILE_SCAN_DIR","description":""},{"kind":8,"name":"PHP_SHLIB_SUFFIX","doc":{"description":"The build-platform's shared library suffix, such as \"so\" (most Unixes) or \"dll\" (Windows)."}},{"kind":8,"name":"PHP_FD_SETSIZE","doc":{"description":"The maximum number of file descriptors for select system calls. Available as of PHP 7.1.0."}},{"kind":8,"name":"E_ERROR","doc":{"description":"Error reporting constant"}},{"kind":8,"name":"E_WARNING","description":""},{"kind":8,"name":"E_PARSE","description":""},{"kind":8,"name":"E_NOTICE","description":""},{"kind":8,"name":"E_CORE_ERROR","description":""},{"kind":8,"name":"E_CORE_WARNING","description":""},{"kind":8,"name":"E_COMPILE_ERROR","description":""},{"kind":8,"name":"E_COMPILE_WARNING","description":""},{"kind":8,"name":"E_USER_ERROR","description":""},{"kind":8,"name":"E_USER_WARNING","description":""},{"kind":8,"name":"E_USER_NOTICE","description":""},{"kind":8,"name":"E_DEPRECATED","doc":{"description":"Available since PHP 5.3.0"}},{"kind":8,"name":"E_USER_DEPRECATED","doc":{"description":"Available since PHP 5.3.0"}},{"kind":8,"name":"E_ALL","description":""},{"kind":8,"name":"E_STRICT","description":""},{"kind":8,"name":"true","doc":{"description":"See Booleans."}},{"kind":8,"name":"false","doc":{"description":"See Booleans."}},{"kind":8,"name":"null","doc":{"description":"See Null."}},{"kind":1,"name":"UnexpectedValueException","modifiers":0,"associated":[{"kind":1,"name":"RuntimeException"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown if a value does not match with a set of values. Typically this happens when a function calls another function and expects the return value to be of a certain type or value not including arithmetic or buffer related errors."}},{"kind":2,"name":"SeekableIterator","modifiers":0,"associated":[{"kind":1,"name":"Iterator"}],"children":[{"kind":32,"name":"seek","modifiers":1,"children":[{"kind":128,"name":"$position","modifiers":0,"doc":{"description":"The position to seek to.","type":"int"}}],"doc":{"description":"Seeks to a given position in the iterator.","type":"void"}}],"doc":{"description":"The Seekable iterator."}},{"kind":8,"name":"POSIX_S_IFBLK","doc":{"description":"Block special file"}},{"kind":8,"name":"POSIX_S_IFCHR","doc":{"description":"Character special file"}},{"kind":8,"name":"POSIX_S_IFIFO","doc":{"description":"FIFO (named pipe) special file"}},{"kind":8,"name":"POSIX_S_IFREG","doc":{"description":"Normal file"}},{"kind":8,"name":"POSIX_S_IFSOCK","doc":{"description":"Socket"}},{"kind":1,"name":"RecursiveCachingIterator","modifiers":0,"associated":[{"kind":1,"name":"CachingIterator"},{"kind":2,"name":"Countable"},{"kind":2,"name":"ArrayAccess"},{"kind":2,"name":"OuterIterator"},{"kind":2,"name":"RecursiveIterator"}],"children":[{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator being used.","type":"Iterator"}},{"kind":128,"name":"$flags","modifiers":0,"value":"self::CALL_TOSTRING","doc":{"description":"The flags. Use CALL_TOSTRING to call RecursiveCachingIterator::__toString() for every element (the default), and/or CATCH_GET_CHILD to catch exceptions when trying to get children.","type":"string"}}],"doc":{"description":"Constructs a new RecursiveCachingIterator, which consists of a passed in iterator.","type":"public"}},{"kind":32,"name":"hasChildren","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"getChildren","modifiers":1,"description":"","children":[],"doc":{"type":"RecursiveCachingIterator"}}],"doc":{"description":"..."}},{"kind":1,"name":"DOMText","modifiers":0,"associated":[{"kind":1,"name":"DOMCharacterData"}],"children":[{"kind":16,"name":"$wholeText","modifiers":1,"doc":{"description":"Holds all the text of logically-adjacent (not separated by Element, Comment or Processing Instruction) Text nodes.","type":"string"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the text node. If not supplied an empty text node is created.","type":"string"}}],"doc":{"description":"Creates a new DOMText object.","type":"public"}},{"kind":32,"name":"splitText","modifiers":1,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The offset at which to split, starting from 0.","type":"int"}}],"doc":{"description":"Breaks this node into two nodes at the specified offset, keeping both in the tree as siblings.","type":"DOMText"}},{"kind":32,"name":"isWhitespaceInElementContent","modifiers":1,"children":[],"doc":{"description":"Indicates whether this text node contains only whitespace or it is empty. The text node is determined to contain whitespace in element content during the load of the document.","type":"bool"}}],"doc":{"description":"The DOMText class inherits from DOMCharacterData and represents the textual content of a DOMElement or DOMAttr."}},{"kind":1,"name":"PDO","modifiers":0,"associated":[],"children":[{"kind":32,"name":"errorInfo","modifiers":1,"description":"","children":[],"doc":{"type":"array"}},{"kind":32,"name":"pgsqlGetPid","modifiers":1,"children":[],"doc":{"description":"Returns the server's PID.","type":"int"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$dsn","modifiers":0,"doc":{"description":"The Data Source Name, or DSN, contains the information required to connect to the database. In general, a DSN consists of the PDO driver name, followed by a colon, followed by the PDO driver-specific connection syntax. Further information is available from the PDO driver-specific documentation. The dsn parameter supports three different methods of specifying the arguments required to create a database connection: Driver invocation dsn contains the full DSN. URI invocation dsn consists of uri: followed by a URI that defines the location of a file containing the DSN string. The URI can specify a local file or a remote URL. uri:file:///path/to/dsnfile Aliasing dsn consists of a name name that maps to pdo.dsn.name in php.ini defining the DSN string. Note: The alias must be defined in php.ini, and not .htaccess or httpd.conf","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The user name for the DSN string. This parameter is optional for some PDO drivers.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password for the DSN string. This parameter is optional for some PDO drivers.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"A key=>value array of driver-specific connection options.","type":"array"}}],"doc":{"description":"Creates a PDO instance to represent a connection to the requested database.","type":"public"}},{"kind":32,"name":"inTransaction","modifiers":1,"children":[],"doc":{"description":"Checks if a transaction is currently active within the driver. This method only works for database drivers that support transactions.","type":"bool"}},{"kind":32,"name":"pgsqlGetNotify","modifiers":1,"children":[{"kind":128,"name":"$result_type","modifiers":0,"value":"PDO::FETCH_USE_DEFAULT","doc":{"description":"The format the result set should be returned as, represented as a PDO::FETCH_* constant.","type":"int"}},{"kind":128,"name":"$ms_timeout","modifiers":0,"value":"0","doc":{"description":"The length of time to wait for a response, in milliseconds.","type":"int"}}],"doc":{"description":"Returns a result set representing a pending asynchronous notification.","type":"array"}},{"kind":32,"name":"pgsqlCopyFromFile","modifiers":1,"children":[{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"String containing table name","type":"string"}},{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Filename containing data to import","type":"string"}},{"kind":128,"name":"$delimiter","modifiers":0,"value":"'\\t'","doc":{"description":"Delimiter used in file specified by filename","type":"string"}},{"kind":128,"name":"$null_as","modifiers":0,"value":"\"\\\\\\\\N\"","doc":{"description":"How to interpret null values","type":"string"}},{"kind":128,"name":"$fields","modifiers":0,"doc":{"description":"List of fields to insert","type":"string"}}],"doc":{"description":"Copies data from file specified by filename into table table_name using delimiter as fields delimiter and fields list","type":"bool"}},{"kind":32,"name":"exec","modifiers":1,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"The SQL statement to prepare and execute. Data inside the query should be properly escaped.","type":"string"}}],"doc":{"description":"PDO::exec() executes an SQL statement in a single function call, returning the number of rows affected by the statement.","type":"int"}},{"kind":32,"name":"getAvailableDrivers","modifiers":32,"children":[],"doc":{"description":"This function returns all currently available PDO drivers which can be used in DSN parameter of PDO::__construct().","type":"array"}},{"kind":32,"name":"pgsqlCopyFromArray","modifiers":1,"children":[{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"String containing table name","type":"string"}},{"kind":128,"name":"$rows","modifiers":0,"doc":{"description":"Array of strings with fields separated by delimiter","type":"array"}},{"kind":128,"name":"$delimiter","modifiers":0,"value":"'\\t'","doc":{"description":"Delimiter used in rows array","type":"string"}},{"kind":128,"name":"$null_as","modifiers":0,"value":"\"\\\\\\\\N\"","doc":{"description":"How to interpret null values","type":"string"}},{"kind":128,"name":"$fields","modifiers":0,"doc":{"description":"List of fields to insert","type":"string"}}],"doc":{"description":"Copies data from rows array to table table_name using delimiter as fields delimiter and fields list","type":"bool"}},{"kind":32,"name":"setAttribute","modifiers":1,"children":[{"kind":128,"name":"$attribute","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Sets an attribute on the database handle. Some of the available generic attributes are listed below; some drivers may make use of additional driver specific attributes.","type":"bool"}},{"kind":32,"name":"getAttribute","modifiers":1,"children":[{"kind":128,"name":"$attribute","modifiers":0,"doc":{"description":"One of the PDO::ATTR_* constants. The constants that apply to database connections are as follows: PDO::ATTR_AUTOCOMMIT PDO::ATTR_CASE PDO::ATTR_CLIENT_VERSION PDO::ATTR_CONNECTION_STATUS PDO::ATTR_DRIVER_NAME PDO::ATTR_ERRMODE PDO::ATTR_ORACLE_NULLS PDO::ATTR_PERSISTENT PDO::ATTR_PREFETCH PDO::ATTR_SERVER_INFO PDO::ATTR_SERVER_VERSION PDO::ATTR_TIMEOUT","type":"int"}}],"doc":{"description":"This function returns the value of a database connection attribute. To retrieve PDOStatement attributes, refer to PDOStatement::getAttribute().","type":"mixed"}},{"kind":32,"name":"query","modifiers":1,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"The SQL statement to prepare and execute. Data inside the query should be properly escaped.","type":"string"}},{"kind":128,"name":"$PDO::FETCH_INTO","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$object","modifiers":0,"description":"","doc":{"type":"object"}}],"doc":{"description":"PDO::query() executes an SQL statement in a single function call, returning the result set (if any) returned by the statement as a PDOStatement object.","type":"PDOStatement"}},{"kind":32,"name":"prepare","modifiers":1,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"This must be a valid SQL statement template for the target database server.","type":"string"}},{"kind":128,"name":"$driver_options","modifiers":0,"value":"array()","doc":{"description":"This array holds one or more key=>value pairs to set attribute values for the PDOStatement object that this method returns. You would most commonly use this to set the PDO::ATTR_CURSOR value to PDO::CURSOR_SCROLL to request a scrollable cursor. Some drivers have driver specific options that may be set at prepare-time.","type":"array"}}],"doc":{"description":"Prepares an SQL statement to be executed by the PDOStatement::execute() method. The SQL statement can contain zero or more named (:name) or question mark (?) parameter markers for which real values will be substituted when the statement is executed. You cannot use both named and question mark parameter markers within the same SQL statement; pick one or the other parameter style. Use these parameters to bind any user-input, do not include the user-input directly in the query.","type":"PDOStatement"}},{"kind":32,"name":"quote","modifiers":1,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string to be quoted.","type":"string"}},{"kind":128,"name":"$parameter_type","modifiers":0,"value":"PDO::PARAM_STR","doc":{"description":"Provides a data type hint for drivers that have alternate quoting styles.","type":"int"}}],"doc":{"description":"PDO::quote() places quotes around the input string (if required) and escapes special characters within the input string, using a quoting style appropriate to the underlying driver.","type":"string"}},{"kind":32,"name":"lastInsertId","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"value":"NULL","doc":{"description":"Name of the sequence object from which the ID should be returned.","type":"string"}}],"doc":{"description":"Returns the ID of the last inserted row, or the last value from a sequence object, depending on the underlying driver. For example, PDO_PGSQL requires you to specify the name of a sequence object for the name parameter.","type":"string"}},{"kind":32,"name":"pgsqlCopyToArray","modifiers":1,"children":[{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"String containing table name","type":"string"}},{"kind":128,"name":"$rows","modifiers":0,"description":"","doc":{"type":"array"}},{"kind":128,"name":"$delimiter","modifiers":0,"value":"'\\t'","doc":{"description":"Delimiter used in rows array","type":"string"}},{"kind":128,"name":"$null_as","modifiers":0,"value":"\"\\\\\\\\N\"","doc":{"description":"How to interpret null values","type":"string"}},{"kind":128,"name":"$fields","modifiers":0,"doc":{"description":"List of fields to export","type":"string"}}],"doc":{"description":"Copies data from table into array using delimiter as fields delimiter and fields list","type":"array"}},{"kind":32,"name":"commit","modifiers":1,"children":[],"doc":{"description":"Commits a transaction, returning the database connection to autocommit mode until the next call to PDO::beginTransaction() starts a new transaction.","type":"bool"}},{"kind":32,"name":"pgsqlLOBOpen","modifiers":1,"children":[{"kind":128,"name":"$oid","modifiers":0,"doc":{"description":"A large object identifier.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"value":"\"rb\"","doc":{"description":"If mode is r, open the stream for reading. If mode is w, open the stream for writing.","type":"string"}}],"doc":{"description":"PDO::pgsqlLOBOpen() opens a stream to access the data referenced by oid. If mode is r, the stream is opened for reading, if mode is w, then the stream will be opened for writing. You can use all the usual filesystem functions, such as fread(), fwrite() and fgets() to manipulate the contents of the stream.","type":"resource"}},{"kind":32,"name":"rollBack","modifiers":1,"children":[],"doc":{"description":"Rolls back the current transaction, as initiated by PDO::beginTransaction().","type":"bool"}},{"kind":32,"name":"pgsqlLOBCreate","modifiers":1,"children":[],"doc":{"description":"PDO::pgsqlLOBCreate() creates a large object and returns the OID of that object. You may then open a stream on the object using PDO::pgsqlLOBOpen() to read or write data to it. The OID can be stored in columns of type OID and be used to reference the large object, without causing the row to grow arbitrarily large. The large object will continue to live in the database until it is removed by calling PDO::pgsqlLOBUnlink().","type":"string"}},{"kind":32,"name":"sqliteCreateCollation","modifiers":1,"description":"","children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the SQL collating function to be created or redefined.","type":"string"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The name of a PHP function or user-defined function to apply as a callback, defining the behavior of the collation. It should accept two strings and return as strcmp() does, i.e. it should return -1, 1, or 0 if the first string sorts before, sorts after, or is equal to the second. This function need to be defined as: int collation ( string $string1 , string $string2 )","type":"callable"}}],"doc":{"type":"bool"}},{"kind":32,"name":"pgsqlLOBUnlink","modifiers":1,"children":[{"kind":128,"name":"$oid","modifiers":0,"doc":{"description":"A large object identifier","type":"string"}}],"doc":{"description":"Deletes a large object from the database identified by OID.","type":"bool"}},{"kind":32,"name":"beginTransaction","modifiers":1,"children":[],"doc":{"description":"Turns off autocommit mode. While autocommit mode is turned off, changes made to the database via the PDO object instance are not committed until you end the transaction by calling PDO::commit(). Calling PDO::rollBack() will roll back all changes to the database and return the connection to autocommit mode.","type":"bool"}},{"kind":32,"name":"errorCode","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"pgsqlCopyToFile","modifiers":1,"children":[{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"String containing table name","type":"string"}},{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Filename to export data","type":"string"}},{"kind":128,"name":"$delimiter","modifiers":0,"value":"'\\t'","doc":{"description":"Delimiter used in file specified by filename","type":"string"}},{"kind":128,"name":"$null_as","modifiers":0,"value":"\"\\\\\\\\N\"","doc":{"description":"How to interpret null values","type":"string"}},{"kind":128,"name":"$fields","modifiers":0,"doc":{"description":"List of fields to insert","type":"string"}}],"doc":{"description":"Copies data from table into file specified by filename using delimiter as fields delimiter and fields list","type":"bool"}},{"kind":32,"name":"sqliteCreateAggregate","modifiers":1,"description":"","children":[{"kind":128,"name":"$function_name","modifiers":0,"doc":{"description":"The name of the function used in SQL statements.","type":"string"}},{"kind":128,"name":"$step_func","modifiers":0,"doc":{"description":"Callback function called for each row of the result set. Your PHP function should accumulate the result and store it in the aggregation context. This function need to be defined as: mixed step ( mixed $context , int $rownumber , mixed $value1 [, mixed $value2 [, mixed $.. ]] ) context will be NULL for the first row; on subsequent rows it will have the value that was previously returned from the step function; you should use this to maintain the aggregate state. rownumber will hold the current row number. The return value of this function will be used as the context argument in the next call of the step or finalize functions.","type":"callable"}},{"kind":128,"name":"$finalize_func","modifiers":0,"doc":{"description":"Callback function to aggregate the \"stepped\" data from each row. Once all the rows have been processed, this function will be called and it should then take the data from the aggregation context and return the result. Callback functions should return a type understood by SQLite (i.e. scalar type). This function need to be defined as: mixed fini ( mixed $context , int $rownumber ) context will hold the return value from the very last call to the step function. rownumber will hold the number of rows over which the aggregate was performed. The return value of this function will be used as the return value for the aggregate.","type":"callable"}},{"kind":128,"name":"$num_args","modifiers":0,"doc":{"description":"Hint to the SQLite parser if the callback function accepts a predetermined number of arguments.","type":"int"}}],"doc":{"type":"bool"}},{"kind":32,"name":"sqliteCreateFunction","modifiers":1,"description":"","children":[{"kind":128,"name":"$function_name","modifiers":0,"doc":{"description":"The name of the function used in SQL statements.","type":"string"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"Callback function to handle the defined SQL function. Note: Callback functions should return a type understood by SQLite (i.e. scalar type).","type":"callable"}},{"kind":128,"name":"$num_args","modifiers":0,"value":"-1","doc":{"description":"The number of arguments that the SQL function takes. If this parameter is -1, then the SQL function may take any number of arguments.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"A bitwise conjunction of flags. Currently, only PDO::SQLITE_DETERMINISTIC is supported, which specifies that the function always returns the same result given the same inputs within a single SQL statement.","type":"int"}}],"doc":{"type":"bool"}}],"doc":{"description":"Represents a connection between PHP and a database server."}},{"kind":1,"name":"IntlDateFormatter","modifiers":0,"associated":[],"children":[{"kind":32,"name":"getErrorMessage","modifiers":1,"children":[],"doc":{"description":"Get the error text from the last operation.","type":"string"}},{"kind":32,"name":"parse","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"string to convert to a time","type":"string"}},{"kind":128,"name":"$position","modifiers":1024,"doc":{"description":"Position at which to start the parsing in $value (zero-based). If no error occurs before $value is consumed, $parse_pos will contain -1 otherwise it will contain the position at which parsing ended (and the error occurred). This variable will contain the end position if the parse fails. If $parse_pos > strlen($value), the parse fails immediately.","type":"int"}}],"doc":{"description":"Converts string $value to an incremental time value, starting at $parse_pos and consuming as much of the input value as possible.","type":"int"}},{"kind":32,"name":"getTimeType","modifiers":1,"children":[],"doc":{"description":"Return time type used by the formatter.","type":"int"}},{"kind":32,"name":"setTimeZone","modifiers":1,"children":[{"kind":128,"name":"$zone","modifiers":0,"doc":{"description":"The timezone to use for this formatter. This can be specified in the following forms: NULL, in which case the default timezone will be used, as specified in the ini setting date.timezone or through the function date_default_timezone_set() and as returned by date_default_timezone_get(). An IntlTimeZone, which will be used directly. A DateTimeZone. Its identifier will be extracted and an ICU timezone object will be created; the timezone will be backed by ICUʼs database, not PHPʼs. A string, which should be a valid ICU timezone identifier. See IntlTimeZone::createTimeZoneIDEnumeration(). Raw offsets such as \"GMT+08:30\" are also accepted.","type":"mixed"}}],"doc":{"description":"Sets the timezone that will be used when formatting dates or times with this object.","type":"boolean"}},{"kind":32,"name":"getCalendarObject","modifiers":1,"children":[],"doc":{"description":"Obtain a copy of the calendar object used internally by this formatter. This calendar will have a type (as in gregorian, japanese, buddhist, roc, persian, islamic, etc.) and a timezone that match the type and timezone used by the formatter. The date/time of the object is unspecified.","type":"IntlCalendar"}},{"kind":32,"name":"localtime","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"string to convert to a time","type":"string"}},{"kind":128,"name":"$position","modifiers":1024,"doc":{"description":"Position at which to start the parsing in $value (zero-based). If no error occurs before $value is consumed, $parse_pos will contain -1 otherwise it will contain the position at which parsing ended . If $parse_pos > strlen($value), the parse fails immediately.","type":"int"}}],"doc":{"description":"Converts string $value to a field-based time value ( an array of various fields), starting at $parse_pos and consuming as much of the input value as possible.","type":"array"}},{"kind":32,"name":"getPattern","modifiers":1,"children":[],"doc":{"description":"Get pattern used by the formatter.","type":"string"}},{"kind":32,"name":"setLenient","modifiers":1,"children":[{"kind":128,"name":"$lenient","modifiers":0,"doc":{"description":"Sets whether the parser is lenient or not, default is TRUE (lenient).","type":"bool"}}],"doc":{"description":"Define if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly. Enabling lenient parsing allows the parser to accept otherwise flawed date or time patterns, parsing as much as possible to obtain a value. Extra space, unrecognized tokens, or invalid values (\"February 30th\") are not accepted.","type":"bool"}},{"kind":32,"name":"getCalendar","modifiers":0,"description":"","children":[],"doc":{"type":"int"}},{"kind":32,"name":"isLenient","modifiers":1,"children":[],"doc":{"description":"Check if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly.","type":"bool"}},{"kind":32,"name":"getDateType","modifiers":1,"children":[],"doc":{"description":"Returns date type used by the formatter.","type":"int"}},{"kind":32,"name":"getTimeZoneId","modifiers":1,"children":[],"doc":{"description":"Get the timezone-id used for the IntlDateFormatter.","type":"string"}},{"kind":32,"name":"getTimeZone","modifiers":1,"children":[],"doc":{"description":"Returns an IntlTimeZone object representing the timezone that will be used by this object to format dates and times. When formatting IntlCalendar and DateTime objects with this IntlDateFormatter, the timezone used will be the one returned by this method, not the one associated with the objects being formatted.","type":"IntlTimeZone"}},{"kind":32,"name":"formatObject","modifiers":32,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"An object of type IntlCalendar or DateTime. The timezone information in the object will be used.","type":"object"}},{"kind":128,"name":"$format","modifiers":0,"value":"NULL","doc":{"description":"How to format the date/time. This can either be an array with two elements (first the date style, then the time style, these being one of the constants IntlDateFormatter::NONE, IntlDateFormatter::SHORT, IntlDateFormatter::MEDIUM, IntlDateFormatter::LONG, IntlDateFormatter::FULL), a long with the value of one of these constants (in which case it will be used both for the time and the date) or a string with the format described in » the ICU documentation. If NULL, the default style will be used.","type":"mixed"}},{"kind":128,"name":"$locale","modifiers":0,"value":"NULL","doc":{"description":"The locale to use, or NULL to use the default one.","type":"string"}}],"doc":{"description":"This function allows formatting an IntlCalendar or DateTime object without first explicitly creating a IntlDateFormatter object.","type":"string"}},{"kind":32,"name":"setTimeZoneId","modifiers":1,"description":"","children":[{"kind":128,"name":"$zone","modifiers":0,"doc":{"description":"The time zone ID string of the time zone to use. If NULL or the empty string, the default time zone for the runtime is used.","type":"string"}}],"doc":{"type":"bool"}},{"kind":32,"name":"getLocale","modifiers":1,"children":[{"kind":128,"name":"$which","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Get locale used by the formatter.","type":"string"}},{"kind":32,"name":"setPattern","modifiers":1,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"New pattern string to use. Possible patterns are documented at » http://userguide.icu-project.org/formatparse/datetime.","type":"string"}}],"doc":{"description":"Set the pattern used for the IntlDateFormatter.","type":"bool"}},{"kind":32,"name":"getErrorCode","modifiers":1,"children":[],"doc":{"description":"Get the error code from last operation. Returns error code from the last number formatting operation.","type":"int"}},{"kind":32,"name":"setCalendar","modifiers":0,"children":[{"kind":128,"name":"$which","modifiers":0,"doc":{"description":"This can either be: the calendar type to use (default is IntlDateFormatter::GREGORIAN, which is also used if NULL is specified) or an IntlCalendar object. Any IntlCalendar object passed in will be cloned; no modifications will be made to the argument object. The timezone of the formatter will only be kept if an IntlCalendar object is not passed, otherwise the new timezone will be that of the passed object.","type":"mixed"}}],"doc":{"description":"Sets the calendar or calendar type used by the formatter.","type":"bool"}},{"kind":32,"name":"create","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"Locale to use when formatting or parsing or NULL to use the value specified in the ini setting intl.default_locale.","type":"string"}},{"kind":128,"name":"$datetype","modifiers":0,"doc":{"description":"Date type to use (none, short, medium, long, full). This is one of the IntlDateFormatter constants. It can also be NULL, in which case ICUʼs default date type will be used.","type":"int"}},{"kind":128,"name":"$timetype","modifiers":0,"doc":{"description":"Time type to use (none, short, medium, long, full). This is one of the IntlDateFormatter constants. It can also be NULL, in which case ICUʼs default time type will be used.","type":"int"}},{"kind":128,"name":"$timezone","modifiers":0,"value":"NULL","doc":{"description":"Time zone ID. The default (and the one used if NULL is given) is the one returned by date_default_timezone_get() or, if applicable, that of the IntlCalendar object passed for the calendar parameter. This ID must be a valid identifier on ICUʼs database or an ID representing an explicit offset, such as GMT-05:30. This can also be an IntlTimeZone or a DateTimeZone object.","type":"mixed"}},{"kind":128,"name":"$calendar","modifiers":0,"value":"NULL","doc":{"description":"Calendar to use for formatting or parsing. The default value is NULL, which corresponds to IntlDateFormatter::GREGORIAN. This can either be one of the IntlDateFormatter calendar constants or an IntlCalendar. Any IntlCalendar object passed will be clone; it will not be changed by the IntlDateFormatter. This will determine the calendar type used (gregorian, islamic, persian, etc.) and, if NULL is given for the timezone parameter, also the timezone used.","type":"mixed"}},{"kind":128,"name":"$pattern","modifiers":0,"value":"\"\"","doc":{"description":"Optional pattern to use when formatting or parsing. Possible patterns are documented at » http://userguide.icu-project.org/formatparse/datetime.","type":"string"}}],"doc":{"description":"Create a date formatter.","type":"IntlDateFormatter"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"Locale to use when formatting or parsing or NULL to use the value specified in the ini setting intl.default_locale.","type":"string"}},{"kind":128,"name":"$datetype","modifiers":0,"doc":{"description":"Date type to use (none, short, medium, long, full). This is one of the IntlDateFormatter constants. It can also be NULL, in which case ICUʼs default date type will be used.","type":"int"}},{"kind":128,"name":"$timetype","modifiers":0,"doc":{"description":"Time type to use (none, short, medium, long, full). This is one of the IntlDateFormatter constants. It can also be NULL, in which case ICUʼs default time type will be used.","type":"int"}},{"kind":128,"name":"$timezone","modifiers":0,"value":"NULL","doc":{"description":"Time zone ID. The default (and the one used if NULL is given) is the one returned by date_default_timezone_get() or, if applicable, that of the IntlCalendar object passed for the calendar parameter. This ID must be a valid identifier on ICUʼs database or an ID representing an explicit offset, such as GMT-05:30. This can also be an IntlTimeZone or a DateTimeZone object.","type":"mixed"}},{"kind":128,"name":"$calendar","modifiers":0,"value":"NULL","doc":{"description":"Calendar to use for formatting or parsing. The default value is NULL, which corresponds to IntlDateFormatter::GREGORIAN. This can either be one of the IntlDateFormatter calendar constants or an IntlCalendar. Any IntlCalendar object passed will be clone; it will not be changed by the IntlDateFormatter. This will determine the calendar type used (gregorian, islamic, persian, etc.) and, if NULL is given for the timezone parameter, also the timezone used.","type":"mixed"}},{"kind":128,"name":"$pattern","modifiers":0,"value":"\"\"","doc":{"description":"Optional pattern to use when formatting or parsing. Possible patterns are documented at » http://userguide.icu-project.org/formatparse/datetime.","type":"string"}}],"doc":{"description":"Create a date formatter.","type":"public"}},{"kind":32,"name":"format","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Value to format. This may be a DateTime object, an IntlCalendar object, a numeric type representing a (possibly fractional) number of seconds since epoch or an array in the format output by localtime(). If a DateTime or an IntlCalendar object is passed, its timezone is not considered. The object will be formatted using the formaterʼs configured timezone. If one wants to use the timezone of the object to be formatted, IntlDateFormatter::setTimeZone() must be called before with the objectʼs timezone. Alternatively, the static function IntlDateFormatter::formatObject() may be used instead.","type":"mixed"}}],"doc":{"description":"Formats the time value as a string.","type":"string"}}],"doc":{"description":"Date Formatter is a concrete class that enables locale-dependent formatting/parsing of dates using pattern strings and/or canned patterns."}},{"kind":1,"name":"Generator","modifiers":0,"associated":[{"kind":2,"name":"Iterator"}],"children":[{"kind":32,"name":"current","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"If iteration has already begun, this will throw an exception.","type":"void"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Gets the key of the yielded value.","type":"mixed"}},{"kind":32,"name":"__wakeup","modifiers":1,"children":[],"doc":{"description":"Throws an exception as generators can't be serialized.","type":"void"}},{"kind":32,"name":"getReturn","modifiers":1,"description":"","children":[],"doc":{"type":"mixed"}},{"kind":32,"name":"send","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Value to send into the generator. This value will be the return value of the yield expression the generator is currently at.","type":"mixed"}}],"doc":{"description":"Sends the given value to the generator as the result of the current yield expression and resumes execution of the generator.","type":"mixed"}},{"kind":32,"name":"next","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"valid","modifiers":1,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"throw","modifiers":1,"children":[{"kind":128,"name":"$exception","modifiers":0,"doc":{"description":"Exception to throw into the generator.","type":"Throwable"}}],"doc":{"description":"Throws an exception into the generator and resumes execution of the generator. The behavior will be the same as if the current yield expression was replaced with a throw $exception statement.","type":"mixed"}}],"doc":{"description":"Generator objects are returned from generators."}},{"kind":1,"name":"DOMException","modifiers":0,"associated":[{"kind":1,"name":"Exception"}],"children":[{"kind":16,"name":"$code","modifiers":1,"doc":{"description":"An integer indicating the type of error generated","type":"int"}}],"doc":{"description":"DOM operations raise exceptions under particular circumstances, i.e., when an operation is impossible to perform for logical reasons."}},{"kind":8,"name":"FORCE_GZIP","description":""},{"kind":8,"name":"FORCE_DEFLATE","description":""},{"kind":8,"name":"ZLIB_ENCODING_RAW","doc":{"description":"DEFLATE algorithm as per RFC 1951. Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_ENCODING_DEFLATE","doc":{"description":"ZLIB compression algorithm as per RFC 1950. Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_ENCODING_GZIP","doc":{"description":"GZIP algorithm as per RFC 1952. Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_FILTERED","doc":{"description":"Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_HUFFMAN_ONLY","doc":{"description":"Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_FIXED","doc":{"description":"Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_RLE","doc":{"description":"Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_DEFAULT_STRATEGY","doc":{"description":"Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_BLOCK","doc":{"description":"Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_NO_FLUSH","doc":{"description":"Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_PARTIAL_FLUSH","doc":{"description":"Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_SYNC_FLUSH","doc":{"description":"Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_FULL_FLUSH","doc":{"description":"Available as of PHP 7.0.0."}},{"kind":8,"name":"ZLIB_FINISH","doc":{"description":"Available as of PHP 7.0.0."}},{"kind":1,"name":"Normalizer","modifiers":0,"associated":[],"children":[{"kind":32,"name":"isNormalized","modifiers":32,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The input string to normalize","type":"string"}},{"kind":128,"name":"$form","modifiers":0,"value":"Normalizer::FORM_C","doc":{"description":"One of the normalization forms.","type":"int"}}],"doc":{"description":"Checks if the provided string is already in the specified normalization form.","type":"bool"}},{"kind":32,"name":"normalize","modifiers":32,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The input string to normalize","type":"string"}},{"kind":128,"name":"$form","modifiers":0,"value":"Normalizer::FORM_C","doc":{"description":"One of the normalization forms.","type":"int"}}],"doc":{"description":"Normalizes the input provided and returns the normalized string","type":"string"}}],"doc":{"description":"Normalization is a process that involves transforming characters and sequences of characters into a formally-defined underlying representation. This process is most important when text needs to be compared for sorting and searching, but it is also used when storing text to ensure that the text is stored in a consistent representation."}},{"kind":1,"name":"ArrayIterator","modifiers":0,"associated":[{"kind":2,"name":"ArrayAccess"},{"kind":2,"name":"SeekableIterator"},{"kind":2,"name":"Countable"},{"kind":2,"name":"Serializable"}],"children":[{"kind":32,"name":"unserialize","modifiers":1,"children":[{"kind":128,"name":"$serialized","modifiers":0,"doc":{"description":"The serialized ArrayIterator object to be unserialized.","type":"string"}}],"doc":{"description":"Unserialize.","type":"string"}},{"kind":32,"name":"offsetSet","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index to set for.","type":"string"}},{"kind":128,"name":"$newval","modifiers":0,"doc":{"description":"The new value to store at the index.","type":"string"}}],"doc":{"description":"Sets a value for a given offset.","type":"void"}},{"kind":32,"name":"count","modifiers":1,"children":[],"doc":{"description":"Gets the number of elements in the array, or the number of public properties in the object.","type":"int"}},{"kind":32,"name":"offsetExists","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The offset being checked.","type":"string"}}],"doc":{"description":"Checks if the offset exists.","type":"void"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Get the current array entry.","type":"mixed"}},{"kind":32,"name":"natsort","modifiers":1,"children":[],"doc":{"description":"Sort the entries by values using \"natural order\" algorithm.","type":"void"}},{"kind":32,"name":"getFlags","modifiers":1,"children":[],"doc":{"description":"Get the current flags.","type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"value":"array()","doc":{"description":"The array or object to be iterated on.","type":"mixed"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"Flags to control the behaviour of the ArrayIterator object. See ArrayIterator::setFlags().","type":"int"}}],"doc":{"description":"Constructs an ArrayIterator object.","type":"public"}},{"kind":32,"name":"offsetUnset","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The offset to unset.","type":"string"}}],"doc":{"description":"Unsets a value for an offset.","type":"void"}},{"kind":32,"name":"getArrayCopy","modifiers":1,"children":[],"doc":{"description":"Get a copy of an array.","type":"array"}},{"kind":32,"name":"ksort","modifiers":1,"children":[],"doc":{"description":"Sorts an array by the keys.","type":"void"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"The iterator to the next entry.","type":"void"}},{"kind":32,"name":"natcasesort","modifiers":1,"children":[],"doc":{"description":"Sort the entries by values using a case insensitive \"natural order\" algorithm.","type":"void"}},{"kind":32,"name":"uksort","modifiers":1,"children":[{"kind":128,"name":"$cmp_function","modifiers":0,"doc":{"description":"The compare function used for the sort.","type":"string"}}],"doc":{"description":"Sort the entries by key using user defined function.","type":"void"}},{"kind":32,"name":"setFlags","modifiers":1,"children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"A bitmask as follows: 0 = Properties of the object have their normal functionality when accessed as list (var_dump, foreach, etc.). 1 = Array indices can be accessed as properties in read/write.","type":"string"}}],"doc":{"description":"Sets behaviour flags.","type":"void"}},{"kind":32,"name":"asort","modifiers":1,"children":[],"doc":{"description":"Sorts an array by values.","type":"void"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"This rewinds the iterator to the beginning.","type":"void"}},{"kind":32,"name":"serialize","modifiers":1,"children":[],"doc":{"description":"Serialize.","type":"string"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"This function returns the current array key","type":"mixed"}},{"kind":32,"name":"uasort","modifiers":1,"children":[{"kind":128,"name":"$cmp_function","modifiers":0,"doc":{"description":"The compare function used for the sort.","type":"string"}}],"doc":{"description":"Sort the entries by values using user defined function.","type":"void"}},{"kind":32,"name":"append","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to append.","type":"mixed"}}],"doc":{"description":"Appends value as the last element.","type":"void"}},{"kind":32,"name":"seek","modifiers":1,"description":"","children":[{"kind":128,"name":"$position","modifiers":0,"doc":{"description":"The position to seek to.","type":"int"}}],"doc":{"type":"void"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Checks if the array contains any more entries.","type":"bool"}},{"kind":32,"name":"offsetGet","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The offset to get the value from.","type":"string"}}],"doc":{"description":"Gets the value from the provided offset.","type":"mixed"}}],"doc":{"description":"This iterator allows to unset and modify values and keys while iterating over Arrays and Objects."}},{"kind":8,"name":"LDAP_DEREF_NEVER","description":""},{"kind":8,"name":"LDAP_DEREF_SEARCHING","description":""},{"kind":8,"name":"LDAP_DEREF_FINDING","description":""},{"kind":8,"name":"LDAP_DEREF_ALWAYS","description":""},{"kind":8,"name":"LDAP_OPT_DEREF","doc":{"description":"Specifies alternative rules for following aliases at the server."}},{"kind":8,"name":"LDAP_OPT_SIZELIMIT","doc":{"description":"Specifies the maximum number of entries that can be returned on a search operation. Note: The actual size limit for operations is also bounded by the server's configured maximum number of return entries. The lesser of these two settings is the actual size limit."}},{"kind":8,"name":"LDAP_OPT_TIMELIMIT","doc":{"description":"Specifies the number of seconds to wait for search results. Note: The actual time limit for operations is also bounded by the server's configured maximum time. The lesser of these two settings is the actual time limit."}},{"kind":8,"name":"LDAP_OPT_NETWORK_TIMEOUT","doc":{"description":"Option for ldap_set_option() to allow setting network timeout. (Available as of PHP 5.3.0)"}},{"kind":8,"name":"LDAP_OPT_PROTOCOL_VERSION","doc":{"description":"Specifies the LDAP protocol to be used (V2 or V3)."}},{"kind":8,"name":"LDAP_OPT_ERROR_NUMBER","description":""},{"kind":8,"name":"LDAP_OPT_REFERRALS","doc":{"description":"Specifies whether to automatically follow referrals returned by the LDAP server."}},{"kind":8,"name":"LDAP_OPT_RESTART","description":""},{"kind":8,"name":"LDAP_OPT_HOST_NAME","description":""},{"kind":8,"name":"LDAP_OPT_ERROR_STRING","description":""},{"kind":8,"name":"LDAP_OPT_DIAGNOSTIC_MESSAGE","description":""},{"kind":8,"name":"LDAP_OPT_MATCHED_DN","description":""},{"kind":8,"name":"LDAP_OPT_SERVER_CONTROLS","doc":{"description":"Specifies a default list of server controls to be sent with each request."}},{"kind":8,"name":"LDAP_OPT_CLIENT_CONTROLS","doc":{"description":"Specifies a default list of client controls to be processed with each request."}},{"kind":8,"name":"LDAP_OPT_DEBUG_LEVEL","doc":{"description":"Specifies a bitwise level for debug traces."}},{"kind":8,"name":"LDAP_OPT_X_KEEPALIVE_IDLE","doc":{"description":"Specifies the number of seconds a connection needs to remain idle before TCP starts sending keepalive probes."}},{"kind":8,"name":"LDAP_OPT_X_KEEPALIVE_PROBES","doc":{"description":"Specifies the maximum number of keepalive probes TCP should send before dropping the connection."}},{"kind":8,"name":"LDAP_OPT_X_KEEPALIVE_INTERVAL","doc":{"description":"Specifies the interval in seconds between individual keepalive probes."}},{"kind":8,"name":"LDAP_OPT_X_TLS_CACERTDIR","doc":{"description":"Specifies the path of the directory containing CA certificates."}},{"kind":8,"name":"LDAP_OPT_X_TLS_CACERTFILE","doc":{"description":"Specifies the full-path of the CA certificate file."}},{"kind":8,"name":"LDAP_OPT_X_TLS_CERTFILE","doc":{"description":"Specifies the full-path of the certificate file."}},{"kind":8,"name":"LDAP_OPT_X_TLS_CIPHER_SUITE","doc":{"description":"Specifies the allowed cipher suite."}},{"kind":8,"name":"LDAP_OPT_X_TLS_CRLCHECK","doc":{"description":"Specifies the CRL evaluation strategy. This must be one of: LDAP_OPT_X_TLS_CRL_NONE,LDAP_OPT_X_TLS_CRL_PEER, LDAP_OPT_X_TLS_CRL_ALL. Note: This option is only valid for OpenSSL."}},{"kind":8,"name":"LDAP_OPT_X_TLS_CRLFILE","doc":{"description":"Specifies the full-path of the CRL file. Note: This option is only valid for GnuTLS."}},{"kind":8,"name":"LDAP_OPT_X_TLS_DHFILE","doc":{"description":"Specifies the full-path of the file containing the parameters for Diffie-Hellman ephemeral key exchange. Note: This option is ignored by GnuTLS and Mozilla NSS."}},{"kind":8,"name":"LDAP_OPT_X_TLS_KEYFILE","doc":{"description":"Specifies the full-path of the certificate key file."}},{"kind":8,"name":"LDAP_OPT_X_TLS_PROTOCOL_MIN","doc":{"description":"Specifies the minimum protocol version. This can be one of: LDAP_OPT_X_TLS_PROTOCOL_SSL2,LDAP_OPT_X_TLS_PROTOCOL_SSL3, LDAP_OPT_X_TLS_PROTOCOL_TLS1_0, LDAP_OPT_X_TLS_PROTOCOL_TLS1_1, LDAP_OPT_X_TLS_PROTOCOL_TLS1_2"}},{"kind":8,"name":"LDAP_OPT_X_TLS_RANDOM_FILE","description":""},{"kind":8,"name":"LDAP_OPT_X_TLS_REQUIRE_CERT","doc":{"description":"Specifies the certificate checking checking strategy. This must be one of: LDAP_OPT_X_TLS_NEVER,LDAP_OPT_X_TLS_HARD, LDAP_OPT_X_TLS_DEMAND, LDAP_OPT_X_TLS_ALLOW, LDAP_OPT_X_TLS_TRY. (Available as of PHP 7.0.0)"}},{"kind":8,"name":"GSLC_SSL_NO_AUTH","description":""},{"kind":8,"name":"GSLC_SSL_ONEWAY_AUTH","description":""},{"kind":8,"name":"GSLC_SSL_TWOWAY_AUTH","description":""},{"kind":1,"name":"UConverter","modifiers":0,"associated":[],"description":"","children":[{"kind":1024,"name":"REASON_UNASSIGNED","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"REASON_ILLEGAL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"REASON_IRREGULAR","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"REASON_RESET","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"REASON_CLOSE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"REASON_CLONE","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UNSUPPORTED_CONVERTER","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SBCS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"DBCS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"MBCS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LATIN_1","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UTF8","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UTF16_BigEndian","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UTF16_LittleEndian","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UTF32_BigEndian","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UTF32_LittleEndian","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"EBCDIC_STATEFUL","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ISO_2022","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_1","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_2","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_3","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_4","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_5","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_6","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_8","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_11","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_16","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_17","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_18","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_19","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"LMBCS_LAST","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"HZ","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"SCSU","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ISCII","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"US_ASCII","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UTF7","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BOCU1","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UTF16","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"UTF32","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"CESU8","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"IMAP_MAILBOX","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"getSourceType","modifiers":1,"description":"","children":[],"doc":{"type":"integer"}},{"kind":32,"name":"getErrorCode","modifiers":1,"description":"","children":[],"doc":{"type":"integer"}},{"kind":32,"name":"getAliases","modifiers":32,"description":"","children":[{"kind":128,"name":"$name","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"array"}},{"kind":32,"name":"reasonText","modifiers":32,"description":"","children":[{"kind":128,"name":"$reason","modifiers":0,"description":"","doc":{"type":"integer"}}],"doc":{"type":"string"}},{"kind":32,"name":"transcode","modifiers":32,"description":"","children":[{"kind":128,"name":"$str","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$toEncoding","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$fromEncoding","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$options","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"type":"string"}},{"kind":32,"name":"__construct","modifiers":0,"description":"","children":[{"kind":128,"name":"$destination_encoding","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$source_encoding","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"public"}},{"kind":32,"name":"getStandards","modifiers":32,"description":"","children":[],"doc":{"type":"array"}},{"kind":32,"name":"getDestinationType","modifiers":1,"description":"","children":[],"doc":{"type":"integer"}},{"kind":32,"name":"setDestinationEncoding","modifiers":1,"description":"","children":[{"kind":128,"name":"$encoding","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"getSourceEncoding","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"toUCallback","modifiers":1,"description":"","children":[{"kind":128,"name":"$reason","modifiers":0,"description":"","doc":{"type":"integer"}},{"kind":128,"name":"$source","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$codeUnits","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$error","modifiers":1024,"description":"","doc":{"type":"integer"}}],"doc":{"type":"mixed"}},{"kind":32,"name":"fromUCallback","modifiers":1,"description":"","children":[{"kind":128,"name":"$reason","modifiers":0,"description":"","doc":{"type":"integer"}},{"kind":128,"name":"$source","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$codePoint","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$error","modifiers":1024,"description":"","doc":{"type":"integer"}}],"doc":{"type":"mixed"}},{"kind":32,"name":"getDestinationEncoding","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"setSourceEncoding","modifiers":1,"description":"","children":[{"kind":128,"name":"$encoding","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"getAvailable","modifiers":32,"description":"","children":[],"doc":{"type":"array"}},{"kind":32,"name":"convert","modifiers":1,"description":"","children":[{"kind":128,"name":"$str","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$reverse","modifiers":0,"description":"","doc":{"type":"bool"}}],"doc":{"type":"string"}},{"kind":32,"name":"getErrorMessage","modifiers":1,"description":"","children":[],"doc":{"type":"string"}},{"kind":32,"name":"setSubstChars","modifiers":1,"description":"","children":[{"kind":128,"name":"$chars","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"void"}},{"kind":32,"name":"getSubstChars","modifiers":1,"description":"","children":[],"doc":{"type":"string"}}]},{"kind":1,"name":"PharData","modifiers":0,"associated":[{"kind":1,"name":"Phar"}],"children":[{"kind":32,"name":"setDefaultStub","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Relative path within the phar archive to run if accessed on the command-line","type":"string"}},{"kind":128,"name":"$webindex","modifiers":0,"doc":{"description":"Relative path within the phar archive to run if accessed through a web browser","type":"string"}}],"doc":{"description":"Non-executable tar/zip archives cannot have a stub, so this method simply throws an exception.","type":"bool"}},{"kind":32,"name":"buildFromIterator","modifiers":0,"children":[{"kind":128,"name":"$iter","modifiers":0,"doc":{"description":"Any iterator that either associatively maps tar/zip file to location or returns SplFileInfo objects","type":"Iterator"}},{"kind":128,"name":"$base_directory","modifiers":0,"doc":{"description":"For iterators that return SplFileInfo objects, the portion of each file's full path to remove when adding to the tar/zip archive","type":"string"}}],"doc":{"description":"Populate a tar or zip archive from an iterator. Two styles of iterators are supported, iterators that map the filename within the tar/zip to the name of a file on disk, and iterators like DirectoryIterator that return SplFileInfo objects. For iterators that return SplFileInfo objects, the second parameter is required.","type":"array"}},{"kind":32,"name":"addFromString","modifiers":0,"children":[{"kind":128,"name":"$localname","modifiers":0,"doc":{"description":"Path that the file will be stored in the archive.","type":"string"}},{"kind":128,"name":"$contents","modifiers":0,"doc":{"description":"The file contents to store","type":"string"}}],"doc":{"description":"With this method, any string can be added to the tar/zip archive. The file will be stored in the archive with localname as its path. This method is similar to ZipArchive::addFromString().","type":"bool"}},{"kind":32,"name":"delMetadata","modifiers":0,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"compressFiles","modifiers":0,"children":[{"kind":128,"name":"$compression","modifiers":0,"doc":{"description":"Compression must be one of Phar::GZ, Phar::BZ2 to add compression, or Phar::NONE to remove compression.","type":"int"}}],"doc":{"description":"For tar-based archives, this method throws a BadMethodCallException, as compression of individual files within a tar archive is not supported by the file format. Use PharData::compress() to compress an entire tar-based archive.","type":"bool"}},{"kind":32,"name":"decompress","modifiers":0,"children":[{"kind":128,"name":"$extension","modifiers":0,"doc":{"description":"For decompressing, the default file extension is .tar. Use this parameter to specify another file extension. Be aware that only executable archives can contain .phar in their filename.","type":"string"}}],"doc":{"description":"For tar-based archives, this method decompresses the entire archive.","type":"object"}},{"kind":32,"name":"isWritable","modifiers":0,"children":[],"doc":{"description":"This method returns TRUE if the tar/zip archive on disk is not read-only. Unlike Phar::isWritable(), data-only tar/zip archives can be modified even if phar.readonly is set to 1.","type":"bool"}},{"kind":32,"name":"convertToData","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"This should be one of Phar::TAR or Phar::ZIP. If set to NULL, the existing file format will be preserved.","type":"int"}},{"kind":128,"name":"$compression","modifiers":0,"doc":{"description":"This should be one of Phar::NONE for no whole-archive compression, Phar::GZ for zlib-based compression, and Phar::BZ2 for bzip-based compression.","type":"int"}},{"kind":128,"name":"$extension","modifiers":0,"doc":{"description":"This parameter is used to override the default file extension for a converted archive. Note that .phar cannot be used anywhere in the filename for a non-executable tar or zip archive. If converting to a tar-based phar archive, the default extensions are .tar, .tar.gz, and .tar.bz2 depending on specified compression. For zip-based archives, the default extension is .zip.","type":"string"}}],"doc":{"description":"This method is used to convert a non-executable tar or zip archive to another non-executable format.","type":"PharData"}},{"kind":32,"name":"addEmptyDir","modifiers":0,"children":[{"kind":128,"name":"$dirname","modifiers":0,"doc":{"description":"The name of the empty directory to create in the phar archive","type":"string"}}],"doc":{"description":"With this method, an empty directory is created with path dirname. This method is similar to ZipArchive::addEmptyDir().","type":"bool"}},{"kind":32,"name":"decompressFiles","modifiers":0,"description":"","children":[],"doc":{"type":"bool"}},{"kind":32,"name":"delete","modifiers":0,"children":[{"kind":128,"name":"$entry","modifiers":0,"doc":{"description":"Path within an archive to the file to delete.","type":"string"}}],"doc":{"description":"Delete a file within an archive. This is the functional equivalent of calling unlink() on the stream wrapper equivalent, as shown in the example below.","type":"bool"}},{"kind":32,"name":"extractTo","modifiers":0,"children":[{"kind":128,"name":"$pathto","modifiers":0,"doc":{"description":"Path to extract the given files to","type":"string"}},{"kind":128,"name":"$files","modifiers":0,"doc":{"description":"The name of a file or directory to extract, or an array of files/directories to extract","type":"string|array"}},{"kind":128,"name":"$overwrite","modifiers":0,"value":"false","doc":{"description":"Set to TRUE to enable overwriting existing files","type":"bool"}}],"doc":{"description":"Extract all files within a tar/zip archive to disk. Extracted files and directories preserve permissions as stored in the archive. The optional parameters allow optional control over which files are extracted, and whether existing files on disk can be overwritten. The second parameter files can be either the name of a file or directory to extract, or an array of names of files and directories to extract. By default, this method will not overwrite existing files, the third parameter can be set to true to enable overwriting of files. This method is similar to ZipArchive::extractTo().","type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"description":"","children":[{"kind":128,"name":"$fname","modifiers":0,"doc":{"description":"Path to an existing tar/zip archive or to-be-created archive","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"Flags to pass to Phar parent class RecursiveDirectoryIterator.","type":"int"}},{"kind":128,"name":"$alias","modifiers":0,"doc":{"description":"Alias with which this Phar archive should be referred to in calls to stream functionality.","type":"string"}},{"kind":128,"name":"$format","modifiers":0,"value":"Phar::TAR","doc":{"description":"One of the file format constants available within the Phar class.","type":"int"}}],"doc":{"type":"PharData"}},{"kind":32,"name":"setStub","modifiers":0,"children":[{"kind":128,"name":"$stub","modifiers":0,"doc":{"description":"A string or an open stream handle to use as the executable stub for this phar archive. This parameter is ignored.","type":"string"}},{"kind":128,"name":"$len","modifiers":0,"description":"","value":"-1","doc":{"type":"int"}}],"doc":{"description":"Non-executable tar/zip archives cannot have a stub, so this method simply throws an exception.","type":"bool"}},{"kind":32,"name":"convertToExecutable","modifiers":0,"description":"","children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"This should be one of Phar::PHAR, Phar::TAR, or Phar::ZIP. If set to NULL, the existing file format will be preserved.","type":"int"}},{"kind":128,"name":"$compression","modifiers":0,"doc":{"description":"This should be one of Phar::NONE for no whole-archive compression, Phar::GZ for zlib-based compression, and Phar::BZ2 for bzip-based compression.","type":"int"}},{"kind":128,"name":"$extension","modifiers":0,"doc":{"description":"This parameter is used to override the default file extension for a converted archive. Note that all zip- and tar-based phar archives must contain .phar in their file extension in order to be processed as a phar archive. If converting to a phar-based archive, the default extensions are .phar, .phar.gz, or .phar.bz2 depending on the specified compression. For tar-based phar archives, the default extensions are .phar.tar, .phar.tar.gz, and .phar.tar.bz2. For zip-based phar archives, the default extension is .phar.zip.","type":"string"}}],"doc":{"type":"Phar"}},{"kind":32,"name":"offsetUnset","modifiers":0,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The filename (relative path) to modify in the tar/zip archive.","type":"string"}}],"doc":{"description":"This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a tar/zip archive using array access brackets. offsetUnset is used for deleting an existing file, and is called by the unset() language construct.","type":"bool"}},{"kind":32,"name":"setAlias","modifiers":0,"children":[{"kind":128,"name":"$alias","modifiers":0,"doc":{"description":"A shorthand string that this archive can be referred to in phar stream wrapper access. This parameter is ignored.","type":"string"}}],"doc":{"description":"Non-executable tar/zip archives cannot have an alias, so this method simply throws an exception.","type":"bool"}},{"kind":32,"name":"compress","modifiers":0,"children":[{"kind":128,"name":"$compression","modifiers":0,"doc":{"description":"Compression must be one of Phar::GZ, Phar::BZ2 to add compression, or Phar::NONE to remove compression.","type":"int"}},{"kind":128,"name":"$extension","modifiers":0,"doc":{"description":"By default, the extension is .tar.gz or .tar.bz2 for compressing a tar, and .tar for decompressing.","type":"string"}}],"doc":{"description":"For tar archives, this method compresses the entire archive using gzip compression or bzip2 compression. The resulting file can be processed with the gunzip command/bunzip command, or accessed directly and transparently with the Phar extension.","type":"object"}},{"kind":32,"name":"offsetSet","modifiers":0,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The filename (relative path) to modify in a tar or zip archive.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Content of the file.","type":"string"}}],"doc":{"description":"This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a tar/zip archive using array access brackets. offsetSet is used for modifying an existing file, or adding a new file to a tar/zip archive.","type":"void"}},{"kind":32,"name":"copy","modifiers":0,"children":[{"kind":128,"name":"$oldfile","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$newfile","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Copy a file internal to the tar/zip archive to another new file within the same archive. This is an object-oriented alternative to using copy() with the phar stream wrapper.","type":"bool"}}],"doc":{"description":"The PharData class provides a high-level interface to accessing and creating non-executable tar and zip archives. Because these archives do not contain a stub and cannot be executed by the phar extension, it is possible to create and manipulate regular zip and tar files using the PharData class even if phar.readonly php.ini setting is 1."}},{"kind":1,"name":"mysqli_stmt","modifiers":0,"associated":[],"children":[{"kind":32,"name":"free_result","modifiers":0,"children":[],"doc":{"description":"Frees the result memory associated with the statement, which was allocated by mysqli_stmt_store_result().","type":"void"}},{"kind":32,"name":"fetch","modifiers":0,"children":[],"doc":{"description":"Fetch the result from a prepared statement into the variables bound by mysqli_stmt_bind_result().","type":"bool"}},{"kind":32,"name":"get_result","modifiers":0,"children":[],"doc":{"description":"Call to return a result set from a prepared statement query.","type":"mysqli_result"}},{"kind":32,"name":"send_long_data","modifiers":0,"children":[{"kind":128,"name":"$param_nr","modifiers":0,"doc":{"description":"Indicates which parameter to associate the data with. Parameters are numbered beginning with 0.","type":"int"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"A string containing data to be sent.","type":"string"}}],"doc":{"description":"Allows to send parameter data to the server in pieces (or chunks), e.g. if the size of a blob exceeds the size of max_allowed_packet. This function can be called multiple times to send the parts of a character or binary data value for a column, which must be one of the TEXT or BLOB datatypes.","type":"bool"}},{"kind":32,"name":"next_result","modifiers":1,"children":[],"doc":{"description":"Reads the next result from a multiple query.","type":"bool"}},{"kind":32,"name":"close","modifiers":0,"children":[],"doc":{"description":"Closes a prepared statement. mysqli_stmt_close() also deallocates the statement handle. If the current statement has pending or unread results, this function cancels them so that the next query can be executed.","type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query, as a string. If this parameter is omitted, then the constructor behaves identically to mysqli_stmt_init(), if provided, then it behaves as per mysqli_prepare().","type":"string"}}],"doc":{"description":"This method constructs a new mysqli_stmt object.","type":"mysqli_stmt"}},{"kind":32,"name":"bind_param","modifiers":0,"children":[{"kind":128,"name":"$types","modifiers":0,"doc":{"description":"A string that contains one or more characters which specify the types for the corresponding bind variables: Type specification chars Character Description i corresponding variable has type integer d corresponding variable has type double s corresponding variable has type string b corresponding variable is a blob and will be sent in packets","type":"string"}},{"kind":128,"name":"$var1","modifiers":1024,"doc":{"description":"The number of variables and length of string types must match the parameters in the statement.","type":"mixed"}},{"kind":128,"name":"$...","modifiers":1024,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Bind variables for the parameter markers in the SQL statement that was passed to mysqli_prepare().","type":"bool"}},{"kind":32,"name":"store_result","modifiers":0,"children":[],"doc":{"description":"You must call mysqli_stmt_store_result() for every query that successfully produces a result set (SELECT, SHOW, DESCRIBE, EXPLAIN), if and only if you want to buffer the complete result set by the client, so that the subsequent mysqli_stmt_fetch() call returns buffered data.","type":"bool"}},{"kind":32,"name":"attr_set","modifiers":0,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"The attribute that you want to set. It can have one of the following values: Attribute values Character Description MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH Setting to TRUE causes mysqli_stmt_store_result() to update the metadata MYSQL_FIELD->max_length value. MYSQLI_STMT_ATTR_CURSOR_TYPE Type of cursor to open for statement when mysqli_stmt_execute() is invoked. mode can be MYSQLI_CURSOR_TYPE_NO_CURSOR (the default) or MYSQLI_CURSOR_TYPE_READ_ONLY. MYSQLI_STMT_ATTR_PREFETCH_ROWS Number of rows to fetch from server at a time when using a cursor. mode can be in the range from 1 to the maximum value of unsigned long. The default is 1. If you use the MYSQLI_STMT_ATTR_CURSOR_TYPE option with MYSQLI_CURSOR_TYPE_READ_ONLY, a cursor is opened for the statement when you invoke mysqli_stmt_execute(). If there is already an open cursor from a previous mysqli_stmt_execute() call, it closes the cursor before opening a new one. mysqli_stmt_reset() also closes any open cursor before preparing the statement for re-execution. mysqli_stmt_free_result() closes any open cursor. If you open a cursor for a prepared statement, mysqli_stmt_store_result() is unnecessary.","type":"int"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The value to assign to the attribute.","type":"int"}}],"doc":{"description":"Used to modify the behavior of a prepared statement. This function may be called multiple times to set several attributes.","type":"bool"}},{"kind":32,"name":"bind_result","modifiers":0,"children":[{"kind":128,"name":"$var1","modifiers":1024,"doc":{"description":"The variable to be bound.","type":"mixed"}},{"kind":128,"name":"$...","modifiers":1024,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Binds columns in the result set to variables.","type":"bool"}},{"kind":32,"name":"get_warnings","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"description":"","doc":{"type":"mysqli_stmt"}}],"doc":{"description":"Procedural style","type":"object"}},{"kind":32,"name":"result_metadata","modifiers":0,"children":[],"doc":{"description":"If a statement passed to mysqli_prepare() is one that produces a result set, mysqli_stmt_result_metadata() returns the result object that can be used to process the meta information such as total number of fields and individual field information.","type":"mysqli_result"}},{"kind":32,"name":"data_seek","modifiers":0,"children":[{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"Must be between zero and the total number of rows minus one (0.. mysqli_stmt_num_rows() - 1).","type":"int"}}],"doc":{"description":"Seeks to an arbitrary result pointer in the statement result set.","type":"void"}},{"kind":32,"name":"reset","modifiers":0,"children":[],"doc":{"description":"Resets a prepared statement on client and server to state after prepare.","type":"bool"}},{"kind":32,"name":"prepare","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query, as a string. It must consist of a single SQL statement. You can include one or more parameter markers in the SQL statement by embedding question mark (?) characters at the appropriate positions. Note: You should not add a terminating semicolon or \\g to the statement. Note: The markers are legal only in certain places in SQL statements. For example, they are allowed in the VALUES() list of an INSERT statement (to specify column values for a row), or in a comparison with a column in a WHERE clause to specify a comparison value. However, they are not allowed for identifiers (such as table or column names), in the select list that names the columns to be returned by a SELECT statement), or to specify both operands of a binary operator such as the = equal sign. The latter restriction is necessary because it would be impossible to determine the parameter type. In general, parameters are legal only in Data Manipulation Language (DML) statements, and not in Data Definition Language (DDL) statements.","type":"string"}}],"doc":{"description":"Prepares the SQL query pointed to by the null-terminated string query.","type":"mixed"}},{"kind":32,"name":"attr_get","modifiers":0,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"The attribute that you want to get.","type":"int"}}],"doc":{"description":"Gets the current value of a statement attribute.","type":"int"}},{"kind":32,"name":"more_results","modifiers":1,"children":[],"doc":{"description":"Checks if there are more query results from a multiple query.","type":"bool"}},{"kind":32,"name":"execute","modifiers":0,"children":[],"doc":{"description":"Executes a query that has been previously prepared using the mysqli_prepare() function. When executed any parameter markers which exist will automatically be replaced with the appropriate data.","type":"bool"}}],"doc":{"description":"Represents a prepared statement."}},{"kind":1,"name":"SoapHeader","modifiers":0,"associated":[],"children":[{"kind":32,"name":"SoapHeader","modifiers":0,"children":[{"kind":128,"name":"$namespace","modifiers":0,"doc":{"description":"The namespace of the SOAP header element.","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the SoapHeader object.","type":"string"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"A SOAP header's content. It can be a PHP value or a SoapVar object.","type":"mixed"}},{"kind":128,"name":"$mustunderstand","modifiers":0,"description":"","value":"false","doc":{"type":"bool"}},{"kind":128,"name":"$actor","modifiers":0,"doc":{"description":"Value of the actor attribute of the SOAP header element.","type":"string"}}],"doc":{"description":"Constructs a new SoapHeader object.","type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$namespace","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$mustunderstand","modifiers":0,"description":"","doc":{"type":"bool"}},{"kind":128,"name":"$actor","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"This function is an alias of: SoapHeader::SoapHeader()","type":"SoapHeader"}}],"doc":{"description":"Represents a SOAP header."}},{"kind":1,"name":"RecursiveTreeIterator","modifiers":0,"associated":[{"kind":1,"name":"RecursiveIteratorIterator"},{"kind":2,"name":"OuterIterator"}],"children":[{"kind":1024,"name":"BYPASS_CURRENT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"BYPASS_KEY","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PREFIX_LEFT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PREFIX_MID_HAS_NEXT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PREFIX_MID_LAST","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PREFIX_END_HAS_NEXT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PREFIX_END_LAST","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"PREFIX_RIGHT","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"callGetChildren","modifiers":1,"children":[],"doc":{"description":"Gets children of the current element.","type":"RecursiveIterator"}},{"kind":32,"name":"endIteration","modifiers":1,"children":[],"doc":{"description":"Called when the iteration ends (when RecursiveTreeIterator::valid() first returns FALSE)","type":"void"}},{"kind":32,"name":"getEntry","modifiers":1,"children":[],"doc":{"description":"Gets the part of the tree built for the current element.","type":"string"}},{"kind":32,"name":"beginChildren","modifiers":1,"children":[],"doc":{"description":"Called when recursing one level down.","type":"void"}},{"kind":32,"name":"callHasChildren","modifiers":1,"children":[],"doc":{"description":"Called for each element to test whether it has children.","type":"bool"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Gets the current key prefixed and postfixed.","type":"string"}},{"kind":32,"name":"nextElement","modifiers":1,"children":[],"doc":{"description":"Called when the next element is available.","type":"void"}},{"kind":32,"name":"setPrefixPart","modifiers":1,"children":[{"kind":128,"name":"$part","modifiers":0,"doc":{"description":"One of the RecursiveTreeIterator::PREFIX_* constants.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to assign to the part of the prefix specified in part.","type":"string"}}],"doc":{"description":"Sets a part of the prefix used in the graphic tree.","type":"void"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Check whether the current position is valid.","type":"bool"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$it","modifiers":0,"doc":{"description":"The RecursiveIterator or IteratorAggregate to iterate over.","type":"RecursiveIterator|IteratorAggregate"}},{"kind":128,"name":"$flags","modifiers":0,"value":"RecursiveTreeIterator::BYPASS_KEY","doc":{"description":"Flags may be provided which will affect the behavior of some methods. A list of the flags can found under RecursiveTreeIterator predefined constants.","type":"int"}},{"kind":128,"name":"$cit_flags","modifiers":0,"description":"","value":"CachingIterator::CATCH_GET_CHILD","doc":{"type":"int"}},{"kind":128,"name":"$mode","modifiers":0,"value":"RecursiveIteratorIterator::SELF_FIRST","doc":{"description":"Flags to affect the behavior of the RecursiveIteratorIterator used internally.","type":"int"}}],"doc":{"description":"Constructs a new RecursiveTreeIterator from the supplied recursive iterator.","type":"public"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewinds the iterator to the first element of the top level inner iterator.","type":"void"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Gets the current element prefixed and postfixed.","type":"string"}},{"kind":32,"name":"getPrefix","modifiers":1,"children":[],"doc":{"description":"Gets the string to place in front of current element","type":"string"}},{"kind":32,"name":"endChildren","modifiers":1,"children":[],"doc":{"description":"Called when end recursing one level.","type":"void"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Moves forward to the next element.","type":"void"}},{"kind":32,"name":"getPostfix","modifiers":1,"children":[],"doc":{"description":"Gets the string to place after the current element.","type":"void"}},{"kind":32,"name":"beginIteration","modifiers":1,"children":[],"doc":{"description":"Called when iteration begins (after the first RecursiveTreeIterator::rewind() call).","type":"RecursiveIterator"}}],"doc":{"description":"Allows iterating over a RecursiveIterator to generate an ASCII graphic tree."}},{"kind":8,"name":"MYSQLI_READ_DEFAULT_GROUP","doc":{"description":"Read options from the named group from my.cnf or the file specified with MYSQLI_READ_DEFAULT_FILE"}},{"kind":8,"name":"MYSQLI_READ_DEFAULT_FILE","doc":{"description":"Read options from the named option file instead of from my.cnf"}},{"kind":8,"name":"MYSQLI_OPT_CONNECT_TIMEOUT","doc":{"description":"Connect timeout in seconds"}},{"kind":8,"name":"MYSQLI_OPT_LOCAL_INFILE","doc":{"description":"Enables command LOAD LOCAL INFILE"}},{"kind":8,"name":"MYSQLI_INIT_COMMAND","doc":{"description":"Command to execute when connecting to MySQL server. Will automatically be re-executed when reconnecting."}},{"kind":8,"name":"MYSQLI_CLIENT_SSL","doc":{"description":"Use SSL (encrypted protocol). This option should not be set by application programs; it is set internally in the MySQL client library"}},{"kind":8,"name":"MYSQLI_CLIENT_COMPRESS","doc":{"description":"Use compression protocol"}},{"kind":8,"name":"MYSQLI_CLIENT_INTERACTIVE","doc":{"description":"Allow interactive_timeout seconds (instead of wait_timeout seconds) of inactivity before closing the connection. The client's session wait_timeout variable will be set to the value of the session interactive_timeout variable."}},{"kind":8,"name":"MYSQLI_CLIENT_IGNORE_SPACE","doc":{"description":"Allow spaces after function names. Makes all functions names reserved words."}},{"kind":8,"name":"MYSQLI_CLIENT_NO_SCHEMA","doc":{"description":"Don't allow the db_name.tbl_name.col_name syntax."}},{"kind":8,"name":"MYSQLI_CLIENT_MULTI_QUERIES","doc":{"description":"Allows multiple semicolon-delimited queries in a single mysqli_query() call."}},{"kind":8,"name":"MYSQLI_STORE_RESULT","doc":{"description":"For using buffered resultsets"}},{"kind":8,"name":"MYSQLI_USE_RESULT","doc":{"description":"For using unbuffered resultsets"}},{"kind":8,"name":"MYSQLI_ASSOC","doc":{"description":"Columns are returned into the array having the fieldname as the array index."}},{"kind":8,"name":"MYSQLI_NUM","doc":{"description":"Columns are returned into the array having an enumerated index."}},{"kind":8,"name":"MYSQLI_BOTH","doc":{"description":"Columns are returned into the array having both a numerical index and the fieldname as the associative index."}},{"kind":8,"name":"MYSQLI_NOT_NULL_FLAG","doc":{"description":"Indicates that a field is defined as NOT NULL"}},{"kind":8,"name":"MYSQLI_PRI_KEY_FLAG","doc":{"description":"Field is part of a primary index"}},{"kind":8,"name":"MYSQLI_UNIQUE_KEY_FLAG","doc":{"description":"Field is part of a unique index."}},{"kind":8,"name":"MYSQLI_MULTIPLE_KEY_FLAG","doc":{"description":"Field is part of an index."}},{"kind":8,"name":"MYSQLI_BLOB_FLAG","doc":{"description":"Field is defined as BLOB"}},{"kind":8,"name":"MYSQLI_UNSIGNED_FLAG","doc":{"description":"Field is defined as UNSIGNED"}},{"kind":8,"name":"MYSQLI_ZEROFILL_FLAG","doc":{"description":"Field is defined as ZEROFILL"}},{"kind":8,"name":"MYSQLI_AUTO_INCREMENT_FLAG","doc":{"description":"Field is defined as AUTO_INCREMENT"}},{"kind":8,"name":"MYSQLI_TIMESTAMP_FLAG","doc":{"description":"Field is defined as TIMESTAMP"}},{"kind":8,"name":"MYSQLI_SET_FLAG","doc":{"description":"Field is defined as SET"}},{"kind":8,"name":"MYSQLI_NUM_FLAG","doc":{"description":"Field is defined as NUMERIC"}},{"kind":8,"name":"MYSQLI_PART_KEY_FLAG","doc":{"description":"Field is part of an multi-index"}},{"kind":8,"name":"MYSQLI_GROUP_FLAG","doc":{"description":"Field is part of GROUP BY"}},{"kind":8,"name":"MYSQLI_TYPE_DECIMAL","doc":{"description":"Field is defined as DECIMAL"}},{"kind":8,"name":"MYSQLI_TYPE_NEWDECIMAL","doc":{"description":"Precision math DECIMAL or NUMERIC field (MySQL 5.0.3 and up)"}},{"kind":8,"name":"MYSQLI_TYPE_BIT","doc":{"description":"Field is defined as BIT (MySQL 5.0.3 and up)"}},{"kind":8,"name":"MYSQLI_TYPE_TINY","doc":{"description":"Field is defined as TINYINT"}},{"kind":8,"name":"MYSQLI_TYPE_SHORT","doc":{"description":"Field is defined as SMALLINT"}},{"kind":8,"name":"MYSQLI_TYPE_LONG","doc":{"description":"Field is defined as INT"}},{"kind":8,"name":"MYSQLI_TYPE_FLOAT","doc":{"description":"Field is defined as FLOAT"}},{"kind":8,"name":"MYSQLI_TYPE_DOUBLE","doc":{"description":"Field is defined as DOUBLE"}},{"kind":8,"name":"MYSQLI_TYPE_NULL","doc":{"description":"Field is defined as DEFAULT NULL"}},{"kind":8,"name":"MYSQLI_TYPE_TIMESTAMP","doc":{"description":"Field is defined as TIMESTAMP"}},{"kind":8,"name":"MYSQLI_TYPE_LONGLONG","doc":{"description":"Field is defined as BIGINT"}},{"kind":8,"name":"MYSQLI_TYPE_INT24","doc":{"description":"Field is defined as MEDIUMINT"}},{"kind":8,"name":"MYSQLI_TYPE_DATE","doc":{"description":"Field is defined as DATE"}},{"kind":8,"name":"MYSQLI_TYPE_TIME","doc":{"description":"Field is defined as TIME"}},{"kind":8,"name":"MYSQLI_TYPE_DATETIME","doc":{"description":"Field is defined as DATETIME"}},{"kind":8,"name":"MYSQLI_TYPE_YEAR","doc":{"description":"Field is defined as YEAR"}},{"kind":8,"name":"MYSQLI_TYPE_NEWDATE","doc":{"description":"Field is defined as DATE"}},{"kind":8,"name":"MYSQLI_TYPE_INTERVAL","doc":{"description":"Field is defined as INTERVAL"}},{"kind":8,"name":"MYSQLI_TYPE_ENUM","doc":{"description":"Field is defined as ENUM"}},{"kind":8,"name":"MYSQLI_TYPE_SET","doc":{"description":"Field is defined as SET"}},{"kind":8,"name":"MYSQLI_TYPE_TINY_BLOB","doc":{"description":"Field is defined as TINYBLOB"}},{"kind":8,"name":"MYSQLI_TYPE_MEDIUM_BLOB","doc":{"description":"Field is defined as MEDIUMBLOB"}},{"kind":8,"name":"MYSQLI_TYPE_LONG_BLOB","doc":{"description":"Field is defined as LONGBLOB"}},{"kind":8,"name":"MYSQLI_TYPE_BLOB","doc":{"description":"Field is defined as BLOB"}},{"kind":8,"name":"MYSQLI_TYPE_VAR_STRING","doc":{"description":"Field is defined as VARCHAR"}},{"kind":8,"name":"MYSQLI_TYPE_STRING","doc":{"description":"Field is defined as CHAR or BINARY"}},{"kind":8,"name":"MYSQLI_TYPE_CHAR","doc":{"description":"Field is defined as TINYINT. For CHAR, see MYSQLI_TYPE_STRING"}},{"kind":8,"name":"MYSQLI_TYPE_GEOMETRY","doc":{"description":"Field is defined as GEOMETRY"}},{"kind":8,"name":"MYSQLI_NEED_DATA","doc":{"description":"More data available for bind variable"}},{"kind":8,"name":"MYSQLI_NO_DATA","doc":{"description":"No more data available for bind variable"}},{"kind":8,"name":"MYSQLI_DATA_TRUNCATED","doc":{"description":"Data truncation occurred. Available since PHP 5.1.0 and MySQL 5.0.5."}},{"kind":8,"name":"MYSQLI_ENUM_FLAG","doc":{"description":"Field is defined as ENUM. Available since PHP 5.3.0."}},{"kind":8,"name":"MYSQLI_BINARY_FLAG","doc":{"description":"Field is defined as BINARY. Available since PHP 5.3.0."}},{"kind":8,"name":"MYSQLI_CURSOR_TYPE_FOR_UPDATE","description":""},{"kind":8,"name":"MYSQLI_CURSOR_TYPE_NO_CURSOR","description":""},{"kind":8,"name":"MYSQLI_CURSOR_TYPE_READ_ONLY","description":""},{"kind":8,"name":"MYSQLI_CURSOR_TYPE_SCROLLABLE","description":""},{"kind":8,"name":"MYSQLI_STMT_ATTR_CURSOR_TYPE","description":""},{"kind":8,"name":"MYSQLI_STMT_ATTR_PREFETCH_ROWS","description":""},{"kind":8,"name":"MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH","description":""},{"kind":8,"name":"MYSQLI_SET_CHARSET_NAME","description":""},{"kind":8,"name":"MYSQLI_REPORT_INDEX","doc":{"description":"Report if no index or bad index was used in a query."}},{"kind":8,"name":"MYSQLI_REPORT_ERROR","doc":{"description":"Report errors from mysqli function calls."}},{"kind":8,"name":"MYSQLI_REPORT_STRICT","doc":{"description":"Throw a mysqli_sql_exception for errors instead of warnings."}},{"kind":8,"name":"MYSQLI_REPORT_ALL","doc":{"description":"Set all options on (report all)."}},{"kind":8,"name":"MYSQLI_REPORT_OFF","doc":{"description":"Turns reporting off."}},{"kind":8,"name":"MYSQLI_DEBUG_TRACE_ENABLED","doc":{"description":"Is set to 1 if mysqli_debug() functionality is enabled."}},{"kind":8,"name":"MYSQLI_SERVER_QUERY_NO_GOOD_INDEX_USED","description":""},{"kind":8,"name":"MYSQLI_SERVER_QUERY_NO_INDEX_USED","description":""},{"kind":8,"name":"MYSQLI_REFRESH_GRANT","doc":{"description":"Refreshes the grant tables."}},{"kind":8,"name":"MYSQLI_REFRESH_LOG","doc":{"description":"Flushes the logs, like executing the FLUSH LOGS SQL statement."}},{"kind":8,"name":"MYSQLI_REFRESH_TABLES","doc":{"description":"Flushes the table cache, like executing the FLUSH TABLES SQL statement."}},{"kind":8,"name":"MYSQLI_REFRESH_HOSTS","doc":{"description":"Flushes the host cache, like executing the FLUSH HOSTS SQL statement."}},{"kind":8,"name":"MYSQLI_REFRESH_STATUS","doc":{"description":"Reset the status variables, like executing the FLUSH STATUS SQL statement."}},{"kind":8,"name":"MYSQLI_REFRESH_THREADS","doc":{"description":"Flushes the thread cache."}},{"kind":8,"name":"MYSQLI_REFRESH_SLAVE","doc":{"description":"On a slave replication server: resets the master server information, and restarts the slave. Like executing the RESET SLAVE SQL statement."}},{"kind":8,"name":"MYSQLI_REFRESH_MASTER","doc":{"description":"On a master replication server: removes the binary log files listed in the binary log index, and truncates the index file. Like executing the RESET MASTER SQL statement."}},{"kind":8,"name":"MYSQLI_TRANS_COR_AND_CHAIN","doc":{"description":"Appends \"AND CHAIN\" to mysqli_commit() or mysqli_rollback()."}},{"kind":8,"name":"MYSQLI_TRANS_COR_AND_NO_CHAIN","doc":{"description":"Appends \"AND NO CHAIN\" to mysqli_commit() or mysqli_rollback()."}},{"kind":8,"name":"MYSQLI_TRANS_COR_RELEASE","doc":{"description":"Appends \"RELEASE\" to mysqli_commit() or mysqli_rollback()."}},{"kind":8,"name":"MYSQLI_TRANS_COR_NO_RELEASE","doc":{"description":"Appends \"NO RELEASE\" to mysqli_commit() or mysqli_rollback()."}},{"kind":8,"name":"MYSQLI_TRANS_START_READ_ONLY","doc":{"description":"Start the transaction as \"START TRANSACTION READ ONLY\" with mysqli_begin_transaction()."}},{"kind":8,"name":"MYSQLI_TRANS_START_READ_WRITE","doc":{"description":"Start the transaction as \"START TRANSACTION READ WRITE\" with mysqli_begin_transaction()."}},{"kind":8,"name":"MYSQLI_TRANS_START_CONSISTENT_SNAPSHOT","doc":{"description":"Start the transaction as \"START TRANSACTION WITH CONSISTENT SNAPSHOT\" with mysqli_begin_transaction()."}},{"kind":1,"name":"Locale","modifiers":0,"associated":[],"children":[{"kind":32,"name":"lookup","modifiers":32,"children":[{"kind":128,"name":"$langtag","modifiers":0,"doc":{"description":"An array containing a list of language tags to compare to locale. Maximum 100 items allowed.","type":"array"}},{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to use as the language range when matching.","type":"string"}},{"kind":128,"name":"$canonicalize","modifiers":0,"value":"false","doc":{"description":"If true, the arguments will be converted to canonical form before matching.","type":"bool"}},{"kind":128,"name":"$default","modifiers":0,"doc":{"description":"The locale to use if no match is found.","type":"string"}}],"doc":{"description":"Searches the items in langtag for the best match to the language range specified in locale according to RFC 4647's lookup algorithm.","type":"string"}},{"kind":32,"name":"getDisplayVariant","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to return a display variant for","type":"string"}},{"kind":128,"name":"$in_locale","modifiers":0,"doc":{"description":"Optional format locale to use to display the variant name","type":"string"}}],"doc":{"description":"Returns an appropriately localized display name for variants of the input locale. If is NULL then the default locale is used.","type":"string"}},{"kind":32,"name":"getRegion","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the region code from","type":"string"}}],"doc":{"description":"Gets the region for the input locale.","type":"string"}},{"kind":32,"name":"getDefault","modifiers":32,"children":[],"doc":{"description":"Gets the default locale value. At the PHP initialization this value is set to 'intl.default_locale' value from php.ini if that value exists or from ICU's function uloc_getDefault().","type":"string"}},{"kind":32,"name":"setDefault","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"Is a BCP 47 compliant language tag.","type":"string"}}],"doc":{"description":"Sets the default runtime locale to $locale. This changes the value of INTL global 'default_locale' locale identifier. UAX #35 extensions are accepted.","type":"bool"}},{"kind":32,"name":"parseLocale","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the subtag array from. Note: The 'variant' and 'private' subtags can take maximum 15 values whereas 'extlang' can take maximum 3 values.","type":"string"}}],"doc":{"description":"Returns a key-value array of locale ID subtag elements.","type":"array"}},{"kind":32,"name":"filterMatches","modifiers":32,"children":[{"kind":128,"name":"$langtag","modifiers":0,"doc":{"description":"The language tag to check","type":"string"}},{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The language range to check against","type":"string"}},{"kind":128,"name":"$canonicalize","modifiers":0,"value":"false","doc":{"description":"If true, the arguments will be converted to canonical form before matching.","type":"bool"}}],"doc":{"description":"Checks if a $langtag filter matches with $locale according to RFC 4647's basic filtering algorithm","type":"bool"}},{"kind":32,"name":"getAllVariants","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the variants from","type":"string"}}],"doc":{"description":"Gets the variants for the input locale","type":"array"}},{"kind":32,"name":"getPrimaryLanguage","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the primary language code from","type":"string"}}],"doc":{"description":"Gets the primary language for the input locale","type":"string"}},{"kind":32,"name":"composeLocale","modifiers":32,"children":[{"kind":128,"name":"$subtags","modifiers":0,"doc":{"description":"an array containing a list of key-value pairs, where the keys identify the particular locale ID subtags, and the values are the associated subtag values. Note: The 'variant' and 'private' subtags can take maximum 15 values whereas 'extlang' can take maximum 3 values.e.g. Variants are allowed with the suffix ranging from 0-14. Hence the keys for the input array can be variant0, variant1, ...,variant14. In the returned locale id, the subtag is ordered by suffix resulting in variant0 followed by variant1 followed by variant2 and so on. The 'variant', 'private' and 'extlang' multiple values can be specified both as array under specific key (e.g. 'variant') and as multiple numbered keys (e.g. 'variant0', 'variant1', etc.).","type":"array"}}],"doc":{"description":"Returns a correctly ordered and delimited locale ID the keys identify the particular locale ID subtags, and the values are the associated subtag values.","type":"string"}},{"kind":32,"name":"canonicalize","modifiers":32,"description":"","children":[{"kind":128,"name":"$locale","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"string"}},{"kind":32,"name":"getDisplayLanguage","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to return a display language for","type":"string"}},{"kind":128,"name":"$in_locale","modifiers":0,"doc":{"description":"Optional format locale to use to display the language name","type":"string"}}],"doc":{"description":"Returns an appropriately localized display name for language of the input locale. If is NULL then the default locale is used.","type":"string"}},{"kind":32,"name":"getDisplayName","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to return a display name for.","type":"string"}},{"kind":128,"name":"$in_locale","modifiers":0,"doc":{"description":"optional format locale","type":"string"}}],"doc":{"description":"Returns an appropriately localized display name for the input locale. If is NULL then the default locale is used.","type":"string"}},{"kind":32,"name":"getDisplayRegion","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to return a display region for.","type":"string"}},{"kind":128,"name":"$in_locale","modifiers":0,"doc":{"description":"Optional format locale to use to display the region name","type":"string"}}],"doc":{"description":"Returns an appropriately localized display name for region of the input locale. If is NULL then the default locale is used.","type":"string"}},{"kind":32,"name":"getDisplayScript","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to return a display script for","type":"string"}},{"kind":128,"name":"$in_locale","modifiers":0,"doc":{"description":"Optional format locale to use to display the script name","type":"string"}}],"doc":{"description":"Returns an appropriately localized display name for script of the input locale. If is NULL then the default locale is used.","type":"string"}},{"kind":32,"name":"getKeywords","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the keywords from","type":"string"}}],"doc":{"description":"Gets the keywords for the input locale.","type":"array"}},{"kind":32,"name":"acceptFromHttp","modifiers":32,"children":[{"kind":128,"name":"$header","modifiers":0,"doc":{"description":"The string containing the \"Accept-Language\" header according to format in RFC 2616.","type":"string"}}],"doc":{"description":"Tries to find locale that can satisfy the language list that is requested by the HTTP \"Accept-Language\" header.","type":"string"}},{"kind":32,"name":"getScript","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the script code from","type":"string"}}],"doc":{"description":"Gets the script for the input locale.","type":"string"}}],"doc":{"description":"A \"Locale\" is an identifier used to get language, culture, or regionally-specific behavior from an API. PHP locales are organized and identified the same way that the CLDR locales used by ICU (and many vendors of Unix-like operating systems, the Mac, Java, and so forth) use. Locales are identified using RFC 4646 language tags (which use hyphen, not underscore) in addition to the more traditional underscore-using identifiers. Unless otherwise noted the functions in this class are tolerant of both formats."}},{"kind":8,"name":"FILEINFO_NONE","doc":{"description":"No special handling."}},{"kind":8,"name":"FILEINFO_SYMLINK","doc":{"description":"Follow symlinks."}},{"kind":8,"name":"FILEINFO_MIME_TYPE","doc":{"description":"Return the mime type. Available since PHP 5.3.0."}},{"kind":8,"name":"FILEINFO_MIME_ENCODING","doc":{"description":"Return the mime encoding of the file. Available since PHP 5.3.0."}},{"kind":8,"name":"FILEINFO_MIME","doc":{"description":"Return the mime type and mime encoding as defined by RFC 2045."}},{"kind":8,"name":"FILEINFO_COMPRESS","doc":{"description":"Decompress compressed files. Disabled since PHP 5.3.0 due to thread safety issues."}},{"kind":8,"name":"FILEINFO_DEVICES","doc":{"description":"Look at the contents of blocks or character special devices."}},{"kind":8,"name":"FILEINFO_CONTINUE","doc":{"description":"Return all matches, not just the first."}},{"kind":8,"name":"FILEINFO_PRESERVE_ATIME","doc":{"description":"If possible preserve the original access time."}},{"kind":8,"name":"FILEINFO_RAW","doc":{"description":"Don't translate unprintable characters to a \\ooo octal representation."}},{"kind":8,"name":"INPUT_POST","doc":{"description":"POST variables."}},{"kind":8,"name":"INPUT_GET","doc":{"description":"GET variables."}},{"kind":8,"name":"INPUT_COOKIE","doc":{"description":"COOKIE variables."}},{"kind":8,"name":"INPUT_ENV","doc":{"description":"ENV variables."}},{"kind":8,"name":"INPUT_SERVER","doc":{"description":"SERVER variables."}},{"kind":8,"name":"INPUT_SESSION","doc":{"description":"SESSION variables. (not implemented yet)"}},{"kind":8,"name":"INPUT_REQUEST","doc":{"description":"REQUEST variables. (not implemented yet)"}},{"kind":8,"name":"FILTER_FLAG_NONE","doc":{"description":"No flags."}},{"kind":8,"name":"FILTER_REQUIRE_SCALAR","doc":{"description":"Flag used to require scalar as input"}},{"kind":8,"name":"FILTER_REQUIRE_ARRAY","doc":{"description":"Require an array as input."}},{"kind":8,"name":"FILTER_FORCE_ARRAY","doc":{"description":"Always returns an array."}},{"kind":8,"name":"FILTER_NULL_ON_FAILURE","doc":{"description":"Use NULL instead of FALSE on failure."}},{"kind":8,"name":"FILTER_VALIDATE_INT","doc":{"description":"ID of \"int\" filter."}},{"kind":8,"name":"FILTER_VALIDATE_BOOLEAN","doc":{"description":"ID of \"boolean\" filter."}},{"kind":8,"name":"FILTER_VALIDATE_FLOAT","doc":{"description":"ID of \"float\" filter."}},{"kind":8,"name":"FILTER_VALIDATE_REGEXP","doc":{"description":"ID of \"validate_regexp\" filter."}},{"kind":8,"name":"FILTER_VALIDATE_URL","doc":{"description":"ID of \"validate_url\" filter."}},{"kind":8,"name":"FILTER_VALIDATE_EMAIL","doc":{"description":"ID of \"validate_email\" filter."}},{"kind":8,"name":"FILTER_VALIDATE_IP","doc":{"description":"ID of \"validate_ip\" filter."}},{"kind":8,"name":"FILTER_VALIDATE_MAC","doc":{"description":"ID of \"validate_mac_address\" filter. (Available as of PHP 5.5.0)"}},{"kind":8,"name":"FILTER_DEFAULT","doc":{"description":"ID of default (\"unsafe_raw\") filter. This is equivalent to FILTER_UNSAFE_RAW."}},{"kind":8,"name":"FILTER_UNSAFE_RAW","doc":{"description":"ID of \"unsafe_raw\" filter."}},{"kind":8,"name":"FILTER_SANITIZE_STRING","doc":{"description":"ID of \"string\" filter."}},{"kind":8,"name":"FILTER_SANITIZE_STRIPPED","doc":{"description":"ID of \"stripped\" filter."}},{"kind":8,"name":"FILTER_SANITIZE_ENCODED","doc":{"description":"ID of \"encoded\" filter."}},{"kind":8,"name":"FILTER_SANITIZE_SPECIAL_CHARS","doc":{"description":"ID of \"special_chars\" filter."}},{"kind":8,"name":"FILTER_SANITIZE_EMAIL","doc":{"description":"ID of \"email\" filter."}},{"kind":8,"name":"FILTER_SANITIZE_URL","doc":{"description":"ID of \"url\" filter."}},{"kind":8,"name":"FILTER_SANITIZE_NUMBER_INT","doc":{"description":"ID of \"number_int\" filter."}},{"kind":8,"name":"FILTER_SANITIZE_NUMBER_FLOAT","doc":{"description":"ID of \"number_float\" filter."}},{"kind":8,"name":"FILTER_SANITIZE_MAGIC_QUOTES","doc":{"description":"ID of \"magic_quotes\" filter."}},{"kind":8,"name":"FILTER_CALLBACK","doc":{"description":"ID of \"callback\" filter."}},{"kind":8,"name":"FILTER_FLAG_ALLOW_OCTAL","doc":{"description":"Allow octal notation (0[0-7]+) in \"int\" filter."}},{"kind":8,"name":"FILTER_FLAG_ALLOW_HEX","doc":{"description":"Allow hex notation (0x[0-9a-fA-F]+) in \"int\" filter."}},{"kind":8,"name":"FILTER_FLAG_STRIP_LOW","doc":{"description":"Strip characters with ASCII value less than 32."}},{"kind":8,"name":"FILTER_FLAG_STRIP_HIGH","doc":{"description":"Strip characters with ASCII value greater than 127."}},{"kind":8,"name":"FILTER_FLAG_ENCODE_LOW","doc":{"description":"Encode characters with ASCII value less than 32."}},{"kind":8,"name":"FILTER_FLAG_ENCODE_HIGH","doc":{"description":"Encode characters with ASCII value greater than 127."}},{"kind":8,"name":"FILTER_FLAG_ENCODE_AMP","doc":{"description":"Encode &."}},{"kind":8,"name":"FILTER_FLAG_NO_ENCODE_QUOTES","doc":{"description":"Don't encode ' and \"."}},{"kind":8,"name":"FILTER_FLAG_EMPTY_STRING_NULL","doc":{"description":"(No use for now.)"}},{"kind":8,"name":"FILTER_FLAG_ALLOW_FRACTION","doc":{"description":"Allow fractional part in \"number_float\" filter."}},{"kind":8,"name":"FILTER_FLAG_ALLOW_THOUSAND","doc":{"description":"Allow thousand separator (,) in \"number_float\" filter."}},{"kind":8,"name":"FILTER_FLAG_ALLOW_SCIENTIFIC","doc":{"description":"Allow scientific notation (e, E) in \"number_float\" filter."}},{"kind":8,"name":"FILTER_FLAG_PATH_REQUIRED","doc":{"description":"Require path in \"validate_url\" filter."}},{"kind":8,"name":"FILTER_FLAG_QUERY_REQUIRED","doc":{"description":"Require query in \"validate_url\" filter."}},{"kind":8,"name":"FILTER_FLAG_IPV4","doc":{"description":"Allow only IPv4 address in \"validate_ip\" filter."}},{"kind":8,"name":"FILTER_FLAG_IPV6","doc":{"description":"Allow only IPv6 address in \"validate_ip\" filter."}},{"kind":8,"name":"FILTER_FLAG_NO_RES_RANGE","doc":{"description":"Deny reserved addresses in \"validate_ip\" filter."}},{"kind":8,"name":"FILTER_FLAG_NO_PRIV_RANGE","doc":{"description":"Deny private addresses in \"validate_ip\" filter."}},{"kind":8,"name":"FILTER_FLAG_EMAIL_UNICODE","doc":{"description":"Accepts Unicode characters in the local part in \"validate_email\" filter. (Available as of PHP 7.1.0)"}},{"kind":1,"name":"AssertionError","modifiers":0,"associated":[{"kind":1,"name":"Error"}],"children":[],"doc":{"description":"AssertionError is thrown when an assertion made via assert() fails."}},{"kind":1,"name":"ReflectionGenerator","modifiers":0,"associated":[],"children":[{"kind":32,"name":"getExecutingFile","modifiers":1,"children":[],"doc":{"description":"Get the full path and file name of the currently executing generator.","type":"string"}},{"kind":32,"name":"getThis","modifiers":1,"children":[],"doc":{"description":"Get the $this value that the generator has access to.","type":"object"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$generator","modifiers":0,"doc":{"description":"A generator object.","type":"Generator"}}],"doc":{"description":"Constructs a ReflectionGenerator object.","type":"public"}},{"kind":32,"name":"getExecutingLine","modifiers":1,"children":[],"doc":{"description":"Get the currently executing line number of the generator.","type":"int"}},{"kind":32,"name":"getTrace","modifiers":1,"children":[{"kind":128,"name":"$options","modifiers":0,"value":"DEBUG_BACKTRACE_PROVIDE_OBJECT","doc":{"description":"The value of options can be any of the following the following flags. Available options Option Description DEBUG_BACKTRACE_PROVIDE_OBJECT Default. DEBUG_BACKTRACE_IGNORE_ARGS Don't include the argument information for functions in the stack trace.","type":"int"}}],"doc":{"description":"Get the trace of the currently executing generator.","type":"array"}},{"kind":32,"name":"getFunction","modifiers":1,"children":[],"doc":{"description":"Enables the function name of the generator to be obtained by returning a class derived from ReflectionFunctionAbstract.","type":"ReflectionFunctionAbstract"}},{"kind":32,"name":"getExecutingGenerator","modifiers":1,"children":[],"doc":{"description":"Get the executing Generator object","type":"Generator"}}],"doc":{"description":"The ReflectionGenerator class reports information about a generator."}},{"kind":1,"name":"mysqli_warning","modifiers":0,"associated":[],"children":[{"kind":32,"name":"next","modifiers":1,"description":"","children":[],"doc":{"type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"description":"","children":[],"doc":{"type":"protected"}}],"doc":{"description":"Represents a MySQL warning."}},{"kind":8,"name":"CURLOPT_AUTOREFERER","doc":{"description":"Available since PHP 5.1.0"}},{"kind":8,"name":"CURLOPT_COOKIESESSION","doc":{"description":"Available since PHP 5.1.0"}},{"kind":8,"name":"CURLOPT_DNS_USE_GLOBAL_CACHE","description":""},{"kind":8,"name":"CURLOPT_DNS_CACHE_TIMEOUT","description":""},{"kind":8,"name":"CURLOPT_FTP_SSL","doc":{"description":"Available since PHP 5.2.0"}},{"kind":8,"name":"CURLFTP_CREATE_DIR","doc":{"description":"Available since PHP 7.0.7 and cURL 7.19.3"}},{"kind":8,"name":"CURLFTP_CREATE_DIR_NONE","doc":{"description":"Available since PHP 7.0.7 and cURL 7.19.3"}},{"kind":8,"name":"CURLFTP_CREATE_DIR_RETRY","doc":{"description":"Available since PHP 7.0.7 and cURL 7.19.3"}},{"kind":8,"name":"CURLFTPSSL_TRY","doc":{"description":"Available since PHP 5.2.0"}},{"kind":8,"name":"CURLFTPSSL_ALL","doc":{"description":"Available since PHP 5.2.0"}},{"kind":8,"name":"CURLFTPSSL_CONTROL","doc":{"description":"Available since PHP 5.2.0"}},{"kind":8,"name":"CURLFTPSSL_NONE","doc":{"description":"Available since PHP 5.2.0"}},{"kind":8,"name":"CURLOPT_PRIVATE","doc":{"description":"Available since PHP 5.2.4"}},{"kind":8,"name":"CURLOPT_FTPSSLAUTH","doc":{"description":"Available since PHP 5.1.0"}},{"kind":8,"name":"CURLOPT_PORT","description":""},{"kind":8,"name":"CURLOPT_FILE","description":""},{"kind":8,"name":"CURLOPT_INFILE","description":""},{"kind":8,"name":"CURLOPT_INFILESIZE","description":""},{"kind":8,"name":"CURLOPT_URL","description":""},{"kind":8,"name":"CURLOPT_PROXY","description":""},{"kind":8,"name":"CURLOPT_VERBOSE","description":""},{"kind":8,"name":"CURLOPT_HEADER","description":""},{"kind":8,"name":"CURLOPT_HTTPHEADER","description":""},{"kind":8,"name":"CURLOPT_NOPROGRESS","description":""},{"kind":8,"name":"CURLOPT_NOBODY","description":""},{"kind":8,"name":"CURLOPT_FAILONERROR","description":""},{"kind":8,"name":"CURLOPT_UPLOAD","description":""},{"kind":8,"name":"CURLOPT_POST","description":""},{"kind":8,"name":"CURLOPT_FTPLISTONLY","description":""},{"kind":8,"name":"CURLOPT_FTPAPPEND","description":""},{"kind":8,"name":"CURLOPT_FTP_CREATE_MISSING_DIRS","description":""},{"kind":8,"name":"CURLOPT_NETRC","description":""},{"kind":8,"name":"CURLOPT_FOLLOWLOCATION","doc":{"description":"This constant is not available when open_basedir or safe_mode are enabled."}},{"kind":8,"name":"CURLOPT_FTPASCII","description":""},{"kind":8,"name":"CURLOPT_PUT","description":""},{"kind":8,"name":"CURLOPT_MUTE","description":""},{"kind":8,"name":"CURLOPT_USERPWD","description":""},{"kind":8,"name":"CURLOPT_PROXYUSERPWD","description":""},{"kind":8,"name":"CURLOPT_RANGE","description":""},{"kind":8,"name":"CURLOPT_TIMEOUT","description":""},{"kind":8,"name":"CURLOPT_TIMEOUT_MS","description":""},{"kind":8,"name":"CURLOPT_TCP_NODELAY","doc":{"description":"Available since PHP 5.2.1"}},{"kind":8,"name":"CURLOPT_POSTFIELDS","description":""},{"kind":8,"name":"CURLOPT_PROGRESSFUNCTION","doc":{"description":"Available since PHP 5.3.0"}},{"kind":8,"name":"CURLOPT_REFERER","description":""},{"kind":8,"name":"CURLOPT_USERAGENT","description":""},{"kind":8,"name":"CURLOPT_FTPPORT","description":""},{"kind":8,"name":"CURLOPT_FTP_USE_EPSV","description":""},{"kind":8,"name":"CURLOPT_LOW_SPEED_LIMIT","description":""},{"kind":8,"name":"CURLOPT_LOW_SPEED_TIME","description":""},{"kind":8,"name":"CURLOPT_RESUME_FROM","description":""},{"kind":8,"name":"CURLOPT_COOKIE","description":""},{"kind":8,"name":"CURLOPT_SSLCERT","description":""},{"kind":8,"name":"CURLOPT_SSLCERTPASSWD","description":""},{"kind":8,"name":"CURLOPT_WRITEHEADER","description":""},{"kind":8,"name":"CURLOPT_SSL_VERIFYHOST","description":""},{"kind":8,"name":"CURLOPT_COOKIEFILE","description":""},{"kind":8,"name":"CURLOPT_SSLVERSION","description":""},{"kind":8,"name":"CURL_SSLVERSION_DEFAULT","description":""},{"kind":8,"name":"CURL_SSLVERSION_TLSv1","description":""},{"kind":8,"name":"CURL_SSLVERSION_SSLv2","description":""},{"kind":8,"name":"CURL_SSLVERSION_SSLv3","description":""},{"kind":8,"name":"CURL_SSLVERSION_TLSv1_0","doc":{"description":"Available since PHP 5.5.19 and 5.6.3"}},{"kind":8,"name":"CURL_SSLVERSION_TLSv1_1","doc":{"description":"Available since PHP 5.5.19 and 5.6.3"}},{"kind":8,"name":"CURL_SSLVERSION_TLSv1_2","doc":{"description":"Available since PHP 5.5.19 and 5.6.3"}},{"kind":8,"name":"CURLOPT_TIMECONDITION","description":""},{"kind":8,"name":"CURLOPT_TIMEVALUE","description":""},{"kind":8,"name":"CURLOPT_CUSTOMREQUEST","description":""},{"kind":8,"name":"CURLOPT_STDERR","description":""},{"kind":8,"name":"CURLOPT_TRANSFERTEXT","description":""},{"kind":8,"name":"CURLOPT_RETURNTRANSFER","description":""},{"kind":8,"name":"CURLOPT_QUOTE","description":""},{"kind":8,"name":"CURLOPT_POSTQUOTE","description":""},{"kind":8,"name":"CURLOPT_INTERFACE","description":""},{"kind":8,"name":"CURLOPT_KRB4LEVEL","description":""},{"kind":8,"name":"CURLOPT_HTTPPROXYTUNNEL","description":""},{"kind":8,"name":"CURLOPT_FILETIME","description":""},{"kind":8,"name":"CURLOPT_WRITEFUNCTION","description":""},{"kind":8,"name":"CURLOPT_READFUNCTION","description":""},{"kind":8,"name":"CURLOPT_PASSWDFUNCTION","description":""},{"kind":8,"name":"CURLOPT_HEADERFUNCTION","description":""},{"kind":8,"name":"CURLOPT_MAXREDIRS","description":""},{"kind":8,"name":"CURLOPT_MAXCONNECTS","description":""},{"kind":8,"name":"CURLOPT_CLOSEPOLICY","doc":{"description":"Removed in PHP 5.6.0."}},{"kind":8,"name":"CURLOPT_FRESH_CONNECT","description":""},{"kind":8,"name":"CURLOPT_FORBID_REUSE","description":""},{"kind":8,"name":"CURLOPT_RANDOM_FILE","description":""},{"kind":8,"name":"CURLOPT_EGDSOCKET","description":""},{"kind":8,"name":"CURLOPT_CONNECTTIMEOUT","description":""},{"kind":8,"name":"CURLOPT_CONNECTTIMEOUT_MS","description":""},{"kind":8,"name":"CURLOPT_SSL_VERIFYPEER","description":""},{"kind":8,"name":"CURLOPT_CAINFO","description":""},{"kind":8,"name":"CURLOPT_CAPATH","description":""},{"kind":8,"name":"CURLOPT_COOKIEJAR","description":""},{"kind":8,"name":"CURLOPT_SSL_CIPHER_LIST","description":""},{"kind":8,"name":"CURLOPT_BINARYTRANSFER","description":""},{"kind":8,"name":"CURLOPT_NOSIGNAL","description":""},{"kind":8,"name":"CURLOPT_PROXYTYPE","doc":{"description":"Available as of cURL 7.10."}},{"kind":8,"name":"CURLOPT_BUFFERSIZE","description":""},{"kind":8,"name":"CURLOPT_HTTPGET","description":""},{"kind":8,"name":"CURLOPT_HTTP_VERSION","description":""},{"kind":8,"name":"CURLOPT_SSLKEY","description":""},{"kind":8,"name":"CURLOPT_SSLKEYTYPE","description":""},{"kind":8,"name":"CURLOPT_SSLKEYPASSWD","description":""},{"kind":8,"name":"CURLOPT_SSLENGINE","description":""},{"kind":8,"name":"CURLOPT_SSLENGINE_DEFAULT","description":""},{"kind":8,"name":"CURLOPT_SSLCERTTYPE","description":""},{"kind":8,"name":"CURLOPT_CRLF","description":""},{"kind":8,"name":"CURLOPT_ENCODING","description":""},{"kind":8,"name":"CURLOPT_PROXYPORT","description":""},{"kind":8,"name":"CURLOPT_UNRESTRICTED_AUTH","description":""},{"kind":8,"name":"CURLOPT_FTP_USE_EPRT","description":""},{"kind":8,"name":"CURLOPT_HTTP200ALIASES","description":""},{"kind":8,"name":"CURLOPT_HTTPAUTH","description":""},{"kind":8,"name":"CURLAUTH_BASIC","description":""},{"kind":8,"name":"CURLAUTH_DIGEST","description":""},{"kind":8,"name":"CURLAUTH_GSSNEGOTIATE","description":""},{"kind":8,"name":"CURLAUTH_NEGOTIATE","doc":{"description":"Available since PHP 7.0.7 and cURL 7.38.0."}},{"kind":8,"name":"CURLAUTH_NTLM","description":""},{"kind":8,"name":"CURLAUTH_NTLM_WB","doc":{"description":"Available since PHP 7.0.7 and cURL 7.22.0"}},{"kind":8,"name":"CURLAUTH_ANY","description":""},{"kind":8,"name":"CURLAUTH_ANYSAFE","description":""},{"kind":8,"name":"CURLOPT_PROXYAUTH","description":""},{"kind":8,"name":"CURLOPT_MAX_RECV_SPEED_LARGE","doc":{"description":"Available since PHP 5.4.0 and cURL 7.15.5"}},{"kind":8,"name":"CURLOPT_MAX_SEND_SPEED_LARGE","doc":{"description":"Available since PHP 5.4.0 and cURL 7.15.5"}},{"kind":8,"name":"CURLOPT_HEADEROPT","doc":{"description":"Available since PHP 7.0.7 and cURL 7.37.0"}},{"kind":8,"name":"CURLOPT_PROXYHEADER","doc":{"description":"Available since PHP 7.0.7 and cURL 7.37.0"}},{"kind":8,"name":"CURLCLOSEPOLICY_LEAST_RECENTLY_USED","doc":{"description":"Removed in PHP 5.6.0."}},{"kind":8,"name":"CURLCLOSEPOLICY_LEAST_TRAFFIC","doc":{"description":"Removed in PHP 5.6.0."}},{"kind":8,"name":"CURLCLOSEPOLICY_SLOWEST","doc":{"description":"Removed in PHP 5.6.0."}},{"kind":8,"name":"CURLCLOSEPOLICY_CALLBACK","doc":{"description":"Removed in PHP 5.6.0."}},{"kind":8,"name":"CURLCLOSEPOLICY_OLDEST","doc":{"description":"Removed in PHP 5.6.0."}},{"kind":8,"name":"CURLINFO_PRIVATE","doc":{"description":"Available since PHP 5.2.4"}},{"kind":8,"name":"CURLINFO_EFFECTIVE_URL","description":""},{"kind":8,"name":"CURLINFO_HTTP_CODE","description":""},{"kind":8,"name":"CURLINFO_HEADER_OUT","doc":{"description":"Available since PHP 5.1.3"}},{"kind":8,"name":"CURLINFO_HEADER_SIZE","description":""},{"kind":8,"name":"CURLINFO_REQUEST_SIZE","description":""},{"kind":8,"name":"CURLINFO_TOTAL_TIME","description":""},{"kind":8,"name":"CURLINFO_NAMELOOKUP_TIME","description":""},{"kind":8,"name":"CURLINFO_CONNECT_TIME","description":""},{"kind":8,"name":"CURLINFO_PRETRANSFER_TIME","description":""},{"kind":8,"name":"CURLINFO_SIZE_UPLOAD","description":""},{"kind":8,"name":"CURLINFO_SIZE_DOWNLOAD","description":""},{"kind":8,"name":"CURLINFO_SPEED_DOWNLOAD","description":""},{"kind":8,"name":"CURLINFO_SPEED_UPLOAD","description":""},{"kind":8,"name":"CURLINFO_FILETIME","description":""},{"kind":8,"name":"CURLINFO_SSL_VERIFYRESULT","description":""},{"kind":8,"name":"CURLINFO_CONTENT_LENGTH_DOWNLOAD","description":""},{"kind":8,"name":"CURLINFO_CONTENT_LENGTH_UPLOAD","description":""},{"kind":8,"name":"CURLINFO_STARTTRANSFER_TIME","description":""},{"kind":8,"name":"CURLINFO_CONTENT_TYPE","description":""},{"kind":8,"name":"CURLINFO_REDIRECT_TIME","description":""},{"kind":8,"name":"CURLINFO_REDIRECT_COUNT","description":""},{"kind":8,"name":"CURLINFO_REDIRECT_URL","doc":{"description":"Available since PHP 5.3.7"}},{"kind":8,"name":"CURLINFO_PRIMARY_IP","doc":{"description":"Available since PHP 5.4.7"}},{"kind":8,"name":"CURLINFO_PRIMARY_PORT","doc":{"description":"Available since PHP 5.4.7"}},{"kind":8,"name":"CURLINFO_LOCAL_IP","doc":{"description":"Available since PHP 5.4.7"}},{"kind":8,"name":"CURLINFO_LOCAL_PORT","doc":{"description":"Available since PHP 5.4.7"}},{"kind":8,"name":"CURL_PUSH_OK","doc":{"description":"Available since PHP 7.1.0 and cURL 7.44.0"}},{"kind":8,"name":"CURL_PUSH_DENY","doc":{"description":"Available since PHP 7.1.0 and cURL 7.44.0"}},{"kind":8,"name":"CURL_REDIR_POST_301","doc":{"description":"Available since PHP 7.0.7 and cURL 7.18.2"}},{"kind":8,"name":"CURL_REDIR_POST_302","doc":{"description":"Available since PHP 7.0.7 and cURL 7.18.2"}},{"kind":8,"name":"CURL_REDIR_POST_303","doc":{"description":"Available since PHP 7.0.7 and cURL 7.25.1"}},{"kind":8,"name":"CURL_REDIR_POST_ALL","doc":{"description":"Available since PHP 7.0.7 and cURL 7.18.2"}},{"kind":8,"name":"CURL_TIMECOND_IFMODSINCE","description":""},{"kind":8,"name":"CURL_TIMECOND_IFUNMODSINCE","description":""},{"kind":8,"name":"CURL_TIMECOND_LASTMOD","description":""},{"kind":8,"name":"CURL_VERSION_IPV6","description":""},{"kind":8,"name":"CURL_VERSION_KERBEROS4","description":""},{"kind":8,"name":"CURL_VERSION_KERBEROS5","doc":{"description":"Available since PHP 7.0.7 and cURL 7.40.0"}},{"kind":8,"name":"CURL_VERSION_HTTP2","doc":{"description":"Available since PHP 5.5.24 and 5.6.8 and cURL 7.33.0"}},{"kind":8,"name":"CURL_VERSION_PSL","doc":{"description":"Available since PHP 7.0.7 and cURL 7.47.0"}},{"kind":8,"name":"CURL_VERSION_SSL","description":""},{"kind":8,"name":"CURL_VERSION_UNIX_SOCKETS","doc":{"description":"Available since PHP 7.0.7 and cURL 7.40.0"}},{"kind":8,"name":"CURL_VERSION_LIBZ","description":""},{"kind":8,"name":"CURLVERSION_NOW","description":""},{"kind":8,"name":"CURLE_OK","description":""},{"kind":8,"name":"CURLE_UNSUPPORTED_PROTOCOL","description":""},{"kind":8,"name":"CURLE_FAILED_INIT","description":""},{"kind":8,"name":"CURLE_URL_MALFORMAT","description":""},{"kind":8,"name":"CURLE_URL_MALFORMAT_USER","description":""},{"kind":8,"name":"CURLE_COULDNT_RESOLVE_PROXY","description":""},{"kind":8,"name":"CURLE_COULDNT_RESOLVE_HOST","description":""},{"kind":8,"name":"CURLE_COULDNT_CONNECT","description":""},{"kind":8,"name":"CURLE_FTP_WEIRD_SERVER_REPLY","description":""},{"kind":8,"name":"CURLE_FTP_ACCESS_DENIED","description":""},{"kind":8,"name":"CURLE_FTP_USER_PASSWORD_INCORRECT","description":""},{"kind":8,"name":"CURLE_FTP_WEIRD_PASS_REPLY","description":""},{"kind":8,"name":"CURLE_FTP_WEIRD_USER_REPLY","description":""},{"kind":8,"name":"CURLE_FTP_WEIRD_PASV_REPLY","description":""},{"kind":8,"name":"CURLE_FTP_WEIRD_227_FORMAT","description":""},{"kind":8,"name":"CURLE_FTP_CANT_GET_HOST","description":""},{"kind":8,"name":"CURLE_FTP_CANT_RECONNECT","description":""},{"kind":8,"name":"CURLE_FTP_COULDNT_SET_BINARY","description":""},{"kind":8,"name":"CURLE_PARTIAL_FILE","description":""},{"kind":8,"name":"CURLE_FTP_COULDNT_RETR_FILE","description":""},{"kind":8,"name":"CURLE_FTP_WRITE_ERROR","description":""},{"kind":8,"name":"CURLE_FTP_QUOTE_ERROR","description":""},{"kind":8,"name":"CURLE_HTTP_NOT_FOUND","description":""},{"kind":8,"name":"CURLE_WRITE_ERROR","description":""},{"kind":8,"name":"CURLE_MALFORMAT_USER","description":""},{"kind":8,"name":"CURLE_FTP_COULDNT_STOR_FILE","description":""},{"kind":8,"name":"CURLE_READ_ERROR","description":""},{"kind":8,"name":"CURLE_OUT_OF_MEMORY","description":""},{"kind":8,"name":"CURLE_OPERATION_TIMEOUTED","description":""},{"kind":8,"name":"CURLE_FTP_COULDNT_SET_ASCII","description":""},{"kind":8,"name":"CURLE_FTP_PORT_FAILED","description":""},{"kind":8,"name":"CURLE_FTP_COULDNT_USE_REST","description":""},{"kind":8,"name":"CURLE_FTP_COULDNT_GET_SIZE","description":""},{"kind":8,"name":"CURLE_HTTP_RANGE_ERROR","description":""},{"kind":8,"name":"CURLE_HTTP_POST_ERROR","description":""},{"kind":8,"name":"CURLE_SSL_CONNECT_ERROR","description":""},{"kind":8,"name":"CURLE_FTP_BAD_DOWNLOAD_RESUME","description":""},{"kind":8,"name":"CURLE_FILE_COULDNT_READ_FILE","description":""},{"kind":8,"name":"CURLE_LDAP_CANNOT_BIND","description":""},{"kind":8,"name":"CURLE_LDAP_SEARCH_FAILED","description":""},{"kind":8,"name":"CURLE_LIBRARY_NOT_FOUND","description":""},{"kind":8,"name":"CURLE_FUNCTION_NOT_FOUND","description":""},{"kind":8,"name":"CURLE_ABORTED_BY_CALLBACK","description":""},{"kind":8,"name":"CURLE_BAD_FUNCTION_ARGUMENT","description":""},{"kind":8,"name":"CURLE_BAD_CALLING_ORDER","description":""},{"kind":8,"name":"CURLE_HTTP_PORT_FAILED","description":""},{"kind":8,"name":"CURLE_BAD_PASSWORD_ENTERED","description":""},{"kind":8,"name":"CURLE_TOO_MANY_REDIRECTS","description":""},{"kind":8,"name":"CURLE_UNKNOWN_TELNET_OPTION","description":""},{"kind":8,"name":"CURLE_TELNET_OPTION_SYNTAX","description":""},{"kind":8,"name":"CURLE_OBSOLETE","description":""},{"kind":8,"name":"CURLE_SSL_PEER_CERTIFICATE","description":""},{"kind":8,"name":"CURLE_GOT_NOTHING","description":""},{"kind":8,"name":"CURLE_SSL_ENGINE_NOTFOUND","description":""},{"kind":8,"name":"CURLE_SSL_ENGINE_SETFAILED","description":""},{"kind":8,"name":"CURLE_SEND_ERROR","description":""},{"kind":8,"name":"CURLE_RECV_ERROR","description":""},{"kind":8,"name":"CURLE_SHARE_IN_USE","description":""},{"kind":8,"name":"CURLE_SSL_CERTPROBLEM","description":""},{"kind":8,"name":"CURLE_SSL_CIPHER","description":""},{"kind":8,"name":"CURLE_SSL_CACERT","description":""},{"kind":8,"name":"CURLE_BAD_CONTENT_ENCODING","description":""},{"kind":8,"name":"CURLE_LDAP_INVALID_URL","description":""},{"kind":8,"name":"CURLE_FILESIZE_EXCEEDED","description":""},{"kind":8,"name":"CURLE_FTP_SSL_FAILED","description":""},{"kind":8,"name":"CURLE_SSH","doc":{"description":"Available since PHP 5.3.0 and cURL 7.16.1."}},{"kind":8,"name":"CURLFTPAUTH_DEFAULT","doc":{"description":"Available since PHP 5.1.0"}},{"kind":8,"name":"CURLFTPAUTH_SSL","doc":{"description":"Available since PHP 5.1.0"}},{"kind":8,"name":"CURLFTPAUTH_TLS","doc":{"description":"Available since PHP 5.1.0"}},{"kind":8,"name":"CURLPROXY_HTTP","doc":{"description":"Available since cURL 7.10."}},{"kind":8,"name":"CURLPROXY_HTTP_1_0","doc":{"description":"Available since PHP 7.0.7 and cURL 7.19.3"}},{"kind":8,"name":"CURLPROXY_SOCKS4","doc":{"description":"Available since PHP 5.2.10 and cURL 7.10."}},{"kind":8,"name":"CURLPROXY_SOCKS5","doc":{"description":"Available since cURL 7.10."}},{"kind":8,"name":"CURL_NETRC_OPTIONAL","description":""},{"kind":8,"name":"CURL_NETRC_IGNORED","description":""},{"kind":8,"name":"CURL_NETRC_REQUIRED","description":""},{"kind":8,"name":"CURL_HTTP_VERSION_NONE","description":""},{"kind":8,"name":"CURL_HTTP_VERSION_1_0","description":""},{"kind":8,"name":"CURL_HTTP_VERSION_1_1","description":""},{"kind":8,"name":"CURL_HTTP_VERSION_2","doc":{"description":"Available since PHP 7.0.7 and cURL 7.43.0"}},{"kind":8,"name":"CURL_HTTP_VERSION_2TLS","doc":{"description":"Available since PHP 7.0.7 and cURL 7.47.0"}},{"kind":8,"name":"CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE","doc":{"description":"Available since PHP 7.0.7 and cURL 7.49.0"}},{"kind":8,"name":"CURLM_CALL_MULTI_PERFORM","description":""},{"kind":8,"name":"CURLM_OK","description":""},{"kind":8,"name":"CURLM_BAD_HANDLE","description":""},{"kind":8,"name":"CURLM_BAD_EASY_HANDLE","description":""},{"kind":8,"name":"CURLM_OUT_OF_MEMORY","description":""},{"kind":8,"name":"CURLM_INTERNAL_ERROR","description":""},{"kind":8,"name":"CURLMSG_DONE","description":""},{"kind":8,"name":"CURLOPT_KEYPASSWD","description":""},{"kind":8,"name":"CURLOPT_SSH_AUTH_TYPES","description":""},{"kind":8,"name":"CURLOPT_SSH_HOST_PUBLIC_KEY_MD5","description":""},{"kind":8,"name":"CURLOPT_SSH_PRIVATE_KEYFILE","description":""},{"kind":8,"name":"CURLOPT_SSH_PUBLIC_KEYFILE","description":""},{"kind":8,"name":"CURLOPT_SSL_OPTIONS","doc":{"description":"Available since PHP 5.5.0 and cURL 7.25.0"}},{"kind":8,"name":"CURLSSLOPT_ALLOW_BEAST","doc":{"description":"Available since PHP 5.5.0 and cURL 7.25.0"}},{"kind":8,"name":"CURLSSLOPT_NO_REVOKE","doc":{"description":"Available since PHP 7.0.7 and cURL 7.44.0"}},{"kind":8,"name":"CURLOPT_USERNAME","doc":{"description":"Available since PHP 5.5.0 and cURL 7.19.1"}},{"kind":8,"name":"CURLOPT_SASL_IR","doc":{"description":"Available since PHP 7.0.7 and cURL 7.31.0"}},{"kind":8,"name":"CURLOPT_DNS_INTERFACE","doc":{"description":"Available since PHP 7.0.7 and cURL 7.33.0"}},{"kind":8,"name":"CURLOPT_DNS_LOCAL_IP4","doc":{"description":"Available since PHP 7.0.7 and cURL 7.33.0"}},{"kind":8,"name":"CURLOPT_DNS_LOCAL_IP6","doc":{"description":"Available since PHP 7.0.7 and cURL 7.33.0"}},{"kind":8,"name":"CURLOPT_XOAUTH2_BEARER","doc":{"description":"Available since PHP 7.0.7 and cURL 7.33.0"}},{"kind":8,"name":"CURLOPT_LOGIN_OPTIONS","doc":{"description":"Available since PHP 7.0.7 and cURL 7.34.0"}},{"kind":8,"name":"CURLOPT_EXPECT_100_TIMEOUT_MS","doc":{"description":"Available since PHP 7.0.7 and cURL 7.36.0"}},{"kind":8,"name":"CURLOPT_SSL_ENABLE_ALPN","doc":{"description":"Available since PHP 7.0.7 and cURL 7.36.0"}},{"kind":8,"name":"CURLOPT_SSL_ENABLE_NPN","doc":{"description":"Available since PHP 7.0.7 and cURL 7.36.0"}},{"kind":8,"name":"CURLOPT_PINNEDPUBLICKEY","doc":{"description":"Available since PHP 7.0.7 and cURL 7.39.0"}},{"kind":8,"name":"CURLOPT_UNIX_SOCKET_PATH","doc":{"description":"Available since PHP 7.0.7 and cURL 7.40.0"}},{"kind":8,"name":"CURLOPT_SSL_VERIFYSTATUS","doc":{"description":"Available since PHP 7.0.7 and cURL 7.41.0"}},{"kind":8,"name":"CURLOPT_PATH_AS_IS","doc":{"description":"Available since PHP 7.0.7 and cURL 7.42.0"}},{"kind":8,"name":"CURLOPT_SSL_FALSESTART","doc":{"description":"Available since PHP 7.0.7 and cURL 7.42.0"}},{"kind":8,"name":"CURLOPT_PIPEWAIT","doc":{"description":"Available since PHP 7.0.7 and cURL 7.43.0"}},{"kind":8,"name":"CURLOPT_PROXY_SERVICE_NAME","doc":{"description":"Available since PHP 7.0.7 and cURL 7.43.0"}},{"kind":8,"name":"CURLOPT_SERVICE_NAME","doc":{"description":"Available since PHP 7.0.7 and cURL 7.43.0"}},{"kind":8,"name":"CURLOPT_DEFAULT_PROTOCOL","doc":{"description":"Available since PHP 7.0.7 and cURL 7.45.0"}},{"kind":8,"name":"CURLOPT_STREAM_WEIGHT","doc":{"description":"Available since PHP 7.0.7 and cURL 7.46.0"}},{"kind":8,"name":"CURLOPT_TFTP_NO_OPTIONS","doc":{"description":"Available since PHP 7.0.7 and cURL 7.48.0"}},{"kind":8,"name":"CURLOPT_CONNECT_TO","doc":{"description":"Available since PHP 7.0.7 and cURL 7.49.0"}},{"kind":8,"name":"CURLOPT_TCP_FASTOPEN","doc":{"description":"Available since PHP 7.0.7 and cURL 7.49.0"}},{"kind":8,"name":"CURLMOPT_PIPELINING","doc":{"description":"Available since PHP 5.5.0 and cURL 7.16.0."}},{"kind":8,"name":"CURLMOPT_MAXCONNECTS","doc":{"description":"Available since PHP 5.5.0 and cURL 7.16.3."}},{"kind":8,"name":"CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE","doc":{"description":"Available since PHP 7.0.7 and cURL 7.30.0"}},{"kind":8,"name":"CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE","doc":{"description":"Available since PHP 7.0.7 and cURL 7.30.0"}},{"kind":8,"name":"CURLMOPT_MAX_HOST_CONNECTIONS","doc":{"description":"Available since PHP 7.0.7 and cURL 7.30.0"}},{"kind":8,"name":"CURLMOPT_MAX_PIPELINE_LENGTH","doc":{"description":"Available since PHP 7.0.7 and cURL 7.30.0"}},{"kind":8,"name":"CURLMOPT_MAX_TOTAL_CONNECTIONS","doc":{"description":"Available since PHP 7.0.7 and cURL 7.30.0"}},{"kind":8,"name":"CURLMOPT_PUSHFUNCTION","doc":{"description":"Available since PHP 7.1.0 and cURL 7.44.0"}},{"kind":8,"name":"CURLSSH_AUTH_AGENT","doc":{"description":"Available since PHP 7.0.7 and cURL 7.28.0"}},{"kind":8,"name":"CURLSSH_AUTH_ANY","description":""},{"kind":8,"name":"CURLSSH_AUTH_DEFAULT","description":""},{"kind":8,"name":"CURLSSH_AUTH_HOST","description":""},{"kind":8,"name":"CURLSSH_AUTH_KEYBOARD","description":""},{"kind":8,"name":"CURLSSH_AUTH_NONE","description":""},{"kind":8,"name":"CURLSSH_AUTH_PASSWORD","description":""},{"kind":8,"name":"CURLSSH_AUTH_PUBLICKEY","description":""},{"kind":8,"name":"CURL_WRAPPERS_ENABLED","doc":{"description":"Defined if PHP was configured with --with-curlwrappers . Moved to PECL in PHP 5.5.0."}},{"kind":8,"name":"CURLPAUSE_ALL","doc":{"description":"Available since PHP 5.5.0 and cURL 7.18.0."}},{"kind":8,"name":"CURLPAUSE_CONT","doc":{"description":"Available since PHP 5.5.0 and cURL 7.18.0."}},{"kind":8,"name":"CURLPAUSE_RECV","doc":{"description":"Available since PHP 5.5.0 and cURL 7.18.0."}},{"kind":8,"name":"CURLPAUSE_RECV_CONT","doc":{"description":"Available since PHP 5.5.0 and cURL 7.18.0."}},{"kind":8,"name":"CURLPAUSE_SEND","doc":{"description":"Available since PHP 5.5.0 and cURL 7.18.0."}},{"kind":8,"name":"CURLPAUSE_SEND_CONT","doc":{"description":"Available since PHP 5.5.0 and cURL 7.18.0."}},{"kind":8,"name":"CURLPIPE_NOTHING","doc":{"description":"Available since PHP 7.0.0 and cURL 7.43.0."}},{"kind":8,"name":"CURLPIPE_HTTP1","doc":{"description":"Available since PHP 7.0.0 and cURL 7.43.0."}},{"kind":8,"name":"CURLPIPE_MULTIPLEX","doc":{"description":"Available since PHP 7.0.0 and cURL 7.43.0."}},{"kind":8,"name":"CURLPROXY_SOCKS4A","doc":{"description":"Available since PHP 5.5.23 and PHP 5.6.7 and cURL 7.18.0."}},{"kind":8,"name":"CURLPROXY_SOCKS5_HOSTNAME","doc":{"description":"Available since PHP 5.5.23 and PHP 5.6.7 and cURL 7.18.0."}},{"kind":8,"name":"CURLHEADER_SEPARATE","doc":{"description":"Available since PHP 7.0.7 and cURL 7.37.0."}},{"kind":8,"name":"CURLHEADER_UNIFIED","doc":{"description":"Available since PHP 7.0.7 and cURL 7.37.0."}},{"kind":8,"name":"CURLPROTO_SMB","doc":{"description":"Available since PHP 7.0.7 and cURL 7.40.0."}},{"kind":8,"name":"CURLPROTO_SMBS","doc":{"description":"Available since PHP 7.0.7 and cURL 7.40.0."}},{"kind":1,"name":"ArrayObject","modifiers":0,"associated":[{"kind":2,"name":"IteratorAggregate"},{"kind":2,"name":"ArrayAccess"},{"kind":2,"name":"Serializable"},{"kind":2,"name":"Countable"}],"children":[{"kind":1024,"name":"STD_PROP_LIST","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":1024,"name":"ARRAY_AS_PROPS","modifiers":1,"description":"","doc":{"type":"integer"}},{"kind":32,"name":"serialize","modifiers":1,"children":[],"doc":{"description":"Serializes an ArrayObject.","type":"string"}},{"kind":32,"name":"unserialize","modifiers":1,"children":[{"kind":128,"name":"$serialized","modifiers":0,"doc":{"description":"The serialized ArrayObject.","type":"string"}}],"doc":{"description":"Unserializes a serialized ArrayObject.","type":"void"}},{"kind":32,"name":"natcasesort","modifiers":1,"children":[],"doc":{"description":"This method is a case insensitive version of ArrayObject::natsort.","type":"void"}},{"kind":32,"name":"getIteratorClass","modifiers":1,"children":[],"doc":{"description":"Gets the class name of the array iterator that is used by ArrayObject::getIterator().","type":"string"}},{"kind":32,"name":"setFlags","modifiers":1,"children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The new ArrayObject behavior. It takes on either a bitmask, or named constants. Using named constants is strongly encouraged to ensure compatibility for future versions. The available behavior flags are listed below. The actual meanings of these flags are described in the predefined constants. ArrayObject behavior flags value constant 1 ArrayObject::STD_PROP_LIST 2 ArrayObject::ARRAY_AS_PROPS","type":"int"}}],"doc":{"description":"Set the flags that change the behavior of the ArrayObject.","type":"void"}},{"kind":32,"name":"offsetExists","modifiers":1,"description":"","children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index being checked.","type":"mixed"}}],"doc":{"type":"bool"}},{"kind":32,"name":"getIterator","modifiers":1,"children":[],"doc":{"description":"Create a new iterator from an ArrayObject instance.","type":"ArrayIterator"}},{"kind":32,"name":"uksort","modifiers":1,"children":[{"kind":128,"name":"$cmp_function","modifiers":0,"doc":{"description":"The callback comparison function. Function cmp_function should accept two parameters which will be filled by pairs of entry keys. The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.","type":"callable"}}],"doc":{"description":"This function sorts the keys of the entries using a user-supplied comparison function. The key to entry correlations will be maintained.","type":"void"}},{"kind":32,"name":"append","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value being appended.","type":"mixed"}}],"doc":{"description":"Appends a new value as the last element.","type":"void"}},{"kind":32,"name":"asort","modifiers":1,"children":[],"doc":{"description":"Sorts the entries such that the keys maintain their correlation with the entries they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.","type":"void"}},{"kind":32,"name":"exchangeArray","modifiers":1,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The new array or object to exchange with the current array.","type":"mixed"}}],"doc":{"description":"Exchange the current array with another array or object.","type":"array"}},{"kind":32,"name":"getFlags","modifiers":1,"children":[],"doc":{"description":"Gets the behavior flags of the ArrayObject. See the ArrayObject::setFlags method for a list of the available flags.","type":"int"}},{"kind":32,"name":"uasort","modifiers":1,"children":[{"kind":128,"name":"$cmp_function","modifiers":0,"doc":{"description":"Function cmp_function should accept two parameters which will be filled by pairs of entries. The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.","type":"callable"}}],"doc":{"description":"This function sorts the entries such that keys maintain their correlation with the entry that they are associated with, using a user-defined comparison function.","type":"void"}},{"kind":32,"name":"count","modifiers":1,"children":[],"doc":{"description":"Get the number of public properties in the ArrayObject.","type":"int"}},{"kind":32,"name":"offsetUnset","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index being unset.","type":"mixed"}}],"doc":{"description":"Unsets the value at the specified index.","type":"void"}},{"kind":32,"name":"natsort","modifiers":1,"children":[],"doc":{"description":"This method implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a \"natural ordering\". An example of the difference between this algorithm and the regular computer string sorting algorithms (used in ArrayObject::asort) method can be seen in the example below.","type":"void"}},{"kind":32,"name":"ksort","modifiers":1,"children":[],"doc":{"description":"Sorts the entries by key, maintaining key to entry correlations. This is useful mainly for associative arrays.","type":"void"}},{"kind":32,"name":"offsetSet","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index being set.","type":"mixed"}},{"kind":128,"name":"$newval","modifiers":0,"doc":{"description":"The new value for the index.","type":"mixed"}}],"doc":{"description":"Sets the value at the specified index to newval.","type":"void"}},{"kind":32,"name":"offsetGet","modifiers":1,"description":"","children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index with the value.","type":"mixed"}}],"doc":{"type":"mixed"}},{"kind":32,"name":"setIteratorClass","modifiers":1,"children":[{"kind":128,"name":"$iterator_class","modifiers":0,"doc":{"description":"The classname of the array iterator to use when iterating over this object.","type":"string"}}],"doc":{"description":"Sets the classname of the array iterator that is used by ArrayObject::getIterator().","type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The input parameter accepts an array or an Object.","type":"mixed"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"Flags to control the behaviour of the ArrayObject object. See ArrayObject::setFlags().","type":"int"}},{"kind":128,"name":"$iterator_class","modifiers":0,"value":"\"ArrayIterator\"","doc":{"description":"Specify the class that will be used for iteration of the ArrayObject object.","type":"string"}}],"doc":{"description":"This constructs a new array object.","type":"public"}},{"kind":32,"name":"getArrayCopy","modifiers":1,"children":[],"doc":{"description":"Exports the ArrayObject to an array.","type":"array"}}],"doc":{"description":"This class allows objects to work as arrays."}},{"kind":1,"name":"NumberFormatter","modifiers":0,"associated":[],"children":[{"kind":32,"name":"getLocale","modifiers":1,"children":[{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"You can choose between valid and actual locale ( Locale::VALID_LOCALE, Locale::ACTUAL_LOCALE, respectively). The default is the actual locale.","type":"int"}}],"doc":{"description":"Get formatter locale name.","type":"string"}},{"kind":32,"name":"setTextAttribute","modifiers":1,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute specifier - one of the text attribute constants.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Text for the attribute value.","type":"string"}}],"doc":{"description":"Set a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.","type":"bool"}},{"kind":32,"name":"formatCurrency","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The numeric currency value.","type":"float"}},{"kind":128,"name":"$currency","modifiers":0,"doc":{"description":"The 3-letter ISO 4217 currency code indicating the currency to use.","type":"string"}}],"doc":{"description":"Format the currency value according to the formatter rules.","type":"string"}},{"kind":32,"name":"create","modifiers":32,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"Locale in which the number would be formatted (locale name, e.g. en_CA).","type":"string"}},{"kind":128,"name":"$style","modifiers":0,"doc":{"description":"Style of the formatting, one of the format style constants. If NumberFormatter::PATTERN_DECIMAL or NumberFormatter::PATTERN_RULEBASED is passed then the number format is opened using the given pattern, which must conform to the syntax described in » ICU DecimalFormat documentation or » ICU RuleBasedNumberFormat documentation, respectively.","type":"int"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Pattern string if the chosen style requires a pattern.","type":"string"}}],"doc":{"description":"Creates a number formatter.","type":"NumberFormatter"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"Locale in which the number would be formatted (locale name, e.g. en_CA).","type":"string"}},{"kind":128,"name":"$style","modifiers":0,"doc":{"description":"Style of the formatting, one of the format style constants. If NumberFormatter::PATTERN_DECIMAL or NumberFormatter::PATTERN_RULEBASED is passed then the number format is opened using the given pattern, which must conform to the syntax described in » ICU DecimalFormat documentation or » ICU RuleBasedNumberFormat documentation, respectively.","type":"int"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Pattern string if the chosen style requires a pattern.","type":"string"}}],"doc":{"description":"Creates a number formatter.","type":"public"}},{"kind":32,"name":"parseCurrency","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$currency","modifiers":1024,"doc":{"description":"Parameter to receive the currency name (3-letter ISO 4217 currency code).","type":"string"}},{"kind":128,"name":"$position","modifiers":1024,"doc":{"description":"Offset in the string at which to begin parsing. On return, this value will hold the offset at which parsing ended.","type":"int"}}],"doc":{"description":"Parse a string into a double and a currency using the current formatter.","type":"float"}},{"kind":32,"name":"format","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to format. Can be integer or float, other values will be converted to a numeric value.","type":"number"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The formatting type to use.","type":"int"}}],"doc":{"description":"Format a numeric value according to the formatter rules.","type":"string"}},{"kind":32,"name":"getSymbol","modifiers":1,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Symbol specifier, one of the format symbol constants.","type":"int"}}],"doc":{"description":"Get a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.","type":"string"}},{"kind":32,"name":"setAttribute","modifiers":1,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute specifier - one of the numeric attribute constants.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The attribute value.","type":"int"}}],"doc":{"description":"Set a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.","type":"bool"}},{"kind":32,"name":"getErrorMessage","modifiers":1,"children":[],"doc":{"description":"Get error message from the last function performed by the formatter.","type":"string"}},{"kind":32,"name":"getAttribute","modifiers":1,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute specifier - one of the numeric attribute constants.","type":"int"}}],"doc":{"description":"Get a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.","type":"int"}},{"kind":32,"name":"setSymbol","modifiers":1,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Symbol specifier, one of the format symbol constants.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Text for the symbol.","type":"string"}}],"doc":{"description":"Set a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.","type":"bool"}},{"kind":32,"name":"getPattern","modifiers":1,"children":[],"doc":{"description":"Extract pattern used by the formatter.","type":"string"}},{"kind":32,"name":"parse","modifiers":1,"children":[{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The formatting type to use. By default, NumberFormatter::TYPE_DOUBLE is used.","type":"int"}},{"kind":128,"name":"$position","modifiers":1024,"doc":{"description":"Offset in the string at which to begin parsing. On return, this value will hold the offset at which parsing ended.","type":"int"}}],"doc":{"description":"Parse a string into a number using the current formatter rules.","type":"mixed"}},{"kind":32,"name":"getTextAttribute","modifiers":1,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute specifier - one of the text attribute constants.","type":"int"}}],"doc":{"description":"Get a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.","type":"string"}},{"kind":32,"name":"setPattern","modifiers":1,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Pattern in syntax described in » ICU DecimalFormat documentation.","type":"string"}}],"doc":{"description":"Set the pattern used by the formatter. Can not be used on a rule-based formatter.","type":"bool"}},{"kind":32,"name":"getErrorCode","modifiers":1,"children":[],"doc":{"description":"Get error code from the last function performed by the formatter.","type":"int"}}],"doc":{"description":"Programs store and operate on numbers using a locale-independent binary representation. When displaying or printing a number it is converted to a locale-specific string. For example, the number 12345.67 is \"12,345.67\" in the US, \"12 345,67\" in France and \"12.345,67\" in Germany."}},{"kind":1,"name":"SplQueue","modifiers":0,"associated":[{"kind":1,"name":"SplDoublyLinkedList"},{"kind":2,"name":"Iterator"},{"kind":2,"name":"ArrayAccess"},{"kind":2,"name":"Countable"}],"children":[{"kind":32,"name":"enqueue","modifiers":0,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to enqueue.","type":"mixed"}}],"doc":{"description":"Enqueues value at the end of the queue.","type":"void"}},{"kind":32,"name":"setIteratorMode","modifiers":0,"description":"","children":[{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"There is only one iteration parameter you can modify. The behavior of the iterator (either one or the other): SplDoublyLinkedList::IT_MODE_DELETE (Elements are deleted by the iterator) SplDoublyLinkedList::IT_MODE_KEEP (Elements are traversed by the iterator) The default mode is: SplDoublyLinkedList::IT_MODE_FIFO | SplDoublyLinkedList::IT_MODE_KEEP Warning The direction of iteration can not be changed for SplQueues, it is always SplDoublyLinkedList::IT_MODE_FIFO.","type":"int"}}],"doc":{"type":"void"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"This constructs a new empty queue.","type":"SplQueue"}},{"kind":32,"name":"dequeue","modifiers":0,"children":[],"doc":{"description":"Dequeues value from the top of the queue.","type":"mixed"}}],"doc":{"description":"The SplQueue class provides the main functionalities of a queue implemented using a doubly linked list."}},{"kind":1,"name":"SQLite3","modifiers":0,"associated":[],"children":[{"kind":32,"name":"loadExtension","modifiers":1,"children":[{"kind":128,"name":"$shared_library","modifiers":0,"doc":{"description":"The name of the library to load. The library must be located in the directory specified in the configure option sqlite3.extension_dir.","type":"string"}}],"doc":{"description":"Attempts to load an SQLite extension library.","type":"bool"}},{"kind":32,"name":"busyTimeout","modifiers":1,"children":[{"kind":128,"name":"$msecs","modifiers":0,"doc":{"description":"The milliseconds to sleep. Setting this value to a value less than or equal to zero, will turn off an already set timeout handler.","type":"int"}}],"doc":{"description":"Sets a busy handler that will sleep until the database is not locked or the timeout is reached.","type":"bool"}},{"kind":32,"name":"escapeString","modifiers":32,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The string to be escaped.","type":"string"}}],"doc":{"description":"Returns a string that has been properly escaped for safe inclusion in an SQL statement.","type":"string"}},{"kind":32,"name":"createCollation","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the SQL collating function to be created or redefined","type":"string"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The name of a PHP function or user-defined function to apply as a callback, defining the behavior of the collation. It should accept two strings and return as strcmp() does, i.e. it should return -1, 1, or 0 if the first string sorts before, sorts after, or is equal to the second.","type":"callable"}}],"doc":{"description":"Registers a PHP function or user-defined function for use as a collating function within SQL statements.","type":"bool"}},{"kind":32,"name":"createFunction","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the SQL function to be created or redefined.","type":"string"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The name of a PHP function or user-defined function to apply as a callback, defining the behavior of the SQL function.","type":"mixed"}},{"kind":128,"name":"$argument_count","modifiers":0,"value":"-1","doc":{"description":"The number of arguments that the SQL function takes. If this parameter is -1, then the SQL function may take any number of arguments.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"A bitwise conjunction of flags. Currently, only SQLITE3_DETERMINISTIC is supported, which specifies that the function always returns the same result given the same inputs within a single SQL statement.","type":"int"}}],"doc":{"description":"Registers a PHP function or user-defined function for use as an SQL scalar function for use within SQL statements.","type":"bool"}},{"kind":32,"name":"open","modifiers":1,"children":[{"kind":128,"name":"$table","modifiers":0,"doc":{"description":"The table name.","type":"string"}},{"kind":128,"name":"$column","modifiers":0,"doc":{"description":"The column name.","type":"string"}},{"kind":128,"name":"$rowid","modifiers":0,"doc":{"description":"The row ID.","type":"int"}},{"kind":128,"name":"$dbname","modifiers":0,"value":"\"main\"","doc":{"description":"The symbolic name of the DB","type":"string"}}],"doc":{"description":"Opens a stream resource to read a BLOB, which would be selected by:","type":"resource"}},{"kind":32,"name":"lastInsertRowID","modifiers":1,"children":[],"doc":{"description":"Returns the row ID of the most recent INSERT into the database.","type":"int"}},{"kind":32,"name":"version","modifiers":32,"children":[],"doc":{"description":"Returns the SQLite3 library version as a string constant and as a number.","type":"array"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the SQLite database, or :memory: to use in-memory database.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"SQLITE3_OPEN_READWRITE","doc":{"description":"Optional flags used to determine how to open the SQLite database. By default, open uses SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE. SQLITE3_OPEN_READONLY: Open the database for reading only. SQLITE3_OPEN_READWRITE: Open the database for reading and writing. SQLITE3_OPEN_CREATE: Create the database if it does not exist.","type":"int"}},{"kind":128,"name":"$encryption_key","modifiers":0,"value":"null","doc":{"description":"An optional encryption key used when encrypting and decrypting an SQLite database. If the SQLite encryption module is not installed, this parameter will have no effect.","type":"string"}}],"doc":{"description":"Instantiates an SQLite3 object and opens a connection to an SQLite 3 database. If the build includes encryption, then it will attempt to use the key.","type":"public"}},{"kind":32,"name":"query","modifiers":1,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The SQL query to execute.","type":"string"}}],"doc":{"description":"Executes an SQL query, returning an SQLite3Result object if the query returns results.","type":"SQLite3Result"}},{"kind":32,"name":"exec","modifiers":1,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The SQL query to execute (typically an INSERT, UPDATE, or DELETE query).","type":"string"}}],"doc":{"description":"Executes a result-less query against a given database.","type":"bool"}},{"kind":32,"name":"lastErrorCode","modifiers":1,"children":[],"doc":{"description":"Returns the numeric result code of the most recent failed SQLite request.","type":"int"}},{"kind":32,"name":"changes","modifiers":1,"children":[],"doc":{"description":"Returns the number of database rows that were changed (or inserted or deleted) by the most recent SQL statement.","type":"int"}},{"kind":32,"name":"lastErrorMsg","modifiers":1,"children":[],"doc":{"description":"Returns English text describing the most recent failed SQLite request.","type":"string"}},{"kind":32,"name":"close","modifiers":1,"children":[],"doc":{"description":"Closes the database connection.","type":"bool"}},{"kind":32,"name":"createAggregate","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Name of the SQL aggregate to be created or redefined.","type":"string"}},{"kind":128,"name":"$step_callback","modifiers":0,"doc":{"description":"The name of a PHP function or user-defined function to apply as a callback for every item in the aggregate.","type":"mixed"}},{"kind":128,"name":"$final_callback","modifiers":0,"doc":{"description":"The name of a PHP function or user-defined function to apply as a callback at the end of the aggregate data.","type":"mixed"}},{"kind":128,"name":"$argument_count","modifiers":0,"value":"-1","doc":{"description":"The number of arguments that the SQL aggregate takes. If this parameter is negative, then the SQL aggregate may take any number of arguments.","type":"int"}}],"doc":{"description":"Registers a PHP function or user-defined function for use as an SQL aggregate function for use within SQL statements.","type":"bool"}},{"kind":32,"name":"querySingle","modifiers":1,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The SQL query to execute.","type":"string"}},{"kind":128,"name":"$entire_row","modifiers":0,"value":"false","doc":{"description":"By default, querySingle() returns the value of the first column returned by the query. If entire_row is TRUE, then it returns an array of the entire first row.","type":"bool"}}],"doc":{"description":"Executes a query and returns a single result.","type":"mixed"}},{"kind":32,"name":"enableExceptions","modifiers":0,"children":[{"kind":128,"name":"$enableExceptions","modifiers":0,"description":"","value":"false","doc":{"type":"bool"}}],"doc":{"description":"Controls whether the SQLite3 instance will throw exceptions or warnings on error.","type":"bool"}},{"kind":32,"name":"open","modifiers":1,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the SQLite database, or :memory: to use in-memory database.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"SQLITE3_OPEN_READWRITE","doc":{"description":"Optional flags used to determine how to open the SQLite database. By default, open uses SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE. SQLITE3_OPEN_READONLY: Open the database for reading only. SQLITE3_OPEN_READWRITE: Open the database for reading and writing. SQLITE3_OPEN_CREATE: Create the database if it does not exist.","type":"int"}},{"kind":128,"name":"$encryption_key","modifiers":0,"value":"null","doc":{"description":"An optional encryption key used when encrypting and decrypting an SQLite database. If the SQLite encryption module is not installed, this parameter will have no effect.","type":"string"}}],"doc":{"description":"Opens an SQLite 3 Database. If the build includes encryption, then it will attempt to use the key.","type":"void"}},{"kind":32,"name":"prepare","modifiers":1,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The SQL query to prepare.","type":"string"}}],"doc":{"description":"Prepares an SQL statement for execution and returns an SQLite3Stmt object.","type":"SQLite3Stmt"}}],"doc":{"description":"A class that interfaces SQLite 3 databases."}},{"kind":8,"name":"LIBXML_BIGLINES","doc":{"description":"Allows line numbers greater than 65535 to be reported correctly. Note: Only available as of PHP 7.0.0 with Libxml >= 2.9.0"}},{"kind":8,"name":"LIBXML_COMPACT","doc":{"description":"Activate small nodes allocation optimization. This may speed up your application without needing to change the code. Note: Only available in Libxml >= 2.6.21"}},{"kind":8,"name":"LIBXML_DTDATTR","doc":{"description":"Default DTD attributes"}},{"kind":8,"name":"LIBXML_DTDLOAD","doc":{"description":"Load the external subset"}},{"kind":8,"name":"LIBXML_DTDVALID","doc":{"description":"Validate with the DTD"}},{"kind":8,"name":"LIBXML_HTML_NOIMPLIED","doc":{"description":"Sets HTML_PARSE_NOIMPLIED flag, which turns off the automatic adding of implied html/body... elements. Note: Only available in Libxml >= 2.7.7 (as of PHP >= 5.4.0)"}},{"kind":8,"name":"LIBXML_HTML_NODEFDTD","doc":{"description":"Sets HTML_PARSE_NODEFDTD flag, which prevents a default doctype being added when one is not found. Note: Only available in Libxml >= 2.7.8 (as of PHP >= 5.4.0)"}},{"kind":8,"name":"LIBXML_NOBLANKS","doc":{"description":"Remove blank nodes"}},{"kind":8,"name":"LIBXML_NOCDATA","doc":{"description":"Merge CDATA as text nodes"}},{"kind":8,"name":"LIBXML_NOEMPTYTAG","doc":{"description":"Expand empty tags (e.g. <br/> to <br></br>) Note: This option is currently just available in the DOMDocument::save and DOMDocument::saveXML functions."}},{"kind":8,"name":"LIBXML_NOENT","doc":{"description":"Substitute entities"}},{"kind":8,"name":"LIBXML_NOERROR","doc":{"description":"Suppress error reports"}},{"kind":8,"name":"LIBXML_NONET","doc":{"description":"Disable network access when loading documents"}},{"kind":8,"name":"LIBXML_NOWARNING","doc":{"description":"Suppress warning reports"}},{"kind":8,"name":"LIBXML_NOXMLDECL","doc":{"description":"Drop the XML declaration when saving a document Note: Only available in Libxml >= 2.6.21"}},{"kind":8,"name":"LIBXML_NSCLEAN","doc":{"description":"Remove redundant namespace declarations"}},{"kind":8,"name":"LIBXML_PARSEHUGE","doc":{"description":"Sets XML_PARSE_HUGE flag, which relaxes any hardcoded limit from the parser. This affects limits like maximum depth of a document or the entity recursion, as well as limits of the size of text nodes. Note: Only available in Libxml >= 2.7.0 (as of PHP >= 5.3.2 and PHP >= 5.2.12)"}},{"kind":8,"name":"LIBXML_PEDANTIC","doc":{"description":"Sets XML_PARSE_PEDANTIC flag, which enables pedantic error reporting. Note: Available as of PHP >= 5.4.0"}},{"kind":8,"name":"LIBXML_XINCLUDE","doc":{"description":"Implement XInclude substitution"}},{"kind":8,"name":"LIBXML_ERR_ERROR","doc":{"description":"A recoverable error"}},{"kind":8,"name":"LIBXML_ERR_FATAL","doc":{"description":"A fatal error"}},{"kind":8,"name":"LIBXML_ERR_NONE","doc":{"description":"No errors"}},{"kind":8,"name":"LIBXML_ERR_WARNING","doc":{"description":"A simple warning"}},{"kind":8,"name":"LIBXML_VERSION","doc":{"description":"libxml version like 20605 or 20617"}},{"kind":8,"name":"LIBXML_DOTTED_VERSION","doc":{"description":"libxml version like 2.6.5 or 2.6.17"}},{"kind":8,"name":"LIBXML_SCHEMA_CREATE","doc":{"description":"Create default/fixed value nodes during XSD schema validation Note: Only available in Libxml >= 2.6.14 (as of PHP >= 5.5.2)"}},{"kind":1,"name":"tidy","modifiers":0,"associated":[],"children":[{"kind":32,"name":"html","modifiers":0,"children":[],"doc":{"description":"Returns a tidyNode object starting from the <html> tag of the tidy parse tree.","type":"tidyNode"}},{"kind":32,"name":"getStatus","modifiers":0,"children":[],"doc":{"description":"Returns the status for the specified tidy object.","type":"int"}},{"kind":32,"name":"getOptDoc","modifiers":0,"children":[{"kind":128,"name":"$optname","modifiers":0,"doc":{"description":"The option name","type":"string"}}],"doc":{"description":"tidy_get_opt_doc() returns the documentation for the given option name.","type":"string"}},{"kind":32,"name":"isXhtml","modifiers":0,"children":[],"doc":{"description":"Tells if the document is a XHTML document.","type":"bool"}},{"kind":32,"name":"isXml","modifiers":0,"children":[],"doc":{"description":"Tells if the document is a generic (non HTML/XHTML) XML document.","type":"bool"}},{"kind":32,"name":"repairFile","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The file to be repaired.","type":"string"}},{"kind":128,"name":"$config","modifiers":0,"doc":{"description":"The config config can be passed either as an array or as a string. If a string is passed, it is interpreted as the name of the configuration file, otherwise, it is interpreted as the options themselves. Check http://tidy.sourceforge.net/docs/quickref.html for an explanation about each option.","type":"mixed"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding parameter sets the encoding for input/output documents. The possible values for encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac, win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"false","doc":{"description":"Search for the file in the include_path.","type":"bool"}}],"doc":{"description":"Repairs the given file and returns it as a string.","type":"string"}},{"kind":32,"name":"cleanRepair","modifiers":0,"children":[],"doc":{"description":"This function cleans and repairs the given tidy object.","type":"bool"}},{"kind":32,"name":"parseString","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The data to be parsed.","type":"string"}},{"kind":128,"name":"$config","modifiers":0,"doc":{"description":"The config config can be passed either as an array or as a string. If a string is passed, it is interpreted as the name of the configuration file, otherwise, it is interpreted as the options themselves. For an explanation about each option, visit » http://tidy.sourceforge.net/docs/quickref.html.","type":"mixed"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding parameter sets the encoding for input/output documents. The possible values for encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac, win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.","type":"string"}}],"doc":{"description":"Parses a document stored in a string.","type":"bool"}},{"kind":32,"name":"repairString","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to be repaired.","type":"string"}},{"kind":128,"name":"$config","modifiers":0,"doc":{"description":"The config config can be passed either as an array or as a string. If a string is passed, it is interpreted as the name of the configuration file, otherwise, it is interpreted as the options themselves. Check » http://tidy.sourceforge.net/docs/quickref.html for an explanation about each option.","type":"mixed"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding parameter sets the encoding for input/output documents. The possible values for encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac, win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.","type":"string"}}],"doc":{"description":"Repairs the given string.","type":"string"}},{"kind":32,"name":"root","modifiers":0,"children":[],"doc":{"description":"Returns a tidyNode object representing the root of the tidy parse tree.","type":"tidyNode"}},{"kind":32,"name":"getConfig","modifiers":0,"children":[],"doc":{"description":"Gets the list of the configuration options in use by the given tidy object.","type":"array"}},{"kind":32,"name":"diagnose","modifiers":0,"children":[],"doc":{"description":"Runs diagnostic tests on the given tidy object, adding some more information about the document in the error buffer.","type":"bool"}},{"kind":32,"name":"getRelease","modifiers":0,"children":[],"doc":{"description":"Gets the release date of the Tidy library.","type":"string"}},{"kind":32,"name":"getOpt","modifiers":0,"children":[{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"You will find a list with each configuration option and their types at: » http://tidy.sourceforge.net/docs/quickref.html.","type":"string"}}],"doc":{"description":"Returns the value of the specified option for the specified tidy object.","type":"mixed"}},{"kind":32,"name":"getHtmlVer","modifiers":0,"children":[],"doc":{"description":"Returns the detected HTML version for the specified tidy object.","type":"int"}},{"kind":32,"name":"body","modifiers":0,"children":[],"doc":{"description":"Returns a tidyNode object starting from the <body> tag of the tidy parse tree.","type":"tidyNode"}},{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"If the filename parameter is given, this function will also read that file and initialize the object with the file, acting like tidy_parse_file().","type":"string"}},{"kind":128,"name":"$config","modifiers":0,"doc":{"description":"The config config can be passed either as an array or as a string. If a string is passed, it is interpreted as the name of the configuration file, otherwise, it is interpreted as the options themselves. For an explanation about each option, visit » http://tidy.sourceforge.net/docs/quickref.html.","type":"mixed"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding parameter sets the encoding for input/output documents. The possible values for encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac, win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"doc":{"description":"Search for the file in the include_path.","type":"bool"}}],"doc":{"description":"Constructs a new tidy object.","type":"tidy"}},{"kind":32,"name":"head","modifiers":0,"children":[],"doc":{"description":"Returns a tidyNode object starting from the <head> tag of the tidy parse tree.","type":"tidyNode"}},{"kind":32,"name":"parseFile","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"If the filename parameter is given, this function will also read that file and initialize the object with the file, acting like tidy_parse_file().","type":"string"}},{"kind":128,"name":"$config","modifiers":0,"doc":{"description":"The config config can be passed either as an array or as a string. If a string is passed, it is interpreted as the name of the configuration file, otherwise, it is interpreted as the options themselves. For an explanation about each option, see » http://tidy.sourceforge.net/docs/quickref.html.","type":"mixed"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding parameter sets the encoding for input/output documents. The possible values for encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac, win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"false","doc":{"description":"Search for the file in the include_path.","type":"bool"}}],"doc":{"description":"Parses the given file.","type":"bool"}}],"doc":{"description":"An HTML node in an HTML file, as detected by tidy."}},{"kind":1,"name":"OutOfRangeException","modifiers":0,"associated":[{"kind":1,"name":"LogicException"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown when an illegal index was requested. This represents errors that should be detected at compile time."}},{"kind":1,"name":"AppendIterator","modifiers":0,"associated":[{"kind":1,"name":"IteratorIterator"},{"kind":2,"name":"OuterIterator"}],"children":[{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"Checks validity of the current element.","type":"bool"}},{"kind":32,"name":"append","modifiers":1,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator to append.","type":"Iterator"}}],"doc":{"description":"Appends an iterator.","type":"void"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"Gets the current value.","type":"mixed"}},{"kind":32,"name":"getIteratorIndex","modifiers":1,"children":[],"doc":{"description":"Gets the index of the current inner iterator.","type":"int"}},{"kind":32,"name":"__construct","modifiers":0,"children":[],"doc":{"description":"Constructs an AppendIterator.","type":"public"}},{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"Get the current key.","type":"scalar"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"Rewind to the first element of the first inner Iterator.","type":"void"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Moves to the next element. If this means to another Iterator then it rewinds that Iterator.","type":"void"}},{"kind":32,"name":"getInnerIterator","modifiers":1,"children":[],"doc":{"description":"This method returns the current inner iterator.","type":"Iterator"}},{"kind":32,"name":"getArrayIterator","modifiers":1,"children":[],"doc":{"description":"This method gets the ArrayIterator that is used to store the iterators added with AppendIterator::append().","type":"ArrayIterator"}}],"doc":{"description":"An Iterator that iterates over several iterators one after the other."}},{"kind":1,"name":"TypeError","modifiers":0,"associated":[{"kind":1,"name":"Error"}],"children":[],"doc":{"description":"There are three scenarios where a TypeError may be thrown. The first is where the argument type being passed to a function does not match its corresponding declared parameter type. The second is where a value being returned from a function does not match the declared function return type. The third is where an invalid number of arguments are passed to a built-in PHP function (strict mode only)."}},{"kind":1,"name":"InfiniteIterator","modifiers":0,"associated":[{"kind":1,"name":"IteratorIterator"},{"kind":2,"name":"OuterIterator"}],"children":[{"kind":32,"name":"__construct","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator to infinitely iterate over.","type":"Iterator"}}],"doc":{"description":"Constructs an InfiniteIterator from an Iterator.","type":"public"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"Moves the inner Iterator forward to its next element if there is one, otherwise rewinds the inner Iterator back to the beginning.","type":"void"}}],"doc":{"description":"The InfiniteIterator allows one to infinitely iterate over an iterator without having to manually rewind the iterator upon reaching its end."}},{"kind":8,"name":"GD_VERSION","doc":{"description":"The GD version PHP was compiled against. (Available as of PHP 5.2.4)"}},{"kind":8,"name":"GD_MAJOR_VERSION","doc":{"description":"The GD major version PHP was compiled against. (Available as of PHP 5.2.4)"}},{"kind":8,"name":"GD_MINOR_VERSION","doc":{"description":"The GD minor version PHP was compiled against. (Available as of PHP 5.2.4)"}},{"kind":8,"name":"GD_RELEASE_VERSION","doc":{"description":"The GD release version PHP was compiled against. (Available as of PHP 5.2.4)"}},{"kind":8,"name":"GD_EXTRA_VERSION","doc":{"description":"The GD \"extra\" version (beta/rc..) PHP was compiled against. (Available as of PHP 5.2.4)"}},{"kind":8,"name":"GD_BUNDLED","doc":{"description":"When the bundled version of GD is used this is 1 otherwise its set to 0."}},{"kind":8,"name":"IMG_BMP","doc":{"description":"Used as a return value by imagetypes()"}},{"kind":8,"name":"IMG_GIF","doc":{"description":"Used as a return value by imagetypes()"}},{"kind":8,"name":"IMG_JPG","doc":{"description":"Used as a return value by imagetypes()"}},{"kind":8,"name":"IMG_JPEG","doc":{"description":"Used as a return value by imagetypes() Note: This constant has the same value as IMG_JPG"}},{"kind":8,"name":"IMG_PNG","doc":{"description":"Used as a return value by imagetypes()"}},{"kind":8,"name":"IMG_WBMP","doc":{"description":"Used as a return value by imagetypes()"}},{"kind":8,"name":"IMG_XPM","doc":{"description":"Used as a return value by imagetypes()"}},{"kind":8,"name":"IMG_WEBP","doc":{"description":"Used as a return value by imagetypes() Available as of PHP 5.6.25 and PHP 7.0.10, respectively."}},{"kind":8,"name":"IMG_COLOR_TILED","doc":{"description":"Special color option which can be used instead of a color allocated with imagecolorallocate() or imagecolorallocatealpha()."}},{"kind":8,"name":"IMG_COLOR_STYLED","doc":{"description":"Special color option which can be used instead of a color allocated with imagecolorallocate() or imagecolorallocatealpha()."}},{"kind":8,"name":"IMG_COLOR_BRUSHED","doc":{"description":"Special color option which can be used instead of a color allocated with imagecolorallocate() or imagecolorallocatealpha()."}},{"kind":8,"name":"IMG_COLOR_STYLEDBRUSHED","doc":{"description":"Special color option which can be used instead of a color allocated with imagecolorallocate() or imagecolorallocatealpha()."}},{"kind":8,"name":"IMG_COLOR_TRANSPARENT","doc":{"description":"Special color option which can be used instead of a color allocated with imagecolorallocate() or imagecolorallocatealpha()."}},{"kind":8,"name":"IMG_AFFINE_TRANSLATE","doc":{"description":"An affine transformation type constant used by the imageaffinematrixget() function."}},{"kind":8,"name":"IMG_AFFINE_SCALE","doc":{"description":"An affine transformation type constant used by the imageaffinematrixget() function."}},{"kind":8,"name":"IMG_AFFINE_ROTATE","doc":{"description":"An affine transformation type constant used by the imageaffinematrixget() function."}},{"kind":8,"name":"IMG_AFFINE_SHEAR_HORIZONTAL","doc":{"description":"An affine transformation type constant used by the imageaffinematrixget() function."}},{"kind":8,"name":"IMG_AFFINE_SHEAR_VERTICAL","doc":{"description":"An affine transformation type constant used by the imageaffinematrixget() function."}},{"kind":8,"name":"IMG_ARC_ROUNDED","doc":{"description":"A style constant used by the imagefilledarc() function. Note: This constant has the same value as IMG_ARC_PIE"}},{"kind":8,"name":"IMG_ARC_PIE","doc":{"description":"A style constant used by the imagefilledarc() function."}},{"kind":8,"name":"IMG_ARC_CHORD","doc":{"description":"A style constant used by the imagefilledarc() function."}},{"kind":8,"name":"IMG_ARC_NOFILL","doc":{"description":"A style constant used by the imagefilledarc() function."}},{"kind":8,"name":"IMG_ARC_EDGED","doc":{"description":"A style constant used by the imagefilledarc() function."}},{"kind":8,"name":"IMG_GD2_RAW","doc":{"description":"A type constant used by the imagegd2() function."}},{"kind":8,"name":"IMG_GD2_COMPRESSED","doc":{"description":"A type constant used by the imagegd2() function."}},{"kind":8,"name":"IMG_EFFECT_REPLACE","doc":{"description":"Alpha blending effect used by the imagelayereffect() function."}},{"kind":8,"name":"IMG_EFFECT_ALPHABLEND","doc":{"description":"Alpha blending effect used by the imagelayereffect() function."}},{"kind":8,"name":"IMG_EFFECT_NORMAL","doc":{"description":"Alpha blending effect used by the imagelayereffect() function."}},{"kind":8,"name":"IMG_EFFECT_OVERLAY","doc":{"description":"Alpha blending effect used by the imagelayereffect() function."}},{"kind":8,"name":"IMG_EFFECT_MULTIPLY","doc":{"description":"Alpha blending effect used by the imagelayereffect() function."}},{"kind":8,"name":"IMG_FILTER_NEGATE","doc":{"description":"Special GD filter used by the imagefilter() function."}},{"kind":8,"name":"IMG_FILTER_GRAYSCALE","doc":{"description":"Special GD filter used by the imagefilter() function."}},{"kind":8,"name":"IMG_FILTER_BRIGHTNESS","doc":{"description":"Special GD filter used by the imagefilter() function."}},{"kind":8,"name":"IMG_FILTER_CONTRAST","doc":{"description":"Special GD filter used by the imagefilter() function."}},{"kind":8,"name":"IMG_FILTER_COLORIZE","doc":{"description":"Special GD filter used by the imagefilter() function."}},{"kind":8,"name":"IMG_FILTER_EDGEDETECT","doc":{"description":"Special GD filter used by the imagefilter() function."}},{"kind":8,"name":"IMG_FILTER_GAUSSIAN_BLUR","doc":{"description":"Special GD filter used by the imagefilter() function."}},{"kind":8,"name":"IMG_FILTER_SELECTIVE_BLUR","doc":{"description":"Special GD filter used by the imagefilter() function."}},{"kind":8,"name":"IMG_FILTER_EMBOSS","doc":{"description":"Special GD filter used by the imagefilter() function."}},{"kind":8,"name":"IMG_FILTER_MEAN_REMOVAL","doc":{"description":"Special GD filter used by the imagefilter() function."}},{"kind":8,"name":"IMG_FILTER_SMOOTH","doc":{"description":"Special GD filter used by the imagefilter() function."}},{"kind":8,"name":"IMG_FILTER_PIXELATE","doc":{"description":"Special GD filter used by the imagefilter() function. (Available as of PHP 5.3.0)"}},{"kind":8,"name":"IMAGETYPE_GIF","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_JPEG","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_JPEG2000","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_PNG","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_SWF","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_PSD","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_BMP","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_WBMP","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_XBM","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_TIFF_II","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_TIFF_MM","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_IFF","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_JB2","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_JPC","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_JP2","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_JPX","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_SWC","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions."}},{"kind":8,"name":"IMAGETYPE_ICO","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions. (Available as of PHP 5.3.0)"}},{"kind":8,"name":"IMAGETYPE_WEBP","doc":{"description":"Image type constant used by the image_type_to_mime_type() and image_type_to_extension() functions. (Available as of PHP 7.1.0)"}},{"kind":8,"name":"PNG_NO_FILTER","doc":{"description":"A special PNG filter, used by the imagepng() function."}},{"kind":8,"name":"PNG_FILTER_NONE","doc":{"description":"A special PNG filter, used by the imagepng() function."}},{"kind":8,"name":"PNG_FILTER_SUB","doc":{"description":"A special PNG filter, used by the imagepng() function."}},{"kind":8,"name":"PNG_FILTER_UP","doc":{"description":"A special PNG filter, used by the imagepng() function."}},{"kind":8,"name":"PNG_FILTER_AVG","doc":{"description":"A special PNG filter, used by the imagepng() function."}},{"kind":8,"name":"PNG_FILTER_PAETH","doc":{"description":"A special PNG filter, used by the imagepng() function."}},{"kind":8,"name":"PNG_ALL_FILTERS","doc":{"description":"A special PNG filter, used by the imagepng() function."}},{"kind":8,"name":"IMG_FLIP_VERTICAL","doc":{"description":"Used together with imageflip(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_FLIP_HORIZONTAL","doc":{"description":"Used together with imageflip(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_FLIP_BOTH","doc":{"description":"Used together with imageflip(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_BELL","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_BESSEL","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_BILINEAR_FIXED","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_BICUBIC","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_BICUBIC_FIXED","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_BLACKMAN","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_BOX","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_BSPLINE","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_CATMULLROM","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_GAUSSIAN","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_GENERALIZED_CUBIC","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_HERMITE","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_HAMMING","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_HANNING","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_MITCHELL","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_POWER","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_QUADRATIC","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_SINC","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_NEAREST_NEIGHBOUR","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_WEIGHTED4","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"IMG_TRIANGLE","doc":{"description":"Used together with imagesetinterpolation(), available as of PHP 5.5.0."}},{"kind":8,"name":"MSSQL_ASSOC","doc":{"description":"Return an associative array. Used on mssql_fetch_array()'s result_type parameter."}},{"kind":8,"name":"MSSQL_NUM","doc":{"description":"Return an array with numeric keys. Used on mssql_fetch_array()'s result_type parameter."}},{"kind":8,"name":"MSSQL_BOTH","doc":{"description":"Return an array with both numeric keys and keys with their field name. This is the default value for mssql_fetch_array()'s result_type parameter."}},{"kind":8,"name":"SQLTEXT","doc":{"description":"Indicates the 'TEXT' type in MSSQL, used by mssql_bind()'s type parameter."}},{"kind":8,"name":"SQLVARCHAR","doc":{"description":"Indicates the 'VARCHAR' type in MSSQL, used by mssql_bind()'s type parameter."}},{"kind":8,"name":"SQLCHAR","doc":{"description":"Indicates the 'CHAR' type in MSSQL, used by mssql_bind()'s type parameter."}},{"kind":8,"name":"SQLINT1","doc":{"description":"Represents one byte, with a range of -128 to 127."}},{"kind":8,"name":"SQLINT2","doc":{"description":"Represents two bytes, with a range of -32768 to 32767."}},{"kind":8,"name":"SQLINT4","doc":{"description":"Represents four bytes, with a range of -2147483648 to 2147483647."}},{"kind":8,"name":"SQLBIT","doc":{"description":"Indicates the 'BIT' type in MSSQL, used by mssql_bind()'s type parameter."}},{"kind":8,"name":"SQLFLT4","doc":{"description":"Represents an four byte float."}},{"kind":8,"name":"SQLFLT8","doc":{"description":"Represents an eight byte float."}},{"kind":1,"name":"SimpleXMLIterator","modifiers":0,"associated":[{"kind":1,"name":"SimpleXMLElement"},{"kind":2,"name":"RecursiveIterator"},{"kind":2,"name":"Countable"}],"children":[{"kind":32,"name":"key","modifiers":1,"children":[],"doc":{"description":"This method gets the XML tag name of the current element.","type":"mixed"}},{"kind":32,"name":"valid","modifiers":1,"children":[],"doc":{"description":"This method checks if the current element is valid after calls to SimpleXMLIterator::rewind() or SimpleXMLIterator::next().","type":"bool"}},{"kind":32,"name":"hasChildren","modifiers":1,"children":[],"doc":{"description":"This method checks whether the current SimpleXMLIterator element has sub-elements.","type":"bool"}},{"kind":32,"name":"current","modifiers":1,"children":[],"doc":{"description":"This method returns the current element as a SimpleXMLIterator object or NULL.","type":"mixed"}},{"kind":32,"name":"next","modifiers":1,"children":[],"doc":{"description":"This method moves the SimpleXMLIterator to the next element.","type":"void"}},{"kind":32,"name":"getChildren","modifiers":1,"children":[],"doc":{"description":"This method returns a SimpleXMLIterator object containing sub-elements of the current SimpleXMLIterator element.","type":"SimpleXMLIterator"}},{"kind":32,"name":"rewind","modifiers":1,"children":[],"doc":{"description":"This method rewinds the SimpleXMLIterator to the first element.","type":"void"}}],"doc":{"description":"The SimpleXMLIterator provides recursive iteration over all nodes of a SimpleXMLElement object."}},{"kind":1,"name":"LengthException","modifiers":0,"associated":[{"kind":1,"name":"LogicException"}],"children":[{"kind":16,"name":"$message","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$code","modifiers":2,"description":"","doc":{"type":"int"}},{"kind":16,"name":"$file","modifiers":2,"description":"","doc":{"type":"string"}},{"kind":16,"name":"$line","modifiers":2,"description":"","doc":{"type":"int"}}],"doc":{"description":"Exception thrown if a length is invalid."}},{"kind":64,"name":"pg_free_result","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}}],"doc":{"description":"pg_free_result() frees the memory and data associated with the specified PostgreSQL query result resource.","type":"bool"}},{"kind":64,"name":"intlcal_get_greatest_minimum","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Returns the largest local minimum for a field. This should be a value larger or equal to that returned by IntlCalendar::getActualMinimum(), which is in its turn larger or equal to that returned by IntlCalendar::getMinimum(). All these three functions return the same value for the Gregorian calendar.","type":"int"}},{"kind":64,"name":"intlcal_get_repeated_wall_time_option","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}}],"doc":{"description":"Gets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is IntlCalendar::WALLTIME_LAST.","type":"int"}},{"kind":64,"name":"sybase_connect","modifiers":0,"description":"","children":[{"kind":128,"name":"$servername","modifiers":0,"doc":{"description":"The servername argument has to be a valid servername that is defined in the 'interfaces' file.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"Sybase user name","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"Password associated with username.","type":"string"}},{"kind":128,"name":"$charset","modifiers":0,"doc":{"description":"Specifies the charset for the connection","type":"string"}},{"kind":128,"name":"$appname","modifiers":0,"doc":{"description":"Specifies an appname for the Sybase connection. This allow you to make separate connections in the same script to the same database. This may come handy when you have started a transaction in your current connection, and you need to be able to do a separate query which cannot be performed inside this transaction.","type":"string"}},{"kind":128,"name":"$new","modifiers":0,"value":"false","doc":{"description":"Whether to open a new connection or use the existing one.","type":"bool"}}],"doc":{"type":"resource"}},{"kind":64,"name":"umask","modifiers":0,"children":[{"kind":128,"name":"$mask","modifiers":0,"doc":{"description":"The new umask.","type":"int"}}],"doc":{"description":"umask() sets PHP's umask to mask & 0777 and returns the old umask. When PHP is being used as a server module, the umask is restored when each request is finished.","type":"int"}},{"kind":64,"name":"msql_db_query","modifiers":0,"children":[{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The name of the mSQL database.","type":"string"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The SQL query.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"The mSQL connection. If not specified, the last link opened by msql_connect() is assumed. If no such link is found, the function will try to establish a link as if msql_connect() was called, and use it.","type":"resource"}}],"doc":{"description":"msql_db_query() selects a database and executes a query on it.","type":"resource"}},{"kind":64,"name":"cyrus_connect","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The Cyrus IMAP host name.","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"doc":{"description":"The port number.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Connects to a Cyrus IMAP server.","type":"resource"}},{"kind":64,"name":"get_include_path","modifiers":0,"description":"","children":[],"doc":{"type":"string"}},{"kind":64,"name":"imap_8bit","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The 8bit string to convert","type":"string"}}],"doc":{"description":"Convert an 8bit string to a quoted-printable string (according to » RFC2045, section 6.7).","type":"string"}},{"kind":64,"name":"mysql_errno","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"mcrypt_enc_self_test","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"strftime","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The following characters are recognized in the format parameter string format Description Example returned values Day --- --- %a An abbreviated textual representation of the day Sun through Sat %A A full textual representation of the day Sunday through Saturday %d Two-digit day of the month (with leading zeros) 01 to 31 %e Day of the month, with a space preceding single digits. Not implemented as described on Windows. See below for more information. 1 to 31 %j Day of the year, 3 digits with leading zeros 001 to 366 %u ISO-8601 numeric representation of the day of the week 1 (for Monday) through 7 (for Sunday) %w Numeric representation of the day of the week 0 (for Sunday) through 6 (for Saturday) Week --- --- %U Week number of the given year, starting with the first Sunday as the first week 13 (for the 13th full week of the year) %V ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week 01 through 53 (where 53 accounts for an overlapping week) %W A numeric representation of the week of the year, starting with the first Monday as the first week 46 (for the 46th week of the year beginning with a Monday) Month --- --- %b Abbreviated month name, based on the locale Jan through Dec %B Full month name, based on the locale January through December %h Abbreviated month name, based on the locale (an alias of %b) Jan through Dec %m Two digit representation of the month 01 (for January) through 12 (for December) Year --- --- %C Two digit representation of the century (year divided by 100, truncated to an integer) 19 for the 20th Century %g Two digit representation of the year going by ISO-8601:1988 standards (see %V) Example: 09 for the week of January 6, 2009 %G The full four-digit version of %g Example: 2008 for the week of January 3, 2009 %y Two digit representation of the year Example: 09 for 2009, 79 for 1979 %Y Four digit representation for the year Example: 2038 Time --- --- %H Two digit representation of the hour in 24-hour format 00 through 23 %k Hour in 24-hour format, with a space preceding single digits 0 through 23 %I Two digit representation of the hour in 12-hour format 01 through 12 %l (lower-case 'L') Hour in 12-hour format, with a space preceding single digits 1 through 12 %M Two digit representation of the minute 00 through 59 %p UPPER-CASE 'AM' or 'PM' based on the given time Example: AM for 00:31, PM for 22:23 %P lower-case 'am' or 'pm' based on the given time Example: am for 00:31, pm for 22:23 %r Same as \"%I:%M:%S %p\" Example: 09:34:17 PM for 21:34:17 %R Same as \"%H:%M\" Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM %S Two digit representation of the second 00 through 59 %T Same as \"%H:%M:%S\" Example: 21:34:17 for 09:34:17 PM %X Preferred time representation based on locale, without the date Example: 03:59:16 or 15:59:16 %z The time zone offset. Not implemented as described on Windows. See below for more information. Example: -0500 for US Eastern Time %Z The time zone abbreviation. Not implemented as described on Windows. See below for more information. Example: EST for Eastern Time Time and Date Stamps --- --- %c Preferred date and time stamp based on locale Example: Tue Feb 5 00:45:10 2009 for February 5, 2009 at 12:45:10 AM %D Same as \"%m/%d/%y\" Example: 02/05/09 for February 5, 2009 %F Same as \"%Y-%m-%d\" (commonly used in database datestamps) Example: 2009-02-05 for February 5, 2009 %s Unix Epoch Time timestamp (same as the time() function) Example: 305815200 for September 10, 1979 08:40:00 AM %x Preferred date representation based on locale, without the time Example: 02/05/09 for February 5, 2009 Miscellaneous --- --- %n A newline character (\"\\n\") --- %t A Tab character (\"\\t\") --- %% A literal percentage character (\"%\") --- Maximum length of this parameter is 1023 characters. Warning Contrary to ISO-9899:1999, Sun Solaris starts with Sunday as 1. As a result, %u may not function as described in this manual. Warning Windows only: The %e modifier is not supported in the Windows implementation of this function. To achieve this value, the %#d modifier can be used instead. The example below illustrates how to write a cross platform compatible function. The %z and %Z modifiers both return the time zone name instead of the offset or abbreviation. Warning Mac OS X only: The %P modifier is not supported in the Mac OS X implementation of this function.","type":"string"}},{"kind":128,"name":"$timestamp","modifiers":0,"value":"time()","doc":{"description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().","type":"int"}}],"doc":{"description":"Format the time and/or date according to locale settings. Month and weekday names and other language-dependent strings respect the current locale set with setlocale().","type":"string"}},{"kind":64,"name":"mb_substr","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to extract the substring from.","type":"string"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"If start is non-negative, the returned string will start at the start'th position in str, counting from zero. For instance, in the string 'abcdef', the character at position 0 is 'a', the character at position 2 is 'c', and so forth. If start is negative, the returned string will start at the start'th character from the end of str.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"value":"NULL","doc":{"description":"Maximum number of characters to use from str. If omitted or NULL is passed, extract all characters to the end of the string.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Performs a multi-byte safe substr() operation based on number of characters. Position is counted from the beginning of str. First character's position is 0. Second character position is 1, and so on.","type":"string"}},{"kind":64,"name":"in_array","modifiers":0,"children":[{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The searched value. Note: If needle is a string, the comparison is done in a case-sensitive manner.","type":"mixed"}},{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The array.","type":"array"}},{"kind":128,"name":"$strict","modifiers":0,"value":"FALSE","doc":{"description":"If the third parameter strict is set to TRUE then the in_array() function will also check the types of the needle in the haystack.","type":"bool"}}],"doc":{"description":"Searches haystack for needle using loose comparison unless strict is set.","type":"bool"}},{"kind":64,"name":"ob_end_flush","modifiers":0,"children":[],"doc":{"description":"This function will send the contents of the topmost output buffer (if any) and turn this output buffer off. If you want to further process the buffer's contents you have to call ob_get_contents() before ob_end_flush() as the buffer contents are discarded after ob_end_flush() is called.","type":"bool"}},{"kind":64,"name":"com_get_active_object","modifiers":0,"children":[{"kind":128,"name":"$progid","modifiers":0,"doc":{"description":"progid must be either the ProgID or CLSID for the object that you want to access (for example Word.Application).","type":"string"}},{"kind":128,"name":"$code_page","modifiers":0,"doc":{"description":"Acts in precisely the same way that it does for the COM class.","type":"int"}}],"doc":{"description":"com_get_active_object() is similar to creating a new instance of a COM object, except that it will only return an object to your script if the object is already running. OLE applications use something known as the \"Running Object Table\" to allow well-known applications to be launched only once; this function exposes the COM library function GetActiveObject() to get a handle on a running instance.","type":"variant"}},{"kind":64,"name":"readline_add_history","modifiers":0,"children":[{"kind":128,"name":"$line","modifiers":0,"doc":{"description":"The line to be added in the history.","type":"string"}}],"doc":{"description":"This function adds a line to the command line history.","type":"bool"}},{"kind":64,"name":"oci_set_prefetch","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI8 statement identifier created by oci_parse() and executed by oci_execute(), or a REF CURSOR statement identifier.","type":"resource"}},{"kind":128,"name":"$rows","modifiers":0,"doc":{"description":"The number of rows to be prefetched, >= 0","type":"int"}}],"doc":{"description":"Sets the number of rows to be buffered by the Oracle Client libraries after a successful query call to oci_execute() and for each subsequent internal fetch request to the database. For queries returning a large number of rows, performance can be significantly improved by increasing the prefetch count above the default oci8.default_prefetch value.","type":"bool"}},{"kind":64,"name":"gmp_intval","modifiers":0,"children":[{"kind":128,"name":"$gmpnumber","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"This function converts GMP number into native PHP integers.","type":"int"}},{"kind":64,"name":"mysqli_reap_async_query","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Get result from async query. Available only with mysqlnd.","type":"mysqli_result"}},{"kind":64,"name":"imagecolorstotal","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatefromgif().","type":"resource"}}],"doc":{"description":"Returns the number of colors in an image palette.","type":"int"}},{"kind":64,"name":"fbsql_db_query","modifiers":0,"children":[{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The database to be selected.","type":"string"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The SQL query to be executed. Note: The query string shall always end with a semicolon.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Selects a database and executes a query on it.","type":"resource"}},{"kind":64,"name":"shm_remove","modifiers":0,"children":[{"kind":128,"name":"$shm_identifier","modifiers":0,"doc":{"description":"The shared memory identifier as returned by shm_attach()","type":"resource"}}],"doc":{"description":"shm_remove() removes the shared memory shm_identifier. All data will be destroyed.","type":"bool"}},{"kind":64,"name":"class_exists","modifiers":0,"children":[{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"The class name. The name is matched in a case-insensitive manner.","type":"string"}},{"kind":128,"name":"$autoload","modifiers":0,"value":"true","doc":{"description":"Whether or not to call __autoload by default.","type":"bool"}}],"doc":{"description":"This function checks whether or not the given class has been defined.","type":"bool"}},{"kind":64,"name":"get_called_class","modifiers":0,"children":[],"doc":{"description":"Gets the name of the class the static method is called in.","type":"string"}},{"kind":64,"name":"mysql_list_fields","modifiers":0,"description":"","children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The name of the database that's being queried.","type":"string"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"The name of the table that's being queried.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"resource"}},{"kind":64,"name":"number_format","modifiers":0,"children":[{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"The number being formatted.","type":"float"}},{"kind":128,"name":"$decimals","modifiers":0,"value":"0","doc":{"description":"Sets the number of decimal points.","type":"int"}},{"kind":128,"name":"$dec_point","modifiers":0,"value":"\".\"","doc":{"description":"Sets the separator for the decimal point.","type":"string"}},{"kind":128,"name":"$thousands_sep","modifiers":0,"value":"\",\"","doc":{"description":"Sets the thousands separator.","type":"string"}}],"doc":{"description":"This function accepts either one, two, or four parameters (not three):","type":"string"}},{"kind":64,"name":"sql_regcase","modifiers":0,"description":"","children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"printf","modifiers":0,"description":"","children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"See sprintf() for a description of format.","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"type":"int"}},{"kind":64,"name":"hash_equals","modifiers":0,"children":[{"kind":128,"name":"$known_string","modifiers":0,"doc":{"description":"The string of known length to compare against","type":"string"}},{"kind":128,"name":"$user_string","modifiers":0,"doc":{"description":"The user-supplied string","type":"string"}}],"doc":{"description":"Compares two strings using the same time whether they're equal or not.","type":"bool"}},{"kind":64,"name":"oci_fetch_assoc","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI8 statement identifier created by oci_parse() and executed by oci_execute(), or a REF CURSOR statement identifier.","type":"resource"}}],"doc":{"description":"Returns an associative array containing the next result-set row of a query. Each array entry corresponds to a column of the row. This function is typically called in a loop until it returns FALSE, indicating no more rows exist.","type":"array"}},{"kind":64,"name":"spl_autoload_unregister","modifiers":0,"children":[{"kind":128,"name":"$autoload_function","modifiers":0,"doc":{"description":"The autoload function being unregistered.","type":"mixed"}}],"doc":{"description":"Removes a function from the autoload queue. If the queue is activated and empty after removing the given function then it will be deactivated.","type":"bool"}},{"kind":64,"name":"readline","modifiers":0,"children":[{"kind":128,"name":"$prompt","modifiers":0,"doc":{"description":"You may specify a string with which to prompt the user.","type":"string"}}],"doc":{"description":"Reads a single line from the user. You must add this line to the history yourself using readline_add_history().","type":"string"}},{"kind":64,"name":"locale_lookup","modifiers":0,"children":[{"kind":128,"name":"$langtag","modifiers":0,"doc":{"description":"An array containing a list of language tags to compare to locale. Maximum 100 items allowed.","type":"array"}},{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to use as the language range when matching.","type":"string"}},{"kind":128,"name":"$canonicalize","modifiers":0,"value":"false","doc":{"description":"If true, the arguments will be converted to canonical form before matching.","type":"bool"}},{"kind":128,"name":"$default","modifiers":0,"doc":{"description":"The locale to use if no match is found.","type":"string"}}],"doc":{"description":"Searches the items in langtag for the best match to the language range specified in locale according to RFC 4647's lookup algorithm.","type":"string"}},{"kind":64,"name":"is_executable","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Tells whether the filename is executable.","type":"bool"}},{"kind":64,"name":"gzgets","modifiers":0,"children":[{"kind":128,"name":"$zp","modifiers":0,"doc":{"description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The length of data to get.","type":"int"}}],"doc":{"description":"Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes have been read, on a newline, or on EOF (whichever comes first).","type":"string"}},{"kind":64,"name":"imap_utf7_decode","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"A modified UTF-7 encoding string, as defined in » RFC 2060, section 5.1.3 (original UTF-7 was defined in » RFC1642).","type":"string"}}],"doc":{"description":"Decodes modified UTF-7 text into ISO-8859-1 string.","type":"string"}},{"kind":64,"name":"imagecharup","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$font","modifiers":0,"doc":{"description":"Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().","type":"int"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"x-coordinate of the start.","type":"int"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"y-coordinate of the start.","type":"int"}},{"kind":128,"name":"$c","modifiers":0,"doc":{"description":"The character to draw.","type":"string"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"Draws the character c vertically at the specified coordinate on the given image.","type":"bool"}},{"kind":64,"name":"pg_lo_open","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}},{"kind":128,"name":"$oid","modifiers":0,"doc":{"description":"The OID of the large object in the database.","type":"int"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"Can be either \"r\" for read-only, \"w\" for write only or \"rw\" for read and write.","type":"string"}}],"doc":{"description":"pg_lo_open() opens a large object in the database and returns large object resource so that it can be manipulated.","type":"resource"}},{"kind":32,"name":"removeAttributeNode","modifiers":1,"children":[{"kind":128,"name":"$oldnode","modifiers":0,"doc":{"description":"The attribute node.","type":"DOMAttr"}}],"doc":{"description":"Removes attribute oldnode from the element.","type":"bool"}},{"kind":64,"name":"jewishtojd","modifiers":0,"children":[{"kind":128,"name":"$month","modifiers":0,"doc":{"description":"The month as a number from 1 to 13","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"doc":{"description":"The day as a number from 1 to 30","type":"int"}},{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"The year as a number between 1 and 9999","type":"int"}}],"doc":{"description":"Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful. The Jewish calendar has been in use for several thousand years, but in the early days there was no formula to determine the start of a month. A new month was started when the new moon was first observed.","type":"int"}},{"kind":64,"name":"mb_encode_mimeheader","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being encoded. Its encoding should be same as mb_internal_encoding().","type":"string"}},{"kind":128,"name":"$charset","modifiers":0,"value":"determined","doc":{"description":"charset specifies the name of the character set in which str is represented in. The default value is determined by the current NLS setting (mbstring.language).","type":"string"}},{"kind":128,"name":"$transfer_encoding","modifiers":0,"value":"\"B\"","doc":{"description":"transfer_encoding specifies the scheme of MIME encoding. It should be either \"B\" (Base64) or \"Q\" (Quoted-Printable). Falls back to \"B\" if not given.","type":"string"}},{"kind":128,"name":"$linefeed","modifiers":0,"value":"\"\\r\\n\"","doc":{"description":"linefeed specifies the EOL (end-of-line) marker with which mb_encode_mimeheader() performs line-folding (a » RFC term, the act of breaking a line longer than a certain length into multiple lines. The length is currently hard-coded to 74 characters). Falls back to \"\\r\\n\" (CRLF) if not given.","type":"string"}},{"kind":128,"name":"$indent","modifiers":0,"value":"0","doc":{"description":"Indentation of the first line (number of characters in the header before str).","type":"int"}}],"doc":{"description":"Encodes a given string str by the MIME header encoding scheme.","type":"string"}},{"kind":64,"name":"rand","modifiers":0,"description":"","children":[{"kind":128,"name":"$min","modifiers":0,"doc":{"description":"The lowest value to return (default: 0)","type":"int"}},{"kind":128,"name":"$max","modifiers":0,"doc":{"description":"The highest value to return (default: getrandmax())","type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"mysqli_real_query","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query, as a string. Data inside the query should be properly escaped.","type":"string"}}],"doc":{"description":"Executes a single query against the database whose result can then be retrieved or stored using the mysqli_store_result() or mysqli_use_result() functions.","type":"bool"}},{"kind":64,"name":"jpeg2wbmp","modifiers":0,"description":"","children":[{"kind":128,"name":"$jpegname","modifiers":0,"doc":{"description":"Path to JPEG file.","type":"string"}},{"kind":128,"name":"$wbmpname","modifiers":0,"doc":{"description":"Path to destination WBMP file.","type":"string"}},{"kind":128,"name":"$dest_height","modifiers":0,"doc":{"description":"Destination image height.","type":"int"}},{"kind":128,"name":"$dest_width","modifiers":0,"doc":{"description":"Destination image width.","type":"int"}},{"kind":128,"name":"$threshold","modifiers":0,"doc":{"description":"Threshold value, between 0 and 8 (inclusive).","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"iconv_strpos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The entire string.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The searched substring.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"The optional offset parameter specifies the position from which the search should be performed. If the offset is negative, it is counted from the end of the string.","type":"int"}},{"kind":128,"name":"$charset","modifiers":0,"value":"ini_get(\"iconv.internal_encoding\")","doc":{"description":"If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding.","type":"string"}}],"doc":{"description":"Finds position of first occurrence of a needle within a haystack.","type":"int"}},{"kind":64,"name":"fbsql_field_seek","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical offset of the field. The field index starts at 0.","type":"int"}}],"doc":{"description":"Seeks to the specified field offset. If the next call to fbsql_fetch_field() doesn't include a field offset, the field offset specified in fbsql_field_seek() will be returned.","type":"bool"}},{"kind":64,"name":"array_flip","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"An array of key/value pairs to be flipped.","type":"array"}}],"doc":{"description":"array_flip() returns an array in flip order, i.e. keys from array become values and values from array become keys.","type":"array"}},{"kind":64,"name":"debug_backtrace","modifiers":0,"children":[{"kind":128,"name":"$options","modifiers":0,"value":"DEBUG_BACKTRACE_PROVIDE_OBJECT","doc":{"description":"As of 5.3.6, this parameter is a bitmask for the following options: debug_backtrace() options DEBUG_BACKTRACE_PROVIDE_OBJECT Whether or not to populate the \"object\" index. DEBUG_BACKTRACE_IGNORE_ARGS Whether or not to omit the \"args\" index, and thus all the function/method arguments, to save memory. Before 5.3.6, the only values recognized are TRUE or FALSE, which are the same as setting or not setting the DEBUG_BACKTRACE_PROVIDE_OBJECT option respectively.","type":"int"}},{"kind":128,"name":"$limit","modifiers":0,"value":"0","doc":{"description":"As of 5.4.0, this parameter can be used to limit the number of stack frames returned. By default (limit=0) it returns all stack frames.","type":"int"}}],"doc":{"description":"debug_backtrace() generates a PHP backtrace.","type":"array"}},{"kind":64,"name":"shm_remove_var","modifiers":0,"children":[{"kind":128,"name":"$shm_identifier","modifiers":0,"doc":{"description":"The shared memory identifier as returned by shm_attach()","type":"resource"}},{"kind":128,"name":"$variable_key","modifiers":0,"doc":{"description":"The variable key.","type":"int"}}],"doc":{"description":"Removes a variable with a given variable_key and frees the occupied memory.","type":"bool"}},{"kind":64,"name":"date_time_set","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTime object returned by date_create(). The function modifies this object.","type":"DateTime"}},{"kind":128,"name":"$hour","modifiers":0,"doc":{"description":"Hour of the time.","type":"int"}},{"kind":128,"name":"$minute","modifiers":0,"doc":{"description":"Minute of the time.","type":"int"}},{"kind":128,"name":"$second","modifiers":0,"value":"0","doc":{"description":"Second of the time.","type":"int"}}],"doc":{"description":"Resets the current time of the DateTime object to a different time.","type":"DateTime"}},{"kind":64,"name":"enchant_broker_get_dict_path","modifiers":0,"children":[{"kind":128,"name":"$broker","modifiers":0,"doc":{"description":"Broker resource.","type":"resource"}},{"kind":128,"name":"$dict_type","modifiers":0,"doc":{"description":"The type of the dictionaries, i.e. ENCHANT_MYSPELL or ENCHANT_ISPELL.","type":"int"}}],"doc":{"description":"Get the directory path for a given backend.","type":"bool"}},{"kind":64,"name":"date_isodate_set","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTime object returned by date_create(). The function modifies this object.","type":"DateTime"}},{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"Year of the date.","type":"int"}},{"kind":128,"name":"$week","modifiers":0,"doc":{"description":"Week of the date.","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"value":"1","doc":{"description":"Offset from the first day of the week.","type":"int"}}],"doc":{"description":"Set a date according to the ISO 8601 standard - using weeks and day offsets rather than specific dates.","type":"DateTime"}},{"kind":64,"name":"date_sub","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTime object returned by date_create(). The function modifies this object.","type":"DateTime"}},{"kind":128,"name":"$interval","modifiers":0,"doc":{"description":"A DateInterval object","type":"DateInterval"}}],"doc":{"description":"Subtracts the specified DateInterval object from the specified DateTime object.","type":"DateTime"}},{"kind":64,"name":"sin","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"A value in radians","type":"float"}}],"doc":{"description":"sin() returns the sine of the arg parameter. The arg parameter is in radians.","type":"float"}},{"kind":64,"name":"ftp_alloc","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$filesize","modifiers":0,"doc":{"description":"The number of bytes to allocate.","type":"int"}},{"kind":128,"name":"$result","modifiers":1024,"doc":{"description":"A textual representation of the servers response will be returned by reference in result if a variable is provided.","type":"string"}}],"doc":{"description":"Sends an ALLO command to the remote FTP server to allocate space for a file to be uploaded.","type":"bool"}},{"kind":64,"name":"imagesetclip","modifiers":0,"children":[{"kind":128,"name":"$im","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$x1","modifiers":0,"doc":{"description":"The x-coordinate of the upper left corner.","type":"int"}},{"kind":128,"name":"$y1","modifiers":0,"doc":{"description":"The y-coordinate of the upper left corner.","type":"int"}},{"kind":128,"name":"$x2","modifiers":0,"doc":{"description":"The x-coordinate of the lower right corner.","type":"int"}},{"kind":128,"name":"$y2","modifiers":0,"doc":{"description":"The y-coordinate of the lower right corner.","type":"int"}}],"doc":{"description":"imagesetclip() sets the current clipping rectangle, i.e. the area beyond which no pixels will be drawn.","type":"bool"}},{"kind":32,"name":"writeDTDEntity","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the entity.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The content of the entity.","type":"string"}},{"kind":128,"name":"$pe","modifiers":0,"description":"","doc":{"type":"bool"}},{"kind":128,"name":"$pubid","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$sysid","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$ndataid","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Writes a full DTD entity.","type":"bool"}},{"kind":64,"name":"xmlwriter_write_dtd_entity","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the entity.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The content of the entity.","type":"string"}},{"kind":128,"name":"$pe","modifiers":0,"description":"","doc":{"type":"bool"}},{"kind":128,"name":"$pubid","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$sysid","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$ndataid","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Writes a full DTD entity.","type":"bool"}},{"kind":64,"name":"rtrim","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$character_mask","modifiers":0,"doc":{"description":"You can also specify the characters you want to strip, by means of the character_mask parameter. Simply list all characters that you want to be stripped. With .. you can specify a range of characters.","type":"string"}}],"doc":{"description":"This function returns a string with whitespace (or other characters) stripped from the end of str.","type":"string"}},{"kind":64,"name":"msgfmt_get_locale","modifiers":0,"children":[{"kind":128,"name":"$formatter","modifiers":0,"doc":{"description":"The formatter resource","type":"NumberFormatter"}}],"doc":{"description":"Get the locale for which the formatter was created.","type":"string"}},{"kind":64,"name":"popen","modifiers":0,"children":[{"kind":128,"name":"$command","modifiers":0,"doc":{"description":"The command","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The mode","type":"string"}}],"doc":{"description":"Opens a pipe to a process executed by forking the command given by command.","type":"resource"}},{"kind":64,"name":"imagecreatefromgd2","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the GD2 image.","type":"string"}}],"doc":{"description":"Create a new image from GD2 file or URL.","type":"resource"}},{"kind":64,"name":"file_put_contents","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file where to write the data.","type":"string"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to write. Can be either a string, an array or a stream resource. If data is a stream resource, the remaining buffer of that stream will be copied to the specified file. This is similar with using stream_copy_to_stream(). You can also specify the data parameter as a single dimension array. This is equivalent to file_put_contents($filename, implode('', $array)).","type":"mixed"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. Available flags Flag Description FILE_USE_INCLUDE_PATH Search for filename in the include directory. See include_path for more information. FILE_APPEND If file filename already exists, append the data to the file instead of overwriting it. LOCK_EX Acquire an exclusive lock on the file while proceeding to the writing. In other words, a flock() call happens between the fopen() call and the fwrite() call. This is not identical to an fopen() call with mode \"x\".","type":"int"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"A valid context resource created with stream_context_create().","type":"resource"}}],"doc":{"description":"This function is identical to calling fopen(), fwrite() and fclose() successively to write data to a file.","type":"int"}},{"kind":64,"name":"posix_getpid","modifiers":0,"children":[],"doc":{"description":"Return the process identifier of the current process.","type":"int"}},{"kind":64,"name":"ldap_get_dn","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result_entry_identifier","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Finds out the DN of an entry in the result.","type":"string"}},{"kind":64,"name":"odbc_close","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}}],"doc":{"description":"Closes down the connection to the database server.","type":"void"}},{"kind":64,"name":"mysqli_real_escape_string","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$escapestr","modifiers":0,"doc":{"description":"The string to be escaped. Characters encoded are NUL (ASCII 0), \\n, \\r, \\, ', \", and Control-Z.","type":"string"}}],"doc":{"description":"This function is used to create a legal SQL string that you can use in an SQL statement. The given string is encoded to an escaped SQL string, taking into account the current character set of the connection.","type":"string"}},{"kind":64,"name":"dir","modifiers":0,"children":[{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"Directory to open","type":"string"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams.","type":"resource"}}],"doc":{"description":"A pseudo-object oriented mechanism for reading a directory. The given directory is opened.","type":"Directory"}},{"kind":64,"name":"date_modify","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTime object returned by date_create(). The function modifies this object.","type":"DateTime"}},{"kind":128,"name":"$modify","modifiers":0,"doc":{"description":"A date/time string. Valid formats are explained in Date and Time Formats.","type":"string"}}],"doc":{"description":"Alter the timestamp of a DateTime object by incrementing or decrementing in a format accepted by strtotime().","type":"DateTime"}},{"kind":64,"name":"fbsql_create_blob","modifiers":0,"children":[{"kind":128,"name":"$blob_data","modifiers":0,"doc":{"description":"The BLOB data.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Creates a BLOB from the given data.","type":"string"}},{"kind":64,"name":"numfmt_get_locale","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"You can choose between valid and actual locale ( Locale::VALID_LOCALE, Locale::ACTUAL_LOCALE, respectively). The default is the actual locale.","type":"int"}}],"doc":{"description":"Get formatter locale name.","type":"string"}},{"kind":64,"name":"imagedestroy","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}}],"doc":{"description":"imagedestroy() frees any memory associated with image image.","type":"bool"}},{"kind":64,"name":"sybase_close","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"If the link identifier isn't specified, the last opened link is assumed.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"fwrite","modifiers":0,"description":"","children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"A file system pointer resource that is typically created using fopen().","type":"resource"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string that is to be written.","type":"string"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"If the length argument is given, writing will stop after length bytes have been written or the end of string is reached, whichever comes first. Note that if the length argument is given, then the magic_quotes_runtime configuration option will be ignored and no slashes will be stripped from string.","type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"imap_subscribe","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information","type":"string"}}],"doc":{"description":"Subscribe to a new mailbox.","type":"bool"}},{"kind":64,"name":"mysqli_stmt_affected_rows","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Returns the number of rows affected by INSERT, UPDATE, or DELETE query.","type":"int"}},{"kind":64,"name":"set_exception_handler","modifiers":0,"children":[{"kind":128,"name":"$exception_handler","modifiers":0,"doc":{"description":"Name of the function to be called when an uncaught exception occurs. This handler function needs to accept one parameter, which will be the exception object that was thrown. This is the handler signature before PHP 7: void handler ( Exception $ex ) Since PHP 7, most errors are reported by throwing Error exceptions, which will be caught by the handler as well. Both Error and Exception implements the Throwable interface. This is the handler signature since PHP 7: void handler ( Throwable $ex ) NULL may be passed instead, to reset this handler to its default state. Caution Note that providing an explicit Exception type hint for the ex parameter in your callback will cause issues with the changed exception hierarchy in PHP 7.","type":"callable"}}],"doc":{"description":"Sets the default exception handler if an exception is not caught within a try/catch block. Execution will stop after the exception_handler is called.","type":"callable"}},{"kind":64,"name":"putenv","modifiers":0,"children":[{"kind":128,"name":"$setting","modifiers":0,"doc":{"description":"The setting, like \"FOO=BAR\"","type":"string"}}],"doc":{"description":"Adds setting to the server environment. The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state.","type":"bool"}},{"kind":64,"name":"mssql_pconnect","modifiers":0,"description":"","children":[{"kind":128,"name":"$servername","modifiers":0,"doc":{"description":"The MS SQL server. It can also include a port number. e.g. hostname:port.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The username.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password.","type":"string"}},{"kind":128,"name":"$new_link","modifiers":0,"value":"false","doc":{"description":"If a second call is made to mssql_pconnect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned. This parameter modifies this behavior and makes mssql_pconnect() always open a new link, even if mssql_pconnect() was called before with the same parameters.","type":"bool"}}],"doc":{"type":"resource"}},{"kind":1,"name":"DOMNamedNodeMap","associated":[{"kind":2,"name":"Traversable"}],"children":[{"kind":16,"name":"$length","modifiers":1,"doc":{"type":"int"}},{"kind":32,"name":"getNamedItem","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The nodeName of the node to retrieve.","type":"string"}}],"doc":{"description":"Retrieves a node specified by its nodeName.","type":"DOMNode"}},{"kind":32,"name":"getNamedItemNS","modifiers":0,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI of the node to retrieve.","type":"string"}},{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name of the node to retrieve.","type":"string"}}],"doc":{"description":"Retrieves a node specified by localName and namespaceURI.","type":"DOMNode"}},{"kind":32,"name":"item","modifiers":0,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the node into the collection.","type":"int"}}],"doc":{"description":"Retrieves a node specified by index.","type":"DOMNode"}}]},{"kind":64,"name":"token_name","modifiers":0,"children":[{"kind":128,"name":"$token","modifiers":0,"doc":{"description":"The token value.","type":"int"}}],"doc":{"description":"token_name() gets the symbolic name for a PHP token value.","type":"string"}},{"kind":64,"name":"nsapi_response_headers","modifiers":0,"children":[],"doc":{"description":"Gets all the NSAPI response headers.","type":"array"}},{"kind":64,"name":"date","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The format of the outputted date string. See the formatting options below. There are also several predefined date constants that may be used instead, so for example DATE_RSS contains the format string 'D, d M Y H:i:s'. The following characters are recognized in the format parameter string format character Description Example returned values Day --- --- d Day of the month, 2 digits with leading zeros 01 to 31 D A textual representation of a day, three letters Mon through Sun j Day of the month without leading zeros 1 to 31 l (lowercase 'L') A full textual representation of the day of the week Sunday through Saturday N ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0) 1 (for Monday) through 7 (for Sunday) S English ordinal suffix for the day of the month, 2 characters st, nd, rd or th. Works well with j w Numeric representation of the day of the week 0 (for Sunday) through 6 (for Saturday) z The day of the year (starting from 0) 0 through 365 Week --- --- W ISO-8601 week number of year, weeks starting on Monday Example: 42 (the 42nd week in the year) Month --- --- F A full textual representation of a month, such as January or March January through December m Numeric representation of a month, with leading zeros 01 through 12 M A short textual representation of a month, three letters Jan through Dec n Numeric representation of a month, without leading zeros 1 through 12 t Number of days in the given month 28 through 31 Year --- --- L Whether it's a leap year 1 if it is a leap year, 0 otherwise. o ISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0) Examples: 1999 or 2003 Y A full numeric representation of a year, 4 digits Examples: 1999 or 2003 y A two digit representation of a year Examples: 99 or 03 Time --- --- a Lowercase Ante meridiem and Post meridiem am or pm A Uppercase Ante meridiem and Post meridiem AM or PM B Swatch Internet time 000 through 999 g 12-hour format of an hour without leading zeros 1 through 12 G 24-hour format of an hour without leading zeros 0 through 23 h 12-hour format of an hour with leading zeros 01 through 12 H 24-hour format of an hour with leading zeros 00 through 23 i Minutes with leading zeros 00 to 59 s Seconds, with leading zeros 00 through 59 u Microseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds. Example: 654321 v Milliseconds (added in PHP 7.0.0). Same note applies as for u. Example: 654 Timezone --- --- e Timezone identifier (added in PHP 5.1.0) Examples: UTC, GMT, Atlantic/Azores I (capital i) Whether or not the date is in daylight saving time 1 if Daylight Saving Time, 0 otherwise. O Difference to Greenwich time (GMT) in hours Example: +0200 P Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3) Example: +02:00 T Timezone abbreviation Examples: EST, MDT ... Z Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive. -43200 through 50400 Full Date/Time --- --- c ISO 8601 date (added in PHP 5) 2004-02-12T15:19:21+00:00 r » RFC 2822 formatted date Example: Thu, 21 Dec 2000 16:01:07 +0200 U Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT) See also time() Unrecognized characters in the format string will be printed as-is. The Z format will always return 0 when using gmdate(). Note: Since this function only accepts integer timestamps the u format character is only useful when using the date_format() function with user based timestamps created with date_create().","type":"string"}},{"kind":128,"name":"$timestamp","modifiers":0,"value":"time()","doc":{"description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().","type":"int"}}],"doc":{"description":"Returns a string formatted according to the given format string using the given integer timestamp or the current time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time().","type":"string"}},{"kind":64,"name":"realpath","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The path being checked. Note: Whilst a path must be supplied, the value can be blank or NULL In these cases, the value is interpreted as the current directory.","type":"string"}}],"doc":{"description":"realpath() expands all symbolic links and resolves references to '/./', '/../' and extra '/' characters in the input path and returns the canonicalized absolute pathname.","type":"string"}},{"kind":64,"name":"sem_release","modifiers":0,"children":[{"kind":128,"name":"$sem_identifier","modifiers":0,"doc":{"description":"A Semaphore resource handle as returned by sem_get().","type":"resource"}}],"doc":{"description":"sem_release() releases the semaphore if it is currently acquired by the calling process, otherwise a warning is generated.","type":"bool"}},{"kind":64,"name":"is_scalar","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable being evaluated.","type":"mixed"}}],"doc":{"description":"Finds whether the given variable is a scalar.","type":"bool"}},{"kind":64,"name":"imap_lsub","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$ref","modifiers":0,"doc":{"description":"ref should normally be just the server specification as described in imap_open()","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. '*' means to return all mailboxes. If you pass pattern as '*', you will get a list of the entire mailbox hierarchy. '%' means to return the current level only. '%' as the pattern parameter will return only the top level mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox in the ~/mail directory, but none in subfolders of that directory.","type":"string"}}],"doc":{"description":"Gets an array of all the mailboxes that you have subscribed.","type":"array"}},{"kind":64,"name":"output_add_rewrite_var","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The variable name.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The variable value.","type":"string"}}],"doc":{"description":"This function adds another name/value pair to the URL rewrite mechanism. The name and value will be added to URLs (as GET parameter) and forms (as hidden input fields) the same way as the session ID when transparent URL rewriting is enabled with session.use_trans_sid.","type":"bool"}},{"kind":64,"name":"pg_last_error","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_last_error() returns the last error message for a given connection.","type":"string"}},{"kind":64,"name":"fmod","modifiers":0,"children":[{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"The dividend","type":"float"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"The divisor","type":"float"}}],"doc":{"description":"Returns the floating point remainder of dividing the dividend (x) by the divisor (y). The remainder (r) is defined as: x = i * y + r, for some integer i. If y is non-zero, r has the same sign as x and a magnitude less than the magnitude of y.","type":"float"}},{"kind":64,"name":"mssql_init","modifiers":0,"description":"","children":[{"kind":128,"name":"$sp_name","modifiers":0,"doc":{"description":"Stored procedure name, like ownew.sp_name or otherdb.owner.sp_name.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A MS SQL link identifier, returned by mssql_connect().","type":"resource"}}],"doc":{"type":"resource"}},{"kind":64,"name":"socket_strerror","modifiers":0,"children":[{"kind":128,"name":"$errno","modifiers":0,"doc":{"description":"A valid socket error number, likely produced by socket_last_error().","type":"int"}}],"doc":{"description":"socket_strerror() takes as its errno parameter a socket error code as returned by socket_last_error() and returns the corresponding explanatory text.","type":"string"}},{"kind":1,"name":"XMLWriter","children":[{"kind":32,"name":"writeElement","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The element name.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The element contents.","type":"string"}}],"doc":{"description":"Writes a full element tag.","type":"bool"}},{"kind":32,"name":"startCData","modifiers":0,"children":[],"doc":{"description":"Starts a CDATA.","type":"bool"}},{"kind":32,"name":"startDTDElement","modifiers":0,"children":[{"kind":128,"name":"$qualifiedName","modifiers":0,"doc":{"description":"The qualified name of the document type to create.","type":"string"}}],"doc":{"description":"Starts a DTD element.","type":"bool"}},{"kind":32,"name":"startAttributeNS","modifiers":0,"children":[{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The namespace prefix.","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The attribute name.","type":"string"}},{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}}],"doc":{"description":"Starts a namespaced attribute.","type":"bool"}},{"kind":32,"name":"endDocument","modifiers":0,"children":[],"doc":{"description":"Ends the current document.","type":"bool"}},{"kind":32,"name":"writeComment","modifiers":0,"children":[{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The contents of the comment.","type":"string"}}],"doc":{"description":"Writes a full comment.","type":"bool"}},{"kind":32,"name":"endDTDAttlist","modifiers":0,"children":[],"doc":{"description":"Ends the current DTD attribute list.","type":"bool"}},{"kind":32,"name":"startElementNS","modifiers":0,"children":[{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The namespace prefix.","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The element name.","type":"string"}},{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}}],"doc":{"description":"Starts a namespaced element.","type":"bool"}},{"kind":32,"name":"writeAttribute","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the attribute.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the attribute.","type":"string"}}],"doc":{"description":"Writes a full attribute.","type":"bool"}},{"kind":32,"name":"startComment","modifiers":0,"children":[],"doc":{"description":"Starts a comment.","type":"bool"}},{"kind":32,"name":"startPI","modifiers":0,"children":[{"kind":128,"name":"$target","modifiers":0,"doc":{"description":"The target of the processing instruction.","type":"string"}}],"doc":{"description":"Starts a processing instruction tag.","type":"bool"}},{"kind":32,"name":"startAttribute","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The attribute name.","type":"string"}}],"doc":{"description":"Starts an attribute.","type":"bool"}},{"kind":32,"name":"endDTDElement","modifiers":0,"children":[],"doc":{"description":"Ends the current DTD element.","type":"bool"}},{"kind":32,"name":"writeElementNS","modifiers":0,"children":[{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The namespace prefix.","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The element name.","type":"string"}},{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The element contents.","type":"string"}}],"doc":{"description":"Writes a full namespaced element tag.","type":"bool"}},{"kind":32,"name":"writeAttributeNS","modifiers":0,"children":[{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The namespace prefix.","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The attribute name.","type":"string"}},{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The attribute value.","type":"string"}}],"doc":{"description":"Writes a full namespaced attribute.","type":"bool"}},{"kind":32,"name":"setIndent","modifiers":0,"children":[{"kind":128,"name":"$indent","modifiers":0,"doc":{"description":"Whether indentation is enabled.","type":"bool"}}],"doc":{"description":"Toggles indentation on or off.","type":"bool"}},{"kind":32,"name":"startDTDAttlist","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The attribute list name.","type":"string"}}],"doc":{"description":"Starts a DTD attribute list.","type":"bool"}},{"kind":32,"name":"endAttribute","modifiers":0,"children":[],"doc":{"description":"Ends the current attribute.","type":"bool"}},{"kind":32,"name":"writeDTDAttlist","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the DTD attribute list.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The content of the DTD attribute list.","type":"string"}}],"doc":{"description":"Writes a DTD attribute list.","type":"bool"}},{"kind":32,"name":"openMemory","modifiers":0,"children":[],"doc":{"description":"Creates a new XMLWriter using memory for string output.","type":"bool"}},{"kind":32,"name":"startDocument","modifiers":0,"children":[{"kind":128,"name":"$version","modifiers":0,"value":"1.0","doc":{"description":"The version number of the document as part of the XML declaration.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"NULL","doc":{"description":"The encoding of the document as part of the XML declaration.","type":"string"}},{"kind":128,"name":"$standalone","modifiers":0,"doc":{"description":"yes or no.","type":"string"}}],"doc":{"description":"Starts a document.","type":"bool"}},{"kind":32,"name":"writeDTD","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The DTD name.","type":"string"}},{"kind":128,"name":"$publicId","modifiers":0,"doc":{"description":"The external subset public identifier.","type":"string"}},{"kind":128,"name":"$systemId","modifiers":0,"doc":{"description":"The external subset system identifier.","type":"string"}},{"kind":128,"name":"$subset","modifiers":0,"doc":{"description":"The content of the DTD.","type":"string"}}],"doc":{"description":"Writes a full DTD.","type":"bool"}},{"kind":32,"name":"startDTDEntity","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the entity.","type":"string"}},{"kind":128,"name":"$isparam","modifiers":0,"description":"","doc":{"type":"bool"}}],"doc":{"description":"Starts a DTD entity.","type":"bool"}},{"kind":32,"name":"writeDTDElement","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the DTD element.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The content of the element.","type":"string"}}],"doc":{"description":"Writes a full DTD element.","type":"bool"}},{"kind":32,"name":"writePI","modifiers":0,"children":[{"kind":128,"name":"$target","modifiers":0,"doc":{"description":"The target of the processing instruction.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The content of the processing instruction.","type":"string"}}],"doc":{"description":"Writes a processing instruction.","type":"bool"}},{"kind":32,"name":"endDTD","modifiers":0,"children":[],"doc":{"description":"Ends the DTD of the document.","type":"bool"}},{"kind":32,"name":"fullEndElement","modifiers":0,"children":[],"doc":{"description":"End the current xml element. Writes an end tag even if the element is empty.","type":"bool"}},{"kind":32,"name":"flush","modifiers":0,"children":[{"kind":128,"name":"$empty","modifiers":0,"value":"true","doc":{"description":"Whether to empty the buffer or not. Default is TRUE.","type":"bool"}}],"doc":{"description":"Flushes the current buffer.","type":"mixed"}},{"kind":32,"name":"startDTD","modifiers":0,"children":[{"kind":128,"name":"$qualifiedName","modifiers":0,"doc":{"description":"The qualified name of the document type to create.","type":"string"}},{"kind":128,"name":"$publicId","modifiers":0,"doc":{"description":"The external subset public identifier.","type":"string"}},{"kind":128,"name":"$systemId","modifiers":0,"doc":{"description":"The external subset system identifier.","type":"string"}}],"doc":{"description":"Starts a DTD.","type":"bool"}},{"kind":32,"name":"endCData","modifiers":0,"children":[],"doc":{"description":"Ends the current CDATA section.","type":"bool"}},{"kind":32,"name":"text","modifiers":0,"children":[{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The contents of the text.","type":"string"}}],"doc":{"description":"Writes a text.","type":"bool"}},{"kind":32,"name":"startElement","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The element name.","type":"string"}}],"doc":{"description":"Starts an element.","type":"bool"}},{"kind":32,"name":"openURI","modifiers":0,"children":[{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The URI of the resource for the output.","type":"string"}}],"doc":{"description":"Creates a new XMLWriter using uri for the output.","type":"bool"}},{"kind":32,"name":"endPI","modifiers":0,"children":[],"doc":{"description":"Ends the current processing instruction.","type":"bool"}},{"kind":32,"name":"endDTDEntity","modifiers":0,"children":[],"doc":{"description":"Ends the current DTD entity.","type":"bool"}},{"kind":32,"name":"setIndentString","modifiers":0,"children":[{"kind":128,"name":"$indentString","modifiers":0,"doc":{"description":"The indentation string.","type":"string"}}],"doc":{"description":"Sets the string which will be used to indent each element/attribute of the resulting xml.","type":"bool"}},{"kind":32,"name":"writeRaw","modifiers":0,"children":[{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The text string to write.","type":"string"}}],"doc":{"description":"Writes a raw xml text.","type":"bool"}},{"kind":32,"name":"writeCData","modifiers":0,"children":[{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The contents of the CDATA.","type":"string"}}],"doc":{"description":"Writes a full CDATA.","type":"bool"}},{"kind":32,"name":"endComment","modifiers":0,"children":[],"doc":{"description":"Ends the current comment.","type":"bool"}},{"kind":32,"name":"outputMemory","modifiers":0,"children":[{"kind":128,"name":"$flush","modifiers":0,"value":"true","doc":{"description":"Whether to flush the output buffer or not. Default is TRUE.","type":"bool"}}],"doc":{"description":"Returns the current buffer.","type":"string"}},{"kind":32,"name":"endElement","modifiers":0,"children":[],"doc":{"description":"Ends the current element.","type":"bool"}}]},{"kind":64,"name":"xmlwriter_end_element","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Ends the current element.","type":"bool"}},{"kind":64,"name":"tidy_get_html","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Returns a tidyNode object starting from the <html> tag of the tidy parse tree.","type":"tidyNode"}},{"kind":64,"name":"gzwrite","modifiers":0,"children":[{"kind":128,"name":"$zp","modifiers":0,"doc":{"description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().","type":"resource"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string to write.","type":"string"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The number of uncompressed bytes to write. If supplied, writing will stop after length (uncompressed) bytes have been written or the end of string is reached, whichever comes first. Note: Note that if the length argument is given, then the magic_quotes_runtime configuration option will be ignored and no slashes will be stripped from string.","type":"int"}}],"doc":{"description":"gzwrite() writes the contents of string to the given gz-file.","type":"int"}},{"kind":64,"name":"gc_enabled","modifiers":0,"children":[],"doc":{"description":"Returns status of the circular reference collector.","type":"bool"}},{"kind":64,"name":"gmp_prob_prime","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"The number being checked as a prime. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$reps","modifiers":0,"value":"10","doc":{"description":"Reasonable values of reps vary from 5 to 10 (default being 10); a higher value lowers the probability for a non-prime to pass as a \"probable\" prime. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"int"}}],"doc":{"description":"The function uses Miller-Rabin's probabilistic test to check if a number is a prime.","type":"int"}},{"kind":64,"name":"split","modifiers":0,"description":"","children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Case sensitive regular expression. If you want to split on any of the characters which are considered special by regular expressions, you'll need to escape them first. If you think split() (or any other regex function, for that matter) is doing something weird, please read the file regex.7, included in the regex/ subdirectory of the PHP distribution. It's in manpage format, so you'll want to do something along the lines of man /usr/local/src/regex/regex.7 in order to read it.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$limit","modifiers":0,"value":"-1","doc":{"description":"If limit is set, the returned array will contain a maximum of limit elements with the last element containing the whole rest of string.","type":"int"}}],"doc":{"type":"array"}},{"kind":64,"name":"curl_multi_close","modifiers":0,"children":[{"kind":128,"name":"$mh","modifiers":0,"doc":{"description":"A cURL multi handle returned by curl_multi_init().","type":"resource"}}],"doc":{"description":"Closes a set of cURL handles.","type":"void"}},{"kind":64,"name":"shmop_close","modifiers":0,"children":[{"kind":128,"name":"$shmid","modifiers":0,"doc":{"description":"The shared memory block resource created by shmop_open()","type":"resource"}}],"doc":{"description":"shmop_close() is used to close a shared memory block.","type":"void"}},{"kind":64,"name":"curl_share_close","modifiers":0,"children":[{"kind":128,"name":"$sh","modifiers":0,"doc":{"description":"A cURL share handle returned by curl_share_init()","type":"resource"}}],"doc":{"description":"Closes a cURL share handle and frees all resources.","type":"void"}},{"kind":64,"name":"gmp_scan1","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"The number to scan. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"The starting bit.","type":"int"}}],"doc":{"description":"Scans a, starting with bit start, towards more significant bits, until the first set bit is found.","type":"int"}},{"kind":64,"name":"quoted_printable_encode","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"description":"Returns a quoted printable string created according to » RFC2045, section 6.7.","type":"string"}},{"kind":64,"name":"ldap_mod_add","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The distinguished name of an LDAP entity.","type":"string"}},{"kind":128,"name":"$entry","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"Adds one or more attributes to the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level additions are done by the ldap_add() function.","type":"bool"}},{"kind":64,"name":"mysqli_fetch_array","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}},{"kind":128,"name":"$resulttype","modifiers":0,"value":"MYSQLI_BOTH","doc":{"description":"This optional parameter is a constant indicating what type of array should be produced from the current row data. The possible values for this parameter are the constants MYSQLI_ASSOC, MYSQLI_NUM, or MYSQLI_BOTH. By using the MYSQLI_ASSOC constant this function will behave identically to the mysqli_fetch_assoc(), while MYSQLI_NUM will behave identically to the mysqli_fetch_row() function. The final option MYSQLI_BOTH will create a single array with the attributes of both.","type":"int"}}],"doc":{"description":"Returns an array that corresponds to the fetched row or NULL if there are no more rows for the resultset represented by the result parameter.","type":"mixed"}},{"kind":64,"name":"posix_strerror","modifiers":0,"children":[{"kind":128,"name":"$errno","modifiers":0,"doc":{"description":"A POSIX error number, returned by posix_get_last_error(). If set to 0, then the string \"Success\" is returned.","type":"int"}}],"doc":{"description":"Returns the POSIX system error message associated with the given errno. You may get the errno parameter by calling posix_get_last_error().","type":"string"}},{"kind":64,"name":"mysqli_field_count","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns the number of columns for the most recent query on the connection represented by the link parameter. This function can be useful when using the mysqli_store_result() function to determine if the query should have produced a non-empty result set or not without knowing the nature of the query.","type":"int"}},{"kind":64,"name":"tidy_get_status","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Returns the status for the specified tidy object.","type":"int"}},{"kind":64,"name":"ftp_nb_get","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$local_file","modifiers":0,"doc":{"description":"The local file path (will be overwritten if the file already exists).","type":"string"}},{"kind":128,"name":"$remote_file","modifiers":0,"doc":{"description":"The remote file path.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY.","type":"int"}},{"kind":128,"name":"$resumepos","modifiers":0,"value":"0","doc":{"description":"The position in the remote file to start downloading from.","type":"int"}}],"doc":{"description":"ftp_nb_get() retrieves a remote file from the FTP server, and saves it into a local file.","type":"int"}},{"kind":64,"name":"ob_get_length","modifiers":0,"children":[],"doc":{"description":"This will return the length of the contents in the output buffer, in bytes.","type":"int"}},{"kind":64,"name":"cal_to_jd","modifiers":0,"children":[{"kind":128,"name":"$calendar","modifiers":0,"doc":{"description":"Calendar to convert from, one of CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH or CAL_FRENCH.","type":"int"}},{"kind":128,"name":"$month","modifiers":0,"doc":{"description":"The month as a number, the valid range depends on the calendar","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"doc":{"description":"The day as a number, the valid range depends on the calendar","type":"int"}},{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"The year as a number, the valid range depends on the calendar","type":"int"}}],"doc":{"description":"cal_to_jd() calculates the Julian day count for a date in the specified calendar. Supported calendars are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.","type":"int"}},{"kind":64,"name":"get_included_files","modifiers":0,"children":[],"doc":{"description":"Gets the names of all files that have been included using include, include_once, require or require_once.","type":"array"}},{"kind":64,"name":"pcntl_strerror","modifiers":0,"description":"","children":[{"kind":128,"name":"$errno","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"unlink","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams.","type":"resource"}}],"doc":{"description":"Deletes filename. Similar to the Unix C unlink() function. An E_WARNING level error will be generated on failure.","type":"bool"}},{"kind":64,"name":"imageellipse","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$cx","modifiers":0,"doc":{"description":"x-coordinate of the center.","type":"int"}},{"kind":128,"name":"$cy","modifiers":0,"doc":{"description":"y-coordinate of the center.","type":"int"}},{"kind":128,"name":"$width","modifiers":0,"doc":{"description":"The ellipse width.","type":"int"}},{"kind":128,"name":"$height","modifiers":0,"doc":{"description":"The ellipse height.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"The color of the ellipse. A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"Draws an ellipse centered at the specified coordinates.","type":"bool"}},{"kind":64,"name":"fbsql_username","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"If provided, this is the new username to set.","type":"string"}}],"doc":{"description":"Get or set the username used for the connection.","type":"string"}},{"kind":64,"name":"variant_neg","modifiers":0,"children":[{"kind":128,"name":"$variant","modifiers":0,"doc":{"description":"The variant.","type":"mixed"}}],"doc":{"description":"Performs logical negation of variant.","type":"mixed"}},{"kind":64,"name":"msgfmt_parse","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The message formatter","type":"MessageFormatter"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The string to parse","type":"string"}}],"doc":{"description":"Parses input string and return any extracted items as an array.","type":"array"}},{"kind":64,"name":"is_nan","modifiers":0,"children":[{"kind":128,"name":"$val","modifiers":0,"doc":{"description":"The value to check","type":"float"}}],"doc":{"description":"Checks whether val is 'not a number', like the result of acos(1.01).","type":"bool"}},{"kind":64,"name":"xmlrpc_server_create","modifiers":0,"description":"","children":[],"doc":{"type":"resource"}},{"kind":64,"name":"pg_unescape_bytea","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"A string containing PostgreSQL bytea data to be converted into a PHP binary string.","type":"string"}}],"doc":{"description":"pg_unescape_bytea() unescapes PostgreSQL bytea data values. It returns the unescaped string, possibly containing binary data.","type":"string"}},{"kind":64,"name":"openssl_open","modifiers":0,"children":[{"kind":128,"name":"$sealed_data","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$open_data","modifiers":1024,"doc":{"description":"If the call is successful the opened data is returned in this parameter.","type":"string"}},{"kind":128,"name":"$env_key","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$priv_key_id","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$method","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"openssl_open() opens (decrypts) sealed_data using the private key associated with the key identifier priv_key_id and the envelope key env_key, and fills open_data with the decrypted data. The envelope key is generated when the data are sealed and can only be used by one specific private key. See openssl_seal() for more information.","type":"bool"}},{"kind":64,"name":"mcrypt_list_modes","modifiers":0,"description":"","children":[{"kind":128,"name":"$lib_dir","modifiers":0,"value":"ini_get(\"mcrypt.modes_dir\")","doc":{"description":"Specifies the directory where all modes are located. If not specified, the value of the mcrypt.modes_dir php.ini directive is used.","type":"string"}}],"doc":{"type":"array"}},{"kind":64,"name":"mysqli_connect","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"value":"ini_get(\"mysqli.default_host\")","doc":{"description":"Can be either a host name or an IP address. Passing the NULL value or the string \"localhost\" to this parameter, the local host is assumed. When possible, pipes will be used instead of the TCP/IP protocol. Prepending host by p: opens a persistent connection. mysqli_change_user() is automatically called on connections opened from the connection pool.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"value":"ini_get(\"mysqli.default_user\")","doc":{"description":"The MySQL user name.","type":"string"}},{"kind":128,"name":"$passwd","modifiers":0,"value":"ini_get(\"mysqli.default_pw\")","doc":{"description":"If not provided or NULL, the MySQL server will attempt to authenticate the user against those user records which have no password only. This allows one username to be used with different permissions (depending on if a password as provided or not).","type":"string"}},{"kind":128,"name":"$dbname","modifiers":0,"value":"\"\"","doc":{"description":"If provided will specify the default database to be used when performing queries.","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"value":"ini_get(\"mysqli.default_port\")","doc":{"description":"Specifies the port number to attempt to connect to the MySQL server.","type":"int"}},{"kind":128,"name":"$socket","modifiers":0,"value":"ini_get(\"mysqli.default_socket\")","doc":{"description":"Specifies the socket or named pipe that should be used. Note: Specifying the socket parameter will not explicitly determine the type of connection to be used when connecting to the MySQL server. How the connection is made to the MySQL database is determined by the host parameter.","type":"string"}}],"doc":{"description":"Opens a connection to the MySQL Server running on.","type":"mysqli"}},{"kind":64,"name":"rename","modifiers":0,"children":[{"kind":128,"name":"$oldname","modifiers":0,"doc":{"description":"The old name. Note: The wrapper used in oldname must match the wrapper used in newname.","type":"string"}},{"kind":128,"name":"$newname","modifiers":0,"doc":{"description":"The new name.","type":"string"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams.","type":"resource"}}],"doc":{"description":"Attempts to rename oldname to newname, moving it between directories if necessary. If renaming a file and newname exists, it will be overwritten. If renaming a directory and newname exists, this function will emit a warning.","type":"bool"}},{"kind":64,"name":"getmygid","modifiers":0,"description":"","children":[],"doc":{"type":"int"}},{"kind":64,"name":"imap_headerinfo","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msg_number","modifiers":0,"doc":{"description":"The message number","type":"int"}},{"kind":128,"name":"$fromlength","modifiers":0,"value":"0","doc":{"description":"Number of characters for the fetchfrom property. Must be greater than or equal to zero.","type":"int"}},{"kind":128,"name":"$subjectlength","modifiers":0,"value":"0","doc":{"description":"Number of characters for the fetchsubject property Must be greater than or equal to zero.","type":"int"}},{"kind":128,"name":"$defaulthost","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}}],"doc":{"description":"Gets information about the given message number by reading its headers.","type":"object"}},{"kind":64,"name":"bcpow","modifiers":0,"children":[{"kind":128,"name":"$left_operand","modifiers":0,"doc":{"description":"The left operand, as a string.","type":"string"}},{"kind":128,"name":"$right_operand","modifiers":0,"doc":{"description":"The right operand, as a string.","type":"string"}},{"kind":128,"name":"$scale","modifiers":0,"value":"0","doc":{"description":"This optional parameter is used to set the number of digits after the decimal place in the result. If omitted, it will default to the scale set globally with the bcscale() function, or fallback to 0 if this has not been set.","type":"int"}}],"doc":{"description":"Raise left_operand to the power right_operand.","type":"string"}},{"kind":64,"name":"openssl_x509_export","modifiers":0,"children":[{"kind":128,"name":"$x509","modifiers":0,"doc":{"description":"See Key/Certificate parameters for a list of valid values.","type":"mixed"}},{"kind":128,"name":"$output","modifiers":1024,"doc":{"description":"On success, this will hold the PEM.","type":"string"}},{"kind":128,"name":"$notext","modifiers":0,"value":"TRUE","doc":{"description":"The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. The default value of notext is TRUE.","type":"bool"}}],"doc":{"description":"openssl_x509_export() stores x509 into a string named by output in a PEM encoded format.","type":"bool"}},{"kind":1,"name":"DOMNode","children":[{"kind":32,"name":"C14NFile","modifiers":1,"children":[{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"Path to write the output to.","type":"string"}},{"kind":128,"name":"$exclusive","modifiers":0,"doc":{"description":"Enable exclusive parsing of only the nodes matched by the provided xpath or namespace prefixes.","type":"bool"}},{"kind":128,"name":"$with_comments","modifiers":0,"doc":{"description":"Retain comments in output.","type":"bool"}},{"kind":128,"name":"$xpath","modifiers":0,"doc":{"description":"An array of xpaths to filter the nodes by.","type":"array"}},{"kind":128,"name":"$ns_prefixes","modifiers":0,"doc":{"description":"An array of namespace prefixes to filter the nodes by.","type":"array"}}],"doc":{"description":"Canonicalize nodes to a file.","type":"int"}},{"kind":32,"name":"insertBefore","modifiers":1,"children":[{"kind":128,"name":"$newnode","modifiers":0,"doc":{"description":"The new node.","type":"DOMNode"}},{"kind":128,"name":"$refnode","modifiers":0,"doc":{"description":"The reference node. If not supplied, newnode is appended to the children.","type":"DOMNode"}}],"doc":{"description":"This function inserts a new node right before the reference node. If you plan to do further modifications on the appended child you must use the returned node.","type":"DOMNode"}},{"kind":32,"name":"appendChild","modifiers":1,"children":[{"kind":128,"name":"$newnode","modifiers":0,"doc":{"description":"The appended child.","type":"DOMNode"}}],"doc":{"description":"This function appends a child to an existing list of children or creates a new list of children. The child can be created with e.g. DOMDocument::createElement(), DOMDocument::createTextNode() etc. or simply by using any other node.","type":"DOMNode"}},{"kind":32,"name":"isDefaultNamespace","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI to look for.","type":"string"}}],"doc":{"description":"Tells whether namespaceURI is the default namespace.","type":"bool"}},{"kind":32,"name":"lookupPrefix","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}}],"doc":{"description":"Gets the namespace prefix of the node based on the namespace URI.","type":"string"}},{"kind":32,"name":"getLineNo","modifiers":1,"children":[],"doc":{"description":"Gets line number for where the node is defined.","type":"int"}},{"kind":32,"name":"cloneNode","modifiers":1,"children":[{"kind":128,"name":"$deep","modifiers":0,"doc":{"description":"Indicates whether to copy all descendant nodes. This parameter is defaulted to FALSE.","type":"bool"}}],"doc":{"description":"Creates a copy of the node.","type":"DOMNode"}},{"kind":32,"name":"isSameNode","modifiers":1,"children":[{"kind":128,"name":"$node","modifiers":0,"doc":{"description":"The compared node.","type":"DOMNode"}}],"doc":{"description":"This function indicates if two nodes are the same node. The comparison is not based on content","type":"bool"}},{"kind":32,"name":"isSupported","modifiers":1,"children":[{"kind":128,"name":"$feature","modifiers":0,"doc":{"description":"The feature to test. See the example of DOMImplementation::hasFeature() for a list of features.","type":"string"}},{"kind":128,"name":"$version","modifiers":0,"doc":{"description":"The version number of the feature to test.","type":"string"}}],"doc":{"description":"Checks if the asked feature is supported for the specified version.","type":"bool"}},{"kind":32,"name":"hasAttributes","modifiers":1,"children":[],"doc":{"description":"This method checks if the node has attributes. The tested node has to be an XML_ELEMENT_NODE.","type":"bool"}},{"kind":32,"name":"getNodePath","modifiers":1,"children":[],"doc":{"description":"Gets an XPath location path for the node.","type":"string"}},{"kind":32,"name":"lookupNamespaceURI","modifiers":1,"children":[{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The prefix of the namespace.","type":"string"}}],"doc":{"description":"Gets the namespace URI of the node based on the prefix.","type":"string"}},{"kind":32,"name":"removeChild","modifiers":1,"children":[{"kind":128,"name":"$oldnode","modifiers":0,"doc":{"description":"The removed child.","type":"DOMNode"}}],"doc":{"description":"This functions removes a child from a list of children.","type":"DOMNode"}},{"kind":32,"name":"C14N","modifiers":1,"children":[{"kind":128,"name":"$exclusive","modifiers":0,"doc":{"description":"Enable exclusive parsing of only the nodes matched by the provided xpath or namespace prefixes.","type":"bool"}},{"kind":128,"name":"$with_comments","modifiers":0,"doc":{"description":"Retain comments in output.","type":"bool"}},{"kind":128,"name":"$xpath","modifiers":0,"doc":{"description":"An array of xpaths to filter the nodes by.","type":"array"}},{"kind":128,"name":"$ns_prefixes","modifiers":0,"doc":{"description":"An array of namespace prefixes to filter the nodes by.","type":"array"}}],"doc":{"description":"Canonicalize nodes to a string","type":"string"}},{"kind":32,"name":"replaceChild","modifiers":1,"children":[{"kind":128,"name":"$newnode","modifiers":0,"doc":{"description":"The new node. It must be a member of the target document, i.e. created by one of the DOMDocument->createXXX() methods or imported in the document by DOMDocument::importNode.","type":"DOMNode"}},{"kind":128,"name":"$oldnode","modifiers":0,"doc":{"description":"The old node.","type":"DOMNode"}}],"doc":{"description":"This function replaces the child oldnode with the passed new node. If the newnode is already a child it will not be added a second time. If the replacement succeeds the old node is returned.","type":"DOMNode"}},{"kind":32,"name":"hasChildNodes","modifiers":1,"children":[],"doc":{"description":"This function checks if the node has children.","type":"bool"}},{"kind":32,"name":"normalize","modifiers":1,"children":[],"doc":{"description":"Remove empty text nodes and merge adjacent text nodes in this node and all its children.","type":"void"}}]},{"kind":64,"name":"intlcal_to_date_time","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}}],"doc":{"description":"Create a DateTime object that represents the same instant (up to second precision, with a rounding error of less than 1 second) and has an analog timezone to this object (the difference being DateTimeʼs timezone will be backed by PHPʼs timezone while IntlCalendarʼs timezone is backed by ICUʼs).","type":"DateTime"}},{"kind":64,"name":"dba_handlers","modifiers":0,"children":[{"kind":128,"name":"$full_info","modifiers":0,"value":"false","doc":{"description":"Turns on/off full information display in the result.","type":"bool"}}],"doc":{"description":"dba_handlers() list all the handlers supported by this extension.","type":"array"}},{"kind":64,"name":"oci_fetch_object","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI8 statement identifier created by oci_parse() and executed by oci_execute(), or a REF CURSOR statement identifier.","type":"resource"}}],"doc":{"description":"Returns an object containing the next result-set row of a query. Each attribute of the object corresponds to a column of the row. This function is typically called in a loop until it returns FALSE, indicating no more rows exist.","type":"object"}},{"kind":64,"name":"xmlwriter_output_memory","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$flush","modifiers":0,"value":"true","doc":{"description":"Whether to flush the output buffer or not. Default is TRUE.","type":"bool"}}],"doc":{"description":"Returns the current buffer.","type":"string"}},{"kind":64,"name":"date_create_immutable_from_format","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$time","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$timezone","modifiers":0,"description":"","doc":{"type":"DateTimeZone"}}],"doc":{"description":"Like DateTime::createFromFormat() but works with DateTimeImmutable.","type":"DateTimeImmutable"}},{"kind":64,"name":"date_default_timezone_set","modifiers":0,"children":[{"kind":128,"name":"$timezone_identifier","modifiers":0,"doc":{"description":"The timezone identifier, like UTC or Europe/Lisbon. The list of valid identifiers is available in the List of Supported Timezones.","type":"string"}}],"doc":{"description":"date_default_timezone_set() sets the default timezone used by all date/time functions.","type":"bool"}},{"kind":64,"name":"xml_set_external_entity_ref_handler","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to set up external entity reference handler function.","type":"resource"}},{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser. The function named by handler must accept five parameters, and should return an integer value.If the value returned from the handler is FALSE (which it will be if no value is returned), the XML parser will stop parsing and xml_get_error_code() will return XML_ERROR_EXTERNAL_ENTITY_HANDLING. handler ( resource $parser , string $open_entity_names , string $base , string $system_id , string $public_id ) parser The first parameter, parser, is a reference to the XML parser calling the handler. open_entity_names The second parameter, open_entity_names, is a space-separated list of the names of the entities that are open for the parse of this entity (including the name of the referenced entity). base This is the base for resolving the system identifier (system_id) of the external entity.Currently this parameter will always be set to an empty string. system_id The fourth parameter, system_id, is the system identifier as specified in the entity declaration. public_id The fifth parameter, public_id, is the public identifier as specified in the entity declaration, or an empty string if none was specified; the whitespace in the public identifier will have been normalized as required by the XML spec. If a handler function is set to an empty string, or FALSE, the handler in question is disabled. Note: Instead of a function name, an array containing an object reference and a method name can also be supplied.","type":"callable"}}],"doc":{"description":"Sets the external entity reference handler function for the XML parser parser.","type":"bool"}},{"kind":64,"name":"xmlrpc_server_register_method","modifiers":0,"description":"","children":[{"kind":128,"name":"$server","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$method_name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$function","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"filectime","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Gets the inode change time of a file.","type":"int"}},{"kind":64,"name":"openssl_spki_verify","modifiers":0,"children":[{"kind":128,"name":"$spkac","modifiers":1024,"doc":{"description":"Expects a valid signed public key and challenge","type":"string"}}],"doc":{"description":"Validates the supplied signed public key and challenge","type":"string"}},{"kind":64,"name":"fbsql_list_fields","modifiers":0,"children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The database name.","type":"string"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"The table name.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Retrieves information about the given table.","type":"resource"}},{"kind":64,"name":"sybase_fetch_field","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"value":"-1","doc":{"description":"If the field offset isn't specified, the next field that wasn't yet retrieved by sybase_fetch_field() is retrieved.","type":"int"}}],"doc":{"type":"object"}},{"kind":64,"name":"iconv_mime_decode_headers","modifiers":0,"children":[{"kind":128,"name":"$encoded_headers","modifiers":0,"doc":{"description":"The encoded headers, as a string.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"value":"0","doc":{"description":"mode determines the behaviour in the event iconv_mime_decode_headers() encounters a malformed MIME header field. You can specify any combination of the following bitmasks. Bitmasks acceptable to iconv_mime_decode_headers() Value Constant Description 1 ICONV_MIME_DECODE_STRICT If set, the given header is decoded in full conformance with the standards defined in » RFC2047. This option is disabled by default because there are a lot of broken mail user agents that don't follow the specification and don't produce correct MIME headers. 2 ICONV_MIME_DECODE_CONTINUE_ON_ERROR If set, iconv_mime_decode_headers() attempts to ignore any grammatical errors and continue to process a given header.","type":"int"}},{"kind":128,"name":"$charset","modifiers":0,"value":"ini_get(\"iconv.internal_encoding\")","doc":{"description":"The optional charset parameter specifies the character set to represent the result by. If omitted, iconv.internal_encoding will be used.","type":"string"}}],"doc":{"description":"Decodes multiple MIME header fields at once.","type":"array"}},{"kind":64,"name":"ibase_fetch_object","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"An InterBase result identifier obtained either by ibase_query() or ibase_execute().","type":"resource"}},{"kind":128,"name":"$fetch_flag","modifiers":0,"value":"0","doc":{"description":"fetch_flag is a combination of the constants IBASE_TEXT and IBASE_UNIXTIME ORed together. Passing IBASE_TEXT will cause this function to return BLOB contents instead of BLOB ids. Passing IBASE_UNIXTIME will cause this function to return date/time values as Unix timestamps instead of as formatted strings.","type":"int"}}],"doc":{"description":"Fetches a row as a pseudo-object from a given result identifier.","type":"object"}},{"kind":64,"name":"jdtogregorian","modifiers":0,"children":[{"kind":128,"name":"$julianday","modifiers":0,"doc":{"description":"A julian day number as integer","type":"int"}}],"doc":{"description":"Converts Julian Day Count to a string containing the Gregorian date in the format of \"month/day/year\".","type":"string"}},{"kind":64,"name":"gmp_root","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$nth","modifiers":0,"doc":{"description":"The positive root to take of a.","type":"int"}}],"doc":{"description":"Takes the nth root of a and returns the integer component of the result.","type":"GMP"}},{"kind":64,"name":"xmlwriter_end_comment","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Ends the current comment.","type":"bool"}},{"kind":64,"name":"mcrypt_generic_init","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The maximum length of the key should be the one obtained by calling mcrypt_enc_get_key_size() and every value smaller than this is legal.","type":"string"}},{"kind":128,"name":"$iv","modifiers":0,"doc":{"description":"The IV should normally have the size of the algorithms block size, but you must obtain the size by calling mcrypt_enc_get_iv_size(). IV is ignored in ECB. IV MUST exist in CFB, CBC, STREAM, nOFB and OFB modes. It needs to be random and unique (but not secret). The same IV must be used for encryption/decryption. If you do not want to use it you should set it to zeros, but this is not recommended.","type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"variant_mul","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Multiplies left by right.","type":"mixed"}},{"kind":64,"name":"ibase_blob_cancel","modifiers":0,"children":[{"kind":128,"name":"$blob_handle","modifiers":0,"doc":{"description":"A BLOB handle opened with ibase_blob_create().","type":"resource"}}],"doc":{"description":"This function will discard a BLOB if it has not yet been closed by ibase_blob_close().","type":"bool"}},{"kind":64,"name":"oci_set_action","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"An Oracle connection identifier, returned by oci_connect(), oci_pconnect(), or oci_new_connect().","type":"resource"}},{"kind":128,"name":"$action_name","modifiers":0,"doc":{"description":"User chosen string up to 32 bytes long.","type":"string"}}],"doc":{"description":"Sets the action name for Oracle tracing.","type":"bool"}},{"kind":64,"name":"mysqli_fetch_row","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}}],"doc":{"description":"Fetches one row of data from the result set and returns it as an enumerated array, where each column is stored in an array offset starting from 0 (zero). Each subsequent call to this function will return the next row within the result set, or NULL if there are no more rows.","type":"mixed"}},{"kind":64,"name":"mb_get_info","modifiers":0,"description":"","children":[{"kind":128,"name":"$type","modifiers":0,"value":"\"all\"","doc":{"description":"If type isn't specified or is specified to \"all\", an array having the elements \"internal_encoding\", \"http_output\", \"http_input\", \"func_overload\", \"mail_charset\", \"mail_header_encoding\", \"mail_body_encoding\" will be returned. If type is specified as \"http_output\", \"http_input\", \"internal_encoding\", \"func_overload\", the specified setting parameter will be returned.","type":"string"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"intl_error_name","modifiers":0,"children":[{"kind":128,"name":"$error_code","modifiers":0,"doc":{"description":"ICU error code.","type":"int"}}],"doc":{"description":"Return ICU error code name.","type":"string"}},{"kind":64,"name":"numfmt_set_text_attribute","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute specifier - one of the text attribute constants.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Text for the attribute value.","type":"string"}}],"doc":{"description":"Set a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.","type":"bool"}},{"kind":64,"name":"mcrypt_get_cipher_name","modifiers":0,"description":"","children":[{"kind":128,"name":"$cipher","modifiers":0,"doc":{"description":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"posix_getpgrp","modifiers":0,"children":[],"doc":{"description":"Return the process group identifier of the current process.","type":"int"}},{"kind":64,"name":"imap_reopen","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"The options are a bit mask with one or more of the following: OP_READONLY - Open mailbox read-only OP_ANONYMOUS - Don't use or update a .newsrc for news (NNTP only) OP_HALFOPEN - For IMAP and NNTP names, open a connection but don't open a mailbox. OP_EXPUNGE - Silently expunge recycle stream CL_EXPUNGE - Expunge mailbox automatically upon mailbox close (see also imap_delete() and imap_expunge())","type":"int"}},{"kind":128,"name":"$n_retries","modifiers":0,"value":"0","doc":{"description":"Number of maximum connect attempts","type":"int"}}],"doc":{"description":"Reopens the specified stream to a new mailbox on an IMAP or NNTP server.","type":"bool"}},{"kind":64,"name":"stream_get_contents","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$maxlength","modifiers":0,"description":"","value":"-1","doc":{"type":"int"}},{"kind":128,"name":"$offset","modifiers":0,"description":"","value":"-1","doc":{"type":"int"}}],"doc":{"description":"Identical to file_get_contents(), except that stream_get_contents() operates on an already open stream resource and returns the remaining contents in a string, up to maxlength bytes and starting at the specified offset.","type":"string"}},{"kind":64,"name":"xmlwriter_write_cdata","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The contents of the CDATA.","type":"string"}}],"doc":{"description":"Writes a full CDATA.","type":"bool"}},{"kind":64,"name":"strlen","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string being measured for length.","type":"string"}}],"doc":{"description":"Returns the length of the given string.","type":"int"}},{"kind":64,"name":"locale_get_display_variant","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to return a display variant for","type":"string"}},{"kind":128,"name":"$in_locale","modifiers":0,"doc":{"description":"Optional format locale to use to display the variant name","type":"string"}}],"doc":{"description":"Returns an appropriately localized display name for variants of the input locale. If is NULL then the default locale is used.","type":"string"}},{"kind":64,"name":"openssl_sign","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The string of data you wish to sign","type":"string"}},{"kind":128,"name":"$signature","modifiers":1024,"doc":{"description":"If the call was successful the signature is returned in signature.","type":"string"}},{"kind":128,"name":"$priv_key_id","modifiers":0,"doc":{"description":"resource - a key, returned by openssl_get_privatekey() string - a PEM formatted key","type":"mixed"}},{"kind":128,"name":"$signature_alg","modifiers":0,"value":"OPENSSL_ALGO_SHA1","doc":{"description":"int - one of these Signature Algorithms. string - a valid string returned by openssl_get_md_methods() example, \"sha256WithRSAEncryption\" or \"sha384\".","type":"mixed"}}],"doc":{"description":"openssl_sign() computes a signature for the specified data by generating a cryptographic digital signature using the private key associated with priv_key_id. Note that the data itself is not encrypted.","type":"bool"}},{"kind":64,"name":"mysqli_get_client_info","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"mysqli"}}],"doc":{"description":"Returns a string that represents the MySQL client library version.","type":"string"}},{"kind":64,"name":"datefmt_get_error_message","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource.","type":"IntlDateFormatter"}}],"doc":{"description":"Get the error text from the last operation.","type":"string"}},{"kind":64,"name":"pack","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The format string consists of format codes followed by an optional repeater argument. The repeater argument can be either an integer value or * for repeating to the end of the input data. For a, A, h, H the repeat count specifies how many characters of one data argument are taken, for @ it is the absolute position where to put the next data, for everything else the repeat count specifies how many data arguments are consumed and packed into the resulting binary string. Currently implemented formats are: pack() format characters Code Description a NUL-padded string A SPACE-padded stringh Hex string, low nibble firstH Hex string, high nibble firstcsigned charC unsigned chars signed short (always 16 bit, machine byte order) S unsigned short (always 16 bit, machine byte order) n unsigned short (always 16 bit, big endian byte order) v unsigned short (always 16 bit, little endian byte order) i signed integer (machine dependent size and byte order) I unsigned integer (machine dependent size and byte order) l signed long (always 32 bit, machine byte order) L unsigned long (always 32 bit, machine byte order) N unsigned long (always 32 bit, big endian byte order) V unsigned long (always 32 bit, little endian byte order) q signed long long (always 64 bit, machine byte order) Q unsigned long long (always 64 bit, machine byte order) J unsigned long long (always 64 bit, big endian byte order) P unsigned long long (always 64 bit, little endian byte order) f float (machine dependent size and representation) d double (machine dependent size and representation) x NUL byte X Back up one byte Z NUL-padded string (new in PHP 5.5) @ NUL-fill to absolute position","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Pack given arguments into a binary string according to format.","type":"string"}},{"kind":64,"name":"iconv_substr","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The original string.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"If offset is non-negative, iconv_substr() cuts the portion out of str beginning at offset'th character, counting from zero. If offset is negative, iconv_substr() cuts out the portion beginning at the position, offset characters away from the end of str.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"value":"iconv_strlen($str,","doc":{"description":"If length is given and is positive, the return value will contain at most length characters of the portion that begins at offset (depending on the length of string). If negative length is passed, iconv_substr() cuts the portion out of str from the offset'th character up to the character that is length characters away from the end of the string. In case offset is also negative, the start position is calculated beforehand according to the rule explained above.","type":"int"}},{"kind":128,"name":"$charset","modifiers":0,"value":"ini_get(\"iconv.internal_encoding\")","doc":{"description":"If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding. Note that offset and length parameters are always deemed to represent offsets that are calculated on the basis of the character set determined by charset, whilst the counterpart substr() always takes these for byte offsets.","type":"string"}}],"doc":{"description":"Cuts a portion of str specified by the offset and length parameters.","type":"string"}},{"kind":64,"name":"stream_get_transports","modifiers":0,"description":"","children":[],"doc":{"type":"array"}},{"kind":64,"name":"ftp_exec","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$command","modifiers":0,"doc":{"description":"The command to execute.","type":"string"}}],"doc":{"description":"Sends a SITE EXEC command request to the FTP server.","type":"bool"}},{"kind":64,"name":"error_clear_last","modifiers":0,"description":"","children":[],"doc":{"type":"void"}},{"kind":64,"name":"iptcparse","modifiers":0,"children":[{"kind":128,"name":"$iptcblock","modifiers":0,"doc":{"description":"A binary IPTC block.","type":"string"}}],"doc":{"description":"Parses an » IPTC block into its single tags.","type":"array"}},{"kind":64,"name":"apache_child_terminate","modifiers":0,"children":[],"doc":{"description":"apache_child_terminate() will register the Apache process executing the current PHP request for termination once execution of PHP code is completed. It may be used to terminate a process after a script with high memory consumption has been run as memory will usually only be freed internally but not given back to the operating system.","type":"bool"}},{"kind":64,"name":"mt_getrandmax","modifiers":0,"description":"","children":[],"doc":{"type":"int"}},{"kind":64,"name":"zip_close","modifiers":0,"children":[{"kind":128,"name":"$zip","modifiers":0,"doc":{"description":"A ZIP file previously opened with zip_open().","type":"resource"}}],"doc":{"description":"Closes the given ZIP file archive.","type":"void"}},{"kind":64,"name":"mcrypt_enc_get_algorithms_name","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"simplexml_import_dom","modifiers":0,"children":[{"kind":128,"name":"$node","modifiers":0,"doc":{"description":"A DOM Element node","type":"DOMNode"}},{"kind":128,"name":"$class_name","modifiers":0,"value":"\"SimpleXMLElement\"","doc":{"description":"You may use this optional parameter so that simplexml_import_dom() will return an object of the specified class. That class should extend the SimpleXMLElement class.","type":"string"}}],"doc":{"description":"This function takes a node of a DOM document and makes it into a SimpleXML node. This new object can then be used as a native SimpleXML element.","type":"SimpleXMLElement"}},{"kind":64,"name":"array_uintersect_assoc","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The first array.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"The second array.","type":"array"}}],"doc":{"description":"Computes the intersection of arrays with additional index check, compares data by a callback function.","type":"array"}},{"kind":64,"name":"session_write_close","modifiers":0,"children":[],"doc":{"description":"End the current session and store session data.","type":"void"}},{"kind":64,"name":"intval","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The scalar value being converted to an integer","type":"mixed"}},{"kind":128,"name":"$base","modifiers":0,"value":"10","doc":{"description":"The base for the conversion Note: If base is 0, the base used is determined by the format of var: if string includes a \"0x\" (or \"0X\") prefix, the base is taken as 16 (hex); otherwise, if string starts with \"0\", the base is taken as 8 (octal); otherwise, the base is taken as 10 (decimal).","type":"int"}}],"doc":{"description":"Returns the integer value of var, using the specified base for the conversion (the default is base 10). intval() should not be used on objects, as doing so will emit an E_NOTICE level error and return 1.","type":"int"}},{"kind":64,"name":"curl_multi_info_read","modifiers":0,"children":[{"kind":128,"name":"$mh","modifiers":0,"doc":{"description":"A cURL multi handle returned by curl_multi_init().","type":"resource"}},{"kind":128,"name":"$msgs_in_queue","modifiers":1024,"value":"NULL","doc":{"description":"Number of messages that are still in the queue","type":"int"}}],"doc":{"description":"Ask the multi handle if there are any messages or information from the individual transfers. Messages may include information such as an error code from the transfer or just the fact that a transfer is completed.","type":"array"}},{"kind":64,"name":"fbsql_fetch_lengths","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}}],"doc":{"description":"Stores the lengths of each result column in the last row returned by fbsql_fetch_row(), fbsql_fetch_array() and fbsql_fetch_object() in an array.","type":"array"}},{"kind":64,"name":"collator_sort_with_sort_keys","modifiers":0,"children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}},{"kind":128,"name":"$arr","modifiers":1024,"doc":{"description":"Array of strings to sort","type":"array"}}],"doc":{"description":"Similar to collator_sort() but uses ICU sorting keys produced by ucol_getSortKey() to gain more speed on large arrays.","type":"bool"}},{"kind":64,"name":"odbc_tables","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$qualifier","modifiers":0,"doc":{"description":"The qualifier.","type":"string"}},{"kind":128,"name":"$owner","modifiers":0,"doc":{"description":"The owner. Accepts search patterns ('%' to match zero or more characters and '_' to match a single character).","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name. Accepts search patterns ('%' to match zero or more characters and '_' to match a single character).","type":"string"}},{"kind":128,"name":"$types","modifiers":0,"doc":{"description":"If table_type is not an empty string, it must contain a list of comma-separated values for the types of interest; each value may be enclosed in single quotes (') or unquoted. For example, \"'TABLE','VIEW'\" or \"TABLE, VIEW\". If the data source does not support a specified table type, odbc_tables() does not return any results for that type.","type":"string"}}],"doc":{"description":"Lists all tables in the requested range.","type":"resource"}},{"kind":64,"name":"imagesavealpha","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$saveflag","modifiers":0,"doc":{"description":"Whether to save the alpha channel or not. Default to FALSE.","type":"bool"}}],"doc":{"description":"imagesavealpha() sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images.","type":"bool"}},{"kind":64,"name":"strcmp","modifiers":0,"description":"","children":[{"kind":128,"name":"$str1","modifiers":0,"doc":{"description":"The first string.","type":"string"}},{"kind":128,"name":"$str2","modifiers":0,"doc":{"description":"The second string.","type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"tempnam","modifiers":0,"children":[{"kind":128,"name":"$dir","modifiers":0,"doc":{"description":"The directory where the temporary filename will be created.","type":"string"}},{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The prefix of the generated temporary filename. Note: Windows uses only the first three characters of prefix.","type":"string"}}],"doc":{"description":"Creates a file with a unique filename, with access permission set to 0600, in the specified directory. If the directory does not exist or is not writable, tempnam() may generate a file in the system's temporary directory, and return the full path to that file, including its name.","type":"string"}},{"kind":64,"name":"pg_end_copy","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_end_copy() syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line(). pg_end_copy() must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error.","type":"bool"}},{"kind":64,"name":"str_split","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$split_length","modifiers":0,"value":"1","doc":{"description":"Maximum length of the chunk.","type":"int"}}],"doc":{"description":"Converts a string to an array.","type":"array"}},{"kind":64,"name":"xml_parse_into_struct","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser.","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"A string containing the XML data.","type":"string"}},{"kind":128,"name":"$values","modifiers":1024,"doc":{"description":"An array containing the values of the XML data","type":"array"}},{"kind":128,"name":"$index","modifiers":1024,"doc":{"description":"An array containing pointers to the location of the appropriate values in the $values.","type":"array"}}],"doc":{"description":"This function parses an XML string into 2 parallel array structures, one (index) containing pointers to the location of the appropriate values in the values array. These last two parameters must be passed by reference.","type":"int"}},{"kind":64,"name":"mb_list_encodings","modifiers":0,"children":[],"doc":{"description":"Returns an array containing all supported encodings.","type":"array"}},{"kind":64,"name":"xmlwriter_write_raw","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The text string to write.","type":"string"}}],"doc":{"description":"Writes a raw xml text.","type":"bool"}},{"kind":64,"name":"chr","modifiers":0,"children":[{"kind":128,"name":"$ascii","modifiers":0,"doc":{"description":"The extended ASCII code. Values outside the valid range (0..255) will be bitwise and'ed with 255, which is equivalent to the following algorithm: while ($ascii < 0) {    $ascii += 256;}$ascii %= 256;","type":"int"}}],"doc":{"description":"Returns a one-character string containing the character specified by ascii.","type":"string"}},{"kind":64,"name":"get_class_methods","modifiers":0,"children":[{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"The class name or an object instance","type":"mixed"}}],"doc":{"description":"Gets the class methods names.","type":"array"}},{"kind":64,"name":"apache_get_version","modifiers":0,"children":[],"doc":{"description":"Fetch the Apache version.","type":"string"}},{"kind":64,"name":"curl_multi_select","modifiers":0,"children":[{"kind":128,"name":"$mh","modifiers":0,"doc":{"description":"A cURL multi handle returned by curl_multi_init().","type":"resource"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1.0","doc":{"description":"Time, in seconds, to wait for a response.","type":"float"}}],"doc":{"description":"Blocks until there is activity on any of the curl_multi connections.","type":"int"}},{"kind":64,"name":"is_writable","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The filename being checked.","type":"string"}}],"doc":{"description":"Returns TRUE if the filename exists and is writable. The filename argument may be a directory name allowing you to check if a directory is writable.","type":"bool"}},{"kind":64,"name":"fbsql_field_type","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical offset of the field. The field index starts at 0.","type":"int"}}],"doc":{"description":"fbsql_field_type() is similar to the fbsql_field_name() function, but the field type is returned instead.","type":"string"}},{"kind":64,"name":"ldap_compare","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The distinguished name of an LDAP entity.","type":"string"}},{"kind":128,"name":"$attribute","modifiers":0,"doc":{"description":"The attribute name.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The compared value.","type":"string"}}],"doc":{"description":"Compare value of attribute with value of same attribute in an LDAP directory entry.","type":"mixed"}},{"kind":64,"name":"fbsql_free_result","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}}],"doc":{"description":"Frees all memory associated with the given result identifier.","type":"bool"}},{"kind":64,"name":"imagecolorat","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"x-coordinate of the point.","type":"int"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"y-coordinate of the point.","type":"int"}}],"doc":{"description":"Returns the index of the color of the pixel at the specified location in the image specified by image.","type":"int"}},{"kind":1,"name":"DOMDocumentFragment","associated":[{"kind":1,"name":"DOMNode"}],"children":[{"kind":32,"name":"appendXML","modifiers":1,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"XML to append.","type":"string"}}],"doc":{"description":"Appends raw XML data to a DOMDocumentFragment.","type":"bool"}}]},{"kind":64,"name":"imagepng","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$to","modifiers":0,"doc":{"description":"The path or an open stream resource (which is automatically being closed after this function returns) to save the file to. If not set or NULL, the raw image stream will be outputted directly. Note: NULL is invalid if the quality and filters arguments are not used.","type":"mixed"}},{"kind":128,"name":"$quality","modifiers":0,"doc":{"description":"Compression level: from 0 (no compression) to 9. The current default is 6. For more information see the » zlib manual.","type":"int"}},{"kind":128,"name":"$filters","modifiers":0,"doc":{"description":"Allows reducing the PNG file size. It is a bitmask field which may be set to any combination of the PNG_FILTER_XXX constants. PNG_NO_FILTER or PNG_ALL_FILTERS may also be used to respectively disable or activate all filters.","type":"int"}}],"doc":{"description":"Outputs or saves a PNG image from the given image.","type":"bool"}},{"kind":64,"name":"mysqli_field_tell","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}}],"doc":{"description":"Returns the position of the field cursor used for the last mysqli_fetch_field() call. This value can be used as an argument to mysqli_field_seek().","type":"int"}},{"kind":64,"name":"pg_set_client_encoding","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_set_client_encoding() sets the client encoding and returns 0 if success or -1 if error.","type":"int"}},{"kind":64,"name":"simplexml_load_string","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"A well-formed XML string","type":"string"}},{"kind":128,"name":"$class_name","modifiers":0,"value":"\"SimpleXMLElement\"","doc":{"description":"You may use this optional parameter so that simplexml_load_string() will return an object of the specified class. That class should extend the SimpleXMLElement class.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Since PHP 5.1.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.","type":"int"}},{"kind":128,"name":"$ns","modifiers":0,"value":"\"\"","doc":{"description":"Namespace prefix or URI.","type":"string"}},{"kind":128,"name":"$is_prefix","modifiers":0,"value":"false","doc":{"description":"TRUE if ns is a prefix, FALSE if it's a URI; defaults to FALSE.","type":"bool"}}],"doc":{"description":"Takes a well-formed XML string and returns it as an object.","type":"SimpleXMLElement"}},{"kind":64,"name":"iterator_count","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator being counted.","type":"Traversable"}}],"doc":{"description":"Count the elements in an iterator. iterator_count() is not guaranteed to retain the current position of the iterator.","type":"int"}},{"kind":64,"name":"imageloadfont","modifiers":0,"children":[{"kind":128,"name":"$file","modifiers":0,"doc":{"description":"The font file format is currently binary and architecture dependent. This means you should generate the font files on the same type of CPU as the machine you are running PHP on. Font file format byte position C data type description byte 0-3 int number of characters in the font byte 4-7 int value of first character in the font (often 32 for space) byte 8-11 int pixel width of each character byte 12-15 int pixel height of each character byte 16- char array with character data, one byte per pixel in each character, for a total of (nchars*width*height) bytes.","type":"string"}}],"doc":{"description":"imageloadfont() loads a user-defined bitmap and returns its identifier.","type":"int"}},{"kind":64,"name":"parse_ini_file","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The filename of the ini file being parsed.","type":"string"}},{"kind":128,"name":"$process_sections","modifiers":0,"value":"false","doc":{"description":"By setting the process_sections parameter to TRUE, you get a multidimensional array, with the section names and settings included. The default for process_sections is FALSE","type":"bool"}},{"kind":128,"name":"$scanner_mode","modifiers":0,"value":"INI_SCANNER_NORMAL","doc":{"description":"Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied, then option values will not be parsed. As of PHP 5.6.1 can also be specified as INI_SCANNER_TYPED. In this mode boolean, null and integer types are preserved when possible. String values \"true\", \"on\" and \"yes\" are converted to TRUE. \"false\", \"off\", \"no\" and \"none\" are considered FALSE. \"null\" is converted to NULL in typed mode. Also, all numeric strings are converted to integer type if it is possible.","type":"int"}}],"doc":{"description":"parse_ini_file() loads in the ini file specified in filename, and returns the settings in it in an associative array.","type":"array"}},{"kind":64,"name":"ibase_connect","modifiers":0,"children":[{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The database argument has to be a valid path to database file on the server it resides on. If the server is not local, it must be prefixed with either 'hostname:' (TCP/IP), 'hostname/port:' (TCP/IP with interbase server on custom TCP port), '//hostname/' (NetBEUI), depending on the connection protocol used.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The user name. Can be set with the ibase.default_user php.ini directive.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password for username. Can be set with the ibase.default_password php.ini directive.","type":"string"}},{"kind":128,"name":"$charset","modifiers":0,"doc":{"description":"charset is the default character set for a database.","type":"string"}},{"kind":128,"name":"$buffers","modifiers":0,"doc":{"description":"buffers is the number of database buffers to allocate for the server-side cache. If 0 or omitted, server chooses its own default.","type":"int"}},{"kind":128,"name":"$dialect","modifiers":0,"doc":{"description":"dialect selects the default SQL dialect for any statement executed within a connection, and it defaults to the highest one supported by client libraries.","type":"int"}},{"kind":128,"name":"$role","modifiers":0,"doc":{"description":"Functional only with InterBase 5 and up.","type":"string"}},{"kind":128,"name":"$sync","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Establishes a connection to an Firebird/InterBase server.","type":"resource"}},{"kind":64,"name":"array_push","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$value1","modifiers":0,"doc":{"description":"The first value to push onto the end of the array.","type":"mixed"}}],"doc":{"description":"array_push() treats array as a stack, and pushes the passed variables onto the end of array. The length of array increases by the number of variables pushed. Has the same effect as:","type":"int"}},{"kind":64,"name":"mssql_fetch_field","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"value":"-1","doc":{"description":"The numerical field offset. If the field offset is not specified, the next field that was not yet retrieved by this function is retrieved. The field_offset starts at 0.","type":"int"}}],"doc":{"type":"object"}},{"kind":64,"name":"stream_set_read_buffer","modifiers":0,"children":[{"kind":128,"name":"$stream","modifiers":0,"doc":{"description":"The file pointer.","type":"resource"}},{"kind":128,"name":"$buffer","modifiers":0,"doc":{"description":"The number of bytes to buffer. If buffer is 0 then read operations are unbuffered. This ensures that all reads with fread() are completed before other processes are allowed to read from that input stream.","type":"int"}}],"doc":{"description":"Sets the read buffer. It's the equivalent of stream_set_write_buffer(), but for read operations.","type":"int"}},{"kind":64,"name":"asin","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"Returns the arc sine of arg in radians. asin() is the complementary function of sin(), which means that a==sin(asin(a)) for every value of a that is within asin()'s range.","type":"float"}},{"kind":64,"name":"get_defined_vars","modifiers":0,"children":[],"doc":{"description":"This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that get_defined_vars() is called.","type":"array"}},{"kind":64,"name":"pg_field_prtlen","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$field_name_or_number","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"pg_field_prtlen() returns the actual printed length (number of characters) of a specific value in a PostgreSQL result. Row numbering starts at 0. This function will return FALSE on an error.","type":"int"}},{"kind":64,"name":"odbc_fetch_into","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result resource.","type":"resource"}},{"kind":128,"name":"$result_array","modifiers":1024,"doc":{"description":"The result array that can be of any type since it will be converted to type array. The array will contain the column values starting at array index 0.","type":"array"}},{"kind":128,"name":"$rownumber","modifiers":0,"doc":{"description":"The row number.","type":"int"}}],"doc":{"description":"Fetch one result row into array.","type":"int"}},{"kind":64,"name":"sys_get_temp_dir","modifiers":0,"children":[],"doc":{"description":"Returns the path of the directory PHP stores temporary files in by default.","type":"string"}},{"kind":64,"name":"mysqli_set_local_infile_handler","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$read_func","modifiers":0,"doc":{"description":"A callback function or object method taking the following parameters: stream A PHP stream associated with the SQL commands INFILE &buffer A string buffer to store the rewritten input into buflen The maximum number of characters to be stored in the buffer &errormsg If an error occurs you can store an error message in here","type":"callable"}}],"doc":{"description":"Set callback function for LOAD DATA LOCAL INFILE command","type":"bool"}},{"kind":64,"name":"is_a","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The tested object","type":"object"}},{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"The class name","type":"string"}},{"kind":128,"name":"$allow_string","modifiers":0,"value":"FALSE","doc":{"description":"If this parameter set to FALSE, string class name as object is not allowed. This also prevents from calling autoloader if the class doesn't exist.","type":"bool"}}],"doc":{"description":"Checks if the given object is of this class or has this class as one of its parents.","type":"bool"}},{"kind":64,"name":"mysqli_stmt_field_count","modifiers":0,"description":"","children":[{"kind":128,"name":"$stmt","modifiers":0,"description":"","doc":{"type":"mysqli_stmt"}}],"doc":{"type":"int"}},{"kind":64,"name":"fbsql_password","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"If provided, this will be the new connection password.","type":"string"}}],"doc":{"description":"Get or set the user password used with a connection.","type":"string"}},{"kind":64,"name":"gmp_nextprime","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"int"}}],"doc":{"description":"Find next prime number","type":"GMP"}},{"kind":64,"name":"session_regenerate_id","modifiers":0,"children":[{"kind":128,"name":"$delete_old_session","modifiers":0,"value":"false","doc":{"description":"Whether to delete the old associated session file or not. You should not delete old session if you need to avoid races caused by deletion or detect/avoid session hijack attacks.","type":"bool"}}],"doc":{"description":"session_regenerate_id() will replace the current session id with a new one, and keep the current session information.","type":"bool"}},{"kind":64,"name":"posix_getuid","modifiers":0,"children":[],"doc":{"description":"Return the numeric real user ID of the current process.","type":"int"}},{"kind":64,"name":"bzopen","modifiers":0,"children":[{"kind":128,"name":"$file","modifiers":0,"doc":{"description":"The name of the file to open, or an existing stream resource.","type":"mixed"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The modes 'r' (read), and 'w' (write) are supported. Everything else will cause bzopen() to return FALSE.","type":"string"}}],"doc":{"description":"bzopen() opens a bzip2 (.bz2) file for reading or writing.","type":"resource"}},{"kind":64,"name":"var_dump","modifiers":0,"description":"","children":[{"kind":128,"name":"$expression","modifiers":0,"doc":{"description":"The variable you want to dump.","type":"mixed"}}],"doc":{"type":"void"}},{"kind":64,"name":"gzread","modifiers":0,"children":[{"kind":128,"name":"$zp","modifiers":0,"doc":{"description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The number of bytes to read.","type":"int"}}],"doc":{"description":"gzread() reads up to length bytes from the given gz-file pointer. Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first.","type":"string"}},{"kind":64,"name":"imagefilltoborder","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"x-coordinate of start.","type":"int"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"y-coordinate of start.","type":"int"}},{"kind":128,"name":"$border","modifiers":0,"doc":{"description":"The border color. A color identifier created with imagecolorallocate().","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"The fill color. A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"imagefilltoborder() performs a flood fill whose border color is defined by border. The starting point for the fill is x, y (top left is 0, 0) and the region is filled with color color.","type":"bool"}},{"kind":64,"name":"output_reset_rewrite_vars","modifiers":0,"children":[],"doc":{"description":"This function resets the URL rewriter and removes all rewrite variables previously set by the output_add_rewrite_var() function.","type":"bool"}},{"kind":64,"name":"variant_round","modifiers":0,"children":[{"kind":128,"name":"$variant","modifiers":0,"doc":{"description":"The variant.","type":"mixed"}},{"kind":128,"name":"$decimals","modifiers":0,"doc":{"description":"Number of decimal places.","type":"int"}}],"doc":{"description":"Returns the value of variant rounded to decimals decimal places.","type":"mixed"}},{"kind":64,"name":"lcfirst","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"description":"Returns a string with the first character of str lowercased if that character is alphabetic.","type":"string"}},{"kind":64,"name":"sybase_field_seek","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"jdmonthname","modifiers":0,"children":[{"kind":128,"name":"$julianday","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$mode","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Returns a string containing a month name. mode tells this function which calendar to convert the Julian Day Count to, and what type of month names are to be returned.","type":"string"}},{"kind":64,"name":"snmpget","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"doc":{"description":"The SNMP agent.","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The read community.","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"int"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"int"}}],"doc":{"description":"The snmpget() function is used to read the value of an SNMP object specified by the object_id.","type":"string"}},{"kind":64,"name":"getmyinode","modifiers":0,"children":[],"doc":{"description":"Gets the inode of the current script.","type":"int"}},{"kind":64,"name":"pspell_config_create","modifiers":0,"children":[{"kind":128,"name":"$language","modifiers":0,"doc":{"description":"The language parameter is the language code which consists of the two letter ISO 639 language code and an optional two letter ISO 3166 country code after a dash or underscore.","type":"string"}},{"kind":128,"name":"$spelling","modifiers":0,"doc":{"description":"The spelling parameter is the requested spelling for languages with more than one spelling such as English. Known values are 'american', 'british', and 'canadian'.","type":"string"}},{"kind":128,"name":"$jargon","modifiers":0,"doc":{"description":"The jargon parameter contains extra information to distinguish two different words lists that have the same language and spelling parameters.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding parameter is the encoding that words are expected to be in. Valid values are 'utf-8', 'iso8859-*', 'koi8-r', 'viscii', 'cp1252', 'machine unsigned 16', 'machine unsigned 32'. This parameter is largely untested, so be careful when using.","type":"string"}}],"doc":{"description":"Create a config used to open a dictionary.","type":"int"}},{"kind":64,"name":"realpath_cache_size","modifiers":0,"children":[],"doc":{"description":"Get the amount of memory used by the realpath cache.","type":"int"}},{"kind":64,"name":"xmlwriter_set_indent_string","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$indentString","modifiers":0,"doc":{"description":"The indentation string.","type":"string"}}],"doc":{"description":"Sets the string which will be used to indent each element/attribute of the resulting xml.","type":"bool"}},{"kind":1,"name":"DOMElement","associated":[{"kind":1,"name":"DOMNode"}],"children":[{"kind":32,"name":"getElementsByTagName","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The tag name. Use * to return all elements within the element tree.","type":"string"}}],"doc":{"description":"This function returns a new instance of the class DOMNodeList of all descendant elements with a given tag name, in the order in which they are encountered in a preorder traversal of this element tree.","type":"DOMNodeList"}},{"kind":32,"name":"setIdAttributeNS","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI of the attribute.","type":"string"}},{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name of the attribute, as prefix:tagname.","type":"string"}},{"kind":128,"name":"$isId","modifiers":0,"doc":{"description":"Set it to TRUE if you want name to be of type ID, FALSE otherwise.","type":"bool"}}],"doc":{"description":"Declares the attribute specified by localName and namespaceURI to be of type ID.","type":"void"}},{"kind":32,"name":"getAttributeNodeNS","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}},{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name.","type":"string"}}],"doc":{"description":"Returns the attribute node in namespace namespaceURI with local name localName for the current node.","type":"DOMAttr"}},{"kind":32,"name":"setIdAttributeNode","modifiers":1,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"The attribute node.","type":"DOMAttr"}},{"kind":128,"name":"$isId","modifiers":0,"doc":{"description":"Set it to TRUE if you want name to be of type ID, FALSE otherwise.","type":"bool"}}],"doc":{"description":"Declares the attribute specified by attr to be of type ID.","type":"void"}},{"kind":32,"name":"hasAttributeNS","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}},{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name.","type":"string"}}],"doc":{"description":"Indicates whether attribute in namespace namespaceURI named localName exists as a member of the element.","type":"bool"}},{"kind":32,"name":"setIdAttribute","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the attribute.","type":"string"}},{"kind":128,"name":"$isId","modifiers":0,"doc":{"description":"Set it to TRUE if you want name to be of type ID, FALSE otherwise.","type":"bool"}}],"doc":{"description":"Declares the attribute name to be of type ID.","type":"void"}},{"kind":32,"name":"getAttributeNode","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the attribute.","type":"string"}}],"doc":{"description":"Returns the attribute node with name name for the current element.","type":"DOMAttr"}},{"kind":32,"name":"getElementsByTagNameNS","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}},{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name. Use * to return all elements within the element tree.","type":"string"}}],"doc":{"description":"This function fetch all the descendant elements with a given localName and namespaceURI.","type":"DOMNodeList"}},{"kind":32,"name":"setAttribute","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the attribute.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the attribute.","type":"string"}}],"doc":{"description":"Sets an attribute with name name to the given value. If the attribute does not exist, it will be created.","type":"DOMAttr"}},{"kind":32,"name":"hasAttribute","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The attribute name.","type":"string"}}],"doc":{"description":"Indicates whether attribute named name exists as a member of the element.","type":"bool"}},{"kind":32,"name":"setAttributeNode","modifiers":1,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"The attribute node.","type":"DOMAttr"}}],"doc":{"description":"Adds new attribute node attr to element.","type":"DOMAttr"}},{"kind":32,"name":"removeAttribute","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the attribute.","type":"string"}}],"doc":{"description":"Removes attribute named name from the element.","type":"bool"}},{"kind":32,"name":"removeAttributeNS","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}},{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name.","type":"string"}}],"doc":{"description":"Removes attribute is namespace namespaceURI named localName from the element.","type":"bool"}},{"kind":32,"name":"setAttributeNS","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}},{"kind":128,"name":"$qualifiedName","modifiers":0,"doc":{"description":"The qualified name of the attribute, as prefix:tagname.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the attribute.","type":"string"}}],"doc":{"description":"Sets an attribute with namespace namespaceURI and name name to the given value. If the attribute does not exist, it will be created.","type":"void"}},{"kind":32,"name":"getAttribute","modifiers":1,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the attribute.","type":"string"}}],"doc":{"description":"Gets the value of the attribute with name name for the current node.","type":"string"}},{"kind":32,"name":"getAttributeNS","modifiers":1,"children":[{"kind":128,"name":"$namespaceURI","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}},{"kind":128,"name":"$localName","modifiers":0,"doc":{"description":"The local name.","type":"string"}}],"doc":{"description":"Gets the value of the attribute in namespace namespaceURI with local name localName for the current node.","type":"string"}},{"kind":32,"name":"setAttributeNodeNS","modifiers":1,"children":[{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"The attribute node.","type":"DOMAttr"}}],"doc":{"description":"Adds new attribute node attr to element.","type":"DOMAttr"}}]},{"kind":64,"name":"get_extension_funcs","modifiers":0,"children":[{"kind":128,"name":"$module_name","modifiers":0,"doc":{"description":"The module name. Note: This parameter must be in lowercase.","type":"string"}}],"doc":{"description":"This function returns the names of all the functions defined in the module indicated by module_name.","type":"array"}},{"kind":64,"name":"posix_setsid","modifiers":0,"children":[],"doc":{"description":"Make the current process a session leader.","type":"int"}},{"kind":64,"name":"variant_fix","modifiers":0,"children":[{"kind":128,"name":"$variant","modifiers":0,"doc":{"description":"The variant.","type":"mixed"}}],"doc":{"description":"Gets the integer portion of a variant.","type":"mixed"}},{"kind":64,"name":"locale_get_region","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the region code from","type":"string"}}],"doc":{"description":"Gets the region for the input locale.","type":"string"}},{"kind":64,"name":"gmp_add","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"The first summand (augent). Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"The second summand (addend). Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Add two numbers.","type":"GMP"}},{"kind":64,"name":"imagefilledarc","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$cx","modifiers":0,"doc":{"description":"x-coordinate of the center.","type":"int"}},{"kind":128,"name":"$cy","modifiers":0,"doc":{"description":"y-coordinate of the center.","type":"int"}},{"kind":128,"name":"$width","modifiers":0,"doc":{"description":"The arc width.","type":"int"}},{"kind":128,"name":"$height","modifiers":0,"doc":{"description":"The arc height.","type":"int"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"The arc start angle, in degrees.","type":"int"}},{"kind":128,"name":"$end","modifiers":0,"doc":{"description":"The arc end angle, in degrees. 0° is located at the three-o'clock position, and the arc is drawn clockwise.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}},{"kind":128,"name":"$style","modifiers":0,"doc":{"description":"A bitwise OR of the following possibilities: IMG_ARC_PIE IMG_ARC_CHORD IMG_ARC_NOFILL IMG_ARC_EDGED IMG_ARC_PIE and IMG_ARC_CHORD are mutually exclusive; IMG_ARC_CHORD just connects the starting and ending angles with a straight line, while IMG_ARC_PIE produces a rounded edge. IMG_ARC_NOFILL indicates that the arc or chord should be outlined, not filled. IMG_ARC_EDGED, used together with IMG_ARC_NOFILL, indicates that the beginning and ending angles should be connected to the center - this is a good way to outline (rather than fill) a 'pie slice'.","type":"int"}}],"doc":{"description":"Draws a partial arc centered at the specified coordinate in the given image.","type":"bool"}},{"kind":64,"name":"grapheme_strripos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string to look in. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to look for. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"The optional $offset parameter allows you to specify where in $haystack to start searching as an offset in grapheme units (not bytes or characters). The position returned is still relative to the beginning of haystack regardless of the value of $offset.","type":"int"}}],"doc":{"description":"Find position (in grapheme units) of last occurrence of a case-insensitive string","type":"int"}},{"kind":64,"name":"trim","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string that will be trimmed.","type":"string"}},{"kind":128,"name":"$character_mask","modifiers":0,"value":"\"","doc":{"description":"Optionally, the stripped characters can also be specified using the character_mask parameter. Simply list all characters that you want to be stripped. With .. you can specify a range of characters.","type":"string"}}],"doc":{"description":"This function returns a string with whitespace stripped from the beginning and end of str. Without the second parameter, trim() will strip these characters:","type":"string"}},{"kind":64,"name":"normalizer_is_normalized","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The input string to normalize","type":"string"}},{"kind":128,"name":"$form","modifiers":0,"value":"Normalizer::FORM_C","doc":{"description":"One of the normalization forms.","type":"int"}}],"doc":{"description":"Checks if the provided string is already in the specified normalization form.","type":"bool"}},{"kind":64,"name":"strcasecmp","modifiers":0,"children":[{"kind":128,"name":"$str1","modifiers":0,"doc":{"description":"The first string","type":"string"}},{"kind":128,"name":"$str2","modifiers":0,"doc":{"description":"The second string","type":"string"}}],"doc":{"description":"Binary safe case-insensitive string comparison.","type":"int"}},{"kind":64,"name":"posix_initgroups","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The user to calculate the list for.","type":"string"}},{"kind":128,"name":"$base_group_id","modifiers":0,"doc":{"description":"Typically the group number from the password file.","type":"int"}}],"doc":{"description":"Calculates the group access list for the user specified in name.","type":"bool"}},{"kind":64,"name":"gethostbynamel","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"doc":{"description":"The host name.","type":"string"}}],"doc":{"description":"Returns a list of IPv4 addresses to which the Internet host specified by hostname resolves.","type":"array"}},{"kind":64,"name":"intlcal_add","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}},{"kind":128,"name":"$amount","modifiers":0,"doc":{"description":"The signed amount to add to the current field. If the amount is positive, the instant will be moved forward; if it is negative, the instant wil be moved into the past. The unit is implicit to the field type. For instance, hours for IntlCalendar::FIELD_HOUR_OF_DAY.","type":"int"}}],"doc":{"description":"Add a signed amount to a field. Adding a positive amount allows advances in time, even if the numeric value of the field decreases (e.g. when working with years in BC dates).","type":"bool"}},{"kind":64,"name":"curl_multi_exec","modifiers":0,"children":[{"kind":128,"name":"$mh","modifiers":0,"doc":{"description":"A cURL multi handle returned by curl_multi_init().","type":"resource"}},{"kind":128,"name":"$still_running","modifiers":1024,"doc":{"description":"A reference to a flag to tell whether the operations are still running.","type":"int"}}],"doc":{"description":"Processes each of the handles in the stack. This method can be called whether or not a handle needs to read or write data.","type":"int"}},{"kind":64,"name":"opcache_reset","modifiers":0,"children":[],"doc":{"description":"This function resets the entire opcode cache. After calling opcache_reset(), all scripts will be reloaded and reparsed the next time they are hit.","type":"boolean"}},{"kind":64,"name":"urlencode","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to be encoded.","type":"string"}}],"doc":{"description":"This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page.","type":"string"}},{"kind":64,"name":"odbc_rollback","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}}],"doc":{"description":"Rolls back all pending statements on the connection.","type":"bool"}},{"kind":64,"name":"addslashes","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to be escaped.","type":"string"}}],"doc":{"description":"Returns a string with backslashes before characters that need to be escaped. These characters are single quote ('), double quote (\"), backslash (\\) and NUL (the NULL byte).","type":"string"}},{"kind":64,"name":"pspell_add_to_personal","modifiers":0,"description":"","children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$word","modifiers":0,"doc":{"description":"The added word.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"time_sleep_until","modifiers":0,"children":[{"kind":128,"name":"$timestamp","modifiers":0,"doc":{"description":"The timestamp when the script should wake.","type":"float"}}],"doc":{"description":"Makes the script sleep until the specified timestamp.","type":"bool"}},{"kind":64,"name":"openssl_dh_compute_key","modifiers":0,"description":"","children":[{"kind":128,"name":"$pub_key","modifiers":0,"doc":{"description":"Public key","type":"string"}},{"kind":128,"name":"$dh_key","modifiers":0,"doc":{"description":"DH key","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"openssl_pkcs12_export","modifiers":0,"children":[{"kind":128,"name":"$x509","modifiers":0,"doc":{"description":"See Key/Certificate parameters for a list of valid values.","type":"mixed"}},{"kind":128,"name":"$out","modifiers":1024,"doc":{"description":"On success, this will hold the PKCS#12.","type":"string"}},{"kind":128,"name":"$priv_key","modifiers":0,"doc":{"description":"Private key component of PKCS#12 file.","type":"mixed"}},{"kind":128,"name":"$pass","modifiers":0,"doc":{"description":"Encryption password for unlocking the PKCS#12 file.","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"openssl_pkcs12_export() stores x509 into a string named by out in a PKCS#12 file format.","type":"bool"}},{"kind":64,"name":"openssl_decrypt","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data.","type":"string"}},{"kind":128,"name":"$method","modifiers":0,"doc":{"description":"The cipher method.","type":"string"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The key.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"options can be one of OPENSSL_RAW_DATA, OPENSSL_ZERO_PADDING.","type":"int"}},{"kind":128,"name":"$iv","modifiers":0,"value":"\"\"","doc":{"description":"A non-NULL Initialization Vector.","type":"string"}},{"kind":128,"name":"$tag","modifiers":0,"value":"\"\"","doc":{"description":"The authentication tag in AEAD cipher mode. If it is incorrect, the authentication fails and the function returns FALSE.","type":"string"}},{"kind":128,"name":"$aad","modifiers":0,"value":"\"\"","doc":{"description":"Additional authentication data.","type":"string"}}],"doc":{"description":"Takes a raw or base64 encoded string and decrypts it using a given method and key.","type":"string"}},{"kind":64,"name":"count_chars","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The examined string.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"value":"0","doc":{"description":"See return values.","type":"int"}}],"doc":{"description":"Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways.","type":"mixed"}},{"kind":64,"name":"symlink","modifiers":0,"children":[{"kind":128,"name":"$target","modifiers":0,"doc":{"description":"Target of the link.","type":"string"}},{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"The link name.","type":"string"}}],"doc":{"description":"symlink() creates a symbolic link to the existing target with the specified name link.","type":"bool"}},{"kind":64,"name":"intlcal_get_day_of_week_type","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$dayOfWeek","modifiers":0,"doc":{"description":"One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, …, IntlCalendar::DOW_SATURDAY.","type":"int"}}],"doc":{"description":"Returns whether the passed day is a weekday (IntlCalendar::DOW_TYPE_WEEKDAY), a weekend day (IntlCalendar::DOW_TYPE_WEEKEND), a day during which a transition occurs into the weekend (IntlCalendar::DOW_TYPE_WEEKEND_OFFSET) or a day during which the weekend ceases (IntlCalendar::DOW_TYPE_WEEKEND_CEASE).","type":"int"}},{"kind":64,"name":"xmlwriter_end_dtd_entity","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Ends the current DTD entity.","type":"bool"}},{"kind":64,"name":"get_defined_functions","modifiers":0,"children":[{"kind":128,"name":"$exclude_disabled","modifiers":0,"value":"FALSE","doc":{"description":"Whether disabled functions should be excluded from the return value.","type":"bool"}}],"doc":{"description":"Gets an array of all defined functions.","type":"array"}},{"kind":64,"name":"oci_new_cursor","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"An Oracle connection identifier, returned by oci_connect() or oci_pconnect().","type":"resource"}}],"doc":{"description":"Allocates a new statement handle on the specified connection.","type":"resource"}},{"kind":64,"name":"pcntl_signal_get_handler","modifiers":0,"children":[{"kind":128,"name":"$signo","modifiers":0,"doc":{"description":"The signal number.","type":"int"}}],"doc":{"description":"The pcntl_signal_get_handler() function will get the current handler for the specified signo.","type":"int|string"}},{"kind":64,"name":"utf8_encode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"An ISO-8859-1 string.","type":"string"}}],"doc":{"description":"This function converts the string data from the ISO-8859-1 encoding to UTF-8.","type":"string"}},{"kind":64,"name":"mysqli_more_results","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Indicates if one or more result sets are available from a previous call to mysqli_multi_query().","type":"bool"}},{"kind":64,"name":"imap_mail_move","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msglist","modifiers":0,"doc":{"description":"msglist is a range not just message numbers (as described in » RFC2060).","type":"string"}},{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"options is a bitmask and may contain the single option: CP_UID - the sequence numbers contain UIDS","type":"int"}}],"doc":{"description":"Moves mail messages specified by msglist to the specified mailbox.","type":"bool"}},{"kind":64,"name":"intltz_get_error_message","modifiers":0,"description":"","children":[],"doc":{"type":"string"}},{"kind":64,"name":"sybase_min_client_severity","modifiers":0,"description":"","children":[{"kind":128,"name":"$severity","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"void"}},{"kind":64,"name":"intlcal_get_error_code","modifiers":0,"children":[{"kind":128,"name":"$calendar","modifiers":0,"doc":{"description":"The calendar object, on the procedural style interface.","type":"IntlCalendar"}}],"doc":{"description":"Returns the numeric ICU error code for the last call on this object (including cloning) or the IntlCalendar given for the calendar parameter (in the procedural‒style version). This may indicate only a warning (negative error code) or no error at all (U_ZERO_ERROR). The actual presence of an error can be tested with intl_is_failure().","type":"int"}},{"kind":64,"name":"hebrev","modifiers":0,"children":[{"kind":128,"name":"$hebrew_text","modifiers":0,"doc":{"description":"A Hebrew input string.","type":"string"}},{"kind":128,"name":"$max_chars_per_line","modifiers":0,"value":"0","doc":{"description":"This optional parameter indicates maximum number of characters per line that will be returned.","type":"int"}}],"doc":{"description":"Converts logical Hebrew text to visual text.","type":"string"}},{"kind":64,"name":"gc_enable","modifiers":0,"children":[],"doc":{"description":"Activates the circular reference collector, setting zend.enable_gc to 1.","type":"void"}},{"kind":64,"name":"preg_quote","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$delimiter","modifiers":0,"value":"NULL","doc":{"description":"If the optional delimiter is specified, it will also be escaped. This is useful for escaping the delimiter that is required by the PCRE functions. The / is the most commonly used delimiter.","type":"string"}}],"doc":{"description":"preg_quote() takes str and puts a backslash in front of every character that is part of the regular expression syntax. This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters.","type":"string"}},{"kind":64,"name":"phpversion","modifiers":0,"children":[{"kind":128,"name":"$extension","modifiers":0,"doc":{"description":"An optional extension name.","type":"string"}}],"doc":{"description":"Returns a string containing the version of the currently running PHP parser or extension.","type":"string"}},{"kind":64,"name":"xmlrpc_parse_method_descriptions","modifiers":0,"description":"","children":[{"kind":128,"name":"$xml","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"array"}},{"kind":64,"name":"print","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The input data.","type":"string"}}],"doc":{"description":"Outputs arg.","type":"int"}},{"kind":64,"name":"pg_escape_literal","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect(). When there is no default connection, it raises E_WARNING and returns FALSE.","type":"resource"}}],"doc":{"description":"pg_escape_literal() escapes a literal for querying the PostgreSQL database. It returns an escaped literal in the PostgreSQL format. pg_escape_literal() adds quotes before and after data. Users should not add quotes. Use of this function is recommended instead of pg_escape_string(). If the type of the column is bytea, pg_escape_bytea() must be used instead. For escaping identifiers (e.g. table, field names), pg_escape_identifier() must be used.","type":"string"}},{"kind":64,"name":"ftp_fput","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$remote_file","modifiers":0,"doc":{"description":"The remote file path.","type":"string"}},{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"An open file pointer on the local file. Reading stops at end of file.","type":"resource"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY.","type":"int"}},{"kind":128,"name":"$startpos","modifiers":0,"value":"0","doc":{"description":"The position in the remote file to start uploading to.","type":"int"}}],"doc":{"description":"ftp_fput() uploads the data from a file pointer to a remote file on the FTP server.","type":"bool"}},{"kind":64,"name":"datefmt_parse","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource","type":"IntlDateFormatter"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"string to convert to a time","type":"string"}},{"kind":128,"name":"$position","modifiers":1024,"doc":{"description":"Position at which to start the parsing in $value (zero-based). If no error occurs before $value is consumed, $parse_pos will contain -1 otherwise it will contain the position at which parsing ended (and the error occurred). This variable will contain the end position if the parse fails. If $parse_pos > strlen($value), the parse fails immediately.","type":"int"}}],"doc":{"description":"Converts string $value to an incremental time value, starting at $parse_pos and consuming as much of the input value as possible.","type":"int"}},{"kind":64,"name":"mcrypt_enc_get_modes_name","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"cyrus_close","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"The connection handle.","type":"resource"}}],"doc":{"description":"Closes the connection to a Cyrus IMAP server.","type":"bool"}},{"kind":64,"name":"mysqli_ssl_set","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The path name to the key file.","type":"string"}},{"kind":128,"name":"$cert","modifiers":0,"doc":{"description":"The path name to the certificate file.","type":"string"}},{"kind":128,"name":"$ca","modifiers":0,"doc":{"description":"The path name to the certificate authority file.","type":"string"}},{"kind":128,"name":"$capath","modifiers":0,"doc":{"description":"The pathname to a directory that contains trusted SSL CA certificates in PEM format.","type":"string"}},{"kind":128,"name":"$cipher","modifiers":0,"doc":{"description":"A list of allowable ciphers to use for SSL encryption.","type":"string"}}],"doc":{"description":"Used for establishing secure connections using SSL. It must be called before mysqli_real_connect(). This function does nothing unless OpenSSL support is enabled.","type":"bool"}},{"kind":64,"name":"imagegetclip","modifiers":0,"children":[{"kind":128,"name":"$im","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"imagegetclip() retrieves the current clipping rectangle, i.e. the area beyond which no pixels will be drawn.","type":"array"}},{"kind":64,"name":"odbc_prepare","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$query_string","modifiers":0,"doc":{"description":"The query string statement being prepared.","type":"string"}}],"doc":{"description":"Prepares a statement for execution. The result identifier can be used later to execute the statement with odbc_execute().","type":"resource"}},{"kind":64,"name":"ctype_punct","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The tested string.","type":"string"}}],"doc":{"description":"Checks if all of the characters in the provided string, text, are punctuation character.","type":"bool"}},{"kind":64,"name":"imagettfbbox","modifiers":0,"children":[{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"The font size. Note: In GD 1, this is measured in pixels. In GD 2, this is measured in points.","type":"float"}},{"kind":128,"name":"$angle","modifiers":0,"doc":{"description":"Angle in degrees in which text will be measured.","type":"float"}},{"kind":128,"name":"$fontfile","modifiers":0,"doc":{"description":"The name of the TrueType font file (can be a URL). Depending on which version of the GD library that PHP is using, it may attempt to search for files that do not begin with a leading '/' by appending '.ttf' to the filename and searching along a library-defined font path.","type":"string"}},{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The string to be measured.","type":"string"}}],"doc":{"description":"This function calculates and returns the bounding box in pixels for a TrueType text.","type":"array"}},{"kind":64,"name":"odbc_result","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The ODBC resource.","type":"resource"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"The field name being retrieved. It can either be an integer containing the column number of the field you want; or it can be a string containing the name of the field.","type":"mixed"}}],"doc":{"description":"Get result data","type":"mixed"}},{"kind":64,"name":"mysqli_stmt_free_result","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Frees the result memory associated with the statement, which was allocated by mysqli_stmt_store_result().","type":"void"}},{"kind":64,"name":"preg_split","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern to search for, as a string.","type":"string"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$limit","modifiers":0,"value":"-1","doc":{"description":"If specified, then only substrings up to limit are returned with the rest of the string being placed in the last substring. A limit of -1, 0 or NULL means \"no limit\" and, as is standard across PHP, you can use NULL to skip to the flags parameter.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"flags can be any combination of the following flags (combined with the | bitwise operator): PREG_SPLIT_NO_EMPTY If this flag is set, only non-empty pieces will be returned by preg_split(). PREG_SPLIT_DELIM_CAPTURE If this flag is set, parenthesized expression in the delimiter pattern will be captured and returned as well. PREG_SPLIT_OFFSET_CAPTURE If this flag is set, for every occurring match the appendant string offset will also be returned. Note that this changes the return value in an array where every element is an array consisting of the matched string at offset 0 and its string offset into subject at offset 1.","type":"int"}}],"doc":{"description":"Split the given string by a regular expression.","type":"array"}},{"kind":64,"name":"is_null","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable being evaluated.","type":"mixed"}}],"doc":{"description":"Finds whether the given variable is NULL.","type":"bool"}},{"kind":64,"name":"collator_get_attribute","modifiers":0,"children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute to get value for.","type":"int"}}],"doc":{"description":"Get a value of an integer collator attribute.","type":"int"}},{"kind":64,"name":"substr_replace","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string. An array of strings can be provided, in which case the replacements will occur on each string in turn. In this case, the replacement, start and length parameters may be provided either as scalar values to be applied to each input string in turn, or as arrays, in which case the corresponding array element will be used for each input string.","type":"mixed"}},{"kind":128,"name":"$replacement","modifiers":0,"doc":{"description":"The replacement string.","type":"mixed"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"If start is non-negative, the replacing will begin at the start'th offset into string. If start is negative, the replacing will begin at the start'th character from the end of string.","type":"mixed"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"If given and is positive, it represents the length of the portion of string which is to be replaced. If it is negative, it represents the number of characters from the end of string at which to stop replacing. If it is not given, then it will default to strlen( string ); i.e. end the replacing at the end of string. Of course, if length is zero then this function will have the effect of inserting replacement into string at the given start offset.","type":"mixed"}}],"doc":{"description":"substr_replace() replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement.","type":"mixed"}},{"kind":64,"name":"intl_get_error_message","modifiers":0,"children":[],"doc":{"description":"Get error message from last internationalization function called.","type":"string"}},{"kind":64,"name":"imagecopyresampled","modifiers":0,"children":[{"kind":128,"name":"$dst_image","modifiers":0,"doc":{"description":"Destination image link resource.","type":"resource"}},{"kind":128,"name":"$src_image","modifiers":0,"doc":{"description":"Source image link resource.","type":"resource"}},{"kind":128,"name":"$dst_x","modifiers":0,"doc":{"description":"x-coordinate of destination point.","type":"int"}},{"kind":128,"name":"$dst_y","modifiers":0,"doc":{"description":"y-coordinate of destination point.","type":"int"}},{"kind":128,"name":"$src_x","modifiers":0,"doc":{"description":"x-coordinate of source point.","type":"int"}},{"kind":128,"name":"$src_y","modifiers":0,"doc":{"description":"y-coordinate of source point.","type":"int"}},{"kind":128,"name":"$dst_w","modifiers":0,"doc":{"description":"Destination width.","type":"int"}},{"kind":128,"name":"$dst_h","modifiers":0,"doc":{"description":"Destination height.","type":"int"}},{"kind":128,"name":"$src_w","modifiers":0,"doc":{"description":"Source width.","type":"int"}},{"kind":128,"name":"$src_h","modifiers":0,"doc":{"description":"Source height.","type":"int"}}],"doc":{"description":"imagecopyresampled() copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity.","type":"bool"}},{"kind":64,"name":"getrandmax","modifiers":0,"description":"","children":[],"doc":{"type":"int"}},{"kind":64,"name":"pg_client_encoding","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"PostgreSQL supports automatic character set conversion between server and client for certain character sets. pg_client_encoding() returns the client encoding as a string. The returned string will be one of the standard PostgreSQL encoding identifiers.","type":"string"}},{"kind":64,"name":"session_cache_expire","modifiers":0,"children":[{"kind":128,"name":"$new_cache_expire","modifiers":0,"doc":{"description":"If new_cache_expire is given, the current cache expire is replaced with new_cache_expire. Note: Setting new_cache_expire is of value only, if session.cache_limiter is set to a value different from nocache.","type":"string"}}],"doc":{"description":"session_cache_expire() returns the current setting of session.cache_expire.","type":"int"}},{"kind":64,"name":"xml_parser_get_option","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to get an option from.","type":"resource"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"Which option to fetch. XML_OPTION_CASE_FOLDING and XML_OPTION_TARGET_ENCODING are available. See xml_parser_set_option() for their description.","type":"int"}}],"doc":{"description":"Gets an option value from an XML parser.","type":"mixed"}},{"kind":64,"name":"mcrypt_enc_get_supported_key_sizes","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"array"}},{"kind":64,"name":"stream_set_chunk_size","modifiers":0,"children":[{"kind":128,"name":"$fp","modifiers":0,"doc":{"description":"The target stream.","type":"resource"}},{"kind":128,"name":"$chunk_size","modifiers":0,"doc":{"description":"The desired new chunk size.","type":"int"}}],"doc":{"description":"Set the stream chunk size.","type":"int"}},{"kind":64,"name":"xmlwriter_end_pi","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Ends the current processing instruction.","type":"bool"}},{"kind":64,"name":"intlcal_set","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"The new value for IntlCalendar::FIELD_YEAR.","type":"int"}},{"kind":128,"name":"$month","modifiers":0,"doc":{"description":"The new value for IntlCalendar::FIELD_MONTH.","type":"int"}},{"kind":128,"name":"$dayOfMonth","modifiers":0,"value":"NULL","doc":{"description":"The new value for IntlCalendar::FIELD_DAY_OF_MONTH. The month sequence is zero-based, i.e., January is represented by 0, February by 1, …, December is 11 and Undecember (if the calendar has it) is 12.","type":"int"}},{"kind":128,"name":"$hour","modifiers":0,"value":"NULL","doc":{"description":"The new value for IntlCalendar::FIELD_HOUR_OF_DAY.","type":"int"}},{"kind":128,"name":"$minute","modifiers":0,"value":"NULL","doc":{"description":"The new value for IntlCalendar::FIELD_MINUTE.","type":"int"}},{"kind":128,"name":"$second","modifiers":0,"value":"NULL","doc":{"description":"The new value for IntlCalendar::FIELD_SECOND.","type":"int"}}],"doc":{"description":"Sets either a specific field to the given value, or sets at once several common fields. The range of values that are accepted depend on whether the calendar is using the lenient mode.","type":"bool"}},{"kind":64,"name":"xml_parser_create","modifiers":0,"children":[{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The optional encoding specifies the character encoding for the input/output in PHP 4. Starting from PHP 5, the input encoding is automatically detected, so that the encoding parameter specifies only the output encoding. In PHP 4, the default output encoding is the same as the input charset. If empty string is passed, the parser attempts to identify which encoding the document is encoded in by looking at the heading 3 or 4 bytes. In PHP 5.0.0 and 5.0.1, the default output charset is ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported encodings are ISO-8859-1, UTF-8 and US-ASCII.","type":"string"}}],"doc":{"description":"xml_parser_create() creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions.","type":"resource"}},{"kind":64,"name":"mysqli_stmt_fetch","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Fetch the result from a prepared statement into the variables bound by mysqli_stmt_bind_result().","type":"bool"}},{"kind":64,"name":"floor","modifiers":0,"description":"","children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The numeric value to round","type":"float"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"mysqli_get_host_info","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns a string describing the connection represented by the link parameter (including the server host name).","type":"string"}},{"kind":64,"name":"fbsql_change_user","modifiers":0,"children":[{"kind":128,"name":"$user","modifiers":0,"doc":{"description":"The new user name.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The new user password.","type":"string"}},{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"If specified, this will be the default or current database after the user has been changed.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"fbsql_change_user() changes the logged in user of the specified connection. If the new user and password authorization fails, the current connected user stays active.","type":"bool"}},{"kind":64,"name":"enchant_dict_add_to_personal","modifiers":0,"children":[{"kind":128,"name":"$dict","modifiers":0,"doc":{"description":"Dictionary resource","type":"resource"}},{"kind":128,"name":"$word","modifiers":0,"doc":{"description":"The word to add","type":"string"}}],"doc":{"description":"Add a word to personal word list of the given dictionary.","type":"void"}},{"kind":64,"name":"str_replace","modifiers":0,"children":[{"kind":128,"name":"$search","modifiers":0,"doc":{"description":"The value being searched for, otherwise known as the needle. An array may be used to designate multiple needles.","type":"mixed"}},{"kind":128,"name":"$replace","modifiers":0,"doc":{"description":"The replacement value that replaces found search values. An array may be used to designate multiple replacements.","type":"mixed"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The string or array being searched and replaced on, otherwise known as the haystack. If subject is an array, then the search and replace is performed with every entry of subject, and the return value is an array as well.","type":"mixed"}},{"kind":128,"name":"$count","modifiers":1024,"doc":{"description":"If passed, this will be set to the number of replacements performed.","type":"int"}}],"doc":{"description":"This function returns a string or an array with all occurrences of search in subject replaced with the given replace value.","type":"mixed"}},{"kind":64,"name":"strncasecmp","modifiers":0,"children":[{"kind":128,"name":"$str1","modifiers":0,"doc":{"description":"The first string.","type":"string"}},{"kind":128,"name":"$str2","modifiers":0,"doc":{"description":"The second string.","type":"string"}},{"kind":128,"name":"$len","modifiers":0,"doc":{"description":"The length of strings to be used in the comparison.","type":"int"}}],"doc":{"description":"This function is similar to strcasecmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.","type":"int"}},{"kind":64,"name":"str_rot13","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"description":"Performs the ROT13 encoding on the str argument and returns the resulting string.","type":"string"}},{"kind":64,"name":"curl_reset","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}}],"doc":{"description":"This function re-initializes all options set on the given cURL handle to the default values.","type":"void"}},{"kind":64,"name":"bcmod","modifiers":0,"children":[{"kind":128,"name":"$left_operand","modifiers":0,"doc":{"description":"The left operand, as a string.","type":"string"}},{"kind":128,"name":"$modulus","modifiers":0,"doc":{"description":"The modulus, as a string.","type":"string"}}],"doc":{"description":"Get the modulus of the left_operand using modulus.","type":"string"}},{"kind":64,"name":"eregi","modifiers":0,"description":"","children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Case insensitive regular expression.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$regs","modifiers":1024,"doc":{"description":"If matches are found for parenthesized substrings of pattern and the function is called with the third argument regs, the matches will be stored in the elements of the array regs. $regs[1] will contain the substring which starts at the first left parenthesis; $regs[2] will contain the substring starting at the second, and so on. $regs[0] will contain a copy of the complete string matched.","type":"array"}}],"doc":{"type":"int"}},{"kind":64,"name":"unpack","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"See pack() for an explanation of the format codes.","type":"string"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The packed data.","type":"string"}}],"doc":{"description":"Unpacks from a binary string into an array according to the given format.","type":"array"}},{"kind":64,"name":"mssql_field_name","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}},{"kind":128,"name":"$offset","modifiers":0,"value":"-1","doc":{"description":"The field offset, starts at 0. If omitted, the current field is used.","type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"sem_acquire","modifiers":0,"children":[{"kind":128,"name":"$sem_identifier","modifiers":0,"doc":{"description":"sem_identifier is a semaphore resource, obtained from sem_get().","type":"resource"}},{"kind":128,"name":"$nowait","modifiers":0,"value":"false","doc":{"description":"Specifies if the process shouldn't wait for the semaphore to be acquired. If set to true, the call will return false immediately if a semaphore cannot be immediately acquired.","type":"bool"}}],"doc":{"description":"sem_acquire() by default blocks (if necessary) until the semaphore can be acquired. A process attempting to acquire a semaphore which it has already acquired will block forever if acquiring the semaphore would cause its maximum number of semaphore to be exceeded.","type":"bool"}},{"kind":64,"name":"imap_list","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$ref","modifiers":0,"doc":{"description":"ref should normally be just the server specification as described in imap_open().","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. '*' means to return all mailboxes. If you pass pattern as '*', you will get a list of the entire mailbox hierarchy. '%' means to return the current level only. '%' as the pattern parameter will return only the top level mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox in the ~/mail directory, but none in subfolders of that directory.","type":"string"}}],"doc":{"description":"Read the list of mailboxes.","type":"array"}},{"kind":64,"name":"variant_set_type","modifiers":0,"children":[{"kind":128,"name":"$variant","modifiers":0,"doc":{"description":"The variant.","type":"variant"}},{"kind":128,"name":"$type","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"This function is similar to variant_cast() except that the variant is modified \"in-place\"; no new variant is created. The parameters for this function have identical meaning to those of variant_cast().","type":"void"}},{"kind":64,"name":"extract","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"An associative array. This function treats keys as variable names and values as variable values. For each key/value pair it will create a variable in the current symbol table, subject to flags and prefix parameters. You must use an associative array; a numerically indexed array will not produce results unless you use EXTR_PREFIX_ALL or EXTR_PREFIX_INVALID.","type":"array"}},{"kind":128,"name":"$flags","modifiers":0,"value":"EXTR_OVERWRITE","doc":{"description":"The way invalid/numeric keys and collisions are treated is determined by the extraction flags. It can be one of the following values: EXTR_OVERWRITE If there is a collision, overwrite the existing variable. EXTR_SKIP If there is a collision, don't overwrite the existing variable. EXTR_PREFIX_SAME If there is a collision, prefix the variable name with prefix. EXTR_PREFIX_ALL Prefix all variable names with prefix. EXTR_PREFIX_INVALID Only prefix invalid/numeric variable names with prefix. EXTR_IF_EXISTS Only overwrite the variable if it already exists in the current symbol table, otherwise do nothing. This is useful for defining a list of valid variables and then extracting only those variables you have defined out of $_REQUEST, for example. EXTR_PREFIX_IF_EXISTS Only create prefixed variable names if the non-prefixed version of the same variable exists in the current symbol table. EXTR_REFS Extracts variables as references. This effectively means that the values of the imported variables are still referencing the values of the array parameter. You can use this flag on its own or combine it with any other flag by OR'ing the flags. If flags is not specified, it is assumed to be EXTR_OVERWRITE.","type":"int"}},{"kind":128,"name":"$prefix","modifiers":0,"value":"NULL","doc":{"description":"Note that prefix is only required if flags is EXTR_PREFIX_SAME, EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID or EXTR_PREFIX_IF_EXISTS. If the prefixed result is not a valid variable name, it is not imported into the symbol table. Prefixes are automatically separated from the array key by an underscore character.","type":"string"}}],"doc":{"description":"Import variables from an array into the current symbol table.","type":"int"}},{"kind":32,"name":"onSelected","modifiers":0,"children":[],"doc":{"description":"Shall be executed when the option selected in this Radio changes","type":"protected"}},{"kind":64,"name":"oci_field_name","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Can be the field's index (1-based) or name.","type":"mixed"}}],"doc":{"description":"Returns the name of the field.","type":"string"}},{"kind":64,"name":"fileperms","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Gets permissions for the given file.","type":"int"}},{"kind":64,"name":"msql_fetch_field","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"value":"0","doc":{"description":"The field offset. If not specified, the next field that wasn't yet retrieved by msql_fetch_field() is retrieved.","type":"int"}}],"doc":{"description":"msql_fetch_field() can be used in order to obtain information about fields in a certain query result.","type":"object"}},{"kind":64,"name":"socket_clear_error","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create().","type":"resource"}}],"doc":{"description":"This function clears the error code on the given socket or the global last socket error if no socket is specified.","type":"void"}},{"kind":64,"name":"filter_input","modifiers":0,"description":"","children":[{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.","type":"int"}},{"kind":128,"name":"$variable_name","modifiers":0,"doc":{"description":"Name of a variable to get.","type":"string"}},{"kind":128,"name":"$filter","modifiers":0,"value":"FILTER_DEFAULT","doc":{"description":"The ID of the filter to apply. The Types of filters manual page lists the available filters. If omitted, FILTER_DEFAULT will be used, which is equivalent to FILTER_UNSAFE_RAW. This will result in no filtering taking place by default.","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Associative array of options or bitwise disjunction of flags. If filter accepts options, flags can be provided in \"flags\" field of array.","type":"mixed"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"zip_entry_open","modifiers":0,"children":[{"kind":128,"name":"$zip","modifiers":0,"doc":{"description":"A valid resource handle returned by zip_open().","type":"resource"}},{"kind":128,"name":"$zip_entry","modifiers":0,"doc":{"description":"A directory entry returned by zip_read().","type":"resource"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"Any of the modes specified in the documentation of fopen(). Note: Currently, mode is ignored and is always \"rb\". This is due to the fact that zip support in PHP is read only access.","type":"string"}}],"doc":{"description":"Opens a directory entry in a zip file for reading.","type":"bool"}},{"kind":64,"name":"preg_last_error","modifiers":0,"children":[],"doc":{"description":"Returns the error code of the last PCRE regex execution.","type":"int"}},{"kind":64,"name":"mb_http_output","modifiers":0,"children":[{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_http_output()","doc":{"description":"If encoding is set, mb_http_output() sets the HTTP output character encoding to encoding. If encoding is omitted, mb_http_output() returns the current HTTP output character encoding.","type":"string"}}],"doc":{"description":"Set/Get the HTTP output character encoding. Output after this function is called will be converted from the set internal encoding to encoding.","type":"mixed"}},{"kind":64,"name":"session_name","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The session name references the name of the session, which is used in cookies and URLs (e.g. PHPSESSID). It should contain only alphanumeric characters; it should be short and descriptive (i.e. for users with enabled cookie warnings). If name is specified, the name of the current session is changed to its value. Warning The session name can't consist of digits only, at least one letter must be present. Otherwise a new session id is generated every time.","type":"string"}}],"doc":{"description":"session_name() returns the name of the current session. If name is given, session_name() will update the session name and return the old session name.","type":"string"}},{"kind":64,"name":"grapheme_strrpos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string to look in. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to look for. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"The optional $offset parameter allows you to specify where in $haystack to start searching as an offset in grapheme units (not bytes or characters). The position returned is still relative to the beginning of haystack regardless of the value of $offset.","type":"int"}}],"doc":{"description":"Find position (in grapheme units) of last occurrence of a string","type":"int"}},{"kind":64,"name":"gztell","modifiers":0,"children":[{"kind":128,"name":"$zp","modifiers":0,"doc":{"description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().","type":"resource"}}],"doc":{"description":"Gets the position of the given file pointer; i.e., its offset into the uncompressed file stream.","type":"int"}},{"kind":64,"name":"getcwd","modifiers":0,"children":[],"doc":{"description":"Gets the current working directory.","type":"string"}},{"kind":64,"name":"pspell_suggest","modifiers":0,"description":"","children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$word","modifiers":0,"doc":{"description":"The tested word.","type":"string"}}],"doc":{"type":"array"}},{"kind":64,"name":"oci_client_version","modifiers":0,"children":[],"doc":{"description":"Returns a string containing the version number of the Oracle C client library that PHP is linked with.","type":"string"}},{"kind":64,"name":"numfmt_format_currency","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The numeric currency value.","type":"float"}},{"kind":128,"name":"$currency","modifiers":0,"doc":{"description":"The 3-letter ISO 4217 currency code indicating the currency to use.","type":"string"}}],"doc":{"description":"Format the currency value according to the formatter rules.","type":"string"}},{"kind":64,"name":"call_user_func","modifiers":0,"children":[{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The callable to be called.","type":"callable"}},{"kind":128,"name":"$parameter","modifiers":0,"doc":{"description":"Zero or more parameters to be passed to the callback. Note: Note that the parameters for call_user_func() are not passed by reference. Example #1 call_user_func() example and references <?phperror_reporting(E_ALL);function increment(&$var){    $var++;}$a = 0;call_user_func('increment', $a);echo $a.\"\\n\";// You can use this insteadcall_user_func_array('increment', array(&$a));echo $a.\"\\n\";?> The above example will output: 0 1","type":"mixed"}}],"doc":{"description":"Calls the callback given by the first parameter and passes the remaining parameters as arguments.","type":"mixed"}},{"kind":64,"name":"mdecrypt_generic","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"An encryption descriptor returned by mcrypt_module_open()","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"Encrypted data.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"ldap_next_reference","modifiers":0,"description":"","children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$entry","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"resource"}},{"kind":64,"name":"mcrypt_generic","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor. The encryption handle should always be initialized with mcrypt_generic_init() with a key and an IV before calling this function. Where the encryption is done, you should free the encryption buffers by calling mcrypt_generic_deinit(). See mcrypt_module_open() for an example.","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to encrypt.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"tidy_get_opt_doc","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}},{"kind":128,"name":"$optname","modifiers":0,"doc":{"description":"The option name","type":"string"}}],"doc":{"description":"tidy_get_opt_doc() returns the documentation for the given option name.","type":"string"}},{"kind":64,"name":"ldap_first_reference","modifiers":0,"description":"","children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"resource"}},{"kind":64,"name":"gzcompress","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to compress.","type":"string"}},{"kind":128,"name":"$level","modifiers":0,"value":"-1","doc":{"description":"The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. If -1 is used, the default compression of the zlib library is used which is 6.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"ZLIB_ENCODING_DEFLATE","doc":{"description":"One of ZLIB_ENCODING_* constants.","type":"int"}}],"doc":{"description":"This function compresses the given string using the ZLIB data format.","type":"string"}},{"kind":64,"name":"msql_pconnect","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"doc":{"description":"The hostname can also include a port number. e.g. hostname,port. If not specified, the connection is established by the means of a Unix domain socket, being more efficient than a localhost TCP socket connection. Note: While this function will accept a colon (:) as a host/port separator, a comma (,) is the preferred method.","type":"string"}}],"doc":{"description":"msql_pconnect() acts very much like msql_connect() with two major differences.","type":"resource"}},{"kind":64,"name":"xmlwriter_open_uri","modifiers":0,"children":[{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The URI of the resource for the output.","type":"string"}}],"doc":{"description":"Creates a new XMLWriter using uri for the output.","type":"resource"}},{"kind":64,"name":"enchant_dict_describe","modifiers":0,"children":[{"kind":128,"name":"$dict","modifiers":0,"doc":{"description":"Dictionary resource","type":"resource"}}],"doc":{"description":"Returns the details of the dictionary.","type":"mixed"}},{"kind":64,"name":"posix_uname","modifiers":0,"children":[],"doc":{"description":"Gets information about the system.","type":"array"}},{"kind":64,"name":"rawurlencode","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The URL to be encoded.","type":"string"}}],"doc":{"description":"Encodes the given string according to » RFC 3986.","type":"string"}},{"kind":64,"name":"array_sum","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The input array.","type":"array"}}],"doc":{"description":"array_sum() returns the sum of values in an array.","type":"number"}},{"kind":64,"name":"bcpowmod","modifiers":0,"children":[{"kind":128,"name":"$left_operand","modifiers":0,"doc":{"description":"The left operand, as a string.","type":"string"}},{"kind":128,"name":"$right_operand","modifiers":0,"doc":{"description":"The right operand, as a string.","type":"string"}},{"kind":128,"name":"$modulus","modifiers":0,"doc":{"description":"The modulus, as a string.","type":"string"}},{"kind":128,"name":"$scale","modifiers":0,"value":"0","doc":{"description":"This optional parameter is used to set the number of digits after the decimal place in the result. If omitted, it will default to the scale set globally with the bcscale() function, or fallback to 0 if this has not been set.","type":"int"}}],"doc":{"description":"Use the fast-exponentiation method to raise left_operand to the power right_operand with respect to the modulus modulus.","type":"string"}},{"kind":64,"name":"bzread","modifiers":0,"children":[{"kind":128,"name":"$bz","modifiers":0,"doc":{"description":"The file pointer. It must be valid and must point to a file successfully opened by bzopen().","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"value":"1024","doc":{"description":"If not specified, bzread() will read 1024 (uncompressed) bytes at a time. A maximum of 8192 uncompressed bytes will be read at a time.","type":"int"}}],"doc":{"description":"bzread() reads from the given bzip2 file pointer.","type":"string"}},{"kind":64,"name":"openssl_pkey_get_public","modifiers":0,"children":[{"kind":128,"name":"$certificate","modifiers":0,"doc":{"description":"certificate can be one of the following: an X.509 certificate resource a string having the format file://path/to/file.pem. The named file must contain a PEM encoded certificate/public key (it may contain both). A PEM formatted public key.","type":"mixed"}}],"doc":{"description":"openssl_get_publickey() extracts the public key from certificate and prepares it for use by other functions.","type":"resource"}},{"kind":64,"name":"datefmt_get_timetype","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource.","type":"IntlDateFormatter"}}],"doc":{"description":"Return time type used by the formatter.","type":"int"}},{"kind":64,"name":"finfo_set_flags","modifiers":0,"children":[{"kind":128,"name":"$finfo","modifiers":0,"doc":{"description":"Fileinfo resource returned by finfo_open().","type":"resource"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"One or disjunction of more Fileinfo constants.","type":"int"}}],"doc":{"description":"This function sets various Fileinfo options. Options can be set also directly in finfo_open() or other Fileinfo functions.","type":"bool"}},{"kind":64,"name":"variant_or","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Performs a bitwise OR operation. Note that this is slightly different from a regular OR operation.","type":"mixed"}},{"kind":64,"name":"ftp_set_option","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"Currently, the following options are supported: Supported runtime FTP options FTP_TIMEOUT_SEC Changes the timeout in seconds used for all network related functions. value must be an integer that is greater than 0. The default timeout is 90 seconds. FTP_AUTOSEEK When enabled, GET or PUT requests with a resumepos or startpos parameter will first seek to the requested position within the file. This is enabled by default.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"This parameter depends on which option is chosen to be altered.","type":"mixed"}}],"doc":{"description":"This function controls various runtime options for the specified FTP stream.","type":"bool"}},{"kind":64,"name":"libxml_get_errors","modifiers":0,"children":[],"doc":{"description":"Retrieve array of errors.","type":"array"}},{"kind":64,"name":"mcrypt_enc_is_block_algorithm_mode","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"pcntl_fork","modifiers":0,"children":[],"doc":{"description":"The pcntl_fork() function creates a child process that differs from the parent process only in its PID and PPID. Please see your system's fork(2) man page for specific details as to how fork works on your system.","type":"int"}},{"kind":64,"name":"shm_has_var","modifiers":0,"children":[{"kind":128,"name":"$shm_identifier","modifiers":0,"doc":{"description":"Shared memory segment, obtained from shm_attach().","type":"resource"}},{"kind":128,"name":"$variable_key","modifiers":0,"doc":{"description":"The variable key.","type":"int"}}],"doc":{"description":"Checks whether a specific key exists inside a shared memory segment.","type":"bool"}},{"kind":64,"name":"snmp2_set","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The hostname of the SNMP agent (server).","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The write community.","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object id.","type":"string"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The MIB defines the type of each object id. It has to be specified as a single character from the below list. types =The type is taken from the MIBiINTEGER uINTEGERsSTRINGxHEX STRINGdDECIMAL STRINGnNULLOBJoOBJIDtTIMETICKSaIPADDRESSbBITS If OPAQUE_SPECIAL_TYPES was defined while compiling the SNMP library, the following are also valid: types Uunsigned int64Isigned int64FfloatDdouble Most of these will use the obvious corresponding ASN.1 type. 's', 'x', 'd' and 'b' are all different ways of specifying an OCTET STRING value, and the 'u' unsigned type is also used for handling Gauge32 values. If the MIB-Files are loaded by into the MIB Tree with \"snmp_read_mib\" or by specifying it in the libsnmp config, '=' may be used as the type parameter for all object ids as the type can then be automatically read from the MIB. Note that there are two ways to set a variable of the type BITS like e.g. \"SYNTAX BITS {telnet(0), ftp(1), http(2), icmp(3), snmp(4), ssh(5), https(6)}\": Using type \"b\" and a list of bit numbers. This method is not recommended since GET query for the same OID would return e.g. 0xF8. Using type \"x\" and a hex number but without(!) the usual \"0x\" prefix. See examples section for more details.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The new value.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"string"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"string"}}],"doc":{"description":"snmp2_set() is used to set the value of an SNMP object specified by the object_id.","type":"bool"}},{"kind":64,"name":"ibase_blob_open","modifiers":0,"children":[{"kind":128,"name":"$blob_id","modifiers":0,"doc":{"description":"A BLOB id.","type":"string"}}],"doc":{"description":"Opens an existing BLOB for reading.","type":"resource"}},{"kind":64,"name":"round","modifiers":0,"children":[{"kind":128,"name":"$val","modifiers":0,"doc":{"description":"The value to round","type":"float"}},{"kind":128,"name":"$precision","modifiers":0,"value":"0","doc":{"description":"The optional number of decimal digits to round to.","type":"int"}},{"kind":128,"name":"$mode","modifiers":0,"value":"PHP_ROUND_HALF_UP","doc":{"description":"Use one of the following constants to specify the mode in which rounding occurs. Constant Description PHP_ROUND_HALF_UP Round val up to precision decimal places away from zero, when it is half way there. Making 1.5 into 2 and -1.5 into -2. PHP_ROUND_HALF_DOWN Round val down to precision decimal places towards zero, when it is half way there. Making 1.5 into 1 and -1.5 into -1. PHP_ROUND_HALF_EVEN Round val to precision decimal places towards the next even value. PHP_ROUND_HALF_ODD Round val to precision decimal places towards the next odd value.","type":"int"}}],"doc":{"description":"Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default).","type":"float"}},{"kind":64,"name":"func_num_args","modifiers":0,"children":[],"doc":{"description":"Gets the number of arguments passed to the function.","type":"int"}},{"kind":64,"name":"posix_getrlimit","modifiers":0,"children":[],"doc":{"description":"posix_getrlimit() returns an array of information about the current resource's soft and hard limits.","type":"array"}},{"kind":64,"name":"php_sapi_name","modifiers":0,"description":"","children":[],"doc":{"type":"string"}},{"kind":64,"name":"imagecreatefromgif","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the GIF image.","type":"string"}}],"doc":{"description":"imagecreatefromgif() returns an image identifier representing the image obtained from the given filename.","type":"resource"}},{"kind":64,"name":"mb_decode_mimeheader","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being decoded.","type":"string"}}],"doc":{"description":"Decodes encoded-word string str in MIME header.","type":"string"}},{"kind":64,"name":"bzcompress","modifiers":0,"children":[{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"The string to compress.","type":"string"}},{"kind":128,"name":"$blocksize","modifiers":0,"value":"4","doc":{"description":"Specifies the blocksize used during compression and should be a number from 1 to 9 with 9 giving the best compression, but using more resources to do so.","type":"int"}},{"kind":128,"name":"$workfactor","modifiers":0,"value":"0","doc":{"description":"Controls how the compression phase behaves when presented with worst case, highly repetitive, input data. The value can be between 0 and 250 with 0 being a special case. Regardless of the workfactor, the generated output is the same.","type":"int"}}],"doc":{"description":"bzcompress() compresses the given string and returns it as bzip2 encoded data.","type":"mixed"}},{"kind":64,"name":"imap_search","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$criteria","modifiers":0,"doc":{"description":"A string, delimited by spaces, in which the following keywords are allowed. Any multi-word arguments (e.g. FROM \"joey smith\") must be quoted. Results will match all criteria entries. ALL - return all messages matching the rest of the criteria ANSWERED - match messages with the \\\\ANSWERED flag set BCC \"string\" - match messages with \"string\" in the Bcc: field BEFORE \"date\" - match messages with Date: before \"date\" BODY \"string\" - match messages with \"string\" in the body of the message CC \"string\" - match messages with \"string\" in the Cc: field DELETED - match deleted messages FLAGGED - match messages with the \\\\FLAGGED (sometimes referred to as Important or Urgent) flag set FROM \"string\" - match messages with \"string\" in the From: field KEYWORD \"string\" - match messages with \"string\" as a keyword NEW - match new messages OLD - match old messages ON \"date\" - match messages with Date: matching \"date\" RECENT - match messages with the \\\\RECENT flag set SEEN - match messages that have been read (the \\\\SEEN flag is set) SINCE \"date\" - match messages with Date: after \"date\" SUBJECT \"string\" - match messages with \"string\" in the Subject: TEXT \"string\" - match messages with text \"string\" TO \"string\" - match messages with \"string\" in the To: UNANSWERED - match messages that have not been answered UNDELETED - match messages that are not deleted UNFLAGGED - match messages that are not flagged UNKEYWORD \"string\" - match messages that do not have the keyword \"string\" UNSEEN - match messages which have not been read yet","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"SE_FREE","doc":{"description":"Valid values for options are SE_UID, which causes the returned array to contain UIDs instead of messages sequence numbers.","type":"int"}},{"kind":128,"name":"$charset","modifiers":0,"value":"NULL","doc":{"description":"MIME character set to use when searching strings.","type":"string"}}],"doc":{"description":"This function performs a search on the mailbox currently opened in the given IMAP stream.","type":"array"}},{"kind":64,"name":"opcache_compile_file","modifiers":0,"children":[{"kind":128,"name":"$file","modifiers":0,"doc":{"description":"The path to the PHP script to be compiled.","type":"string"}}],"doc":{"description":"This function compiles a PHP script and adds it to the opcode cache without executing it. This can be used to prime the cache after a Web server restart by pre-caching files that will be included in later requests.","type":"boolean"}},{"kind":64,"name":"sybase_query","modifiers":0,"description":"","children":[{"kind":128,"name":"$query","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"If the link identifier isn't specified, the last opened link is assumed. If no link is open, the function tries to establish a link as if sybase_connect() was called, and use it.","type":"resource"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"get_magic_quotes_runtime","modifiers":0,"description":"","children":[],"doc":{"type":"bool"}},{"kind":64,"name":"oci_set_client_identifier","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"An Oracle connection identifier, returned by oci_connect(), oci_pconnect(), or oci_new_connect().","type":"resource"}},{"kind":128,"name":"$client_identifier","modifiers":0,"doc":{"description":"User chosen string up to 64 bytes long.","type":"string"}}],"doc":{"description":"Sets the client identifier used by various database components to identify lightweight application users who authenticate as the same database user.","type":"bool"}},{"kind":64,"name":"ctype_digit","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The tested string.","type":"string"}}],"doc":{"description":"Checks if all of the characters in the provided string, text, are numerical.","type":"bool"}},{"kind":64,"name":"gc_mem_caches","modifiers":0,"children":[],"doc":{"description":"Reclaims memory used by the Zend Engine memory manager.","type":"int"}},{"kind":64,"name":"curl_share_init","modifiers":0,"children":[],"doc":{"description":"Allows to share data between cURL handles.","type":"resource"}},{"kind":64,"name":"oci_set_edition","modifiers":0,"children":[{"kind":128,"name":"$edition","modifiers":0,"doc":{"description":"Oracle Database edition name previously created with the SQL \"CREATE EDITION\" command.","type":"string"}}],"doc":{"description":"Sets the database \"edition\" of objects to be used by a subsequent connections.","type":"bool"}},{"kind":64,"name":"easter_days","modifiers":0,"children":[{"kind":128,"name":"$year","modifiers":0,"value":"date(\"Y\")","doc":{"description":"The year as a positive number. If omitted, defaults to the current year according to the local time.","type":"int"}},{"kind":128,"name":"$method","modifiers":0,"value":"CAL_EASTER_DEFAULT","doc":{"description":"Allows Easter dates to be calculated based on the Gregorian calendar during the years 1582 - 1752 when set to CAL_EASTER_ROMAN. See the calendar constants for more valid constants.","type":"int"}}],"doc":{"description":"Returns the number of days after March 21 on which Easter falls for a given year. If no year is specified, the current year is assumed.","type":"int"}},{"kind":64,"name":"fflush","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).","type":"resource"}}],"doc":{"description":"This function forces a write of all buffered output to the resource pointed to by the file handle.","type":"bool"}},{"kind":64,"name":"odbc_field_type","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier.","type":"resource"}},{"kind":128,"name":"$field_number","modifiers":0,"doc":{"description":"The field number. Field numbering starts at 1.","type":"int"}}],"doc":{"description":"Gets the SQL type of the field referenced by number in the given result identifier.","type":"string"}},{"kind":64,"name":"array_splice","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"If offset is positive then the start of removed portion is at that offset from the beginning of the input array. If offset is negative then it starts that far from the end of the input array.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"value":"count($input)","doc":{"description":"If length is omitted, removes everything from offset to the end of the array. If length is specified and is positive, then that many elements will be removed. If length is specified and is negative then the end of the removed portion will be that many elements from the end of the array. If length is specified and is zero, no elements will be removed. Tip: to remove everything from offset to the end of the array when replacement is also specified, use count($input) for length.","type":"int"}},{"kind":128,"name":"$replacement","modifiers":0,"value":"array()","doc":{"description":"If replacement array is specified, then the removed elements are replaced with elements from this array. If offset and length are such that nothing is removed, then the elements from the replacement array are inserted in the place specified by the offset. Note that keys in replacement array are not preserved. If replacement is just one element it is not necessary to put array() around it, unless the element is an array itself, an object or NULL.","type":"mixed"}}],"doc":{"description":"Removes the elements designated by offset and length from the input array, and replaces them with the elements of the replacement array, if supplied.","type":"array"}},{"kind":64,"name":"socket_last_error","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create().","type":"resource"}}],"doc":{"description":"If a socket resource is passed to this function, the last error which occurred on this particular socket is returned. If the socket resource is omitted, the error code of the last failed socket function is returned. The latter is particularly helpful for functions like socket_create() which don't return a socket on failure and socket_select() which can fail for reasons not directly tied to a particular socket. The error code is suitable to be fed to socket_strerror() which returns a string describing the given error code.","type":"int"}},{"kind":64,"name":"fbsql_result","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}},{"kind":128,"name":"$row","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Can be the field's offset, or the field's name, or the field's table dot field's name (tablename.fieldname). If the column name has been aliased ('select foo as bar from...'), use the alias instead of the column name. Note: Specifying a numeric offset for the field argument is much quicker than specifying a fieldname or tablename.fieldname argument.","type":"mixed"}}],"doc":{"description":"Returns the contents of one cell from a FrontBase result set.","type":"mixed"}},{"kind":64,"name":"mysql_fetch_row","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}}],"doc":{"type":"array"}},{"kind":64,"name":"pg_affected_rows","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}}],"doc":{"description":"pg_affected_rows() returns the number of tuples (instances/records/rows) affected by INSERT, UPDATE, and DELETE queries.","type":"int"}},{"kind":64,"name":"utf8_decode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"A UTF-8 encoded string.","type":"string"}}],"doc":{"description":"This function converts the string data from the UTF-8 encoding to ISO-8859-1. Bytes in the string which are not valid UTF-8, and UTF-8 characters which do not exist in ISO-8859-1 (that is, characters above U+00FF) are replaced with ?.","type":"string"}},{"kind":64,"name":"tidy_is_xhtml","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Tells if the document is a XHTML document.","type":"bool"}},{"kind":64,"name":"settype","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":1024,"doc":{"description":"The variable being converted.","type":"mixed"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"Possibles values of type are: \"boolean\" or \"bool\" \"integer\" or \"int\" \"float\" or \"double\" \"string\" \"array\" \"object\" \"null\"","type":"string"}}],"doc":{"description":"Set the type of variable var to type.","type":"bool"}},{"kind":64,"name":"htmlspecialchars_decode","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string to decode.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"ENT_COMPAT","doc":{"description":"A bitmask of one or more of the following flags, which specify how to handle quotes and which document type to use. The default is ENT_COMPAT | ENT_HTML401. Available flags constants Constant Name Description ENT_COMPAT Will convert double-quotes and leave single-quotes alone. ENT_QUOTES Will convert both double and single quotes. ENT_NOQUOTES Will leave both double and single quotes unconverted. ENT_HTML401 Handle code as HTML 4.01. ENT_XML1 Handle code as XML 1. ENT_XHTML Handle code as XHTML. ENT_HTML5 Handle code as HTML 5.","type":"int"}}],"doc":{"description":"This function is the opposite of htmlspecialchars(). It converts special HTML entities back to characters.","type":"string"}},{"kind":64,"name":"xmlrpc_server_destroy","modifiers":0,"description":"","children":[{"kind":128,"name":"$server","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"ldap_modify_batch","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The distinguished name of an LDAP entity.","type":"string"}},{"kind":128,"name":"$entry","modifiers":0,"doc":{"description":"An array that specifies the modifications to make. Each entry in this array is an associative array with two or three keys: attrib maps to the name of the attribute to modify, modtype maps to the type of modification to perform, and (depending on the type of modification) values maps to an array of attribute values relevant to the modification. Possible values for modtype include: LDAP_MODIFY_BATCH_ADD Each value specified through values is added (as an additional value) to the attribute named by attrib. LDAP_MODIFY_BATCH_REMOVE Each value specified through values is removed from the attribute named by attrib. Any value of the attribute not contained in the values array will remain untouched. LDAP_MODIFY_BATCH_REMOVE_ALL All values are removed from the attribute named by attrib. A values entry must not be provided. LDAP_MODIFY_BATCH_REPLACE All current values of the attribute named by attrib are replaced with the values specified through values. Note that any value for attrib must be a string, any value for values must be an array of strings, and any value for modtype must be one of the LDAP_MODIFY_BATCH_* constants listed above.","type":"array"}}],"doc":{"description":"Modifies an existing entry in the LDAP directory. Allows detailed specification of the modifications to perform.","type":"bool"}},{"kind":64,"name":"fileowner","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Gets the file owner.","type":"int"}},{"kind":64,"name":"mysqli_change_user","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$user","modifiers":0,"doc":{"description":"The MySQL user name.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The MySQL password.","type":"string"}},{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The database to change to. If desired, the NULL value may be passed resulting in only changing the user and not selecting a database. To select a database in this case use the mysqli_select_db() function.","type":"string"}}],"doc":{"description":"Changes the user of the specified database connection and sets the current database.","type":"bool"}},{"kind":64,"name":"mssql_guid_string","modifiers":0,"description":"","children":[{"kind":128,"name":"$binary","modifiers":0,"doc":{"description":"A 16 byte binary GUID.","type":"string"}},{"kind":128,"name":"$short_format","modifiers":0,"value":"false","doc":{"description":"Whenever to use short format.","type":"bool"}}],"doc":{"type":"string"}},{"kind":64,"name":"posix_times","modifiers":0,"children":[],"doc":{"description":"Gets information about the current CPU usage.","type":"array"}},{"kind":64,"name":"connection_aborted","modifiers":0,"children":[],"doc":{"description":"Checks whether the client disconnected.","type":"int"}},{"kind":64,"name":"pspell_config_data_dir","modifiers":0,"description":"","children":[{"kind":128,"name":"$conf","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$directory","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"imap_mail_copy","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msglist","modifiers":0,"doc":{"description":"msglist is a range not just message numbers (as described in » RFC2060).","type":"string"}},{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"options is a bitmask of one or more of CP_UID - the sequence numbers contain UIDS CP_MOVE - Delete the messages from the current mailbox after copying","type":"int"}}],"doc":{"description":"Copies mail messages specified by msglist to specified mailbox.","type":"bool"}},{"kind":64,"name":"imagecreatefromstring","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"A string containing the image data.","type":"string"}}],"doc":{"description":"imagecreatefromstring() returns an image identifier representing the image obtained from the given image. These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, BMP, WBMP, and GD2.","type":"resource"}},{"kind":64,"name":"xmlrpc_encode_request","modifiers":0,"description":"","children":[{"kind":128,"name":"$method","modifiers":0,"doc":{"description":"Name of the method to call.","type":"string"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"Method parameters compatible with method signature.","type":"mixed"}},{"kind":128,"name":"$output_options","modifiers":0,"doc":{"description":"Array specifying output options may contain (default values are emphasised): output_type: php, xml verbosity: no_white_space, newlines_only, pretty escaping: cdata, non-ascii, non-print, markup (may be a string with one value or an array with multiple values) version: simple, xmlrpc, soap 1.1, auto encoding: iso-8859-1, other character set supported by iconv","type":"array"}}],"doc":{"type":"string"}},{"kind":64,"name":"ldap_sasl_bind","modifiers":0,"description":"","children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$binddn","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}},{"kind":128,"name":"$password","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}},{"kind":128,"name":"$sasl_mech","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}},{"kind":128,"name":"$sasl_realm","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}},{"kind":128,"name":"$sasl_authc_id","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}},{"kind":128,"name":"$sasl_authz_id","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}},{"kind":128,"name":"$props","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"curl_multi_strerror","modifiers":0,"children":[{"kind":128,"name":"$errornum","modifiers":0,"doc":{"description":"One of the » CURLM error codes constants.","type":"int"}}],"doc":{"description":"Returns a text error message describing the given CURLM error code.","type":"string"}},{"kind":64,"name":"file_exists","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file or directory. On windows, use //computername/share/filename or \\\\computername\\share\\filename to check files on network shares.","type":"string"}}],"doc":{"description":"Checks whether a file or directory exists.","type":"bool"}},{"kind":64,"name":"fbsql_field_name","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result pointer returned by fbsql_list_fields().","type":"resource"}},{"kind":128,"name":"$field_index","modifiers":0,"doc":{"description":"The numerical offset of the field. The field index starts at 0.","type":"int"}}],"doc":{"description":"Returns the name of the specified field index.","type":"string"}},{"kind":64,"name":"oci_free_statement","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}}],"doc":{"description":"Frees resources associated with Oracle's cursor or statement, which was received from as a result of oci_parse() or obtained from Oracle.","type":"bool"}},{"kind":64,"name":"posix_kill","modifiers":0,"children":[{"kind":128,"name":"$pid","modifiers":0,"doc":{"description":"The process identifier.","type":"int"}},{"kind":128,"name":"$sig","modifiers":0,"doc":{"description":"One of the PCNTL signals constants.","type":"int"}}],"doc":{"description":"Send the signal sig to the process with the process identifier pid.","type":"bool"}},{"kind":64,"name":"dngettext","modifiers":0,"children":[{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"The domain","type":"string"}},{"kind":128,"name":"$msgid1","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$msgid2","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$n","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"The dngettext() function allows you to override the current domain for a single plural message lookup.","type":"string"}},{"kind":64,"name":"fbsql_fetch_field","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical offset of the field. The field index starts at 0. If not specified, the next field that wasn't yet retrieved by fbsql_fetch_field() is retrieved.","type":"int"}}],"doc":{"description":"Used in order to obtain information about fields in a certain query result.","type":"object"}},{"kind":64,"name":"grapheme_stristr","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The input string. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to look for. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$before_needle","modifiers":0,"value":"false","doc":{"description":"If TRUE, grapheme_strstr() returns the part of the haystack before the first occurrence of the needle (excluding needle).","type":"bool"}}],"doc":{"description":"Returns part of haystack string starting from and including the first occurrence of case-insensitive needle to the end of haystack.","type":"string"}},{"kind":64,"name":"stripcslashes","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to be unescaped.","type":"string"}}],"doc":{"description":"Returns a string with backslashes stripped off. Recognizes C-like \\n, \\r ..., octal and hexadecimal representation.","type":"string"}},{"kind":64,"name":"pspell_save_wordlist","modifiers":0,"description":"","children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"doc":{"description":"A dictionary link identifier opened with pspell_new_personal().","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"nsapi_request_headers","modifiers":0,"children":[],"doc":{"description":"nsapi_request_headers() gets all the HTTP headers in the current request. This is only supported when PHP runs as a NSAPI module.","type":"array"}},{"kind":1,"name":"DOMNodeList","associated":[{"kind":2,"name":"Traversable"}],"children":[{"kind":16,"name":"$length","modifiers":1,"doc":{"type":"int"}},{"kind":32,"name":"item","modifiers":1,"children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Index of the node into the collection.","type":"int"}}],"doc":{"description":"Retrieves a node specified by index within the DOMNodeList object.","type":"DOMElement"}}]},{"kind":64,"name":"readline_completion_function","modifiers":0,"children":[{"kind":128,"name":"$function","modifiers":0,"doc":{"description":"You must supply the name of an existing function which accepts a partial command line and returns an array of possible matches.","type":"callable"}}],"doc":{"description":"This function registers a completion function. This is the same kind of functionality you'd get if you hit your tab key while using Bash.","type":"bool"}},{"kind":64,"name":"md5_file","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The filename","type":"string"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"false","doc":{"description":"When TRUE, returns the digest in raw binary format with a length of 16.","type":"bool"}}],"doc":{"description":"Calculates the MD5 hash of the file specified by the filename parameter using the » RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash. The hash is a 32-character hexadecimal number.","type":"string"}},{"kind":64,"name":"get_headers","modifiers":0,"children":[{"kind":128,"name":"$url","modifiers":0,"doc":{"description":"The target URL.","type":"string"}},{"kind":128,"name":"$format","modifiers":0,"value":"0","doc":{"description":"If the optional format parameter is set to non-zero, get_headers() parses the response and sets the array's keys.","type":"int"}}],"doc":{"description":"get_headers() returns an array with the headers sent by the server in response to a HTTP request.","type":"array"}},{"kind":64,"name":"gmp_mod","modifiers":0,"children":[{"kind":128,"name":"$n","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$d","modifiers":0,"doc":{"description":"The modulo that is being evaluated. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Calculates n modulo d. The result is always non-negative, the sign of d is ignored.","type":"GMP"}},{"kind":64,"name":"ftp_chmod","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The new permissions, given as an octal value.","type":"int"}},{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The remote file.","type":"string"}}],"doc":{"description":"Sets the permissions on the specified remote file to mode.","type":"int"}},{"kind":64,"name":"intl_get_error_code","modifiers":0,"description":"","children":[],"doc":{"type":"ReturnType"}},{"kind":64,"name":"zip_entry_compressionmethod","modifiers":0,"children":[{"kind":128,"name":"$zip_entry","modifiers":0,"doc":{"description":"A directory entry returned by zip_read().","type":"resource"}}],"doc":{"description":"Returns the compression method of the directory entry specified by zip_entry.","type":"string"}},{"kind":64,"name":"shmop_delete","modifiers":0,"children":[{"kind":128,"name":"$shmid","modifiers":0,"doc":{"description":"The shared memory block resource created by shmop_open()","type":"resource"}}],"doc":{"description":"shmop_delete() is used to delete a shared memory block.","type":"bool"}},{"kind":64,"name":"gmp_and","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Calculates bitwise AND of two GMP numbers.","type":"GMP"}},{"kind":64,"name":"xmlwriter_start_element","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The element name.","type":"string"}}],"doc":{"description":"Starts an element.","type":"bool"}},{"kind":64,"name":"msql_field_type","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 1.","type":"int"}}],"doc":{"description":"msql_field_type() gets the type of the specified field index.","type":"string"}},{"kind":64,"name":"mb_ereg_search_getpos","modifiers":0,"description":"","children":[],"doc":{"type":"int"}},{"kind":64,"name":"pg_escape_bytea","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_escape_bytea() escapes string for bytea datatype. It returns escaped string.","type":"string"}},{"kind":64,"name":"mssql_query","modifiers":0,"description":"","children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"An SQL query.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A MS SQL link identifier, returned by mssql_connect() or mssql_pconnect(). If the link identifier isn't specified, the last opened link is assumed. If no link is open, the function tries to establish a link as if mssql_connect() was called, and use it.","type":"resource"}},{"kind":128,"name":"$batch_size","modifiers":0,"value":"0","doc":{"description":"The number of records to batch in the buffer.","type":"int"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"sybase_affected_rows","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"If the link identifier isn't specified, the last opened link is assumed.","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"hash_hkdf","modifiers":0,"description":"","children":[{"kind":128,"name":"$algo","modifiers":0,"doc":{"description":"Name of selected hashing algorithm (i.e. \"sha256\", \"sha512\", \"haval160,4\", etc..) See hash_algos() for a list of supported algorithms. Note: Non-cryptographic hash functions are not allowed.","type":"string"}},{"kind":128,"name":"$ikm","modifiers":0,"doc":{"description":"Input keying material (raw binary). Cannot be empty.","type":"string"}},{"kind":128,"name":"$length","modifiers":0,"value":"0","doc":{"description":"Desired output length in bytes. Cannot be greater than 255 times the chosen hash function size. If length is 0, the output length will default to the chosen hash function size.","type":"int"}},{"kind":128,"name":"$info","modifiers":0,"value":"''","doc":{"description":"Application/context-specific info string.","type":"string"}},{"kind":128,"name":"$salt","modifiers":0,"value":"''","doc":{"description":"Salt to use during derivation. While optional, adding random salt significantly improves the strength of HKDF.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"mssql_select_db","modifiers":0,"description":"","children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The database name. To escape the name of a database that contains spaces, hyphens (\"-\"), or any other exceptional characters, the database name must be enclosed in brackets, as is shown in the example, below. This technique must also be applied when selecting a database name that is also a reserved word (such as primary).","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A MS SQL link identifier, returned by mssql_connect() or mssql_pconnect(). If no link identifier is specified, the last opened link is assumed. If no link is open, the function will try to establish a link as if mssql_connect() was called, and use it.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"jdtojulian","modifiers":0,"children":[{"kind":128,"name":"$julianday","modifiers":0,"doc":{"description":"A julian day number as integer","type":"int"}}],"doc":{"description":"Converts Julian Day Count to a string containing the Julian Calendar Date in the format of \"month/day/year\".","type":"string"}},{"kind":64,"name":"ibase_blob_import","modifiers":0,"children":[{"kind":128,"name":"$file_handle","modifiers":0,"doc":{"description":"The file handle is a handle returned by fopen().","type":"resource"}}],"doc":{"description":"This function creates a BLOB, reads an entire file into it, closes it and returns the assigned BLOB id.","type":"string"}},{"kind":64,"name":"array_chunk","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The array to work on","type":"array"}},{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"The size of each chunk","type":"int"}},{"kind":128,"name":"$preserve_keys","modifiers":0,"value":"false","doc":{"description":"When set to TRUE keys will be preserved. Default is FALSE which will reindex the chunk numerically","type":"bool"}}],"doc":{"description":"Chunks an array into arrays with size elements. The last chunk may contain less than size elements.","type":"array"}},{"kind":64,"name":"session_unset","modifiers":0,"children":[],"doc":{"description":"The session_unset() function frees all session variables currently registered.","type":"void"}},{"kind":64,"name":"gmp_div_qr","modifiers":0,"children":[{"kind":128,"name":"$n","modifiers":0,"doc":{"description":"The number being divided. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$d","modifiers":0,"doc":{"description":"The number that n is being divided by. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$round","modifiers":0,"value":"GMP_ROUND_ZERO","doc":{"description":"See the gmp_div_q() function for description of the round argument.","type":"int"}}],"doc":{"description":"The function divides n by d.","type":"array"}},{"kind":64,"name":"ibase_service_detach","modifiers":0,"description":"","children":[{"kind":128,"name":"$service_handle","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"mysqli_fetch_fields","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}}],"doc":{"description":"This function serves an identical purpose to the mysqli_fetch_field() function with the single difference that, instead of returning one object at a time for each field, the columns are returned as an array of objects.","type":"array"}},{"kind":64,"name":"proc_get_status","modifiers":0,"children":[{"kind":128,"name":"$process","modifiers":0,"doc":{"description":"The proc_open() resource that will be evaluated.","type":"resource"}}],"doc":{"description":"proc_get_status() fetches data about a process opened using proc_open().","type":"array"}},{"kind":64,"name":"mysqli_stmt_get_result","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Call to return a result set from a prepared statement query.","type":"mysqli_result"}},{"kind":64,"name":"gmp_random_bits","modifiers":0,"children":[{"kind":128,"name":"$bits","modifiers":0,"doc":{"description":"The number of bits. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"integer"}}],"doc":{"description":"Generate a random number. The number will be between 0 and (2 ** bits) - 1.","type":"GMP"}},{"kind":64,"name":"vsprintf","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"See sprintf() for a description of format.","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"Operates as sprintf() but accepts an array of arguments, rather than a variable number of arguments.","type":"string"}},{"kind":64,"name":"ltrim","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$character_mask","modifiers":0,"doc":{"description":"You can also specify the characters you want to strip, by means of the character_mask parameter. Simply list all characters that you want to be stripped. With .. you can specify a range of characters.","type":"string"}}],"doc":{"description":"Strip whitespace (or other characters) from the beginning of a string.","type":"string"}},{"kind":64,"name":"imagejpeg","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$to","modifiers":0,"doc":{"description":"The path or an open stream resource (which is automatically being closed after this function returns) to save the file to. If not set or NULL, the raw image stream will be outputted directly. To skip this argument in order to provide the quality parameter, use NULL.","type":"mixed"}},{"kind":128,"name":"$quality","modifiers":0,"doc":{"description":"quality is optional, and ranges from 0 (worst quality, smaller file) to 100 (best quality, biggest file). The default is the default IJG quality value (about 75).","type":"int"}}],"doc":{"description":"imagejpeg() creates a JPEG file from the given image.","type":"bool"}},{"kind":64,"name":"strspn","modifiers":0,"children":[{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The string to examine.","type":"string"}},{"kind":128,"name":"$mask","modifiers":0,"doc":{"description":"The list of allowable characters.","type":"string"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"The position in subject to start searching. If start is given and is non-negative, then strspn() will begin examining subject at the start'th position. For instance, in the string 'abcdef', the character at position 0 is 'a', the character at position 2 is 'c', and so forth. If start is given and is negative, then strspn() will begin examining subject at the start'th position from the end of subject.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The length of the segment from subject to examine. If length is given and is non-negative, then subject will be examined for length characters after the starting position. If length is given and is negative, then subject will be examined from the starting position up to length characters from the end of subject.","type":"int"}}],"doc":{"description":"Finds the length of the initial segment of subject that contains only characters from mask.","type":"int"}},{"kind":64,"name":"header_register_callback","modifiers":0,"children":[{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"Function called just before the headers are sent. It gets no parameters and the return value is ignored.","type":"callable"}}],"doc":{"description":"Registers a function that will be called when PHP starts sending output.","type":"bool"}},{"kind":64,"name":"move_uploaded_file","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The filename of the uploaded file.","type":"string"}},{"kind":128,"name":"$destination","modifiers":0,"doc":{"description":"The destination of the moved file.","type":"string"}}],"doc":{"description":"This function checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism). If the file is valid, it will be moved to the filename given by destination.","type":"bool"}},{"kind":64,"name":"array_reverse","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$preserve_keys","modifiers":0,"value":"false","doc":{"description":"If set to TRUE numeric keys are preserved. Non-numeric keys are not affected by this setting and will always be preserved.","type":"bool"}}],"doc":{"description":"Takes an input array and returns a new array with the order of the elements reversed.","type":"array"}},{"kind":64,"name":"gmp_sub","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"The number being subtracted from. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"The number subtracted from a. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Subtracts b from a and returns the result.","type":"GMP"}},{"kind":64,"name":"curl_close","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}}],"doc":{"description":"Closes a cURL session and frees all resources. The cURL handle, ch, is also deleted.","type":"void"}},{"kind":64,"name":"ldap_connect","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"value":"NULL","doc":{"description":"This field supports using a hostname or, with OpenLDAP 2.x.x and later, a full LDAP URI of the form ldap://hostname:port or ldaps://hostname:port for SSL encryption. You can also provide multiple LDAP-URIs separated by a space as one string Note that hostname:port is not a supported LDAP URI as the schema is missing.","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"value":"389","doc":{"description":"The port to connect to. Not used when using LDAP URIs.","type":"int"}}],"doc":{"description":"Creates an LDAP link identifier and checks whether the given host and port are plausible.","type":"resource"}},{"kind":64,"name":"tidy_is_xml","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Tells if the document is a generic (non HTML/XHTML) XML document.","type":"bool"}},{"kind":64,"name":"xmlwriter_text","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The contents of the text.","type":"string"}}],"doc":{"description":"Writes a text.","type":"bool"}},{"kind":64,"name":"snmp3_set","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The hostname of the SNMP agent (server).","type":"string"}},{"kind":128,"name":"$sec_name","modifiers":0,"doc":{"description":"the security name, usually some kind of username","type":"string"}},{"kind":128,"name":"$sec_level","modifiers":0,"doc":{"description":"the security level (noAuthNoPriv|authNoPriv|authPriv)","type":"string"}},{"kind":128,"name":"$auth_protocol","modifiers":0,"doc":{"description":"the authentication protocol (MD5 or SHA)","type":"string"}},{"kind":128,"name":"$auth_passphrase","modifiers":0,"doc":{"description":"the authentication pass phrase","type":"string"}},{"kind":128,"name":"$priv_protocol","modifiers":0,"doc":{"description":"the privacy protocol (DES or AES)","type":"string"}},{"kind":128,"name":"$priv_passphrase","modifiers":0,"doc":{"description":"the privacy pass phrase","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object id.","type":"string"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The MIB defines the type of each object id. It has to be specified as a single character from the below list. types =The type is taken from the MIBiINTEGER uINTEGERsSTRINGxHEX STRINGdDECIMAL STRINGnNULLOBJoOBJIDtTIMETICKSaIPADDRESSbBITS If OPAQUE_SPECIAL_TYPES was defined while compiling the SNMP library, the following are also valid: types Uunsigned int64Isigned int64FfloatDdouble Most of these will use the obvious corresponding ASN.1 type. 's', 'x', 'd' and 'b' are all different ways of specifying an OCTET STRING value, and the 'u' unsigned type is also used for handling Gauge32 values. If the MIB-Files are loaded by into the MIB Tree with \"snmp_read_mib\" or by specifying it in the libsnmp config, '=' may be used as the type parameter for all object ids as the type can then be automatically read from the MIB. Note that there are two ways to set a variable of the type BITS like e.g. \"SYNTAX BITS {telnet(0), ftp(1), http(2), icmp(3), snmp(4), ssh(5), https(6)}\": Using type \"b\" and a list of bit numbers. This method is not recommended since GET query for the same OID would return e.g. 0xF8. Using type \"x\" and a hex number but without(!) the usual \"0x\" prefix. See examples section for more details.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The new value","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"int"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"int"}}],"doc":{"description":"snmp3_set() is used to set the value of an SNMP object specified by the object_id.","type":"bool"}},{"kind":64,"name":"array_unique","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$sort_flags","modifiers":0,"value":"SORT_STRING","doc":{"description":"The optional second parameter sort_flags may be used to modify the sorting behavior using these values: Sorting type flags: SORT_REGULAR - compare items normally (don't change types) SORT_NUMERIC - compare items numerically SORT_STRING - compare items as strings SORT_LOCALE_STRING - compare items as strings, based on the current locale.","type":"int"}}],"doc":{"description":"Takes an input array and returns a new array without duplicate values.","type":"array"}},{"kind":64,"name":"xml_parse","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to use.","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"Chunk of data to parse. A document may be parsed piece-wise by calling xml_parse() several times with new data, as long as the is_final parameter is set and TRUE when the last data is parsed.","type":"string"}},{"kind":128,"name":"$is_final","modifiers":0,"value":"false","doc":{"description":"If set and TRUE, data is the last piece of data sent in this parse.","type":"bool"}}],"doc":{"description":"xml_parse() parses an XML document. The handlers for the configured events are called as many times as necessary.","type":"int"}},{"kind":64,"name":"intlcal_get_minimal_days_in_first_week","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}}],"doc":{"description":"Returns the smallest number of days the first week of a year or month must have in the new year or month. For instance, in the Gregorian calendar, if this value is 1, then the first week of the year will necessarily include January 1st, while if this value is 7, then the week with January 1st will be the first week of the year only if the day of the week for January 1st matches the day of the week returned by IntlCalendar::getFirstDayOfWeek(); otherwise it will be the previous yearʼs last week.","type":"int"}},{"kind":64,"name":"bindec","modifiers":0,"children":[{"kind":128,"name":"$binary_string","modifiers":0,"doc":{"description":"The binary string to convert","type":"string"}}],"doc":{"description":"Returns the decimal equivalent of the binary number represented by the binary_string argument.","type":"number"}},{"kind":64,"name":"ini_restore","modifiers":0,"children":[{"kind":128,"name":"$varname","modifiers":0,"doc":{"description":"The configuration option name.","type":"string"}}],"doc":{"description":"Restores a given configuration option to its original value.","type":"void"}},{"kind":64,"name":"array_udiff","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The first array.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"The second array.","type":"array"}}],"doc":{"description":"Computes the difference of arrays by using a callback function for data comparison. This is unlike array_diff() which uses an internal function for comparing the data.","type":"array"}},{"kind":64,"name":"imagexbm","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The path to save the file to. If not set or NULL, the raw image stream will be outputted directly. The filename (without the .xbm extension) is also used for the C identifiers of the XBM, whereby non alphanumeric characters of the current locale are substituted by underscores. If filename is set to NULL, image is used to build the C identifiers.","type":"string"}},{"kind":128,"name":"$foreground","modifiers":0,"doc":{"description":"You can set the foreground color with this parameter by setting an identifier obtained from imagecolorallocate(). The default foreground color is black. All other colors are treated as background.","type":"int"}}],"doc":{"description":"Outputs or save an XBM version of the given image.","type":"bool"}},{"kind":64,"name":"bcsqrt","modifiers":0,"children":[{"kind":128,"name":"$operand","modifiers":0,"doc":{"description":"The operand, as a string.","type":"string"}},{"kind":128,"name":"$scale","modifiers":0,"value":"0","doc":{"description":"This optional parameter is used to set the number of digits after the decimal place in the result. If omitted, it will default to the scale set globally with the bcscale() function, or fallback to 0 if this has not been set.","type":"int"}}],"doc":{"description":"Return the square root of the operand.","type":"string"}},{"kind":64,"name":"ini_set","modifiers":0,"children":[{"kind":128,"name":"$varname","modifiers":0,"doc":{"description":"Not all the available options can be changed using ini_set(). There is a list of all available options in the appendix.","type":"string"}},{"kind":128,"name":"$newvalue","modifiers":0,"doc":{"description":"The new value for the option.","type":"string"}}],"doc":{"description":"Sets the value of the given configuration option. The configuration option will keep this new value during the script's execution, and will be restored at the script's ending.","type":"string"}},{"kind":64,"name":"inflate_init","modifiers":0,"children":[{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"One of the ZLIB_ENCODING_* constants.","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"value":"array()","doc":{"description":"An associative array which may contain the following elements: level The compression level in range -1..9; defaults to -1. memory The compression memory level in range 1..9; defaults to 8. window The zlib window size (logarithmic) in range 8..15; defaults to 15. strategy One of ZLIB_FILTERED, ZLIB_HUFFMAN_ONLY, ZLIB_RLE, ZLIB_FIXED or ZLIB_DEFAULT_STRATEGY (the default). dictionary A string or an array of strings of the preset dictionary (default: no preset dictionary).","type":"array"}}],"doc":{"description":"Initialize an incremental inflate context with the specified encoding.","type":"resource"}},{"kind":64,"name":"mcrypt_enc_is_block_algorithm","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"image_type_to_extension","modifiers":0,"children":[{"kind":128,"name":"$imagetype","modifiers":0,"doc":{"description":"One of the IMAGETYPE_XXX constant.","type":"int"}},{"kind":128,"name":"$include_dot","modifiers":0,"value":"TRUE","doc":{"description":"Whether to prepend a dot to the extension or not. Default to TRUE.","type":"bool"}}],"doc":{"description":"Returns the extension for the given IMAGETYPE_XXX constant.","type":"string"}},{"kind":64,"name":"mb_regex_encoding","modifiers":0,"children":[{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_regex_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Set/Get character encoding for a multibyte regex.","type":"mixed"}},{"kind":64,"name":"timezone_version_get","modifiers":0,"children":[],"doc":{"description":"Returns the current version of the timezonedb.","type":"string"}},{"kind":64,"name":"imagecolordeallocate","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"The color identifier.","type":"int"}}],"doc":{"description":"De-allocates a color previously allocated with imagecolorallocate() or imagecolorallocatealpha().","type":"bool"}},{"kind":64,"name":"arsort","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$sort_flags","modifiers":0,"value":"SORT_REGULAR","doc":{"description":"You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().","type":"int"}}],"doc":{"description":"This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.","type":"bool"}},{"kind":64,"name":"bzerrno","modifiers":0,"children":[{"kind":128,"name":"$bz","modifiers":0,"doc":{"description":"The file pointer. It must be valid and must point to a file successfully opened by bzopen().","type":"resource"}}],"doc":{"description":"Returns the error number of any bzip2 error returned by the given file pointer.","type":"int"}},{"kind":64,"name":"rmdir","modifiers":0,"children":[{"kind":128,"name":"$dirname","modifiers":0,"doc":{"description":"Path to the directory.","type":"string"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams.","type":"resource"}}],"doc":{"description":"Attempts to remove the directory named by dirname. The directory must be empty, and the relevant permissions must permit this. A E_WARNING level error will be generated on failure.","type":"bool"}},{"kind":64,"name":"variant_xor","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Performs a logical exclusion.","type":"mixed"}},{"kind":64,"name":"imagecreatefrombmp","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the BMP image.","type":"string"}}],"doc":{"description":"imagecreatefrombmp() returns an image identifier representing the image obtained from the given filename.","type":"resource"}},{"kind":64,"name":"frenchtojd","modifiers":0,"children":[{"kind":128,"name":"$month","modifiers":0,"doc":{"description":"The month as a number from 1 (for Vendémiaire) to 13 (for the period of 5-6 days at the end of each year)","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"doc":{"description":"The day as a number from 1 to 30","type":"int"}},{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"The year as a number between 1 and 14","type":"int"}}],"doc":{"description":"Converts a date from the French Republican Calendar to a Julian Day Count.","type":"int"}},{"kind":64,"name":"strnatcasecmp","modifiers":0,"children":[{"kind":128,"name":"$str1","modifiers":0,"doc":{"description":"The first string.","type":"string"}},{"kind":128,"name":"$str2","modifiers":0,"doc":{"description":"The second string.","type":"string"}}],"doc":{"description":"This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would. The behaviour of this function is similar to strnatcmp(), except that the comparison is not case sensitive. For more information see: Martin Pool's » Natural Order String Comparison page.","type":"int"}},{"kind":64,"name":"pg_send_query","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The SQL statement or statements to be executed. Data inside the query should be properly escaped.","type":"string"}}],"doc":{"description":"pg_send_query() sends a query or queries asynchronously to the connection. Unlike pg_query(), it can send multiple queries at once to PostgreSQL and get the results one by one using pg_get_result().","type":"bool"}},{"kind":64,"name":"socket_recvfrom","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"The socket must be a socket resource previously created by socket_create().","type":"resource"}},{"kind":128,"name":"$buf","modifiers":1024,"doc":{"description":"The data received will be fetched to the variable specified with buf.","type":"string"}},{"kind":128,"name":"$len","modifiers":0,"doc":{"description":"Up to len bytes will be fetched from remote host.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. Possible values for flags Flag Description MSG_OOB Process out-of-band data. MSG_PEEK Receive data from the beginning of the receive queue without removing it from the queue. MSG_WAITALL Block until at least len are received. However, if a signal is caught or the remote host disconnects, the function may return less data. MSG_DONTWAIT With this flag set, the function returns even if it would normally have blocked.","type":"int"}},{"kind":128,"name":"$name","modifiers":1024,"doc":{"description":"If the socket is of the type AF_UNIX type, name is the path to the file. Else, for unconnected sockets, name is the IP address of, the remote host, or NULL if the socket is connection-oriented.","type":"string"}},{"kind":128,"name":"$port","modifiers":1024,"doc":{"description":"This argument only applies to AF_INET and AF_INET6 sockets, and specifies the remote port from which the data is received. If the socket is connection-oriented, port will be NULL.","type":"int"}}],"doc":{"description":"The socket_recvfrom() function receives len bytes of data in buf from name on port port (if the socket is not of type AF_UNIX) using socket. socket_recvfrom() can be used to gather data from both connected and unconnected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function.","type":"int"}},{"kind":64,"name":"openssl_get_cipher_methods","modifiers":0,"children":[{"kind":128,"name":"$aliases","modifiers":0,"value":"false","doc":{"description":"Set to TRUE if cipher aliases should be included within the returned array.","type":"bool"}}],"doc":{"description":"Gets a list of available cipher methods.","type":"array"}},{"kind":64,"name":"socket_create_pair","modifiers":0,"children":[{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"The domain parameter specifies the protocol family to be used by the socket. See socket_create() for the full list.","type":"int"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The type parameter selects the type of communication to be used by the socket. See socket_create() for the full list.","type":"int"}},{"kind":128,"name":"$protocol","modifiers":0,"doc":{"description":"The protocol parameter sets the specific protocol within the specified domain to be used when communicating on the returned socket. The proper value can be retrieved by name by using getprotobyname(). If the desired protocol is TCP, or UDP the corresponding constants SOL_TCP, and SOL_UDP can also be used. See socket_create() for the full list of supported protocols.","type":"int"}},{"kind":128,"name":"$fd","modifiers":1024,"doc":{"description":"Reference to an array in which the two socket resources will be inserted.","type":"array"}}],"doc":{"description":"socket_create_pair() creates two connected and indistinguishable sockets, and stores them in fd. This function is commonly used in IPC (InterProcess Communication).","type":"bool"}},{"kind":64,"name":"pspell_config_ignore","modifiers":0,"description":"","children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$n","modifiers":0,"doc":{"description":"Words less than n characters will be skipped.","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"filter_has_var","modifiers":0,"description":"","children":[{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.","type":"int"}},{"kind":128,"name":"$variable_name","modifiers":0,"doc":{"description":"Name of a variable to check.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"xmlwriter_end_cdata","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Ends the current CDATA section.","type":"bool"}},{"kind":64,"name":"posix_access","modifiers":0,"children":[{"kind":128,"name":"$file","modifiers":0,"doc":{"description":"The name of the file to be tested.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"value":"POSIX_F_OK","doc":{"description":"A mask consisting of one or more of POSIX_F_OK, POSIX_R_OK, POSIX_W_OK and POSIX_X_OK. POSIX_R_OK, POSIX_W_OK and POSIX_X_OK request checking whether the file exists and has read, write and execute permissions, respectively. POSIX_F_OK just requests checking for the existence of the file.","type":"int"}}],"doc":{"description":"posix_access() checks the user's permission of a file.","type":"bool"}},{"kind":64,"name":"imagesetbrush","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$brush","modifiers":0,"doc":{"description":"An image resource.","type":"resource"}}],"doc":{"description":"imagesetbrush() sets the brush image to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED.","type":"bool"}},{"kind":64,"name":"proc_nice","modifiers":0,"children":[{"kind":128,"name":"$increment","modifiers":0,"doc":{"description":"The new priority value, the value of this may differ on platforms. on Unix, a low value, such as -20 means high priority wheras a positive value have a lower priority. For Windows the increment parameter have the following meanings: Priority class Possible values High priority increment < -9 Above normal priority increment < -4 Normal priority increment < 5 & increment > -5 Below normal priority increment > 5 Idle priority increment > 9","type":"int"}}],"doc":{"description":"proc_nice() changes the priority of the current process by the amount specified in increment. A positive increment will lower the priority of the current process, whereas a negative increment will raise the priority.","type":"bool"}},{"kind":64,"name":"imagecreatefromwbmp","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the WBMP image.","type":"string"}}],"doc":{"description":"imagecreatefromwbmp() returns an image identifier representing the image obtained from the given filename.","type":"resource"}},{"kind":64,"name":"mssql_next_result","modifiers":0,"description":"","children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"hash_pbkdf2","modifiers":0,"description":"","children":[{"kind":128,"name":"$algo","modifiers":0,"doc":{"description":"Name of selected hashing algorithm (i.e. md5, sha256, haval160,4, etc..) See hash_algos() for a list of supported algorithms.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password to use for the derivation.","type":"string"}},{"kind":128,"name":"$salt","modifiers":0,"doc":{"description":"The salt to use for the derivation. This value should be generated randomly.","type":"string"}},{"kind":128,"name":"$iterations","modifiers":0,"doc":{"description":"The number of internal iterations to perform for the derivation.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"value":"0","doc":{"description":"The length of the output string. If raw_output is TRUE this corresponds to the byte-length of the derived key, if raw_output is FALSE this corresponds to twice the byte-length of the derived key (as every byte of the key is returned as two hexits). If 0 is passed, the entire output of the supplied algorithm is used.","type":"int"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"false","doc":{"description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.","type":"bool"}}],"doc":{"type":"string"}},{"kind":64,"name":"pcntl_wait","modifiers":0,"children":[{"kind":128,"name":"$status","modifiers":1024,"doc":{"description":"pcntl_wait() will store status information in the status parameter which can be evaluated using the following functions: pcntl_wifexited(), pcntl_wifstopped(), pcntl_wifsignaled(), pcntl_wexitstatus(), pcntl_wtermsig() and pcntl_wstopsig().","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"If wait3 is available on your system (mostly BSD-style systems), you can provide the optional options parameter. If this parameter is not provided, wait will be used for the system call. If wait3 is not available, providing a value for options will have no effect. The value of options is the value of zero or more of the following two constants OR'ed together: Possible values for options WNOHANG Return immediately if no child has exited. WUNTRACED Return for children which are stopped, and whose status has not been reported.","type":"int"}}],"doc":{"description":"The wait function suspends execution of the current process until a child has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function. If a child has already exited by the time of the call (a so-called \"zombie\" process), the function returns immediately. Any system resources used by the child are freed. Please see your system's wait(2) man page for specific details as to how wait works on your system.","type":"int"}},{"kind":64,"name":"pg_put_line","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_put_line() sends a NULL-terminated string to the PostgreSQL backend server. This is needed in conjunction with PostgreSQL's COPY FROM command.","type":"bool"}},{"kind":64,"name":"oci_close","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"An Oracle connection identifier returned by oci_connect(), oci_pconnect(), or oci_new_connect().","type":"resource"}}],"doc":{"description":"Unsets connection. The underlying database connection is closed if no other resources are using it and if it was created with oci_connect() or oci_new_connect().","type":"bool"}},{"kind":64,"name":"mhash_keygen_s2k","modifiers":0,"children":[{"kind":128,"name":"$hash","modifiers":0,"doc":{"description":"The hash ID used to create the key. One of the MHASH_hashname constants.","type":"int"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"An user supplied password.","type":"string"}},{"kind":128,"name":"$salt","modifiers":0,"doc":{"description":"Must be different and random enough for every key you generate in order to create different keys. Because salt must be known when you check the keys, it is a good idea to append the key to it. Salt has a fixed length of 8 bytes and will be padded with zeros if you supply less bytes.","type":"string"}},{"kind":128,"name":"$bytes","modifiers":0,"doc":{"description":"The key length, in bytes.","type":"int"}}],"doc":{"description":"Generates a key according to the given hash, using an user provided password.","type":"string"}},{"kind":64,"name":"imap_last_error","modifiers":0,"children":[],"doc":{"description":"Gets the full text of the last IMAP error message that occurred on the current page. The error stack is untouched; calling imap_last_error() subsequently, with no intervening errors, will return the same error.","type":"string"}},{"kind":64,"name":"gmmktime","modifiers":0,"children":[{"kind":128,"name":"$hour","modifiers":0,"value":"gmdate(\"H\")","doc":{"description":"The number of the hour relative to the start of the day determined by month, day and year. Negative values reference the hour before midnight of the day in question. Values greater than 23 reference the appropriate hour in the following day(s).","type":"int"}},{"kind":128,"name":"$minute","modifiers":0,"value":"gmdate(\"i\")","doc":{"description":"The number of the minute relative to the start of the hour. Negative values reference the minute in the previous hour. Values greater than 59 reference the appropriate minute in the following hour(s).","type":"int"}},{"kind":128,"name":"$second","modifiers":0,"value":"gmdate(\"s\")","doc":{"description":"The number of seconds relative to the start of the minute. Negative values reference the second in the previous minute. Values greater than 59 reference the appropriate second in the following minute(s).","type":"int"}},{"kind":128,"name":"$month","modifiers":0,"value":"gmdate(\"n\")","doc":{"description":"The number of the month relative to the end of the previous year. Values 1 to 12 reference the normal calendar months of the year in question. Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc. Values greater than 12 reference the appropriate month in the following year(s).","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"value":"gmdate(\"j\")","doc":{"description":"The number of the day relative to the end of the previous month. Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month. Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc. Values greater than the number of days in the relevant month reference the appropriate day in the following month(s).","type":"int"}},{"kind":128,"name":"$year","modifiers":0,"value":"gmdate(\"Y\")","doc":{"description":"The year","type":"int"}},{"kind":128,"name":"$is_dst","modifiers":0,"value":"-1","doc":{"description":"Parameters always represent a GMT date so is_dst doesn't influence the result. Note: This parameter has been removed in PHP 7.0.0.","type":"int"}}],"doc":{"description":"Identical to mktime() except the passed parameters represents a GMT date. gmmktime() internally uses mktime() so only times valid in derived local time can be used.","type":"int"}},{"kind":64,"name":"stream_bucket_new","modifiers":0,"description":"","children":[{"kind":128,"name":"$stream","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$buffer","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"object"}},{"kind":64,"name":"mysqli_stmt_error","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Returns a string containing the error message for the most recently invoked statement function that can succeed or fail.","type":"string"}},{"kind":64,"name":"property_exists","modifiers":0,"children":[{"kind":128,"name":"$class","modifiers":0,"doc":{"description":"The class name or an object of the class to test for","type":"mixed"}},{"kind":128,"name":"$property","modifiers":0,"doc":{"description":"The name of the property","type":"string"}}],"doc":{"description":"This function checks if the given property exists in the specified class.","type":"bool"}},{"kind":64,"name":"session_register_shutdown","modifiers":0,"children":[],"doc":{"description":"Registers session_write_close() as a shutdown function.","type":"void"}},{"kind":64,"name":"array_rand","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$num","modifiers":0,"value":"1","doc":{"description":"Specifies how many entries should be picked.","type":"int"}}],"doc":{"description":"Picks one or more random entries out of an array, and returns the key (or keys) of the random entries. It uses a pseudo random number generator that is not suitable for cryptographic purposes.","type":"mixed"}},{"kind":64,"name":"posix_mknod","modifiers":0,"children":[{"kind":128,"name":"$pathname","modifiers":0,"doc":{"description":"The file to create","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"This parameter is constructed by a bitwise OR between file type (one of the following constants: POSIX_S_IFREG, POSIX_S_IFCHR, POSIX_S_IFBLK, POSIX_S_IFIFO or POSIX_S_IFSOCK) and permissions.","type":"int"}},{"kind":128,"name":"$major","modifiers":0,"value":"0","doc":{"description":"The major device kernel identifier (required to pass when using S_IFCHR or S_IFBLK).","type":"int"}},{"kind":128,"name":"$minor","modifiers":0,"value":"0","doc":{"description":"The minor device kernel identifier.","type":"int"}}],"doc":{"description":"Creates a special or ordinary file.","type":"bool"}},{"kind":64,"name":"mssql_rows_affected","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A MS SQL link identifier, returned by mssql_connect() or mssql_pconnect().","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"mysqli_free_result","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}}],"doc":{"description":"Frees the memory associated with the result.","type":"void"}},{"kind":64,"name":"snmp_read_mib","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The filename of the MIB.","type":"string"}}],"doc":{"description":"This function is used to load additional, e.g. vendor specific, MIBs so that human readable OIDs like VENDOR-MIB::foo.1 instead of error prone numeric OIDs can be used.","type":"bool"}},{"kind":64,"name":"get_resource_type","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The evaluated resource handle.","type":"resource"}}],"doc":{"description":"This function gets the type of the given resource.","type":"string"}},{"kind":64,"name":"imap_fetchstructure","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msg_number","modifiers":0,"doc":{"description":"The message number","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"This optional parameter only has a single option, FT_UID, which tells the function to treat the msg_number argument as a UID.","type":"int"}}],"doc":{"description":"Fetches all the structured information for a given message.","type":"object"}},{"kind":64,"name":"variant_set","modifiers":0,"children":[{"kind":128,"name":"$variant","modifiers":0,"doc":{"description":"The variant.","type":"variant"}},{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Converts value to a variant and assigns it to the variant object; no new variant object is created, and the old value of variant is freed/released.","type":"void"}},{"kind":64,"name":"mysqli_poll","modifiers":0,"children":[{"kind":128,"name":"$read","modifiers":1024,"doc":{"description":"List of connections to check for outstanding results that can be read.","type":"array"}},{"kind":128,"name":"$error","modifiers":1024,"doc":{"description":"List of connections on which an error occured, for example, query failure or lost connection.","type":"array"}},{"kind":128,"name":"$reject","modifiers":1024,"doc":{"description":"List of connections rejected because no asynchronous query has been run on for which the function could poll results.","type":"array"}},{"kind":128,"name":"$sec","modifiers":0,"doc":{"description":"Number of seconds to wait, must be non-negative.","type":"int"}},{"kind":128,"name":"$usec","modifiers":0,"doc":{"description":"Number of microseconds to wait, must be non-negative.","type":"int"}}],"doc":{"description":"Poll connections. Available only with mysqlnd. The method can be used as static.","type":"int"}},{"kind":64,"name":"imap_timeout","modifiers":0,"children":[{"kind":128,"name":"$timeout_type","modifiers":0,"doc":{"description":"One of the following: IMAP_OPENTIMEOUT, IMAP_READTIMEOUT, IMAP_WRITETIMEOUT, or IMAP_CLOSETIMEOUT.","type":"int"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"-1","doc":{"description":"The timeout, in seconds.","type":"int"}}],"doc":{"description":"Sets or fetches the imap timeout.","type":"mixed"}},{"kind":64,"name":"imagecolorclosestalpha","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$red","modifiers":0,"doc":{"description":"Value of red component.","type":"int"}},{"kind":128,"name":"$green","modifiers":0,"doc":{"description":"Value of green component.","type":"int"}},{"kind":128,"name":"$blue","modifiers":0,"doc":{"description":"Value of blue component.","type":"int"}},{"kind":128,"name":"$alpha","modifiers":0,"doc":{"description":"A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.","type":"int"}}],"doc":{"description":"Returns the index of the color in the palette of the image which is \"closest\" to the specified RGB value and alpha level.","type":"int"}},{"kind":64,"name":"numfmt_create","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"Locale in which the number would be formatted (locale name, e.g. en_CA).","type":"string"}},{"kind":128,"name":"$style","modifiers":0,"doc":{"description":"Style of the formatting, one of the format style constants. If NumberFormatter::PATTERN_DECIMAL or NumberFormatter::PATTERN_RULEBASED is passed then the number format is opened using the given pattern, which must conform to the syntax described in » ICU DecimalFormat documentation or » ICU RuleBasedNumberFormat documentation, respectively.","type":"int"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Pattern string if the chosen style requires a pattern.","type":"string"}}],"doc":{"description":"Creates a number formatter.","type":"NumberFormatter"}},{"kind":64,"name":"enchant_broker_init","modifiers":0,"description":"","children":[],"doc":{"type":"resource"}},{"kind":64,"name":"get_class","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The tested object. This parameter may be omitted when inside a class. Note: Explicitly passing NULL as the object is no longer allowed as of PHP 7.2.0. The parameter is still optional and calling get_class() without a parameter from inside a class will work, but passing NULL now emits an E_WARNING notice.","type":"object"}}],"doc":{"description":"Gets the name of the class of the given object.","type":"string"}},{"kind":64,"name":"next","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The array being affected.","type":"array"}}],"doc":{"description":"next() behaves like current(), with one difference. It advances the internal array pointer one place forward before returning the element value. That means it returns the next array value and advances the internal array pointer by one.","type":"mixed"}},{"kind":64,"name":"tidy_repair_file","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The file to be repaired.","type":"string"}},{"kind":128,"name":"$config","modifiers":0,"doc":{"description":"The config config can be passed either as an array or as a string. If a string is passed, it is interpreted as the name of the configuration file, otherwise, it is interpreted as the options themselves. Check http://tidy.sourceforge.net/docs/quickref.html for an explanation about each option.","type":"mixed"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding parameter sets the encoding for input/output documents. The possible values for encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac, win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"false","doc":{"description":"Search for the file in the include_path.","type":"bool"}}],"doc":{"description":"Repairs the given file and returns it as a string.","type":"string"}},{"kind":64,"name":"gzopen","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The file name.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"As in fopen() (rb or wb) but can also include a compression level (wb9) or a strategy: f for filtered data as in wb6f, h for Huffman only compression as in wb1h. (See the description of deflateInit2 in zlib.h for more information about the strategy parameter.)","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"0","doc":{"description":"You can set this optional parameter to 1, if you want to search for the file in the include_path too.","type":"int"}}],"doc":{"description":"Opens a gzip (.gz) file for reading or writing.","type":"resource"}},{"kind":64,"name":"virtual","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The file that the virtual command will be performed on.","type":"string"}}],"doc":{"description":"virtual() is an Apache-specific function which is similar to <!--#include virtual...--> in mod_include. It performs an Apache sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you would parse through Apache. Note that for a CGI script, the script must generate valid CGI headers. At the minimum that means it must generate a Content-Type header.","type":"bool"}},{"kind":64,"name":"imap_body","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msg_number","modifiers":0,"doc":{"description":"The message number","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"The optional options are a bit mask with one or more of the following: FT_UID - The msg_number is a UID FT_PEEK - Do not set the \\Seen flag if not already set FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.","type":"int"}}],"doc":{"description":"imap_body() returns the body of the message, numbered msg_number in the current mailbox.","type":"string"}},{"kind":64,"name":"openssl_spki_export_challenge","modifiers":0,"children":[{"kind":128,"name":"$spkac","modifiers":1024,"doc":{"description":"Expects a valid signed public key and challenge","type":"string"}}],"doc":{"description":"Exports challenge from encoded signed public key and challenge","type":"string"}},{"kind":64,"name":"mysqli_data_seek","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The field offset. Must be between zero and the total number of rows minus one (0..mysqli_num_rows() - 1).","type":"int"}}],"doc":{"description":"The mysqli_data_seek() function seeks to an arbitrary result pointer specified by the offset in the result set.","type":"bool"}},{"kind":64,"name":"chgrp","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}},{"kind":128,"name":"$group","modifiers":0,"doc":{"description":"A group name or number.","type":"mixed"}}],"doc":{"description":"Attempts to change the group of the file filename to group.","type":"bool"}},{"kind":64,"name":"ibase_server_info","modifiers":0,"description":"","children":[{"kind":128,"name":"$service_handle","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$action","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"readline_callback_handler_remove","modifiers":0,"children":[],"doc":{"description":"Removes a previously installed callback handler and restores terminal settings.","type":"bool"}},{"kind":64,"name":"imagetypes","modifiers":0,"children":[],"doc":{"description":"Returns the image types supported by the current PHP installation.","type":"int"}},{"kind":64,"name":"ftruncate","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer. Note: The handle must be open for writing.","type":"resource"}},{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"The size to truncate to. Note: If size is larger than the file then the file is extended with null bytes. If size is smaller than the file then the file is truncated to that size.","type":"int"}}],"doc":{"description":"Takes the filepointer, handle, and truncates the file to length, size.","type":"bool"}},{"kind":64,"name":"dom_import_simplexml","modifiers":0,"children":[{"kind":128,"name":"$node","modifiers":0,"doc":{"description":"The SimpleXMLElement node.","type":"SimpleXMLElement"}}],"doc":{"description":"This function takes the node node of class SimpleXML and makes it into a DOMElement node. This new object can then be used as a native DOMElement node.","type":"DOMElement"}},{"kind":64,"name":"imagecolorclosesthwb","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$red","modifiers":0,"doc":{"description":"Value of red component.","type":"int"}},{"kind":128,"name":"$green","modifiers":0,"doc":{"description":"Value of green component.","type":"int"}},{"kind":128,"name":"$blue","modifiers":0,"doc":{"description":"Value of blue component.","type":"int"}}],"doc":{"description":"Get the index of the color which has the hue, white and blackness nearest the given color.","type":"int"}},{"kind":64,"name":"strval","modifiers":0,"description":"","children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable that is being converted to a string. var may be any scalar type or an object that implements the __toString() method. You cannot use strval() on arrays or on objects that do not implement the __toString() method.","type":"mixed"}}],"doc":{"type":"string"}},{"kind":64,"name":"mb_stristr","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string from which to get the first occurrence of needle","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to find in haystack","type":"string"}},{"kind":128,"name":"$before_needle","modifiers":0,"value":"false","doc":{"description":"Determines which portion of haystack this function returns. If set to TRUE, it returns all of haystack from the beginning to the first occurrence of needle (excluding needle). If set to FALSE, it returns all of haystack from the first occurrence of needle to the end (including needle).","type":"bool"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"Character encoding name to use. If it is omitted, internal character encoding is used.","type":"string"}}],"doc":{"description":"mb_stristr() finds the first occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strstr(), mb_stristr() is case-insensitive. If needle is not found, it returns FALSE.","type":"string"}},{"kind":64,"name":"ord","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"A character.","type":"string"}}],"doc":{"description":"Returns the ASCII value of the first character of string.","type":"int"}},{"kind":64,"name":"ibase_blob_get","modifiers":0,"children":[{"kind":128,"name":"$blob_handle","modifiers":0,"doc":{"description":"A BLOB handle opened with ibase_blob_open().","type":"resource"}},{"kind":128,"name":"$len","modifiers":0,"doc":{"description":"Size of returned data.","type":"int"}}],"doc":{"description":"This function returns at most len bytes from a BLOB that has been opened for reading by ibase_blob_open().","type":"string"}},{"kind":64,"name":"end","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The array. This array is passed by reference because it is modified by the function. This means you must pass it a real variable and not a function returning an array because only actual variables may be passed by reference.","type":"array"}}],"doc":{"description":"end() advances array's internal pointer to the last element, and returns its value.","type":"mixed"}},{"kind":64,"name":"oci_new_collection","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"An Oracle connection identifier, returned by oci_connect() or oci_pconnect().","type":"resource"}},{"kind":128,"name":"$tdo","modifiers":0,"doc":{"description":"Should be a valid named type (uppercase).","type":"string"}},{"kind":128,"name":"$schema","modifiers":0,"value":"NULL","doc":{"description":"Should point to the scheme, where the named type was created. The name of the current user is the default value.","type":"string"}}],"doc":{"description":"Allocates a new collection object.","type":"OCI-Collection"}},{"kind":64,"name":"strtolower","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"description":"Returns string with all alphabetic characters converted to lowercase.","type":"string"}},{"kind":64,"name":"sha1_file","modifiers":0,"description":"","children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The filename of the file to hash.","type":"string"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"false","doc":{"description":"When TRUE, returns the digest in raw binary format with a length of 20.","type":"bool"}}],"doc":{"type":"string"}},{"kind":64,"name":"mysql_get_client_info","modifiers":0,"description":"","children":[],"doc":{"type":"string"}},{"kind":64,"name":"array_multisort","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":1024,"doc":{"description":"An array being sorted.","type":"array"}},{"kind":128,"name":"$array1_sort_order","modifiers":0,"value":"SORT_ASC","doc":{"description":"The order used to sort the previous array argument. Either SORT_ASC to sort ascendingly or SORT_DESC to sort descendingly. This argument can be swapped with array1_sort_flags or omitted entirely, in which case SORT_ASC is assumed.","type":"mixed"}},{"kind":128,"name":"$array1_sort_flags","modifiers":0,"value":"SORT_REGULAR","doc":{"description":"Sort options for the previous array argument: Sorting type flags: SORT_REGULAR - compare items normally (don't change types) SORT_NUMERIC - compare items numerically SORT_STRING - compare items as strings SORT_LOCALE_STRING - compare items as strings, based on the current locale. It uses the locale, which can be changed using setlocale() SORT_NATURAL - compare items as strings using \"natural ordering\" like natsort() SORT_FLAG_CASE - can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively This argument can be swapped with array1_sort_order or omitted entirely, in which case SORT_REGULAR is assumed.","type":"mixed"}}],"doc":{"description":"array_multisort() can be used to sort several arrays at once, or a multi-dimensional array by one or more dimensions.","type":"bool"}},{"kind":64,"name":"imagesetstyle","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$style","modifiers":0,"doc":{"description":"An array of pixel colors. You can use the IMG_COLOR_TRANSPARENT constant to add a transparent pixel. Note that style must not be an empty array.","type":"array"}}],"doc":{"description":"imagesetstyle() sets the style to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special color IMG_COLOR_STYLED or lines of images with color IMG_COLOR_STYLEDBRUSHED.","type":"bool"}},{"kind":64,"name":"mysql_affected_rows","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"mysqli_next_result","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Prepares next result set from a previous call to mysqli_multi_query() which can be retrieved by mysqli_store_result() or mysqli_use_result().","type":"bool"}},{"kind":64,"name":"snmp2_real_walk","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The hostname of the SNMP agent (server).","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The read community.","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object id which precedes the wanted one.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"string"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"string"}}],"doc":{"description":"The snmp2_real_walk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids.","type":"array"}},{"kind":64,"name":"ldap_8859_to_t61","modifiers":0,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The text to be translated.","type":"string"}}],"doc":{"description":"Translate ISO-8859 characters to t61 characters.","type":"string"}},{"kind":64,"name":"imagecolorresolve","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$red","modifiers":0,"doc":{"description":"Value of red component.","type":"int"}},{"kind":128,"name":"$green","modifiers":0,"doc":{"description":"Value of green component.","type":"int"}},{"kind":128,"name":"$blue","modifiers":0,"doc":{"description":"Value of blue component.","type":"int"}}],"doc":{"description":"This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.","type":"int"}},{"kind":64,"name":"collator_set_strength","modifiers":0,"children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}},{"kind":128,"name":"$strength","modifiers":0,"doc":{"description":"Strength to set. Possible values are: Collator::PRIMARY Collator::SECONDARY Collator::TERTIARY Collator::QUATERNARY Collator::IDENTICAL Collator::DEFAULT_STRENGTH","type":"int"}}],"doc":{"description":"The » ICU Collation Service supports many levels of comparison (named \"Levels\", but also known as \"Strengths\"). Having these categories enables ICU to sort strings precisely according to local conventions. However, by allowing the levels to be selectively employed, searching for a string in text can be performed with various matching conditions.","type":"bool"}},{"kind":64,"name":"unset","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable to be unset.","type":"mixed"}}],"doc":{"description":"unset() destroys the specified variables.","type":"void"}},{"kind":64,"name":"glob","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern. No tilde expansion or parameter substitution is done.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"Valid flags: GLOB_MARK - Adds a slash to each directory returned GLOB_NOSORT - Return files as they appear in the directory (no sorting). When this flag is not used, the pathnames are sorted alphabetically GLOB_NOCHECK - Return the search pattern if no files matching it were found GLOB_NOESCAPE - Backslashes do not quote metacharacters GLOB_BRACE - Expands {a,b,c} to match 'a', 'b', or 'c' GLOB_ONLYDIR - Return only directory entries which match the pattern GLOB_ERR - Stop on read errors (like unreadable directories), by default errors are ignored.","type":"int"}}],"doc":{"description":"The glob() function searches for all the pathnames matching pattern according to the rules used by the libc glob() function, which is similar to the rules used by common shells.","type":"array"}},{"kind":64,"name":"trait_exists","modifiers":0,"description":"","children":[{"kind":128,"name":"$traitname","modifiers":0,"doc":{"description":"Name of the trait to check","type":"string"}},{"kind":128,"name":"$autoload","modifiers":0,"doc":{"description":"Whether to autoload if not already loaded.","type":"bool"}}],"doc":{"type":"bool"}},{"kind":64,"name":"fbsql_set_characterset","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$characterset","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$in_out_both","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"void"}},{"kind":64,"name":"imagegif","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$to","modifiers":0,"doc":{"description":"The path or an open stream resource (which is automatically being closed after this function returns) to save the file to. If not set or NULL, the raw image stream will be outputted directly.","type":"mixed"}}],"doc":{"description":"imagegif() creates the GIF file in to from the image image. The image argument is the return from the imagecreate() or imagecreatefrom* function.","type":"bool"}},{"kind":64,"name":"oci_set_module_name","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"An Oracle connection identifier, returned by oci_connect(), oci_pconnect(), or oci_new_connect().","type":"resource"}},{"kind":128,"name":"$module_name","modifiers":0,"doc":{"description":"User chosen string up to 48 bytes long.","type":"string"}}],"doc":{"description":"Sets the module name for Oracle tracing.","type":"bool"}},{"kind":64,"name":"is_iterable","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The value to check","type":"mixed"}}],"doc":{"description":"Verify that the contents of a variable is accepted by the iterable pseudo-type, i.e. that it is an array or an object implementing Traversable","type":"bool"}},{"kind":64,"name":"strripos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string to search in.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"If specified, search will start this number of characters counted from the beginning of the string. If the value is negative, search will instead start from that many characters from the end of the string, searching backwards.","type":"int"}}],"doc":{"description":"Find the numeric position of the last occurrence of needle in the haystack string.","type":"int"}},{"kind":64,"name":"zip_entry_read","modifiers":0,"children":[{"kind":128,"name":"$zip_entry","modifiers":0,"doc":{"description":"A directory entry returned by zip_read().","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"value":"1024","doc":{"description":"The number of bytes to return. Note: This should be the uncompressed length you wish to read.","type":"int"}}],"doc":{"description":"Reads from an open directory entry.","type":"string"}},{"kind":64,"name":"ibase_commit_ret","modifiers":0,"children":[{"kind":128,"name":"$link_or_trans_identifier","modifiers":0,"value":"NULL","doc":{"description":"If called without an argument, this function commits the default transaction of the default link. If the argument is a connection identifier, the default transaction of the corresponding connection will be committed. If the argument is a transaction identifier, the corresponding transaction will be committed. The transaction context will be retained, so statements executed from within this transaction will not be invalidated.","type":"resource"}}],"doc":{"description":"Commits a transaction without closing it.","type":"bool"}},{"kind":64,"name":"intlcal_set_lenient","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$isLenient","modifiers":0,"doc":{"description":"Use TRUE to activate the lenient mode; FALSE otherwise.","type":"string"}}],"doc":{"description":"Defines whether the calendar is ‘lenient mode’. In such a mode, some of out-of-bounds values for some fields are accepted, the behavior being similar to that of IntlCalendar::add() (i.e., the value wraps around, carrying into more significant fields each time). If the lenient mode is off, then such values will generate an error.","type":"ReturnType"}},{"kind":64,"name":"mysqli_warning_count","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns the number of warnings from the last query in the connection.","type":"int"}},{"kind":64,"name":"ftp_login","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The username (USER).","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password (PASS).","type":"string"}}],"doc":{"description":"Logs in to the given FTP stream.","type":"bool"}},{"kind":64,"name":"pg_connection_busy","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"pg_connection_busy() determines whether or not a connection is busy. If it is busy, a previous query is still executing. If pg_get_result() is used on the connection, it will be blocked.","type":"bool"}},{"kind":64,"name":"ftp_cdup","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}}],"doc":{"description":"Changes to the parent directory.","type":"bool"}},{"kind":64,"name":"htmlentities","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"ENT_COMPAT","doc":{"description":"A bitmask of one or more of the following flags, which specify how to handle quotes, invalid code unit sequences and the used document type. The default is ENT_COMPAT | ENT_HTML401. Available flags constants Constant Name Description ENT_COMPAT Will convert double-quotes and leave single-quotes alone. ENT_QUOTES Will convert both double and single quotes. ENT_NOQUOTES Will leave both double and single quotes unconverted. ENT_IGNORE Silently discard invalid code unit sequences instead of returning an empty string. Using this flag is discouraged as it » may have security implications. ENT_SUBSTITUTE Replace invalid code unit sequences with a Unicode Replacement Character U+FFFD (UTF-8) or &#FFFD; (otherwise) instead of returning an empty string. ENT_DISALLOWED Replace invalid code points for the given document type with a Unicode Replacement Character U+FFFD (UTF-8) or &#FFFD; (otherwise) instead of leaving them as is. This may be useful, for instance, to ensure the well-formedness of XML documents with embedded external content. ENT_HTML401 Handle code as HTML 4.01. ENT_XML1 Handle code as XML 1. ENT_XHTML Handle code as XHTML. ENT_HTML5 Handle code as HTML 5.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"ini_get(\"default_charset\")","doc":{"description":"An optional argument defining the encoding used when converting characters. If omitted, the default value of the encoding varies depending on the PHP version in use. In PHP 5.6 and later, the default_charset configuration option is used as the default value. PHP 5.4 and 5.5 will use UTF-8 as the default. Earlier versions of PHP use ISO-8859-1. Although this argument is technically optional, you are highly encouraged to specify the correct value for your code if you are using PHP 5.5 or earlier, or if your default_charset configuration option may be set incorrectly for the given input. The following character sets are supported: Supported charsets Charset Aliases Description ISO-8859-1 ISO8859-1 Western European, Latin-1. ISO-8859-5 ISO8859-5 Little used cyrillic charset (Latin/Cyrillic). ISO-8859-15 ISO8859-15 Western European, Latin-9. Adds the Euro sign, French and Finnish letters missing in Latin-1 (ISO-8859-1). UTF-8   ASCII compatible multi-byte 8-bit Unicode. cp866 ibm866, 866 DOS-specific Cyrillic charset. cp1251 Windows-1251, win-1251, 1251 Windows-specific Cyrillic charset. cp1252 Windows-1252, 1252 Windows specific charset for Western European. KOI8-R koi8-ru, koi8r Russian. BIG5 950 Traditional Chinese, mainly used in Taiwan. GB2312 936 Simplified Chinese, national standard character set. BIG5-HKSCS   Big5 with Hong Kong extensions, Traditional Chinese. Shift_JIS SJIS, SJIS-win, cp932, 932 Japanese EUC-JP EUCJP, eucJP-win Japanese MacRoman   Charset that was used by Mac OS. ''   An empty string activates detection from script encoding (Zend multibyte), default_charset and current locale (see nl_langinfo() and setlocale()), in this order. Not recommended. Note: Any other character sets are not recognized. The default encoding will be used instead and a warning will be emitted.","type":"string"}},{"kind":128,"name":"$double_encode","modifiers":0,"value":"true","doc":{"description":"When double_encode is turned off PHP will not encode existing html entities. The default is to convert everything.","type":"bool"}}],"doc":{"description":"This function is identical to htmlspecialchars() in all ways, except with htmlentities(), all characters which have HTML character entity equivalents are translated into these entities.","type":"string"}},{"kind":64,"name":"ucwords","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$delimiters","modifiers":0,"value":"\"","doc":{"description":"The optional delimiters contains the word separator characters.","type":"string"}}],"doc":{"description":"Returns a string with the first character of each word in str capitalized, if that character is alphabetic.","type":"string"}},{"kind":64,"name":"mb_substitute_character","modifiers":0,"children":[{"kind":128,"name":"$substrchar","modifiers":0,"value":"mb_substitute_character()","doc":{"description":"Specify the Unicode value as an integer, or as one of the following strings: \"none\": no output \"long\": Output character code value (Example: U+3000, JIS+7E7E) \"entity\": Output character entity (Example: Ȁ)","type":"mixed"}}],"doc":{"description":"Specifies a substitution character when input character encoding is invalid or character code does not exist in output character encoding. Invalid characters may be substituted NULL (no output), string or integer value (Unicode character code value).","type":"mixed"}},{"kind":64,"name":"grapheme_extract","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"String to search.","type":"string"}},{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"Maximum number items - based on the $extract_type - to return.","type":"int"}},{"kind":128,"name":"$extract_type","modifiers":0,"doc":{"description":"Defines the type of units referred to by the $size parameter: GRAPHEME_EXTR_COUNT (default) - $size is the number of default grapheme clusters to extract. GRAPHEME_EXTR_MAXBYTES - $size is the maximum number of bytes returned. GRAPHEME_EXTR_MAXCHARS - $size is the maximum number of UTF-8 characters returned.","type":"int"}},{"kind":128,"name":"$start","modifiers":0,"value":"0","doc":{"description":"Starting position in $haystack in bytes - if given, it must be zero or a positive value that is less than or equal to the length of $haystack in bytes, or a negative value that counts from the end of $haystack. If $start does not point to the first byte of a UTF-8 character, the start position is moved to the next character boundary.","type":"int"}},{"kind":128,"name":"$next","modifiers":1024,"doc":{"description":"Reference to a value that will be set to the next starting position. When the call returns, this may point to the first byte position past the end of the string.","type":"int"}}],"doc":{"description":"Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8.","type":"string"}},{"kind":64,"name":"msql_close","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"The mSQL connection. If not specified, the last link opened by msql_connect() is assumed. If no such link is found, the function will try to establish a link as if msql_connect() was called, and use it.","type":"resource"}}],"doc":{"description":"msql_close() closes the non-persistent connection to the mSQL server that's associated with the specified link identifier.","type":"bool"}},{"kind":64,"name":"pspell_store_replacement","modifiers":0,"description":"","children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"doc":{"description":"A dictionary link identifier, opened with pspell_new_personal()","type":"int"}},{"kind":128,"name":"$misspelled","modifiers":0,"doc":{"description":"The misspelled word.","type":"string"}},{"kind":128,"name":"$correct","modifiers":0,"doc":{"description":"The fixed spelling for the misspelled word.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"locale_get_default","modifiers":0,"children":[],"doc":{"description":"Gets the default locale value. At the PHP initialization this value is set to 'intl.default_locale' value from php.ini if that value exists or from ICU's function uloc_getDefault().","type":"string"}},{"kind":64,"name":"imageaffinematrixconcat","modifiers":0,"children":[{"kind":128,"name":"$m1","modifiers":0,"doc":{"description":"An affine transformation matrix (an array with keys 0 to 5 and float values).","type":"array"}},{"kind":128,"name":"$m2","modifiers":0,"doc":{"description":"An affine transformation matrix (an array with keys 0 to 5 and float values).","type":"array"}}],"doc":{"description":"Returns the concatenation of two affine transformation matrices, what is useful if multiple transformations should be applied to the same image in one go.","type":"array"}},{"kind":64,"name":"imagesetpixel","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"x-coordinate.","type":"int"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"y-coordinate.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"imagesetpixel() draws a pixel at the specified coordinate.","type":"bool"}},{"kind":64,"name":"version_compare","modifiers":0,"children":[{"kind":128,"name":"$version1","modifiers":0,"doc":{"description":"First version number.","type":"string"}},{"kind":128,"name":"$version2","modifiers":0,"doc":{"description":"Second version number.","type":"string"}},{"kind":128,"name":"$operator","modifiers":0,"doc":{"description":"If the third optional operator argument is specified, test for a particular relationship. The possible operators are: <, lt, <=, le, >, gt, >=, ge, ==, =, eq, !=, <>, ne respectively. This parameter is case-sensitive, values should be lowercase.","type":"string"}}],"doc":{"description":"version_compare() compares two \"PHP-standardized\" version number strings.","type":"mixed"}},{"kind":64,"name":"datefmt_set_timezone","modifiers":0,"children":[{"kind":128,"name":"$zone","modifiers":0,"doc":{"description":"The timezone to use for this formatter. This can be specified in the following forms: NULL, in which case the default timezone will be used, as specified in the ini setting date.timezone or through the function date_default_timezone_set() and as returned by date_default_timezone_get(). An IntlTimeZone, which will be used directly. A DateTimeZone. Its identifier will be extracted and an ICU timezone object will be created; the timezone will be backed by ICUʼs database, not PHPʼs. A string, which should be a valid ICU timezone identifier. See IntlTimeZone::createTimeZoneIDEnumeration(). Raw offsets such as \"GMT+08:30\" are also accepted.","type":"mixed"}}],"doc":{"description":"Sets the timezone that will be used when formatting dates or times with this object.","type":"boolean"}},{"kind":64,"name":"shmop_read","modifiers":0,"children":[{"kind":128,"name":"$shmid","modifiers":0,"doc":{"description":"The shared memory block identifier created by shmop_open()","type":"resource"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"Offset from which to start reading","type":"int"}},{"kind":128,"name":"$count","modifiers":0,"doc":{"description":"The number of bytes to read","type":"int"}}],"doc":{"description":"shmop_read() will read a string from shared memory block.","type":"string"}},{"kind":64,"name":"mysqli_ping","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Checks whether the connection to the server is working. If it has gone down and global option mysqli.reconnect is enabled, an automatic reconnection is attempted.","type":"bool"}},{"kind":64,"name":"mb_ereg_search_regs","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The search pattern.","type":"string"}},{"kind":128,"name":"$option","modifiers":0,"value":"\"ms\"","doc":{"description":"The search option.","type":"string"}}],"doc":{"description":"Returns the matched part of a multibyte regular expression.","type":"array"}},{"kind":64,"name":"collator_compare","modifiers":0,"children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}},{"kind":128,"name":"$str1","modifiers":0,"doc":{"description":"The first string to compare.","type":"string"}},{"kind":128,"name":"$str2","modifiers":0,"doc":{"description":"The second string to compare.","type":"string"}}],"doc":{"description":"Compare two Unicode strings according to collation rules.","type":"int"}},{"kind":64,"name":"gmp_pow","modifiers":0,"children":[{"kind":128,"name":"$base","modifiers":0,"doc":{"description":"The base number. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$exp","modifiers":0,"doc":{"description":"The positive power to raise the base.","type":"int"}}],"doc":{"description":"Raise base into power exp.","type":"GMP"}},{"kind":64,"name":"datefmt_get_calendar_object","modifiers":0,"children":[],"doc":{"description":"Obtain a copy of the calendar object used internally by this formatter. This calendar will have a type (as in gregorian, japanese, buddhist, roc, persian, islamic, etc.) and a timezone that match the type and timezone used by the formatter. The date/time of the object is unspecified.","type":"IntlCalendar"}},{"kind":64,"name":"dirname","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"A path. On Windows, both slash (/) and backslash (\\) are used as directory separator character. In other environments, it is the forward slash (/).","type":"string"}},{"kind":128,"name":"$levels","modifiers":0,"value":"1","doc":{"description":"The number of parent directories to go up. This must be an integer greater than 0.","type":"int"}}],"doc":{"description":"Given a string containing the path of a file or directory, this function will return the parent directory's path that is levels up from the current directory.","type":"string"}},{"kind":64,"name":"msql_field_name","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 1.","type":"int"}}],"doc":{"description":"msql_field_name() gets the name of the specified field index.","type":"string"}},{"kind":64,"name":"dechex","modifiers":0,"children":[{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"The decimal value to convert. As PHP's integer type is signed, but dechex() deals with unsigned integers, negative integers will be treated as though they were unsigned.","type":"int"}}],"doc":{"description":"Returns a string containing a hexadecimal representation of the given unsigned number argument.","type":"string"}},{"kind":64,"name":"openssl_private_encrypt","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$crypted","modifiers":1024,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$key","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$padding","modifiers":0,"value":"OPENSSL_PKCS1_PADDING","doc":{"description":"padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_NO_PADDING.","type":"int"}}],"doc":{"description":"openssl_private_encrypt() encrypts data with private key and stores the result into crypted. Encrypted data can be decrypted via openssl_public_decrypt().","type":"bool"}},{"kind":64,"name":"asinh","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg.","type":"float"}},{"kind":64,"name":"array_walk","modifiers":0,"description":"","children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"Typically, callback takes on two parameters. The array parameter's value being the first, and the key/index second. Note: If callback needs to be working with the actual values of the array, specify the first parameter of callback as a reference. Then, any changes made to those elements will be made in the original array itself. Note: Many internal functions (for example strtolower()) will throw a warning if more than the expected number of argument are passed in and are not usable directly as a callback. Only the values of the array may potentially be changed; its structure cannot be altered, i.e., the programmer cannot add, unset or reorder elements. If the callback does not respect this requirement, the behavior of this function is undefined, and unpredictable.","type":"callable"}},{"kind":128,"name":"$userdata","modifiers":0,"value":"NULL","doc":{"description":"If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback.","type":"mixed"}}],"doc":{"type":"bool"}},{"kind":64,"name":"usleep","modifiers":0,"children":[{"kind":128,"name":"$micro_seconds","modifiers":0,"doc":{"description":"Halt time in microseconds. A microsecond is one millionth of a second.","type":"int"}}],"doc":{"description":"Delays program execution for the given number of microseconds.","type":"void"}},{"kind":64,"name":"getmyuid","modifiers":0,"description":"","children":[],"doc":{"type":"int"}},{"kind":64,"name":"html_entity_decode","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"ENT_COMPAT","doc":{"description":"A bitmask of one or more of the following flags, which specify how to handle quotes and which document type to use. The default is ENT_COMPAT | ENT_HTML401. Available flags constants Constant Name Description ENT_COMPAT Will convert double-quotes and leave single-quotes alone. ENT_QUOTES Will convert both double and single quotes. ENT_NOQUOTES Will leave both double and single quotes unconverted. ENT_HTML401 Handle code as HTML 4.01. ENT_XML1 Handle code as XML 1. ENT_XHTML Handle code as XHTML. ENT_HTML5 Handle code as HTML 5.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"ini_get(\"default_charset\")","doc":{"description":"An optional argument defining the encoding used when converting characters. If omitted, the default value of the encoding varies depending on the PHP version in use. In PHP 5.6 and later, the default_charset configuration option is used as the default value. PHP 5.4 and 5.5 will use UTF-8 as the default. Earlier versions of PHP use ISO-8859-1. Although this argument is technically optional, you are highly encouraged to specify the correct value for your code if you are using PHP 5.5 or earlier, or if your default_charset configuration option may be set incorrectly for the given input. The following character sets are supported: Supported charsets Charset Aliases Description ISO-8859-1 ISO8859-1 Western European, Latin-1. ISO-8859-5 ISO8859-5 Little used cyrillic charset (Latin/Cyrillic). ISO-8859-15 ISO8859-15 Western European, Latin-9. Adds the Euro sign, French and Finnish letters missing in Latin-1 (ISO-8859-1). UTF-8   ASCII compatible multi-byte 8-bit Unicode. cp866 ibm866, 866 DOS-specific Cyrillic charset. cp1251 Windows-1251, win-1251, 1251 Windows-specific Cyrillic charset. cp1252 Windows-1252, 1252 Windows specific charset for Western European. KOI8-R koi8-ru, koi8r Russian. BIG5 950 Traditional Chinese, mainly used in Taiwan. GB2312 936 Simplified Chinese, national standard character set. BIG5-HKSCS   Big5 with Hong Kong extensions, Traditional Chinese. Shift_JIS SJIS, SJIS-win, cp932, 932 Japanese EUC-JP EUCJP, eucJP-win Japanese MacRoman   Charset that was used by Mac OS. ''   An empty string activates detection from script encoding (Zend multibyte), default_charset and current locale (see nl_langinfo() and setlocale()), in this order. Not recommended. Note: Any other character sets are not recognized. The default encoding will be used instead and a warning will be emitted.","type":"string"}}],"doc":{"description":"html_entity_decode() is the opposite of htmlentities() in that it converts all HTML entities in the string to their applicable characters.","type":"string"}},{"kind":64,"name":"curl_multi_init","modifiers":0,"children":[],"doc":{"description":"Allows the processing of multiple cURL handles asynchronously.","type":"resource"}},{"kind":64,"name":"ftp_raw","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$command","modifiers":0,"doc":{"description":"The command to execute.","type":"string"}}],"doc":{"description":"Sends an arbitrary command to the FTP server.","type":"array"}},{"kind":64,"name":"locale_set_default","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"Is a BCP 47 compliant language tag.","type":"string"}}],"doc":{"description":"Sets the default runtime locale to $locale. This changes the value of INTL global 'default_locale' locale identifier. UAX #35 extensions are accepted.","type":"bool"}},{"kind":64,"name":"srand","modifiers":0,"children":[{"kind":128,"name":"$seed","modifiers":0,"doc":{"description":"An arbitrary integer seed value.","type":"int"}}],"doc":{"description":"Seeds the random number generator with seed or with a random value if no seed is given.","type":"void"}},{"kind":64,"name":"tidy_clean_repair","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"This function cleans and repairs the given tidy object.","type":"bool"}},{"kind":64,"name":"register_tick_function","modifiers":0,"description":"","children":[{"kind":128,"name":"$function","modifiers":0,"doc":{"description":"The function name as a string, or an array consisting of an object and a method.","type":"callable"}},{"kind":128,"name":"$arg","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"type":"bool"}},{"kind":64,"name":"msql_query","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The SQL query.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"The mSQL connection. If not specified, the last link opened by msql_connect() is assumed. If no such link is found, the function will try to establish a link as if msql_connect() was called, and use it.","type":"resource"}}],"doc":{"description":"msql_query() sends a query to the currently active database on the server that's associated with the specified link identifier.","type":"resource"}},{"kind":64,"name":"min","modifiers":0,"children":[{"kind":128,"name":"$value1","modifiers":0,"doc":{"description":"Any comparable value.","type":"mixed"}},{"kind":128,"name":"$value2","modifiers":0,"doc":{"description":"Any comparable value.","type":"mixed"}}],"doc":{"description":"If the first and only parameter is an array, min() returns the lowest value in that array. If at least two parameters are provided, min() returns the smallest of these values.","type":"mixed"}},{"kind":64,"name":"mysqli_init","modifiers":0,"children":[],"doc":{"description":"Allocates or initializes a MYSQL object suitable for mysqli_options() and mysqli_real_connect().","type":"mysqli"}},{"kind":64,"name":"openssl_encrypt","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data.","type":"string"}},{"kind":128,"name":"$method","modifiers":0,"doc":{"description":"The cipher method. For a list of available cipher methods, use openssl_get_cipher_methods().","type":"string"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The key.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"options is a bitwise disjunction of the flags OPENSSL_RAW_DATA and OPENSSL_ZERO_PADDING.","type":"int"}},{"kind":128,"name":"$iv","modifiers":0,"value":"\"\"","doc":{"description":"A non-NULL Initialization Vector.","type":"string"}},{"kind":128,"name":"$tag","modifiers":1024,"value":"NULL","doc":{"description":"The authentication tag passed by reference when using AEAD cipher mode (GCM or CCM).","type":"string"}},{"kind":128,"name":"$aad","modifiers":0,"value":"\"\"","doc":{"description":"Additional authentication data.","type":"string"}},{"kind":128,"name":"$tag_length","modifiers":0,"value":"16","doc":{"description":"The length of the authentication tag. Its value can be between 4 and 16 for GCM mode.","type":"int"}}],"doc":{"description":"Encrypts given data with given method and key, returns a raw or base64 encoded string","type":"string"}},{"kind":64,"name":"json_last_error","modifiers":0,"children":[],"doc":{"description":"Returns the last error (if any) occurred during the last JSON encoding/decoding.","type":"int"}},{"kind":64,"name":"ldap_parse_result","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$errcode","modifiers":1024,"doc":{"description":"A reference to a variable that will be set to the LDAP error code in the result, or 0 if no error occurred.","type":"int"}},{"kind":128,"name":"$matcheddn","modifiers":1024,"doc":{"description":"A reference to a variable that will be set to a matched DN if one was recognised within the request, otherwise it will be set to NULL.","type":"string"}},{"kind":128,"name":"$errmsg","modifiers":1024,"doc":{"description":"A reference to a variable that will be set to the LDAP error message in the result, or an empty string if no error occurred.","type":"string"}},{"kind":128,"name":"$referrals","modifiers":1024,"doc":{"description":"A reference to a variable that will be set to an array set to all of the referral strings in the result, or an empty array if no referrals were returned.","type":"array"}}],"doc":{"description":"Parses an LDAP search result.","type":"bool"}},{"kind":64,"name":"pg_execute","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"An array of parameter values to substitute for the $1, $2, etc. placeholders in the original prepared query string. The number of elements in the array must match the number of placeholders. Warning Elements are converted to strings by calling this function.","type":"array"}}],"doc":{"description":"Sends a request to execute a prepared statement with given parameters, and waits for the result.","type":"resource"}},{"kind":64,"name":"fprintf","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"A file system pointer resource that is typically created using fopen().","type":"resource"}},{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"See sprintf() for a description of format.","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Write a string produced according to format to the stream resource specified by handle.","type":"int"}},{"kind":64,"name":"pg_result_status","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$type","modifiers":0,"value":"PGSQL_STATUS_LONG","doc":{"description":"Either PGSQL_STATUS_LONG to return the numeric status of the result, or PGSQL_STATUS_STRING to return the command tag of the result. If not specified, PGSQL_STATUS_LONG is the default.","type":"int"}}],"doc":{"description":"pg_result_status() returns the status of a result resource, or the PostgreSQL command completion tag associated with the result","type":"mixed"}},{"kind":64,"name":"imagefilter","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$filtertype","modifiers":0,"doc":{"description":"filtertype can be one of the following: IMG_FILTER_NEGATE: Reverses all colors of the image. IMG_FILTER_GRAYSCALE: Converts the image into grayscale. IMG_FILTER_BRIGHTNESS: Changes the brightness of the image. Use arg1 to set the level of brightness. The range for the brightness is -255 to 255. IMG_FILTER_CONTRAST: Changes the contrast of the image. Use arg1 to set the level of contrast. IMG_FILTER_COLORIZE: Like IMG_FILTER_GRAYSCALE, except you can specify the color. Use arg1, arg2 and arg3 in the form of red, green, blue and arg4 for the alpha channel. The range for each color is 0 to 255. IMG_FILTER_EDGEDETECT: Uses edge detection to highlight the edges in the image. IMG_FILTER_EMBOSS: Embosses the image. IMG_FILTER_GAUSSIAN_BLUR: Blurs the image using the Gaussian method. IMG_FILTER_SELECTIVE_BLUR: Blurs the image. IMG_FILTER_MEAN_REMOVAL: Uses mean removal to achieve a \"sketchy\" effect. IMG_FILTER_SMOOTH: Makes the image smoother. Use arg1 to set the level of smoothness. IMG_FILTER_PIXELATE: Applies pixelation effect to the image, use arg1 to set the block size and arg2 to set the pixelation effect mode.","type":"int"}},{"kind":128,"name":"$arg1","modifiers":0,"doc":{"description":"IMG_FILTER_BRIGHTNESS: Brightness level. IMG_FILTER_CONTRAST: Contrast level. IMG_FILTER_COLORIZE: Value of red component. IMG_FILTER_SMOOTH: Smoothness level. IMG_FILTER_PIXELATE: Block size in pixels.","type":"int"}},{"kind":128,"name":"$arg2","modifiers":0,"doc":{"description":"IMG_FILTER_COLORIZE: Value of green component. IMG_FILTER_PIXELATE: Whether to use advanced pixelation effect or not (defaults to FALSE).","type":"int"}},{"kind":128,"name":"$arg3","modifiers":0,"doc":{"description":"IMG_FILTER_COLORIZE: Value of blue component.","type":"int"}},{"kind":128,"name":"$arg4","modifiers":0,"doc":{"description":"IMG_FILTER_COLORIZE: Alpha channel, A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.","type":"int"}}],"doc":{"description":"imagefilter() applies the given filter filtertype on the image.","type":"bool"}},{"kind":64,"name":"xml_set_element_handler","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to set up start and end element handler functions.","type":"resource"}},{"kind":128,"name":"$start_element_handler","modifiers":0,"doc":{"description":"The function named by start_element_handler must accept three parameters: start_element_handler ( resource $parser , string $name , array $attribs ) parser The first parameter, parser, is a reference to the XML parser calling the handler. name The second parameter, name, contains the name of the element for which this handler is called.If case-folding is in effect for this parser, the element name will be in uppercase letters. attribs The third parameter, attribs, contains an associative array with the element's attributes (if any).The keys of this array are the attribute names, the values are the attribute values.Attribute names are case-folded on the same criteria as element names.Attribute values are not case-folded. The original order of the attributes can be retrieved by walking through attribs the normal way, using each().The first key in the array was the first attribute, and so on. Note: Instead of a function name, an array containing an object reference and a method name can also be supplied.","type":"callable"}},{"kind":128,"name":"$end_element_handler","modifiers":0,"doc":{"description":"The function named by end_element_handler must accept two parameters: end_element_handler ( resource $parser , string $name ) parser The first parameter, parser, is a reference to the XML parser calling the handler. name The second parameter, name, contains the name of the element for which this handler is called.If case-folding is in effect for this parser, the element name will be in uppercase letters. If a handler function is set to an empty string, or FALSE, the handler in question is disabled.","type":"callable"}}],"doc":{"description":"Sets the element handler functions for the XML parser. start_element_handler and end_element_handler are strings containing the names of functions that must exist when xml_parse() is called for parser.","type":"bool"}},{"kind":64,"name":"get_object_vars","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"An object instance.","type":"object"}}],"doc":{"description":"Gets the accessible non-static properties of the given object according to scope.","type":"array"}},{"kind":64,"name":"ob_get_contents","modifiers":0,"children":[],"doc":{"description":"Gets the contents of the output buffer without clearing it.","type":"string"}},{"kind":64,"name":"mysqli_embedded_server_end","modifiers":0,"children":[],"doc":{"description":"Procedural style","type":"void"}},{"kind":64,"name":"oci_new_connect","modifiers":0,"children":[{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The Oracle user name.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password for username.","type":"string"}},{"kind":128,"name":"$connection_string","modifiers":0,"doc":{"description":"Contains the Oracle instance to connect to. It can be an » Easy Connect string, or a Connect Name from the tnsnames.ora file, or the name of a local Oracle instance. If not specified, PHP uses environment variables such as TWO_TASK (on Linux) or LOCAL (on Windows) and ORACLE_SID to determine the Oracle instance to connect to. To use the Easy Connect naming method, PHP must be linked with Oracle 10g or greater Client libraries. The Easy Connect string for Oracle 10g is of the form: [//]host_name[:port][/service_name]. From Oracle 11g, the syntax is: [//]host_name[:port][/service_name][:server_type][/instance_name]. Service names can be found by running the Oracle utility lsnrctl status on the database server machine. The tnsnames.ora file can be in the Oracle Net search path, which includes $ORACLE_HOME/network/admin and /etc. Alternatively set TNS_ADMIN so that $TNS_ADMIN/tnsnames.ora is read. Make sure the web daemon has read access to the file.","type":"string"}},{"kind":128,"name":"$character_set","modifiers":0,"doc":{"description":"Determines the character set used by the Oracle Client libraries. The character set does not need to match the character set used by the database. If it doesn't match, Oracle will do its best to convert data to and from the database character set. Depending on the character sets this may not give usable results. Conversion also adds some time overhead. If not specified, the Oracle Client libraries determine a character set from the NLS_LANG environment variable. Passing this parameter can reduce the time taken to connect.","type":"string"}},{"kind":128,"name":"$session_mode","modifiers":0,"doc":{"description":"This parameter is available since version PHP 5 (PECL OCI8 1.1) and accepts the following values: OCI_DEFAULT, OCI_SYSOPER and OCI_SYSDBA. If either OCI_SYSOPER or OCI_SYSDBA were specified, this function will try to establish privileged connection using external credentials. Privileged connections are disabled by default. To enable them you need to set oci8.privileged_connect to On. PHP 5.3 (PECL OCI8 1.3.4) introduced the OCI_CRED_EXT mode value. This tells Oracle to use External or OS authentication, which must be configured in the database. The OCI_CRED_EXT flag can only be used with username of \"/\" and a empty password. oci8.privileged_connect may be On or Off. OCI_CRED_EXT may be combined with the OCI_SYSOPER or OCI_SYSDBA modes. OCI_CRED_EXT is not supported on Windows for security reasons.","type":"int"}}],"doc":{"description":"Establishes a new connection to an Oracle server and logs on.","type":"resource"}},{"kind":64,"name":"intlcal_get_now","modifiers":0,"children":[],"doc":{"description":"The number of milliseconds that have passed since the reference date. This number is derived from the system time.","type":"float"}},{"kind":64,"name":"getmypid","modifiers":0,"children":[],"doc":{"description":"Gets the current PHP process ID.","type":"int"}},{"kind":64,"name":"mcrypt_module_close","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"intlcal_get_maximum","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Gets the global maximum for a field, in this specific calendar. This value is larger or equal to that returned by IntlCalendar::getActualMaximum(), which is in its turn larger or equal to that returned by IntlCalendar::getLeastMaximum().","type":"int"}},{"kind":64,"name":"libxml_use_internal_errors","modifiers":0,"children":[{"kind":128,"name":"$use_errors","modifiers":0,"value":"false","doc":{"description":"Enable (TRUE) user error handling or disable (FALSE) user error handling. Disabling will also clear any existing libxml errors.","type":"bool"}}],"doc":{"description":"libxml_use_internal_errors() allows you to disable standard libxml errors and enable user error handling.","type":"bool"}},{"kind":64,"name":"xml_get_current_column_number","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to get column number from.","type":"resource"}}],"doc":{"description":"Gets the current column number of the given XML parser.","type":"int"}},{"kind":64,"name":"odbc_primarykeys","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$qualifier","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$owner","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$table","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Returns a result identifier that can be used to fetch the column names that comprise the primary key for a table.","type":"resource"}},{"kind":64,"name":"mysqli_stmt_send_long_data","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}},{"kind":128,"name":"$param_nr","modifiers":0,"doc":{"description":"Indicates which parameter to associate the data with. Parameters are numbered beginning with 0.","type":"int"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"A string containing data to be sent.","type":"string"}}],"doc":{"description":"Allows to send parameter data to the server in pieces (or chunks), e.g. if the size of a blob exceeds the size of max_allowed_packet. This function can be called multiple times to send the parts of a character or binary data value for a column, which must be one of the TEXT or BLOB datatypes.","type":"bool"}},{"kind":64,"name":"substr_count","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string to search in","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The substring to search for","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"The offset where to start counting. If the offset is negative, counting starts from the end of the string.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The maximum length after the specified offset to search for the substring. It outputs a warning if the offset plus the length is greater than the haystack length. A negative length counts from the end of haystack.","type":"int"}}],"doc":{"description":"substr_count() returns the number of times the needle substring occurs in the haystack string. Please note that needle is case sensitive.","type":"int"}},{"kind":64,"name":"ldap_dn2ufn","modifiers":0,"children":[{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The distinguished name of an LDAP entity.","type":"string"}}],"doc":{"description":"Turns the specified dn, into a more user-friendly form, stripping off type names.","type":"string"}},{"kind":64,"name":"password_get_info","modifiers":0,"children":[{"kind":128,"name":"$hash","modifiers":0,"doc":{"description":"A hash created by password_hash().","type":"string"}}],"doc":{"description":"When passed in a valid hash created by an algorithm supported by password_hash(), this function will return an array of information about that hash.","type":"array"}},{"kind":64,"name":"fpassthru","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).","type":"resource"}}],"doc":{"description":"Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.","type":"int"}},{"kind":64,"name":"ldap_list","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$base_dn","modifiers":0,"doc":{"description":"The base DN for the directory.","type":"string"}},{"kind":128,"name":"$filter","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$attributes","modifiers":0,"doc":{"description":"An array of the required attributes, e.g. array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is always returned irrespective of which attributes types are requested. Using this parameter is much more efficient than the default action (which is to return all attributes and their associated values). The use of this parameter should therefore be considered good practice.","type":"array"}},{"kind":128,"name":"$attrsonly","modifiers":0,"doc":{"description":"Should be set to 1 if only attribute types are wanted. If set to 0 both attributes types and attribute values are fetched which is the default behaviour.","type":"int"}},{"kind":128,"name":"$sizelimit","modifiers":0,"doc":{"description":"Enables you to limit the count of entries fetched. Setting this to 0 means no limit. Note: This parameter can NOT override server-side preset sizelimit. You can set it lower though. Some directory server hosts will be configured to return no more than a preset number of entries. If this occurs, the server will indicate that it has only returned a partial results set. This also occurs if you use this parameter to limit the count of fetched entries.","type":"int"}},{"kind":128,"name":"$timelimit","modifiers":0,"doc":{"description":"Sets the number of seconds how long is spend on the search. Setting this to 0 means no limit. Note: This parameter can NOT override server-side preset timelimit. You can set it lower though.","type":"int"}},{"kind":128,"name":"$deref","modifiers":0,"doc":{"description":"Specifies how aliases should be handled during the search. It can be one of the following: LDAP_DEREF_NEVER - (default) aliases are never dereferenced. LDAP_DEREF_SEARCHING - aliases should be dereferenced during the search but not when locating the base object of the search. LDAP_DEREF_FINDING - aliases should be dereferenced when locating the base object but not during the search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always.","type":"int"}}],"doc":{"description":"Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_ONELEVEL.","type":"resource"}},{"kind":64,"name":"preg_grep","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern to search for, as a string.","type":"string"}},{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"If set to PREG_GREP_INVERT, this function returns the elements of the input array that do not match the given pattern.","type":"int"}}],"doc":{"description":"Returns the array consisting of the elements of the input array that match the given pattern.","type":"array"}},{"kind":64,"name":"mysqli_character_set_name","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns the current character set for the database connection.","type":"string"}},{"kind":64,"name":"array_product","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The array.","type":"array"}}],"doc":{"description":"array_product() returns the product of values in an array.","type":"number"}},{"kind":64,"name":"filter_id","modifiers":0,"description":"","children":[{"kind":128,"name":"$filtername","modifiers":0,"doc":{"description":"Name of a filter to get.","type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"ignore_user_abort","modifiers":0,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"If set, this function will set the ignore_user_abort ini setting to the given value. If not, this function will only return the previous setting without changing it.","type":"bool"}}],"doc":{"description":"Sets whether a client disconnect should cause a script to be aborted.","type":"int"}},{"kind":64,"name":"mysqli_get_charset","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns a character set object providing several properties of the current active character set.","type":"object"}},{"kind":64,"name":"xml_set_processing_instruction_handler","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to set up processing instruction (PI) handler function.","type":"resource"}},{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser. The function named by handler must accept three parameters: handler ( resource $parser , string $target , string $data ) parser The first parameter, parser, is a reference to the XML parser calling the handler. target The second parameter, target, contains the PI target. data The third parameter, data, contains the PI data. If a handler function is set to an empty string, or FALSE, the handler in question is disabled. Note: Instead of a function name, an array containing an object reference and a method name can also be supplied.","type":"callable"}}],"doc":{"description":"Sets the processing instruction (PI) handler function for the XML parser parser.","type":"bool"}},{"kind":64,"name":"openssl_pkcs12_read","modifiers":0,"children":[{"kind":128,"name":"$pkcs12","modifiers":0,"doc":{"description":"The certificate store contents, not its file name.","type":"string"}},{"kind":128,"name":"$certs","modifiers":1024,"doc":{"description":"On success, this will hold the Certificate Store Data.","type":"array"}},{"kind":128,"name":"$pass","modifiers":0,"doc":{"description":"Encryption password for unlocking the PKCS#12 file.","type":"string"}}],"doc":{"description":"openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by pkcs12 into a array named certs.","type":"bool"}},{"kind":64,"name":"ftp_nb_fput","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$remote_file","modifiers":0,"doc":{"description":"The remote file path.","type":"string"}},{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"An open file pointer on the local file. Reading stops at end of file.","type":"resource"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY.","type":"int"}},{"kind":128,"name":"$startpos","modifiers":0,"value":"0","doc":{"description":"The position in the remote file to start uploading to.","type":"int"}}],"doc":{"description":"ftp_nb_fput() uploads the data from a file pointer to a remote file on the FTP server.","type":"int"}},{"kind":64,"name":"stristr","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string to search in","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.","type":"mixed"}},{"kind":128,"name":"$before_needle","modifiers":0,"value":"false","doc":{"description":"If TRUE, stristr() returns the part of the haystack before the first occurrence of the needle (excluding needle).","type":"bool"}}],"doc":{"description":"Returns all of haystack starting from and including the first occurrence of needle to the end.","type":"string"}},{"kind":64,"name":"cos","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"An angle in radians","type":"float"}}],"doc":{"description":"cos() returns the cosine of the arg parameter. The arg parameter is in radians.","type":"float"}},{"kind":64,"name":"imagecopyresized","modifiers":0,"children":[{"kind":128,"name":"$dst_image","modifiers":0,"doc":{"description":"Destination image link resource.","type":"resource"}},{"kind":128,"name":"$src_image","modifiers":0,"doc":{"description":"Source image link resource.","type":"resource"}},{"kind":128,"name":"$dst_x","modifiers":0,"doc":{"description":"x-coordinate of destination point.","type":"int"}},{"kind":128,"name":"$dst_y","modifiers":0,"doc":{"description":"y-coordinate of destination point.","type":"int"}},{"kind":128,"name":"$src_x","modifiers":0,"doc":{"description":"x-coordinate of source point.","type":"int"}},{"kind":128,"name":"$src_y","modifiers":0,"doc":{"description":"y-coordinate of source point.","type":"int"}},{"kind":128,"name":"$dst_w","modifiers":0,"doc":{"description":"Destination width.","type":"int"}},{"kind":128,"name":"$dst_h","modifiers":0,"doc":{"description":"Destination height.","type":"int"}},{"kind":128,"name":"$src_w","modifiers":0,"doc":{"description":"Source width.","type":"int"}},{"kind":128,"name":"$src_h","modifiers":0,"doc":{"description":"Source height.","type":"int"}}],"doc":{"description":"imagecopyresized() copies a rectangular portion of one image to another image. dst_image is the destination image, src_image is the source image identifier.","type":"bool"}},{"kind":64,"name":"sybase_deadlock_retry_count","modifiers":0,"description":"","children":[{"kind":128,"name":"$retry_count","modifiers":0,"doc":{"description":"Values for retry_count -1 Retry forever (default) 0 Do not retry n Retry n times","type":"int"}}],"doc":{"type":"void"}},{"kind":64,"name":"xmlwriter_start_dtd","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$qualifiedName","modifiers":0,"doc":{"description":"The qualified name of the document type to create.","type":"string"}},{"kind":128,"name":"$publicId","modifiers":0,"doc":{"description":"The external subset public identifier.","type":"string"}},{"kind":128,"name":"$systemId","modifiers":0,"doc":{"description":"The external subset system identifier.","type":"string"}}],"doc":{"description":"Starts a DTD.","type":"bool"}},{"kind":64,"name":"mcrypt_cfb","modifiers":0,"description":"","children":[{"kind":128,"name":"$cipher","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$key","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$iv","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"preg_match","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern to search for, as a string.","type":"string"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$matches","modifiers":1024,"doc":{"description":"If matches is provided, then it is filled with the results of search. $matches[0] will contain the text that matched the full pattern, $matches[1] will have the text that matched the first captured parenthesized subpattern, and so on.","type":"array"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"flags can be the following flag: PREG_OFFSET_CAPTURE If this flag is passed, for every occurring match the appendant string offset will also be returned. Note that this changes the value of matches into an array where every element is an array consisting of the matched string at offset 0 and its string offset into subject at offset 1. <?phppreg_match('/(foo)(bar)(baz)/', 'foobarbaz', $matches, PREG_OFFSET_CAPTURE);print_r($matches);?> The above example will output: Array ( [0] => Array ( [0] => foobarbaz [1] => 0 ) [1] => Array ( [0] => foo [1] => 0 ) [2] => Array ( [0] => bar [1] => 3 ) [3] => Array ( [0] => baz [1] => 6 ) )","type":"int"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"Normally, the search starts from the beginning of the subject string. The optional parameter offset can be used to specify the alternate place from which to start the search (in bytes). Note: Using offset is not equivalent to passing substr($subject, $offset) to preg_match() in place of the subject string, because pattern can contain assertions such as ^, $ or (?<=x). Compare: <?php$subject = \"abcdef\";$pattern = '/^def/';preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);print_r($matches);?> The above example will output: Array ( ) while this example <?php$subject = \"abcdef\";$pattern = '/^def/';preg_match($pattern, substr($subject,3), $matches, PREG_OFFSET_CAPTURE);print_r($matches);?> will produce Array ( [0] => Array ( [0] => def [1] => 0 ) )","type":"int"}}],"doc":{"description":"Searches subject for a match to the regular expression given in pattern.","type":"int"}},{"kind":64,"name":"nl_langinfo","modifiers":0,"children":[{"kind":128,"name":"$item","modifiers":0,"doc":{"description":"item may be an integer value of the element or the constant name of the element. The following is a list of constant names for item that may be used and their description. Some of these constants may not be defined or hold no value for certain locales. nl_langinfo Constants Constant Description LC_TIME Category Constants ABDAY_(1-7) Abbreviated name of n-th day of the week. DAY_(1-7) Name of the n-th day of the week (DAY_1 = Sunday). ABMON_(1-12) Abbreviated name of the n-th month of the year. MON_(1-12) Name of the n-th month of the year. AM_STR String for Ante meridian. PM_STR String for Post meridian. D_T_FMT String that can be used as the format string for strftime() to represent time and date. D_FMT String that can be used as the format string for strftime() to represent date. T_FMT String that can be used as the format string for strftime() to represent time. T_FMT_AMPM String that can be used as the format string for strftime() to represent time in 12-hour format with ante/post meridian. ERA Alternate era. ERA_YEAR Year in alternate era format. ERA_D_T_FMT Date and time in alternate era format (string can be used in strftime()). ERA_D_FMT Date in alternate era format (string can be used in strftime()). ERA_T_FMT Time in alternate era format (string can be used in strftime()). LC_MONETARY Category Constants INT_CURR_SYMBOL International currency symbol. CURRENCY_SYMBOL Local currency symbol. CRNCYSTR Same value as CURRENCY_SYMBOL. MON_DECIMAL_POINT Decimal point character. MON_THOUSANDS_SEP Thousands separator (groups of three digits). MON_GROUPING Like \"grouping\" element. POSITIVE_SIGN Sign for positive values. NEGATIVE_SIGN Sign for negative values. INT_FRAC_DIGITS International fractional digits. FRAC_DIGITS Local fractional digits. P_CS_PRECEDES Returns 1 if CURRENCY_SYMBOL precedes a positive value. P_SEP_BY_SPACE Returns 1 if a space separates CURRENCY_SYMBOL from a positive value. N_CS_PRECEDES Returns 1 if CURRENCY_SYMBOL precedes a negative value. N_SEP_BY_SPACE Returns 1 if a space separates CURRENCY_SYMBOL from a negative value. P_SIGN_POSN Returns 0 if parentheses surround the quantity and CURRENCY_SYMBOL. Returns 1 if the sign string precedes the quantity and CURRENCY_SYMBOL. Returns 2 if the sign string follows the quantity and CURRENCY_SYMBOL. Returns 3 if the sign string immediately precedes the CURRENCY_SYMBOL. Returns 4 if the sign string immediately follows the CURRENCY_SYMBOL. N_SIGN_POSN LC_NUMERIC Category Constants DECIMAL_POINT Decimal point character. RADIXCHAR Same value as DECIMAL_POINT. THOUSANDS_SEP Separator character for thousands (groups of three digits). THOUSEP Same value as THOUSANDS_SEP. GROUPING   LC_MESSAGES Category Constants YESEXPR Regex string for matching \"yes\" input. NOEXPR Regex string for matching \"no\" input. YESSTR Output string for \"yes\". NOSTR Output string for \"no\". LC_CTYPE Category Constants CODESET Return a string with the name of the character encoding.","type":"int"}}],"doc":{"description":"nl_langinfo() is used to access individual elements of the locale categories. Unlike localeconv(), which returns all of the elements, nl_langinfo() allows you to select any specific element.","type":"string"}},{"kind":64,"name":"str_getcsv","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The string to parse.","type":"string"}},{"kind":128,"name":"$delimiter","modifiers":0,"value":"\",\"","doc":{"description":"Set the field delimiter (one character only).","type":"string"}},{"kind":128,"name":"$enclosure","modifiers":0,"value":"'\"'","doc":{"description":"Set the field enclosure character (one character only).","type":"string"}},{"kind":128,"name":"$escape","modifiers":0,"value":"\"\\\\\"","doc":{"description":"Set the escape character (one character only). Defaults as a backslash (\\)","type":"string"}}],"doc":{"description":"Parses a string input for fields in CSV format and returns an array containing the fields read.","type":"array"}},{"kind":64,"name":"tidy_parse_string","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The data to be parsed.","type":"string"}},{"kind":128,"name":"$config","modifiers":0,"doc":{"description":"The config config can be passed either as an array or as a string. If a string is passed, it is interpreted as the name of the configuration file, otherwise, it is interpreted as the options themselves. For an explanation about each option, visit » http://tidy.sourceforge.net/docs/quickref.html.","type":"mixed"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding parameter sets the encoding for input/output documents. The possible values for encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac, win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.","type":"string"}}],"doc":{"description":"Parses a document stored in a string.","type":"tidy"}},{"kind":64,"name":"stream_context_set_default","modifiers":0,"description":"","children":[{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"The options to set for the default context. Note: options must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value.","type":"array"}}],"doc":{"type":"resource"}},{"kind":64,"name":"exif_tagname","modifiers":0,"description":"","children":[{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The Tag ID for which a Tag Name will be looked up.","type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"fbsql_query","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The SQL query to be executed. Note: The query string shall always end with a semicolon.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}},{"kind":128,"name":"$batch_size","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Sends a query to the currently active database on the server.","type":"resource"}},{"kind":64,"name":"date_create","modifiers":0,"children":[{"kind":128,"name":"$time","modifiers":0,"value":"\"now\"","doc":{"description":"A date/time string. Valid formats are explained in Date and Time Formats. Enter NULL here to obtain the current time when using the $timezone parameter.","type":"string"}},{"kind":128,"name":"$timezone","modifiers":0,"value":"NULL","doc":{"description":"A DateTimeZone object representing the timezone of $time. If $timezone is omitted, the current timezone will be used. Note: The $timezone parameter and the current timezone are ignored when the $time parameter either is a UNIX timestamp (e.g. @946684800) or specifies a timezone (e.g. 2010-01-28T15:00:00+02:00).","type":"DateTimeZone"}}],"doc":{"description":"Returns new DateTime object.","type":"DateTime"}},{"kind":64,"name":"linkinfo","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"Path to the link.","type":"string"}}],"doc":{"description":"Gets information about a link.","type":"int"}},{"kind":64,"name":"getdate","modifiers":0,"children":[{"kind":128,"name":"$timestamp","modifiers":0,"value":"time()","doc":{"description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().","type":"int"}}],"doc":{"description":"Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given.","type":"array"}},{"kind":64,"name":"intlcal_set_time","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$date","modifiers":0,"doc":{"description":"An instant represented by the number of number of milliseconds between such instant and the epoch, ignoring leap seconds.","type":"float"}}],"doc":{"description":"Sets the instant represented by this object. The instant is represented by a float whose value should be an integer number of milliseconds since the epoch (1 Jan 1970 00:00:00.000 UTC), ignoring leap seconds. All the field values will be recalculated accordingly.","type":"bool"}},{"kind":64,"name":"ibase_modify_user","modifiers":0,"description":"","children":[{"kind":128,"name":"$service_handle","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$user_name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$password","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$first_name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$middle_name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$last_name","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"mcrypt_cbc","modifiers":0,"description":"","children":[{"kind":128,"name":"$cipher","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$key","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$iv","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"array_diff_uassoc","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The array to compare from","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"An array to compare against","type":"array"}}],"doc":{"description":"Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are used in the comparison.","type":"array"}},{"kind":64,"name":"gzdeflate","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to deflate.","type":"string"}},{"kind":128,"name":"$level","modifiers":0,"value":"-1","doc":{"description":"The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. If not given, the default compression level will be the default compression level of the zlib library.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"ZLIB_ENCODING_RAW","doc":{"description":"One of ZLIB_ENCODING_* constants.","type":"int"}}],"doc":{"description":"This function compresses the given string using the DEFLATE data format.","type":"string"}},{"kind":64,"name":"bindtextdomain","modifiers":0,"children":[{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"The domain","type":"string"}},{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"The directory path","type":"string"}}],"doc":{"description":"The bindtextdomain() function sets the path for a domain.","type":"string"}},{"kind":64,"name":"fgetss","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"Length of the data to be retrieved.","type":"int"}},{"kind":128,"name":"$allowable_tags","modifiers":0,"doc":{"description":"You can use the optional third parameter to specify tags which should not be stripped. See strip_tags() for details regarding allowable_tags.","type":"string"}}],"doc":{"description":"Identical to fgets(), except that fgetss() attempts to strip any NUL bytes, HTML and PHP tags from the text it reads.","type":"string"}},{"kind":64,"name":"get_current_user","modifiers":0,"description":"","children":[],"doc":{"type":"string"}},{"kind":64,"name":"mysql_connect","modifiers":0,"description":"","children":[{"kind":128,"name":"$server","modifiers":0,"value":"ini_get(\"mysql.default_host\")","doc":{"description":"The MySQL server. It can also include a port number. e.g. \"hostname:port\" or a path to a local socket e.g. \":/path/to/socket\" for the localhost. If the PHP directive mysql.default_host is undefined (default), then the default value is 'localhost:3306'. In SQL safe mode, this parameter is ignored and value 'localhost:3306' is always used.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"value":"ini_get(\"mysql.default_user\")","doc":{"description":"The username. Default value is defined by mysql.default_user. In SQL safe mode, this parameter is ignored and the name of the user that owns the server process is used.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"value":"ini_get(\"mysql.default_password\")","doc":{"description":"The password. Default value is defined by mysql.default_password. In SQL safe mode, this parameter is ignored and empty password is used.","type":"string"}},{"kind":128,"name":"$new_link","modifiers":0,"value":"false","doc":{"description":"If a second call is made to mysql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned. The new_link parameter modifies this behavior and makes mysql_connect() always open a new link, even if mysql_connect() was called before with the same parameters. In SQL safe mode, this parameter is ignored.","type":"bool"}},{"kind":128,"name":"$client_flags","modifiers":0,"value":"0","doc":{"description":"The client_flags parameter can be a combination of the following constants: 128 (enable LOAD DATA LOCAL handling), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE or MYSQL_CLIENT_INTERACTIVE. Read the section about MySQL client constants for further information. In SQL safe mode, this parameter is ignored.","type":"int"}}],"doc":{"type":"resource"}},{"kind":64,"name":"cli_set_process_title","modifiers":0,"children":[{"kind":128,"name":"$title","modifiers":0,"doc":{"description":"The new title.","type":"string"}}],"doc":{"description":"Sets the process title visible in tools such as top and ps. This function is available only in CLI mode.","type":"bool"}},{"kind":64,"name":"checkdnsrr","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"host may either be the IP address in dotted-quad notation or the host name.","type":"string"}},{"kind":128,"name":"$type","modifiers":0,"value":"\"MX\"","doc":{"description":"type may be any one of: A, MX, NS, SOA, PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT or ANY.","type":"string"}}],"doc":{"description":"Searches DNS for records of type type corresponding to host.","type":"bool"}},{"kind":64,"name":"cosh","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))/2.","type":"float"}},{"kind":64,"name":"mb_ereg_search","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The search pattern.","type":"string"}},{"kind":128,"name":"$option","modifiers":0,"value":"\"ms\"","doc":{"description":"The search option.","type":"string"}}],"doc":{"description":"Performs a multibyte regular expression match for a predefined multibyte string.","type":"bool"}},{"kind":64,"name":"pg_lo_write","modifiers":0,"children":[{"kind":128,"name":"$large_object","modifiers":0,"doc":{"description":"PostgreSQL large object (LOB) resource, returned by pg_lo_open().","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to be written to the large object. If len is specified and is less than the length of data, only len bytes will be written.","type":"string"}},{"kind":128,"name":"$len","modifiers":0,"doc":{"description":"An optional maximum number of bytes to write. Must be greater than zero and no greater than the length of data. Defaults to the length of data.","type":"int"}}],"doc":{"description":"pg_lo_write() writes data into a large object at the current seek position.","type":"int"}},{"kind":64,"name":"pspell_config_runtogether","modifiers":0,"children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$flag","modifiers":0,"doc":{"description":"TRUE if run-together words should be treated as legal compounds, FALSE otherwise.","type":"bool"}}],"doc":{"description":"This function determines whether run-together words will be treated as legal compounds. That is, \"thecat\" will be a legal compound, although there should be a space between the two words. Changing this setting only affects the results returned by pspell_check(); pspell_suggest() will still return suggestions.","type":"bool"}},{"kind":64,"name":"intlcal_in_daylight_time","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}}],"doc":{"description":"Whether, for the instant represented by this object and for this objectʼs timezone, daylight saving time is in place.","type":"bool"}},{"kind":64,"name":"mime_content_type","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the tested file.","type":"string"}}],"doc":{"description":"Returns the MIME content type for a file as determined by using information from the magic.mime file.","type":"string"}},{"kind":64,"name":"money_format","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The format specification consists of the following sequence: a % character optional flags optional field width optional left precision optional right precision a required conversion character Flags One or more of the optional flags below can be used: =f The character = followed by a (single byte) character f to be used as the numeric fill character. The default fill character is space. ^ Disable the use of grouping characters (as defined by the current locale). + or ( Specify the formatting style for positive and negative numbers. If + is used, the locale's equivalent for + and - will be used. If ( is used, negative amounts are enclosed in parenthesis. If no specification is given, the default is +. ! Suppress the currency symbol from the output string. - If present, it will make all fields left-justified (padded to the right), as opposed to the default which is for the fields to be right-justified (padded to the left). Field width w A decimal digit string specifying a minimum field width. Field will be right-justified unless the flag - is used. Default value is 0 (zero). Left precision #n The maximum number of digits (n) expected to the left of the decimal character (e.g. the decimal point). It is used usually to keep formatted output aligned in the same columns, using the fill character if the number of digits is less than n. If the number of actual digits is bigger than n, then this specification is ignored. If grouping has not been suppressed using the ^ flag, grouping separators will be inserted before the fill characters (if any) are added. Grouping separators will not be applied to fill characters, even if the fill character is a digit. To ensure alignment, any characters appearing before or after the number in the formatted output such as currency or sign symbols are padded as necessary with space characters to make their positive and negative formats an equal length. Right precision .p A period followed by the number of digits (p) after the decimal character. If the value of p is 0 (zero), the decimal character and the digits to its right will be omitted. If no right precision is included, the default will dictated by the current local in use. The amount being formatted is rounded to the specified number of digits prior to formatting. Conversion characters i The number is formatted according to the locale's international currency format (e.g. for the USA locale: USD 1,234.56). n The number is formatted according to the locale's national currency format (e.g. for the de_DE locale: EU1.234,56). % Returns the % character.","type":"string"}},{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"The number to be formatted.","type":"float"}}],"doc":{"description":"money_format() returns a formatted version of number. This function wraps the C library function strfmon(), with the difference that this implementation converts only one number at a time.","type":"string"}},{"kind":64,"name":"resourcebundle_locales","modifiers":0,"children":[{"kind":128,"name":"$bundlename","modifiers":0,"doc":{"description":"Path of ResourceBundle for which to get available locales, or empty string for default locales list.","type":"string"}}],"doc":{"description":"Get available locales from ResourceBundle name.","type":"array"}},{"kind":64,"name":"mb_output_handler","modifiers":0,"children":[{"kind":128,"name":"$contents","modifiers":0,"doc":{"description":"The contents of the output buffer.","type":"string"}},{"kind":128,"name":"$status","modifiers":0,"doc":{"description":"The status of the output buffer.","type":"int"}}],"doc":{"description":"mb_output_handler() is ob_start() callback function. mb_output_handler() converts characters in the output buffer from internal character encoding to HTTP output character encoding.","type":"string"}},{"kind":64,"name":"pg_get_pid","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"pg_get_pid() gets the backend's (database server process) PID. The PID is useful to determine whether or not a NOTIFY message received via pg_get_notify() is sent from another process or not.","type":"int"}},{"kind":64,"name":"filesize","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Gets the size for the given file.","type":"int"}},{"kind":64,"name":"mysqli_num_rows","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}}],"doc":{"description":"Returns the number of rows in the result set.","type":"int"}},{"kind":64,"name":"mysqli_stmt_next_result","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysql_stmt"}}],"doc":{"description":"Reads the next result from a multiple query.","type":"bool"}},{"kind":64,"name":"imagesetinterpolation","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$method","modifiers":0,"value":"IMG_BILINEAR_FIXED","doc":{"description":"The interpolation method, which can be one of the following: IMG_BELL: Bell filter. IMG_BESSEL: Bessel filter. IMG_BICUBIC: Bicubic interpolation. IMG_BICUBIC_FIXED: Fixed point implementation of the bicubic interpolation. IMG_BILINEAR_FIXED: Fixed point implementation of the bilinear interpolation (default (also on image creation)). IMG_BLACKMAN: Blackman window function. IMG_BOX: Box blur filter. IMG_BSPLINE: Spline interpolation. IMG_CATMULLROM: Cubic Hermite spline interpolation. IMG_GAUSSIAN: Gaussian function. IMG_GENERALIZED_CUBIC: Generalized cubic spline fractal interpolation. IMG_HERMITE: Hermite interpolation. IMG_HAMMING: Hamming filter. IMG_HANNING: Hanning filter. IMG_MITCHELL: Mitchell filter. IMG_POWER: Power interpolation. IMG_QUADRATIC: Inverse quadratic interpolation. IMG_SINC: Sinc function. IMG_NEAREST_NEIGHBOUR: Nearest neighbour interpolation. IMG_WEIGHTED4: Weighting filter. IMG_TRIANGLE: Triangle interpolation.","type":"int"}}],"doc":{"description":"Sets the interpolation method, setting an interpolation method affects the rendering of various functions in GD, such as the imagerotate() function.","type":"bool"}},{"kind":64,"name":"restore_include_path","modifiers":0,"description":"","children":[],"doc":{"type":"void"}},{"kind":64,"name":"session_get_cookie_params","modifiers":0,"children":[],"doc":{"description":"Gets the session cookie parameters.","type":"array"}},{"kind":64,"name":"quotemeta","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"description":"Returns a version of str with a backslash character (\\) before every character that is among these:","type":"string"}},{"kind":64,"name":"gmp_setbit","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":1024,"doc":{"description":"The value to modify. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index of the bit to set. Index 0 represents the least significant bit.","type":"int"}},{"kind":128,"name":"$bit_on","modifiers":0,"value":"true","doc":{"description":"True to set the bit (set it to 1/on); false to clear the bit (set it to 0/off).","type":"bool"}}],"doc":{"description":"Sets bit index in a.","type":"void"}},{"kind":64,"name":"sybase_min_error_severity","modifiers":0,"description":"","children":[{"kind":128,"name":"$severity","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"void"}},{"kind":64,"name":"json_decode","modifiers":0,"children":[{"kind":128,"name":"$json","modifiers":0,"doc":{"description":"The json string being decoded. This function only works with UTF-8 encoded strings. Note: PHP implements a superset of JSON as specified in the original » RFC 7159.","type":"string"}},{"kind":128,"name":"$assoc","modifiers":0,"value":"false","doc":{"description":"When TRUE, returned objects will be converted into associative arrays.","type":"bool"}},{"kind":128,"name":"$depth","modifiers":0,"value":"512","doc":{"description":"User specified recursion depth.","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Bitmask of JSON decode options. Currently there are two supported options. The first is JSON_BIGINT_AS_STRING that allows casting big integers to string instead of floats which is the default. The second option is JSON_OBJECT_AS_ARRAY that has the same effect as setting assoc to TRUE.","type":"int"}}],"doc":{"description":"Takes a JSON encoded string and converts it into a PHP variable.","type":"mixed"}},{"kind":64,"name":"odbc_result_all","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier.","type":"resource"}},{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"Additional overall table formatting.","type":"string"}}],"doc":{"description":"Prints all rows from a result identifier produced by odbc_exec(). The result is printed in HTML table format.","type":"int"}},{"kind":64,"name":"sem_remove","modifiers":0,"children":[{"kind":128,"name":"$sem_identifier","modifiers":0,"doc":{"description":"A semaphore resource identifier as returned by sem_get().","type":"resource"}}],"doc":{"description":"sem_remove() removes the given semaphore.","type":"bool"}},{"kind":64,"name":"imagepolygon","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$points","modifiers":0,"doc":{"description":"An array containing the polygon's vertices, e.g.: points[0] = x0 points[1] = y0 points[2] = x1 points[3] = y1","type":"array"}},{"kind":128,"name":"$num_points","modifiers":0,"doc":{"description":"Total number of points (vertices).","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"imagepolygon() creates a polygon in the given image.","type":"bool"}},{"kind":64,"name":"date_sun_info","modifiers":0,"description":"","children":[{"kind":128,"name":"$time","modifiers":0,"doc":{"description":"Timestamp.","type":"int"}},{"kind":128,"name":"$latitude","modifiers":0,"doc":{"description":"Latitude in degrees.","type":"float"}},{"kind":128,"name":"$longitude","modifiers":0,"doc":{"description":"Longitude in degrees.","type":"float"}}],"doc":{"type":"array"}},{"kind":64,"name":"odbc_data_source","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$fetch_type","modifiers":0,"doc":{"description":"The fetch_type can be one of two constant types: SQL_FETCH_FIRST, SQL_FETCH_NEXT. Use SQL_FETCH_FIRST the first time this function is called, thereafter use the SQL_FETCH_NEXT.","type":"int"}}],"doc":{"description":"This function will return the list of available DSN (after calling it several times).","type":"array"}},{"kind":64,"name":"fbsql_fetch_assoc","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}}],"doc":{"description":"Calling fbsql_fetch_assoc() is equivalent to calling fbsql_fetch_array() with FBSQL_ASSOC as second parameter. It only returns an associative array.","type":"array"}},{"kind":64,"name":"mb_strimwidth","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being decoded.","type":"string"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"The start position offset. Number of characters from the beginning of string (first character is 0), or if start is negative, number of characters from the end of the string.","type":"int"}},{"kind":128,"name":"$width","modifiers":0,"doc":{"description":"The width of the desired trim. Negative widths count from the end of the string.","type":"int"}},{"kind":128,"name":"$trimmarker","modifiers":0,"value":"\"\"","doc":{"description":"A string that is added to the end of string when string is truncated.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Truncates string str to specified width.","type":"string"}},{"kind":64,"name":"stream_bucket_make_writeable","modifiers":0,"description":"","children":[{"kind":128,"name":"$brigade","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"object"}},{"kind":64,"name":"socket_close","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create() or socket_accept().","type":"resource"}}],"doc":{"description":"socket_close() closes the socket resource given by socket. This function is specific to sockets and cannot be used on any other type of resources.","type":"void"}},{"kind":64,"name":"imap_get_quota","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$quota_root","modifiers":0,"doc":{"description":"quota_root should normally be in the form of user.name where name is the mailbox you wish to retrieve information about.","type":"string"}}],"doc":{"description":"Retrieve the quota level settings, and usage statics per mailbox.","type":"array"}},{"kind":64,"name":"highlight_file","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the PHP file to be highlighted.","type":"string"}},{"kind":128,"name":"$return","modifiers":0,"value":"false","doc":{"description":"Set this parameter to TRUE to make this function return the highlighted code.","type":"bool"}}],"doc":{"description":"Prints out or returns a syntax highlighted version of the code contained in filename using the colors defined in the built-in syntax highlighter for PHP.","type":"mixed"}},{"kind":64,"name":"uksort","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$key_compare_func","modifiers":0,"doc":{"description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647. int callback ( mixed $a, mixed $b )","type":"callable"}}],"doc":{"description":"uksort() will sort the keys of an array using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.","type":"bool"}},{"kind":64,"name":"ftp_nb_fget","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"An open file pointer in which we store the data.","type":"resource"}},{"kind":128,"name":"$remote_file","modifiers":0,"doc":{"description":"The remote file path.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY.","type":"int"}},{"kind":128,"name":"$resumepos","modifiers":0,"value":"0","doc":{"description":"The position in the remote file to start downloading from.","type":"int"}}],"doc":{"description":"ftp_nb_fget() retrieves a remote file from the FTP server.","type":"int"}},{"kind":64,"name":"setlocale","modifiers":0,"children":[{"kind":128,"name":"$category","modifiers":0,"doc":{"description":"category is a named constant specifying the category of the functions affected by the locale setting: LC_ALL for all of the below LC_COLLATE for string comparison, see strcoll() LC_CTYPE for character classification and conversion, for example strtoupper() LC_MONETARY for localeconv() LC_NUMERIC for decimal separator (See also localeconv()) LC_TIME for date and time formatting with strftime() LC_MESSAGES for system responses (available if PHP was compiled with libintl)","type":"int"}},{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"If locale is NULL or the empty string \"\", the locale names will be set from the values of environment variables with the same names as the above categories, or from \"LANG\". If locale is \"0\", the locale setting is not affected, only the current setting is returned. If locale is an array or followed by additional parameters then each array element or parameter is tried to be set as new locale until success. This is useful if a locale is known under different names on different systems or for providing a fallback for a possibly not available locale.","type":"array"}}],"doc":{"description":"Sets locale information.","type":"string"}},{"kind":64,"name":"pg_escape_string","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_escape_string() escapes a string for querying the database. It returns an escaped string in the PostgreSQL format without quotes. pg_escape_literal() is more preferred way to escape SQL parameters for PostgreSQL. addslashes() must not be used with PostgreSQL. If the type of the column is bytea, pg_escape_bytea() must be used instead. pg_escape_identifier() must be used to escape identifiers (e.g. table names, field names)","type":"string"}},{"kind":64,"name":"imageconvolution","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$matrix","modifiers":0,"doc":{"description":"A 3x3 matrix: an array of three arrays of three floats.","type":"array"}},{"kind":128,"name":"$div","modifiers":0,"doc":{"description":"The divisor of the result of the convolution, used for normalization.","type":"float"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"Color offset.","type":"float"}}],"doc":{"description":"Applies a convolution matrix on the image, using the given coefficient and offset.","type":"bool"}},{"kind":64,"name":"pg_escape_identifier","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_escape_identifier() escapes a identifier (e.g. table, field names) for quering the database. It returns an escaped identifier string for PostgreSQL server. pg_escape_identifier() adds double quotes before and after data. Users should not add double quotes. Use of this function is recommended for identifier parameters in query. For SQL literals (i.e. parameters except bytea), pg_escape_literal() or pg_escape_string() must be used. For bytea type fields, pg_escape_bytea() must be used instead.","type":"string"}},{"kind":64,"name":"posix_isatty","modifiers":0,"children":[{"kind":128,"name":"$fd","modifiers":0,"doc":{"description":"The file descriptor, which is expected to be either a file resource or an integer. An integer will be assumed to be a file descriptor that can be passed directly to the underlying system call. In almost all cases, you will want to provide a file resource.","type":"mixed"}}],"doc":{"description":"Determines if the file descriptor fd refers to a valid terminal type device.","type":"bool"}},{"kind":64,"name":"session_save_path","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"Session data path. If specified, the path to which data is saved will be changed. session_save_path() needs to be called before session_start() for that purpose. Note: On some operating systems, you may want to specify a path on a filesystem that handles lots of small files efficiently. For example, on Linux, reiserfs may provide better performance than ext2fs.","type":"string"}}],"doc":{"description":"session_save_path() returns the path of the current directory used to save session data.","type":"string"}},{"kind":64,"name":"pcntl_wifexited","modifiers":0,"children":[{"kind":128,"name":"$status","modifiers":0,"doc":{"description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().","type":"int"}}],"doc":{"description":"Checks whether the child status code represents a normal exit.","type":"bool"}},{"kind":64,"name":"datefmt_localtime","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource","type":"IntlDateFormatter"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"string to convert to a time","type":"string"}},{"kind":128,"name":"$position","modifiers":1024,"doc":{"description":"Position at which to start the parsing in $value (zero-based). If no error occurs before $value is consumed, $parse_pos will contain -1 otherwise it will contain the position at which parsing ended . If $parse_pos > strlen($value), the parse fails immediately.","type":"int"}}],"doc":{"description":"Converts string $value to a field-based time value ( an array of various fields), starting at $parse_pos and consuming as much of the input value as possible.","type":"array"}},{"kind":64,"name":"mysqli_stmt_close","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Closes a prepared statement. mysqli_stmt_close() also deallocates the statement handle. If the current statement has pending or unread results, this function cancels them so that the next query can be executed.","type":"bool"}},{"kind":64,"name":"pg_trace","modifiers":0,"children":[{"kind":128,"name":"$pathname","modifiers":0,"doc":{"description":"The full path and file name of the file in which to write the trace log. Same as in fopen().","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"value":"\"w\"","doc":{"description":"An optional file access mode, same as for fopen().","type":"string"}},{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_trace() enables tracing of the PostgreSQL frontend/backend communication to a file. To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol.","type":"bool"}},{"kind":64,"name":"date_format","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTime object returned by date_create()","type":"DateTimeInterface"}},{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"Format accepted by date().","type":"string"}}],"doc":{"description":"Returns date formatted according to given format.","type":"string"}},{"kind":64,"name":"pcntl_setpriority","modifiers":0,"children":[{"kind":128,"name":"$priority","modifiers":0,"doc":{"description":"priority is generally a value in the range -20 to 20. The default priority is 0 while a lower numerical value causes more favorable scheduling. Because priority levels can differ between system types and kernel versions, please see your system's setpriority(2) man page for specific details.","type":"int"}},{"kind":128,"name":"$pid","modifiers":0,"value":"getmypid()","doc":{"description":"If not specified, the pid of the current process is used.","type":"int"}},{"kind":128,"name":"$process_identifier","modifiers":0,"value":"PRIO_PROCESS","doc":{"description":"One of PRIO_PGRP, PRIO_USER or PRIO_PROCESS.","type":"int"}}],"doc":{"description":"pcntl_setpriority() sets the priority of pid.","type":"bool"}},{"kind":64,"name":"array_udiff_assoc","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The first array.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"The second array.","type":"array"}}],"doc":{"description":"Computes the difference of arrays with additional index check, compares data by a callback function.","type":"array"}},{"kind":64,"name":"pspell_clear_session","modifiers":0,"description":"","children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"parse_url","modifiers":0,"children":[{"kind":128,"name":"$url","modifiers":0,"doc":{"description":"The URL to parse. Invalid characters are replaced by _.","type":"string"}},{"kind":128,"name":"$component","modifiers":0,"description":"","value":"-1","doc":{"type":"int"}}],"doc":{"description":"This function parses a URL and returns an associative array containing any of the various components of the URL that are present.","type":"mixed"}},{"kind":64,"name":"msql_fetch_array","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}},{"kind":128,"name":"$result_type","modifiers":0,"doc":{"description":"A constant that can take the following values: MSQL_ASSOC, MSQL_NUM, and MSQL_BOTH with MSQL_BOTH being the default.","type":"int"}}],"doc":{"description":"msql_fetch_array() is an extended version of msql_fetch_row(). In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.","type":"array"}},{"kind":64,"name":"realpath_cache_get","modifiers":0,"children":[],"doc":{"description":"Get the contents of the realpath cache.","type":"array"}},{"kind":64,"name":"iterator_to_array","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The iterator being copied.","type":"Traversable"}},{"kind":128,"name":"$use_keys","modifiers":0,"value":"true","doc":{"description":"Whether to use the iterator element keys as index. In PHP 5.5 and later, if a key is an array or object, a warning will be generated. NULL keys will be converted to an empty string, double keys will be truncated to their integer counterpart, resource keys will generate a warning and be converted to their resource ID, and boolean keys will be converted to integers. Note: If this parameter is not set or set to TRUE, duplicate keys will be overwritten. The last value with a given key will be in the returned array. Set this paramater to FALSE to get all the values in any case.","type":"bool"}}],"doc":{"description":"Copy the elements of an iterator into an array.","type":"array"}},{"kind":64,"name":"oci_bind_by_name","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI8 statement identifer.","type":"resource"}},{"kind":128,"name":"$bv_name","modifiers":0,"doc":{"description":"The colon-prefixed bind variable placeholder used in the statement. The colon is optional in bv_name. Oracle does not use question marks for placeholders.","type":"string"}},{"kind":128,"name":"$variable","modifiers":1024,"doc":{"description":"The PHP variable to be associated with bv_name","type":"mixed"}},{"kind":128,"name":"$maxlength","modifiers":0,"value":"-1","doc":{"description":"Sets the maximum length for the data. If you set it to -1, this function will use the current length of variable to set the maximum length. In this case the variable must exist and contain data when oci_bind_by_name() is called.","type":"int"}},{"kind":128,"name":"$type","modifiers":0,"value":"SQLT_CHR","doc":{"description":"The datatype that Oracle will treat the data as. The default type used is SQLT_CHR. Oracle will convert the data between this type and the database column (or PL/SQL variable type), when possible. If you need to bind an abstract datatype (LOB/ROWID/BFILE) you need to allocate it first using the oci_new_descriptor() function. The length is not used for abstract datatypes and should be set to -1. Possible values for type are: SQLT_BFILEE or OCI_B_BFILE - for BFILEs; SQLT_CFILEE or OCI_B_CFILEE - for CFILEs; SQLT_CLOB or OCI_B_CLOB - for CLOBs; SQLT_BLOB or OCI_B_BLOB - for BLOBs; SQLT_RDD or OCI_B_ROWID - for ROWIDs; SQLT_NTY or OCI_B_NTY - for named datatypes; SQLT_INT or OCI_B_INT - for integers; SQLT_CHR - for VARCHARs; SQLT_BIN or OCI_B_BIN - for RAW columns; SQLT_LNG - for LONG columns; SQLT_LBI - for LONG RAW columns; SQLT_RSET - for cursors created with oci_new_cursor(); SQLT_BOL or OCI_B_BOL - for PL/SQL BOOLEANs (Requires OCI8 2.0.7 and Oracle Database 12c)","type":"int"}}],"doc":{"description":"Binds a PHP variable variable to the Oracle bind variable placeholder bv_name. Binding is important for Oracle database performance and also as a way to avoid SQL Injection security issues.","type":"bool"}},{"kind":64,"name":"readfile","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The filename being read.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"false","doc":{"description":"You can use the optional second parameter and set it to TRUE, if you want to search for the file in the include_path, too.","type":"bool"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"A context stream resource.","type":"resource"}}],"doc":{"description":"Reads a file and writes it to the output buffer.","type":"int"}},{"kind":64,"name":"intlcal_get_time","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}}],"doc":{"description":"Returns the time associated with this object, expressed as the number of milliseconds since the epoch.","type":"float"}},{"kind":64,"name":"quoted_printable_decode","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"description":"This function returns an 8-bit binary string corresponding to the decoded quoted printable string (according to » RFC2045, section 6.7, not » RFC2821, section 4.5.2, so additional periods are not stripped from the beginning of line).","type":"string"}},{"kind":64,"name":"intlcal_get_locale","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$localeType","modifiers":0,"doc":{"description":"Whether to fetch the actual locale (the locale from which the calendar data originates, with Locale::ACTUAL_LOCALE) or the valid locale, i.e., the most specific locale supported by ICU relatively to the requested locale – see Locale::VALID_LOCALE. From the most general to the most specific, the locales are ordered in this fashion – actual locale, valid locale, requested locale.","type":"int"}}],"doc":{"description":"Returns the locale used by this calendar object.","type":"string"}},{"kind":64,"name":"fscanf","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"A file system pointer resource that is typically created using fopen().","type":"resource"}},{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The specified format as described in the sprintf() documentation.","type":"string"}},{"kind":128,"name":"$...","modifiers":1024,"doc":{"description":"The optional assigned values.","type":"mixed"}}],"doc":{"description":"The function fscanf() is similar to sscanf(), but it takes its input from a file associated with handle and interprets the input according to the specified format, which is described in the documentation for sprintf().","type":"mixed"}},{"kind":64,"name":"mail","modifiers":0,"children":[{"kind":128,"name":"$to","modifiers":0,"doc":{"description":"Receiver, or receivers of the mail. The formatting of this string must comply with » RFC 2822. Some examples are: user@example.com user@example.com, anotheruser@example.com User <user@example.com> User <user@example.com>, Another User <anotheruser@example.com>","type":"string"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"Subject of the email to be sent. Caution Subject must satisfy » RFC 2047.","type":"string"}},{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"Message to be sent. Each line should be separated with a CRLF (\\r\\n). Lines should not be larger than 70 characters. Caution (Windows only) When PHP is talking to a SMTP server directly, if a full stop is found on the start of a line, it is removed. To counter-act this, replace these occurrences with a double dot. <?php$text = str_replace(\"\\n.\", \"\\n..\", $text);?>","type":"string"}},{"kind":128,"name":"$additional_headers","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$additional_parameters","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Sends an email.","type":"bool"}},{"kind":64,"name":"strptime","modifiers":0,"children":[{"kind":128,"name":"$date","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$format","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"strptime() returns an array with the date parsed, or FALSE on error.","type":"array"}},{"kind":64,"name":"md5","modifiers":0,"description":"","children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string.","type":"string"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"false","doc":{"description":"If the optional raw_output is set to TRUE, then the md5 digest is instead returned in raw binary format with a length of 16.","type":"bool"}}],"doc":{"type":"string"}},{"kind":64,"name":"xmlrpc_server_add_introspection_data","modifiers":0,"description":"","children":[{"kind":128,"name":"$server","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$desc","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"type":"int"}},{"kind":64,"name":"extension_loaded","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The extension name. This parameter is case-insensitive. You can see the names of various extensions by using phpinfo() or if you're using the CGI or CLI version of PHP you can use the -m switch to list all available extensions: $ php -m [PHP Modules] xml tokenizer standard sockets session posix pcre overload mysql mbstring ctype [Zend Modules]","type":"string"}}],"doc":{"description":"Finds out whether the extension is loaded.","type":"bool"}},{"kind":64,"name":"odbc_free_result","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier.","type":"resource"}}],"doc":{"description":"Free resources associated with a result.","type":"bool"}},{"kind":64,"name":"mb_strrichr","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string from which to get the last occurrence of needle","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to find in haystack","type":"string"}},{"kind":128,"name":"$part","modifiers":0,"value":"false","doc":{"description":"Determines which portion of haystack this function returns. If set to TRUE, it returns all of haystack from the beginning to the last occurrence of needle. If set to FALSE, it returns all of haystack from the last occurrence of needle to the end,","type":"bool"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"Character encoding name to use. If it is omitted, internal character encoding is used.","type":"string"}}],"doc":{"description":"mb_strrichr() finds the last occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strrchr(), mb_strrichr() is case-insensitive. If needle is not found, it returns FALSE.","type":"string"}},{"kind":64,"name":"grapheme_strlen","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The string being measured for length. It must be a valid UTF-8 string.","type":"string"}}],"doc":{"description":"Get string length in grapheme units (not bytes or characters)","type":"int"}},{"kind":64,"name":"call_user_func_array","modifiers":0,"children":[{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The callable to be called.","type":"callable"}},{"kind":128,"name":"$param_arr","modifiers":0,"doc":{"description":"The parameters to be passed to the callback, as an indexed array.","type":"array"}}],"doc":{"description":"Calls the callback given by the first parameter with the parameters in param_arr.","type":"mixed"}},{"kind":64,"name":"mysqli_num_fields","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}}],"doc":{"description":"Returns the number of fields from specified result set.","type":"int"}},{"kind":64,"name":"timezone_location_get","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTimeZone object returned by timezone_open()","type":"DateTimeZone"}}],"doc":{"description":"Returns location information for a timezone, including country code, latitude/longitude and comments.","type":"array"}},{"kind":64,"name":"str_repeat","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The string to be repeated.","type":"string"}},{"kind":128,"name":"$multiplier","modifiers":0,"doc":{"description":"Number of time the input string should be repeated. multiplier has to be greater than or equal to 0. If the multiplier is set to 0, the function will return an empty string.","type":"int"}}],"doc":{"description":"Returns input repeated multiplier times.","type":"string"}},{"kind":64,"name":"clearstatcache","modifiers":0,"children":[{"kind":128,"name":"$clear_realpath_cache","modifiers":0,"value":"false","doc":{"description":"Whether to clear the realpath cache or not.","type":"bool"}},{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Clear the realpath and the stat cache for a specific filename only; only used if clear_realpath_cache is TRUE.","type":"string"}}],"doc":{"description":"When you use stat(), lstat(), or any of the other functions listed in the affected functions list (below), PHP caches the information those functions return in order to provide faster performance. However, in certain cases, you may want to clear the cached information. For instance, if the same file is being checked multiple times within a single script, and that file is in danger of being removed or changed during that script's operation, you may elect to clear the status cache. In these cases, you can use the clearstatcache() function to clear the information that PHP caches about a file.","type":"void"}},{"kind":64,"name":"snmp_get_valueretrieval","modifiers":0,"description":"","children":[],"doc":{"type":"int"}},{"kind":64,"name":"function_exists","modifiers":0,"children":[{"kind":128,"name":"$function_name","modifiers":0,"doc":{"description":"The function name, as a string.","type":"string"}}],"doc":{"description":"Checks the list of defined functions, both built-in (internal) and user-defined, for function_name.","type":"bool"}},{"kind":64,"name":"set_magic_quotes_runtime","modifiers":0,"description":"","children":[{"kind":128,"name":"$new_setting","modifiers":0,"doc":{"description":"FALSE for off, TRUE for on.","type":"bool"}}],"doc":{"type":"bool"}},{"kind":64,"name":"zip_entry_name","modifiers":0,"children":[{"kind":128,"name":"$zip_entry","modifiers":0,"doc":{"description":"A directory entry returned by zip_read().","type":"resource"}}],"doc":{"description":"Returns the name of the specified directory entry.","type":"string"}},{"kind":64,"name":"key","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The array.","type":"array"}}],"doc":{"description":"key() returns the index element of the current array position.","type":"mixed"}},{"kind":64,"name":"zip_entry_compressedsize","modifiers":0,"children":[{"kind":128,"name":"$zip_entry","modifiers":0,"doc":{"description":"A directory entry returned by zip_read().","type":"resource"}}],"doc":{"description":"Returns the compressed size of the specified directory entry.","type":"int"}},{"kind":64,"name":"mysqli_select_db","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$dbname","modifiers":0,"doc":{"description":"The database name.","type":"string"}}],"doc":{"description":"Selects the default database to be used when performing queries against the database connection.","type":"bool"}},{"kind":64,"name":"numfmt_parse_currency","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$currency","modifiers":1024,"doc":{"description":"Parameter to receive the currency name (3-letter ISO 4217 currency code).","type":"string"}},{"kind":128,"name":"$position","modifiers":1024,"doc":{"description":"Offset in the string at which to begin parsing. On return, this value will hold the offset at which parsing ended.","type":"int"}}],"doc":{"description":"Parse a string into a double and a currency using the current formatter.","type":"float"}},{"kind":64,"name":"fbsql_data_seek","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}},{"kind":128,"name":"$row_number","modifiers":0,"doc":{"description":"The row number. Starts at 0.","type":"int"}}],"doc":{"description":"Moves the internal row pointer of the FrontBase result associated with the specified result identifier to point to the specified row number.","type":"bool"}},{"kind":64,"name":"mysql_field_type","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.","type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"imagecopymergegray","modifiers":0,"children":[{"kind":128,"name":"$dst_im","modifiers":0,"doc":{"description":"Destination image link resource.","type":"resource"}},{"kind":128,"name":"$src_im","modifiers":0,"doc":{"description":"Source image link resource.","type":"resource"}},{"kind":128,"name":"$dst_x","modifiers":0,"doc":{"description":"x-coordinate of destination point.","type":"int"}},{"kind":128,"name":"$dst_y","modifiers":0,"doc":{"description":"y-coordinate of destination point.","type":"int"}},{"kind":128,"name":"$src_x","modifiers":0,"doc":{"description":"x-coordinate of source point.","type":"int"}},{"kind":128,"name":"$src_y","modifiers":0,"doc":{"description":"y-coordinate of source point.","type":"int"}},{"kind":128,"name":"$src_w","modifiers":0,"doc":{"description":"Source width.","type":"int"}},{"kind":128,"name":"$src_h","modifiers":0,"doc":{"description":"Source height.","type":"int"}},{"kind":128,"name":"$pct","modifiers":0,"doc":{"description":"The src_im will be changed to grayscale according to pct where 0 is fully grayscale and 100 is unchanged. When pct = 100 this function behaves identically to imagecopy() for pallete images, except for ignoring alpha components, while it implements alpha transparency for true colour images.","type":"int"}}],"doc":{"description":"imagecopymergegray() copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.","type":"bool"}},{"kind":64,"name":"strnatcmp","modifiers":0,"children":[{"kind":128,"name":"$str1","modifiers":0,"doc":{"description":"The first string.","type":"string"}},{"kind":128,"name":"$str2","modifiers":0,"doc":{"description":"The second string.","type":"string"}}],"doc":{"description":"This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a \"natural ordering\". Note that this comparison is case sensitive.","type":"int"}},{"kind":64,"name":"variant_eqv","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Performs a bitwise equivalence on two variants.","type":"mixed"}},{"kind":64,"name":"ldap_first_entry","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result_identifier","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Returns the entry identifier for first entry in the result. This entry identifier is then supplied to ldap_next_entry() routine to get successive entries from the result.","type":"resource"}},{"kind":64,"name":"mhash","modifiers":0,"children":[{"kind":128,"name":"$hash","modifiers":0,"doc":{"description":"The hash ID. One of the MHASH_hashname constants.","type":"int"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The user input, as a string.","type":"string"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"If specified, the function will return the resulting HMAC instead. HMAC is keyed hashing for message authentication, or simply a message digest that depends on the specified key. Not all algorithms supported in mhash can be used in HMAC mode.","type":"string"}}],"doc":{"description":"mhash() applies a hash function specified by hash to the data.","type":"string"}},{"kind":64,"name":"mcrypt_enc_get_iv_size","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"date_diff","modifiers":0,"children":[{"kind":128,"name":"$datetime1","modifiers":0,"description":"","doc":{"type":"DateTimeInterface"}},{"kind":128,"name":"$datetime2","modifiers":0,"description":"","doc":{"type":"DateTimeInterface"}},{"kind":128,"name":"$absolute","modifiers":0,"value":"false","doc":{"description":"Should the interval be forced to be positive?","type":"bool"}}],"doc":{"description":"Returns the difference between two DateTimeInterface objects.","type":"DateInterval"}},{"kind":64,"name":"openssl_pkcs7_decrypt","modifiers":0,"children":[{"kind":128,"name":"$infilename","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$outfilename","modifiers":0,"doc":{"description":"The decrypted message is written to the file specified by outfilename.","type":"string"}},{"kind":128,"name":"$recipcert","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$recipkey","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Decrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate and its associated private key specified by recipcert and recipkey.","type":"bool"}},{"kind":64,"name":"intlcal_get_error_message","modifiers":0,"children":[{"kind":128,"name":"$calendar","modifiers":0,"doc":{"description":"The calendar object, on the procedural style interface.","type":"IntlCalendar"}}],"doc":{"description":"Returns the error message (if any) associated with the error reported by IntlCalendar::getErrorCode() or intlcal_get_error_code(). If there is no associated error message, only the string representation of the name of the error constant will be returned. Otherwise, the message also includes a message set on the side of the PHP binding.","type":"string"}},{"kind":64,"name":"getmxrr","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"doc":{"description":"The Internet host name.","type":"string"}},{"kind":128,"name":"$mxhosts","modifiers":1024,"doc":{"description":"A list of the MX records found is placed into the array mxhosts.","type":"array"}},{"kind":128,"name":"$weight","modifiers":1024,"doc":{"description":"If the weight array is given, it will be filled with the weight information gathered.","type":"array"}}],"doc":{"description":"Searches DNS for MX records corresponding to hostname.","type":"bool"}},{"kind":64,"name":"xmlwriter_full_end_element","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"End the current xml element. Writes an end tag even if the element is empty.","type":"bool"}},{"kind":64,"name":"mb_encoding_aliases","modifiers":0,"children":[{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding type being checked, for aliases.","type":"string"}}],"doc":{"description":"Returns an array of aliases for a known encoding type.","type":"array"}},{"kind":64,"name":"mysql_field_flags","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.","type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"time_nanosleep","modifiers":0,"children":[{"kind":128,"name":"$seconds","modifiers":0,"doc":{"description":"Must be a non-negative integer.","type":"int"}},{"kind":128,"name":"$nanoseconds","modifiers":0,"doc":{"description":"Must be a non-negative integer less than 1 billion.","type":"int"}}],"doc":{"description":"Delays program execution for the given number of seconds and nanoseconds.","type":"mixed"}},{"kind":64,"name":"msg_stat_queue","modifiers":0,"children":[{"kind":128,"name":"$queue","modifiers":0,"doc":{"description":"Message queue resource handle","type":"resource"}}],"doc":{"description":"msg_stat_queue() returns the message queue meta data for the message queue specified by the queue. This is useful, for example, to determine which process sent the message that was just received.","type":"array"}},{"kind":64,"name":"posix_getgrnam","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the group","type":"string"}}],"doc":{"description":"Gets information about a group provided its name.","type":"array"}},{"kind":64,"name":"mysql_create_db","modifiers":0,"description":"","children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The name of the database being created.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"openssl_free_key","modifiers":0,"children":[{"kind":128,"name":"$key_identifier","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"openssl_free_key() frees the key associated with the specified key_identifier from memory.","type":"void"}},{"kind":64,"name":"variant_sub","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Subtracts right from left.","type":"mixed"}},{"kind":64,"name":"snmp_set_oid_numeric_print","modifiers":0,"children":[{"kind":128,"name":"$oid_format","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"This function is an alias of: snmp_set_oid_output_format().","type":"void"}},{"kind":64,"name":"apache_note","modifiers":0,"children":[{"kind":128,"name":"$note_name","modifiers":0,"doc":{"description":"The name of the note.","type":"string"}},{"kind":128,"name":"$note_value","modifiers":0,"value":"\"\"","doc":{"description":"The value of the note.","type":"string"}}],"doc":{"description":"This function is a wrapper for Apache's table_get and table_set. It edits the table of notes that exists during a request. The table's purpose is to allow Apache modules to communicate.","type":"string"}},{"kind":64,"name":"curl_share_setopt","modifiers":0,"children":[{"kind":128,"name":"$sh","modifiers":0,"doc":{"description":"A cURL share handle returned by curl_share_init().","type":"resource"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"Option Description CURLSHOPT_SHARE Specifies a type of data that should be shared. CURLSHOPT_UNSHARE Specifies a type of data that will be no longer shared.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Value Description CURL_LOCK_DATA_COOKIE Shares cookie data. CURL_LOCK_DATA_DNS Shares DNS cache. Note that when you use cURL multi handles, all handles added to the same multi handle will share DNS cache by default. CURL_LOCK_DATA_SSL_SESSION Shares SSL session IDs, reducing the time spent on the SSL handshake when reconnecting to the same server. Note that SSL session IDs are reused within the same handle by default.","type":"string"}}],"doc":{"description":"Sets an option on the given cURL share handle.","type":"bool"}},{"kind":64,"name":"xmlwriter_end_dtd","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Ends the DTD of the document.","type":"bool"}},{"kind":64,"name":"oci_execute","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}},{"kind":128,"name":"$mode","modifiers":0,"value":"OCI_COMMIT_ON_SUCCESS","doc":{"description":"An optional second parameter can be one of the following constants: Execution Modes Constant Description OCI_COMMIT_ON_SUCCESS Automatically commit all outstanding changes for this connection when the statement has succeeded. This is the default. OCI_DESCRIBE_ONLY Make query meta data available to functions like oci_field_name() but do not create a result set. Any subsequent fetch call such as oci_fetch_array() will fail. OCI_NO_AUTO_COMMIT Do not automatically commit changes. Prior to PHP 5.3.2 (PECL OCI8 1.4) use OCI_DEFAULT which is equivalent to OCI_NO_AUTO_COMMIT. Using OCI_NO_AUTO_COMMIT mode starts or continues a transaction. Transactions are automatically rolled back when the connection is closed, or when the script ends. Explicitly call oci_commit() to commit a transaction, or oci_rollback() to abort it. When inserting or updating data, using transactions is recommended for relational data consistency and for performance reasons. If OCI_NO_AUTO_COMMIT mode is used for any statement including queries, and oci_commit() or oci_rollback() is not subsequently called, then OCI8 will perform a rollback at the end of the script even if no data was changed. To avoid an unnecessary rollback, many scripts do not use OCI_NO_AUTO_COMMIT mode for queries or PL/SQL. Be careful to ensure the appropriate transactional consistency for the application when using oci_execute() with different modes in the same script.","type":"int"}}],"doc":{"description":"Executes a statement previously returned from oci_parse().","type":"bool"}},{"kind":64,"name":"ldap_add","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The distinguished name of an LDAP entity.","type":"string"}},{"kind":128,"name":"$entry","modifiers":0,"doc":{"description":"An array that specifies the information about the entry. The values in the entries are indexed by individual attributes. In case of multiple values for an attribute, they are indexed using integers starting with 0. <?php$entry[\"attribute1\"] = \"value\";$entry[\"attribute2\"][0] = \"value1\";$entry[\"attribute2\"][1] = \"value2\";?>","type":"array"}}],"doc":{"description":"Add entries in the LDAP directory.","type":"bool"}},{"kind":64,"name":"mb_strstr","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string from which to get the first occurrence of needle","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to find in haystack","type":"string"}},{"kind":128,"name":"$before_needle","modifiers":0,"value":"false","doc":{"description":"Determines which portion of haystack this function returns. If set to TRUE, it returns all of haystack from the beginning to the first occurrence of needle (excluding needle). If set to FALSE, it returns all of haystack from the first occurrence of needle to the end (including needle).","type":"bool"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"Character encoding name to use. If it is omitted, internal character encoding is used.","type":"string"}}],"doc":{"description":"mb_strstr() finds the first occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.","type":"string"}},{"kind":64,"name":"pg_tty","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_tty() returns the TTY name that server side debugging output is sent to on the given PostgreSQL connection resource.","type":"string"}},{"kind":64,"name":"pg_lo_create","modifiers":0,"children":[{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"If an object_id is given the function will try to create a large object with this id, else a free object id is assigned by the server. The parameter was added in PHP 5.3 and relies on functionality that first appeared in PostgreSQL 8.1.","type":"mixed"}}],"doc":{"description":"pg_lo_create() creates a large object and returns the OID of the large object. PostgreSQL access modes INV_READ, INV_WRITE, and INV_ARCHIVE are not supported, the object is created always with both read and write access. INV_ARCHIVE has been removed from PostgreSQL itself (version 6.3 and above).","type":"int"}},{"kind":64,"name":"define","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the constant.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the constant. In PHP 5, value must be a scalar value (integer, float, string, boolean, or NULL). In PHP 7, array values are also accepted. Warning While it is possible to define resource constants, it is not recommended and may cause unpredictable behavior.","type":"mixed"}},{"kind":128,"name":"$case_insensitive","modifiers":0,"value":"false","doc":{"description":"If set to TRUE, the constant will be defined case-insensitive. The default behavior is case-sensitive; i.e. CONSTANT and Constant represent different values. Note: Case-insensitive constants are stored as lower-case.","type":"bool"}}],"doc":{"description":"Defines a named constant at runtime.","type":"bool"}},{"kind":64,"name":"pg_query","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_query() executes the query on the specified database connection. pg_query_params() should be preferred in most cases.","type":"resource"}},{"kind":64,"name":"mb_strwidth","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being decoded.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Returns the width of string str.","type":"int"}},{"kind":64,"name":"intlcal_get_first_day_of_week","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}}],"doc":{"description":"The week day deemed to start a week, either the default value for this locale or the value set with IntlCalendar::setFirstDayOfWeek().","type":"int"}},{"kind":64,"name":"odbc_commit","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}}],"doc":{"description":"Commits all pending transactions on the connection.","type":"bool"}},{"kind":64,"name":"gc_collect_cycles","modifiers":0,"children":[],"doc":{"description":"Forces collection of any existing garbage cycles.","type":"int"}},{"kind":64,"name":"mysqli_stmt_error_list","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Returns an array of errors for the most recently invoked statement function that can succeed or fail.","type":"array"}},{"kind":64,"name":"mysql_unbuffered_query","modifiers":0,"description":"","children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The SQL query to execute. Data inside the query should be properly escaped.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"resource"}},{"kind":64,"name":"collator_set_attribute","modifiers":0,"description":"","children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute.","type":"int"}},{"kind":128,"name":"$val","modifiers":0,"doc":{"description":"Attribute value.","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"stream_filter_prepend","modifiers":0,"children":[{"kind":128,"name":"$stream","modifiers":0,"doc":{"description":"The target stream.","type":"resource"}},{"kind":128,"name":"$filtername","modifiers":0,"doc":{"description":"The filter name.","type":"string"}},{"kind":128,"name":"$read_write","modifiers":0,"doc":{"description":"By default, stream_filter_prepend() will attach the filter to the read filter chain if the file was opened for reading (i.e. File Mode: r, and/or +). The filter will also be attached to the write filter chain if the file was opened for writing (i.e. File Mode: w, a, and/or +). STREAM_FILTER_READ, STREAM_FILTER_WRITE, and/or STREAM_FILTER_ALL can also be passed to the read_write parameter to override this behavior. See stream_filter_append() for an example of using this parameter.","type":"int"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"This filter will be added with the specified params to the beginning of the list and will therefore be called first during stream operations. To add a filter to the end of the list, use stream_filter_append().","type":"mixed"}}],"doc":{"description":"Adds filtername to the list of filters attached to stream.","type":"resource"}},{"kind":64,"name":"pcntl_sigprocmask","modifiers":0,"children":[{"kind":128,"name":"$how","modifiers":0,"doc":{"description":"Sets the behavior of pcntl_sigprocmask(). Possible values: SIG_BLOCK: Add the signals to the currently blocked signals. SIG_UNBLOCK: Remove the signals from the currently blocked signals. SIG_SETMASK: Replace the currently blocked signals by the given list of signals.","type":"int"}},{"kind":128,"name":"$set","modifiers":0,"doc":{"description":"List of signals.","type":"array"}},{"kind":128,"name":"$oldset","modifiers":1024,"doc":{"description":"The oldset parameter is set to an array containing the list of the previously blocked signals.","type":"array"}}],"doc":{"description":"The pcntl_sigprocmask() function adds, removes or sets blocked signals, depending on the how parameter.","type":"bool"}},{"kind":64,"name":"ldap_next_entry","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result_entry_identifier","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Retrieve the entries stored in the result. Successive calls to the ldap_next_entry() return entries one by one till there are no more entries. The first call to ldap_next_entry() is made after the call to ldap_first_entry() with the result_entry_identifier as returned from the ldap_first_entry().","type":"resource"}},{"kind":64,"name":"oci_lob_copy","modifiers":0,"children":[{"kind":128,"name":"$lob_to","modifiers":0,"doc":{"description":"The destination LOB.","type":"OCI-Lob"}},{"kind":128,"name":"$lob_from","modifiers":0,"doc":{"description":"The copied LOB.","type":"OCI-Lob"}},{"kind":128,"name":"$length","modifiers":0,"value":"0","doc":{"description":"Indicates the length of data to be copied.","type":"int"}}],"doc":{"description":"Copies a large object or a part of a large object to another large object. Old LOB-recipient data will be overwritten.","type":"bool"}},{"kind":64,"name":"zend_version","modifiers":0,"children":[],"doc":{"description":"Returns a string containing the version of the currently running Zend Engine.","type":"string"}},{"kind":64,"name":"vfprintf","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"See sprintf() for a description of format.","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"Write a string produced according to format to the stream resource specified by handle.","type":"int"}},{"kind":64,"name":"mysqli_connect_errno","modifiers":0,"children":[],"doc":{"description":"Returns the last error code number from the last call to mysqli_connect().","type":"int"}},{"kind":64,"name":"mb_ereg_match","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The regular expression pattern.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string being evaluated.","type":"string"}},{"kind":128,"name":"$option","modifiers":0,"description":"","value":"\"msr\"","doc":{"type":"string"}}],"doc":{"description":"A regular expression match for a multibyte string","type":"bool"}},{"kind":64,"name":"imagechar","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$font","modifiers":0,"doc":{"description":"Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().","type":"int"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"x-coordinate of the start.","type":"int"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"y-coordinate of the start.","type":"int"}},{"kind":128,"name":"$c","modifiers":0,"doc":{"description":"The character to draw.","type":"string"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"imagechar() draws the first character of c in the image identified by image with its upper-left at x,y (top left is 0, 0) with the color color.","type":"bool"}},{"kind":64,"name":"pg_field_size","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$field_number","modifiers":0,"doc":{"description":"Field number, starting from 0.","type":"int"}}],"doc":{"description":"pg_field_size() returns the internal storage size (in bytes) of the field number in the given PostgreSQL result.","type":"int"}},{"kind":64,"name":"imagealphablending","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$blendmode","modifiers":0,"doc":{"description":"Whether to enable the blending mode or not. On true color images the default value is TRUE otherwise the default value is FALSE","type":"bool"}}],"doc":{"description":"imagealphablending() allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as imagesetpixel() determines how much of the underlying color should be allowed to shine through. As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image. The resulting pixel is opaque. In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel. Blending mode is not available when drawing on palette images.","type":"bool"}},{"kind":64,"name":"snmpwalk","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"doc":{"description":"The SNMP agent (server).","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The read community.","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"If NULL, object_id is taken as the root of the SNMP objects tree and all objects under that tree are returned as an array. If object_id is specified, all the SNMP objects below that object_id are returned.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"int"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"int"}}],"doc":{"description":"snmpwalk() function is used to read all the values from an SNMP agent specified by the hostname.","type":"array"}},{"kind":64,"name":"random_bytes","modifiers":0,"children":[{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The length of the random string that should be returned in bytes.","type":"int"}}],"doc":{"description":"Generates an arbitrary length string of cryptographic random bytes that are suitable for cryptographic use, such as when generating salts, keys or initialization vectors.","type":"string"}},{"kind":64,"name":"fbsql_set_lob_mode","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}},{"kind":128,"name":"$lob_mode","modifiers":0,"doc":{"description":"Can be one of: FBSQL_LOB_DIRECT - LOB data is retrieved directly. When data is fetched from the database with fbsql_fetch_row(), and other fetch functions, all CLOB and BLOB columns will be returned as ordinary columns. This is the default value on a new FrontBase result. FBSQL_LOB_HANDLE - LOB data is retrieved as handles to the data. When data is fetched from the database with fbsql_fetch_row(), and other fetch functions, LOB data will be returned as a handle to the data if the data is stored indirect or the data if it is stored direct. If a handle is returned it will be a 27 byte string formatted as @'000000000000000000000000'.","type":"int"}}],"doc":{"description":"Sets the mode for retrieving LOB data from the database.","type":"bool"}},{"kind":64,"name":"ftp_chdir","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"The target directory.","type":"string"}}],"doc":{"description":"Changes the current directory to the specified one.","type":"bool"}},{"kind":64,"name":"implode","modifiers":0,"children":[{"kind":128,"name":"$glue","modifiers":0,"doc":{"description":"Defaults to an empty string","type":"string"}},{"kind":128,"name":"$pieces","modifiers":0,"doc":{"description":"The array of strings to implode.","type":"array"}}],"doc":{"description":"Join array elements with a glue string.","type":"string"}},{"kind":64,"name":"resourcebundle_create","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"Locale for which the resources should be loaded (locale name, e.g. en_CA).","type":"string"}},{"kind":128,"name":"$bundlename","modifiers":0,"doc":{"description":"The directory where the data is stored or the name of the .dat file.","type":"string"}},{"kind":128,"name":"$fallback","modifiers":0,"doc":{"description":"Whether locale should match exactly or fallback to parent locale is allowed.","type":"bool"}}],"doc":{"description":"Creates a resource bundle.","type":"ResourceBundle"}},{"kind":64,"name":"mysql_ping","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"array_intersect_ukey","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"Initial array for comparison of the arrays.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"First array to compare keys against.","type":"array"}}],"doc":{"description":"array_intersect_ukey() returns an array containing all the values of array1 which have matching keys that are present in all the arguments.","type":"array"}},{"kind":64,"name":"dba_optimize","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The database handler, returned by dba_open() or dba_popen().","type":"resource"}}],"doc":{"description":"dba_optimize() optimizes the underlying database.","type":"bool"}},{"kind":64,"name":"wordwrap","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$width","modifiers":0,"value":"75","doc":{"description":"The number of characters at which the string will be wrapped.","type":"int"}},{"kind":128,"name":"$break","modifiers":0,"value":"\"\\n\"","doc":{"description":"The line is broken using the optional break parameter.","type":"string"}},{"kind":128,"name":"$cut","modifiers":0,"value":"false","doc":{"description":"If the cut is set to TRUE, the string is always wrapped at or before the specified width. So if you have a word that is larger than the given width, it is broken apart. (See second example). When FALSE the function does not split the word even if the width is smaller than the word width.","type":"bool"}}],"doc":{"description":"Wraps a string to a given number of characters using a string break character.","type":"string"}},{"kind":64,"name":"imageistruecolor","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}}],"doc":{"description":"imageistruecolor() finds whether the image image is a truecolor image.","type":"bool"}},{"kind":64,"name":"gzinflate","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data compressed by gzdeflate().","type":"string"}},{"kind":128,"name":"$length","modifiers":0,"value":"0","doc":{"description":"The maximum length of data to decode.","type":"int"}}],"doc":{"description":"This function inflates a deflated string.","type":"string"}},{"kind":64,"name":"curl_unescape","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}},{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The URL encoded string to be decoded.","type":"string"}}],"doc":{"description":"This function decodes the given URL encoded string.","type":"string"}},{"kind":64,"name":"dba_replace","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The key of the entry to be replaced.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to be replaced.","type":"string"}},{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The database handler, returned by dba_open() or dba_popen().","type":"resource"}}],"doc":{"description":"dba_replace() replaces or inserts the entry described with key and value into the database specified by handle.","type":"bool"}},{"kind":64,"name":"stream_socket_sendto","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"The socket to send data to.","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to be sent.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"The value of flags can be any combination of the following: possible values for flags STREAM_OOB Process OOB (out-of-band) data.","type":"int"}},{"kind":128,"name":"$address","modifiers":0,"doc":{"description":"The address specified when the socket stream was created will be used unless an alternate address is specified in address. If specified, it must be in dotted quad (or [ipv6]) format.","type":"string"}}],"doc":{"description":"Sends the specified data through the socket.","type":"int"}},{"kind":64,"name":"stream_get_filters","modifiers":0,"description":"","children":[],"doc":{"type":"array"}},{"kind":64,"name":"locale_parse","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the subtag array from. Note: The 'variant' and 'private' subtags can take maximum 15 values whereas 'extlang' can take maximum 3 values.","type":"string"}}],"doc":{"description":"Returns a key-value array of locale ID subtag elements.","type":"array"}},{"kind":64,"name":"gmp_div_q","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"The number being divided. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"The number that a is being divided by. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$round","modifiers":0,"value":"GMP_ROUND_ZERO","doc":{"description":"The result rounding is defined by the round, which can have the following values: GMP_ROUND_ZERO: The result is truncated towards 0. GMP_ROUND_PLUSINF: The result is rounded towards +infinity. GMP_ROUND_MINUSINF: The result is rounded towards -infinity. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"int"}}],"doc":{"description":"Divides a by b and returns the integer result.","type":"GMP"}},{"kind":64,"name":"intlcal_is_weekend","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$date","modifiers":0,"value":"NULL","doc":{"description":"An optional timestamp representing the number of milliseconds since the epoch, excluding leap seconds. If NULL, this objectʼs current time is used instead.","type":"float"}}],"doc":{"description":"Returns whether either the obejctʼs current time or the provided timestamp occur during a weekend in this objectʼs calendar system.","type":"bool"}},{"kind":64,"name":"imap_fetch_overview","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$sequence","modifiers":0,"doc":{"description":"A message sequence description. You can enumerate desired messages with the X,Y syntax, or retrieve all messages within an interval with the X:Y syntax","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"sequence will contain a sequence of message indices or UIDs, if this parameter is set to FT_UID.","type":"int"}}],"doc":{"description":"This function fetches mail headers for the given sequence and returns an overview of their contents.","type":"array"}},{"kind":64,"name":"datefmt_get_pattern","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource.","type":"IntlDateFormatter"}}],"doc":{"description":"Get pattern used by the formatter.","type":"string"}},{"kind":64,"name":"imagerotate","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$angle","modifiers":0,"doc":{"description":"Rotation angle, in degrees. The rotation angle is interpreted as the number of degrees to rotate the image anticlockwise.","type":"float"}},{"kind":128,"name":"$bgd_color","modifiers":0,"doc":{"description":"Specifies the color of the uncovered zone after the rotation","type":"int"}},{"kind":128,"name":"$ignore_transparent","modifiers":0,"value":"0","doc":{"description":"If set and non-zero, transparent colors are ignored (otherwise kept).","type":"int"}}],"doc":{"description":"Rotates the image image using the given angle in degrees.","type":"resource"}},{"kind":64,"name":"oci_field_scale","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Can be the field's index (1-based) or name.","type":"mixed"}}],"doc":{"description":"Returns the scale of the column with field index.","type":"int"}},{"kind":64,"name":"__halt_compiler","modifiers":0,"children":[],"doc":{"description":"Halts the execution of the compiler. This can be useful to embed data in PHP scripts, like the installation files.","type":"void"}},{"kind":64,"name":"intlcal_get_weekend_transition","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$dayOfWeek","modifiers":0,"doc":{"description":"One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, …, IntlCalendar::DOW_SATURDAY.","type":"string"}}],"doc":{"description":"Returns the number of milliseconds after midnight at which the weekend begins or ends.","type":"int"}},{"kind":64,"name":"collator_get_strength","modifiers":0,"description":"","children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}}],"doc":{"type":"int"}},{"kind":64,"name":"pg_result_error_field","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A PostgreSQL query result resource from a previously executed statement.","type":"resource"}},{"kind":128,"name":"$fieldcode","modifiers":0,"doc":{"description":"Possible fieldcode values are: PGSQL_DIAG_SEVERITY, PGSQL_DIAG_SQLSTATE, PGSQL_DIAG_MESSAGE_PRIMARY, PGSQL_DIAG_MESSAGE_DETAIL, PGSQL_DIAG_MESSAGE_HINT, PGSQL_DIAG_STATEMENT_POSITION, PGSQL_DIAG_INTERNAL_POSITION (PostgreSQL 8.0+ only), PGSQL_DIAG_INTERNAL_QUERY (PostgreSQL 8.0+ only), PGSQL_DIAG_CONTEXT, PGSQL_DIAG_SOURCE_FILE, PGSQL_DIAG_SOURCE_LINE or PGSQL_DIAG_SOURCE_FUNCTION.","type":"int"}}],"doc":{"description":"pg_result_error_field() returns one of the detailed error message fields associated with result resource. It is only available against a PostgreSQL 7.4 or above server. The error field is specified by the fieldcode.","type":"string"}},{"kind":64,"name":"pdo_drivers","modifiers":0,"children":[],"doc":{"description":"This function returns all currently available PDO drivers which can be used in DSN parameter of PDO::__construct().","type":"array"}},{"kind":64,"name":"tidy_repair_string","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to be repaired.","type":"string"}},{"kind":128,"name":"$config","modifiers":0,"doc":{"description":"The config config can be passed either as an array or as a string. If a string is passed, it is interpreted as the name of the configuration file, otherwise, it is interpreted as the options themselves. Check » http://tidy.sourceforge.net/docs/quickref.html for an explanation about each option.","type":"mixed"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding parameter sets the encoding for input/output documents. The possible values for encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac, win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.","type":"string"}}],"doc":{"description":"Repairs the given string.","type":"string"}},{"kind":64,"name":"ctype_cntrl","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The tested string.","type":"string"}}],"doc":{"description":"Checks if all of the characters in the provided string, text, are control characters. Control characters are e.g. line feed, tab, escape.","type":"bool"}},{"kind":64,"name":"checkdate","modifiers":0,"children":[{"kind":128,"name":"$month","modifiers":0,"doc":{"description":"The month is between 1 and 12 inclusive.","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"doc":{"description":"The day is within the allowed number of days for the given month. Leap years are taken into consideration.","type":"int"}},{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"The year is between 1 and 32767 inclusive.","type":"int"}}],"doc":{"description":"Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined.","type":"bool"}},{"kind":64,"name":"connection_status","modifiers":0,"children":[],"doc":{"description":"Gets the connection status bitfield.","type":"int"}},{"kind":64,"name":"imagecolorsforindex","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The color index.","type":"int"}}],"doc":{"description":"Gets the color for a specified index.","type":"array"}},{"kind":64,"name":"get_html_translation_table","modifiers":0,"children":[{"kind":128,"name":"$table","modifiers":0,"value":"HTML_SPECIALCHARS","doc":{"description":"Which table to return. Either HTML_ENTITIES or HTML_SPECIALCHARS.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"value":"ENT_COMPAT","doc":{"description":"A bitmask of one or more of the following flags, which specify which quotes the table will contain as well as which document type the table is for. The default is ENT_COMPAT | ENT_HTML401. Available flags constants Constant Name Description ENT_COMPAT Table will contain entities for double-quotes, but not for single-quotes. ENT_QUOTES Table will contain entities for both double and single quotes. ENT_NOQUOTES Table will neither contain entities for single quotes nor for double quotes. ENT_HTML401 Table for HTML 4.01. ENT_XML1 Table for XML 1. ENT_XHTML Table for XHTML. ENT_HTML5 Table for HTML 5.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"\"UTF-8\"","doc":{"description":"Encoding to use. If omitted, the default value for this argument is ISO-8859-1 in versions of PHP prior to 5.4.0, and UTF-8 from PHP 5.4.0 onwards. The following character sets are supported: Supported charsets Charset Aliases Description ISO-8859-1 ISO8859-1 Western European, Latin-1. ISO-8859-5 ISO8859-5 Little used cyrillic charset (Latin/Cyrillic). ISO-8859-15 ISO8859-15 Western European, Latin-9. Adds the Euro sign, French and Finnish letters missing in Latin-1 (ISO-8859-1). UTF-8   ASCII compatible multi-byte 8-bit Unicode. cp866 ibm866, 866 DOS-specific Cyrillic charset. cp1251 Windows-1251, win-1251, 1251 Windows-specific Cyrillic charset. cp1252 Windows-1252, 1252 Windows specific charset for Western European. KOI8-R koi8-ru, koi8r Russian. BIG5 950 Traditional Chinese, mainly used in Taiwan. GB2312 936 Simplified Chinese, national standard character set. BIG5-HKSCS   Big5 with Hong Kong extensions, Traditional Chinese. Shift_JIS SJIS, SJIS-win, cp932, 932 Japanese EUC-JP EUCJP, eucJP-win Japanese MacRoman   Charset that was used by Mac OS. ''   An empty string activates detection from script encoding (Zend multibyte), default_charset and current locale (see nl_langinfo() and setlocale()), in this order. Not recommended. Note: Any other character sets are not recognized. The default encoding will be used instead and a warning will be emitted.","type":"string"}}],"doc":{"description":"get_html_translation_table() will return the translation table that is used internally for htmlspecialchars() and htmlentities().","type":"array"}},{"kind":64,"name":"array_uintersect_uassoc","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The first array.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"The second array.","type":"array"}},{"kind":128,"name":"$key_compare_func","modifiers":0,"doc":{"description":"Key comparison callback function.","type":"callable"}}],"doc":{"description":"Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions.","type":"array"}},{"kind":64,"name":"openssl_digest","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data.","type":"string"}},{"kind":128,"name":"$method","modifiers":0,"doc":{"description":"The digest method.","type":"string"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"false","doc":{"description":"Setting to TRUE will return as raw output data, otherwise the return value is binhex encoded.","type":"bool"}}],"doc":{"description":"Computes a digest hash value for the given data using a given method, and returns a raw or binhex encoded string.","type":"string"}},{"kind":64,"name":"mysqli_embedded_server_start","modifiers":0,"children":[{"kind":128,"name":"$start","modifiers":0,"description":"","doc":{"type":"bool"}},{"kind":128,"name":"$arguments","modifiers":0,"description":"","doc":{"type":"array"}},{"kind":128,"name":"$groups","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"Procedural style","type":"bool"}},{"kind":64,"name":"is_readable","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Tells whether a file exists and is readable.","type":"bool"}},{"kind":64,"name":"mysqli_kill","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$processid","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"This function is used to ask the server to kill a MySQL thread specified by the processid parameter. This value must be retrieved by calling the mysqli_thread_id() function.","type":"bool"}},{"kind":64,"name":"mssql_bind","modifiers":0,"description":"","children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Statement resource, obtained with mssql_init().","type":"resource"}},{"kind":128,"name":"$param_name","modifiers":0,"doc":{"description":"The parameter name, as a string. Note: You have to include the @ character, like in the T-SQL syntax. See the explanation included in mssql_execute().","type":"string"}},{"kind":128,"name":"$var","modifiers":1024,"doc":{"description":"The PHP variable you'll bind the MSSQL parameter to. It is passed by reference, to retrieve OUTPUT and RETVAL values after the procedure execution.","type":"mixed"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"One of: SQLTEXT, SQLVARCHAR, SQLCHAR, SQLINT1, SQLINT2, SQLINT4, SQLBIT, SQLFLT4, SQLFLT8, SQLFLTN.","type":"int"}},{"kind":128,"name":"$is_output","modifiers":0,"value":"false","doc":{"description":"Whether the value is an OUTPUT parameter or not. If it's an OUTPUT parameter and you don't mention it, it will be treated as a normal input parameter and no error will be thrown.","type":"bool"}},{"kind":128,"name":"$is_null","modifiers":0,"value":"false","doc":{"description":"Whether the parameter is NULL or not. Passing the NULL value as var will not do the job.","type":"bool"}},{"kind":128,"name":"$maxlen","modifiers":0,"value":"-1","doc":{"description":"Used with char/varchar values. You have to indicate the length of the data so if the parameter is a varchar(50), the type must be SQLVARCHAR and this value 50.","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"snmp3_walk","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The hostname of the SNMP agent (server).","type":"string"}},{"kind":128,"name":"$sec_name","modifiers":0,"doc":{"description":"the security name, usually some kind of username","type":"string"}},{"kind":128,"name":"$sec_level","modifiers":0,"doc":{"description":"the security level (noAuthNoPriv|authNoPriv|authPriv)","type":"string"}},{"kind":128,"name":"$auth_protocol","modifiers":0,"doc":{"description":"the authentication protocol (MD5 or SHA)","type":"string"}},{"kind":128,"name":"$auth_passphrase","modifiers":0,"doc":{"description":"the authentication pass phrase","type":"string"}},{"kind":128,"name":"$priv_protocol","modifiers":0,"doc":{"description":"the privacy protocol (DES or AES)","type":"string"}},{"kind":128,"name":"$priv_passphrase","modifiers":0,"doc":{"description":"the privacy pass phrase","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"If NULL, object_id is taken as the root of the SNMP objects tree and all objects under that tree are returned as an array. If object_id is specified, all the SNMP objects below that object_id are returned.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"string"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"string"}}],"doc":{"description":"snmp3_walk() function is used to read all the values from an SNMP agent specified by the hostname.","type":"array"}},{"kind":64,"name":"iconv_strrpos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The entire string.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The searched substring.","type":"string"}},{"kind":128,"name":"$charset","modifiers":0,"value":"ini_get(\"iconv.internal_encoding\")","doc":{"description":"If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding.","type":"string"}}],"doc":{"description":"Finds the last occurrence of a needle within a haystack.","type":"int"}},{"kind":64,"name":"datefmt_set_lenient","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource","type":"IntlDateFormatter"}},{"kind":128,"name":"$lenient","modifiers":0,"doc":{"description":"Sets whether the parser is lenient or not, default is TRUE (lenient).","type":"bool"}}],"doc":{"description":"Define if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly. Enabling lenient parsing allows the parser to accept otherwise flawed date or time patterns, parsing as much as possible to obtain a value. Extra space, unrecognized tokens, or invalid values (\"February 30th\") are not accepted.","type":"bool"}},{"kind":64,"name":"mysqli_close","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Closes a previously opened database connection.","type":"bool"}},{"kind":64,"name":"oci_parse","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"An Oracle connection identifier, returned by oci_connect(), oci_pconnect(), or oci_new_connect().","type":"resource"}},{"kind":128,"name":"$sql_text","modifiers":0,"doc":{"description":"The SQL or PL/SQL statement. SQL statements should not end with a semi-colon (\";\"). PL/SQL statements should end with a semi-colon (\";\").","type":"string"}}],"doc":{"description":"Prepares sql_text using connection and returns the statement identifier, which can be used with oci_bind_by_name(), oci_execute() and other functions.","type":"resource"}},{"kind":64,"name":"pg_consume_input","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"pg_consume_input() consumes any input waiting to be read from the database server.","type":"bool"}},{"kind":64,"name":"gzpassthru","modifiers":0,"children":[{"kind":128,"name":"$zp","modifiers":0,"doc":{"description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().","type":"resource"}}],"doc":{"description":"Reads to EOF on the given gz-file pointer from the current position and writes the (uncompressed) results to standard output.","type":"int"}},{"kind":64,"name":"mb_detect_order","modifiers":0,"children":[{"kind":128,"name":"$encoding_list","modifiers":0,"value":"mb_detect_order()","doc":{"description":"encoding_list is an array or comma separated list of character encoding. See supported encodings. If encoding_list is omitted, it returns the current character encoding detection order as array. This setting affects mb_detect_encoding() and mb_send_mail(). mbstring currently implements the following encoding detection filters. If there is an invalid byte sequence for the following encodings, encoding detection will fail. UTF-8, UTF-7, ASCII, EUC-JP,SJIS, eucJP-win, SJIS-win, JIS, ISO-2022-JP For ISO-8859-*, mbstring always detects as ISO-8859-*. For UTF-16, UTF-32, UCS2 and UCS4, encoding detection will fail always.","type":"mixed"}}],"doc":{"description":"Sets the automatic character encoding detection order to encoding_list.","type":"mixed"}},{"kind":64,"name":"mb_ereg_search_pos","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The search pattern.","type":"string"}},{"kind":128,"name":"$option","modifiers":0,"value":"\"ms\"","doc":{"description":"The search option.","type":"string"}}],"doc":{"description":"Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string","type":"array"}},{"kind":64,"name":"iterator_apply","modifiers":0,"children":[{"kind":128,"name":"$iterator","modifiers":0,"doc":{"description":"The class to iterate over.","type":"Traversable"}},{"kind":128,"name":"$function","modifiers":0,"doc":{"description":"The callback function to call on every element. Note: The function must return TRUE in order to continue iterating over the iterator.","type":"callable"}},{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"Arguments to pass to the callback function.","type":"array"}}],"doc":{"description":"Calls a function for every element in an iterator.","type":"int"}},{"kind":64,"name":"date_timestamp_set","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTime object returned by date_create(). The function modifies this object.","type":"DateTime"}},{"kind":128,"name":"$unixtimestamp","modifiers":0,"doc":{"description":"Unix timestamp representing the date.","type":"int"}}],"doc":{"description":"Sets the date and time based on an Unix timestamp.","type":"DateTime"}},{"kind":64,"name":"array_pad","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"Initial array of values to pad.","type":"array"}},{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"New size of the array.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Value to pad if array is less than size.","type":"mixed"}}],"doc":{"description":"array_pad() returns a copy of the array padded to size specified by size with value value. If size is positive then the array is padded on the right, if it's negative then on the left. If the absolute value of size is less than or equal to the length of the array then no padding takes place. It is possible to add at most 1048576 elements at a time.","type":"array"}},{"kind":64,"name":"socket_getpeername","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create() or socket_accept().","type":"resource"}},{"kind":128,"name":"$address","modifiers":1024,"doc":{"description":"If the given socket is of type AF_INET or AF_INET6, socket_getpeername() will return the peers (remote) IP address in appropriate notation (e.g. 127.0.0.1 or fe80::1) in the address parameter and, if the optional port parameter is present, also the associated port. If the given socket is of type AF_UNIX, socket_getpeername() will return the Unix filesystem path (e.g. /var/run/daemon.sock) in the address parameter.","type":"string"}},{"kind":128,"name":"$port","modifiers":1024,"doc":{"description":"If given, this will hold the port associated to address.","type":"int"}}],"doc":{"description":"Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type.","type":"bool"}},{"kind":64,"name":"stream_context_set_params","modifiers":0,"children":[{"kind":128,"name":"$stream_or_context","modifiers":0,"doc":{"description":"The stream or context to apply the parameters too.","type":"resource"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"An array of parameters to set. Note: params should be an associative array of the structure: $params['paramname'] = \"paramvalue\";.","type":"array"}}],"doc":{"description":"Sets parameters on the specified context.","type":"bool"}},{"kind":64,"name":"session_module_name","modifiers":0,"children":[{"kind":128,"name":"$module","modifiers":0,"doc":{"description":"If module is specified, that module will be used instead.","type":"string"}}],"doc":{"description":"session_module_name() gets the name of the current session module.","type":"string"}},{"kind":64,"name":"mssql_free_statement","modifiers":0,"description":"","children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Statement resource, obtained with mssql_init().","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"fastcgi_finish_request","modifiers":0,"children":[],"doc":{"description":"This function flushes all response data to the client and finishes the request. This allows for time consuming tasks to be performed without leaving the connection to the client open.","type":"boolean"}},{"kind":64,"name":"filter_var","modifiers":0,"description":"","children":[{"kind":128,"name":"$variable","modifiers":0,"doc":{"description":"Value to filter. Note that scalar values are converted to string internally before they are filtered.","type":"mixed"}},{"kind":128,"name":"$filter","modifiers":0,"value":"FILTER_DEFAULT","doc":{"description":"The ID of the filter to apply. The Types of filters manual page lists the available filters. If omitted, FILTER_DEFAULT will be used, which is equivalent to FILTER_UNSAFE_RAW. This will result in no filtering taking place by default.","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Associative array of options or bitwise disjunction of flags. If filter accepts options, flags can be provided in \"flags\" field of array. For the \"callback\" filter, callable type should be passed. The callback must accept one argument, the value to be filtered, and return the value after filtering/sanitizing it. <?php// for filters that accept options, use this format$options = array(    'options' => array(        'default' => 3, // value to return if the filter fails        // other options here        'min_range' => 0    ),    'flags' => FILTER_FLAG_ALLOW_OCTAL,);$var = filter_var('0755', FILTER_VALIDATE_INT, $options);// for filter that only accept flags, you can pass them directly$var = filter_var('oops', FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);// for filter that only accept flags, you can also pass as an array$var = filter_var('oops', FILTER_VALIDATE_BOOLEAN,                  array('flags' => FILTER_NULL_ON_FAILURE));// callback validate filterfunction foo($value){    // Expected format: Surname, GivenNames    if (strpos($value, \", \") === false) return false;    list($surname, $givennames) = explode(\", \", $value, 2);    $empty = (empty($surname) || empty($givennames));    $notstrings = (!is_string($surname) || !is_string($givennames));    if ($empty || $notstrings) {        return false;    } else {        return $value;    }}$var = filter_var('Doe, Jane Sue', FILTER_CALLBACK, array('options' => 'foo'));?>","type":"mixed"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"pg_fetch_array","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$row","modifiers":0,"doc":{"description":"Row number in result to fetch. Rows are numbered from 0 upwards. If omitted or NULL, the next row is fetched.","type":"int"}},{"kind":128,"name":"$result_type","modifiers":0,"value":"PGSQL_BOTH","doc":{"description":"An optional parameter that controls how the returned array is indexed. result_type is a constant and can take the following values: PGSQL_ASSOC, PGSQL_NUM and PGSQL_BOTH. Using PGSQL_NUM, pg_fetch_array() will return an array with numerical indices, using PGSQL_ASSOC it will return only associative indices while PGSQL_BOTH, the default, will return both numerical and associative indices.","type":"int"}}],"doc":{"description":"pg_fetch_array() returns an array that corresponds to the fetched row (record).","type":"array"}},{"kind":64,"name":"rsort","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$sort_flags","modifiers":0,"value":"SORT_REGULAR","doc":{"description":"You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().","type":"int"}}],"doc":{"description":"This function sorts an array in reverse order (highest to lowest).","type":"bool"}},{"kind":64,"name":"ldap_start_tls","modifiers":0,"description":"","children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"sybase_fetch_row","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"array"}},{"kind":64,"name":"datefmt_get_calendar","modifiers":0,"description":"","children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource","type":"IntlDateFormatter"}}],"doc":{"type":"int"}},{"kind":64,"name":"oci_bind_array_by_name","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The Oracle placeholder.","type":"string"}},{"kind":128,"name":"$var_array","modifiers":1024,"doc":{"description":"An array.","type":"array"}},{"kind":128,"name":"$max_table_length","modifiers":0,"doc":{"description":"Sets the maximum length both for incoming and result arrays.","type":"int"}},{"kind":128,"name":"$max_item_length","modifiers":0,"value":"-1","doc":{"description":"Sets maximum length for array items. If not specified or equals to -1, oci_bind_array_by_name() will find the longest element in the incoming array and will use it as the maximum length.","type":"int"}},{"kind":128,"name":"$type","modifiers":0,"value":"SQLT_AFC","doc":{"description":"Should be used to set the type of PL/SQL array items. See list of available types below: SQLT_NUM - for arrays of NUMBER. SQLT_INT - for arrays of INTEGER (Note: INTEGER it is actually a synonym for NUMBER(38), but SQLT_NUM type won't work in this case even though they are synonyms). SQLT_FLT - for arrays of FLOAT. SQLT_AFC - for arrays of CHAR. SQLT_CHR - for arrays of VARCHAR2. SQLT_VCS - for arrays of VARCHAR. SQLT_AVC - for arrays of CHARZ. SQLT_STR - for arrays of STRING. SQLT_LVC - for arrays of LONG VARCHAR. SQLT_ODT - for arrays of DATE.","type":"int"}}],"doc":{"description":"Binds the PHP array var_array to the Oracle placeholder name, which points to an Oracle PL/SQL array. Whether it will be used for input or output will be determined at run-time.","type":"bool"}},{"kind":64,"name":"oci_field_type","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Can be the field's index (1-based) or name.","type":"mixed"}}],"doc":{"description":"Returns a field's data type name.","type":"mixed"}},{"kind":64,"name":"sybase_num_rows","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"opcache_is_script_cached","modifiers":0,"children":[{"kind":128,"name":"$file","modifiers":0,"doc":{"description":"The path to the PHP script to be checked.","type":"string"}}],"doc":{"description":"This function checks if a PHP script has been cached in OPCache. This can be used to more easily detect the \"warming\" of the cache for a particular script.","type":"boolean"}},{"kind":64,"name":"imap_append","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information","type":"string"}},{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"The message to be append, as a string When talking to the Cyrus IMAP server, you must use \"\\r\\n\" as your end-of-line terminator instead of \"\\n\" or the operation will fail","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"NULL","doc":{"description":"If provided, the options will also be written to the mailbox","type":"string"}},{"kind":128,"name":"$internal_date","modifiers":0,"value":"NULL","doc":{"description":"If this parameter is set, it will set the INTERNALDATE on the appended message. The parameter should be a date string that conforms to the rfc2060 specifications for a date_time value.","type":"string"}}],"doc":{"description":"Appends a string message to the specified mailbox.","type":"bool"}},{"kind":64,"name":"ibase_delete_user","modifiers":0,"description":"","children":[{"kind":128,"name":"$service_handle","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$user_name","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"imagecolorclosest","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$red","modifiers":0,"doc":{"description":"Value of red component.","type":"int"}},{"kind":128,"name":"$green","modifiers":0,"doc":{"description":"Value of green component.","type":"int"}},{"kind":128,"name":"$blue","modifiers":0,"doc":{"description":"Value of blue component.","type":"int"}}],"doc":{"description":"Returns the index of the color in the palette of the image which is \"closest\" to the specified RGB value.","type":"int"}},{"kind":64,"name":"set_error_handler","modifiers":0,"children":[{"kind":128,"name":"$error_handler","modifiers":0,"doc":{"description":"A callback with the following signature. NULL may be passed instead, to reset this handler to its default state. Instead of a function name, an array containing an object reference and a method name can also be supplied. bool handler ( int $errno , string $errstr [, string $errfile [, int $errline [, array $errcontext ]]] ) errno The first parameter, errno, contains the level of the error raised, as an integer. errstr The second parameter, errstr, contains the error message, as a string. errfile The third parameter is optional, errfile, which contains the filename that the error was raised in, as a string. errline The fourth parameter is optional, errline, which contains the line number the error was raised at, as an integer. errcontext The fifth parameter is optional, errcontext, which is an array that points to the active symbol table at the point the error occurred. In other words, errcontext will contain an array of every variable that existed in the scope the error was triggered in. User error handler must not modify error context. Warning This parameter has been DEPRECATED as of PHP 7.2.0. Relying on it is highly discouraged. If the function returns FALSE then the normal error handler continues.","type":"callable"}},{"kind":128,"name":"$error_types","modifiers":0,"value":"E_ALL","doc":{"description":"Can be used to mask the triggering of the error_handler function just like the error_reporting ini setting controls which errors are shown. Without this mask set the error_handler will be called for every error regardless to the setting of the error_reporting setting.","type":"int"}}],"doc":{"description":"Sets a user function (error_handler) to handle errors in a script.","type":"mixed"}},{"kind":64,"name":"krsort","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$sort_flags","modifiers":0,"value":"SORT_REGULAR","doc":{"description":"You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().","type":"int"}}],"doc":{"description":"Sorts an array by key in reverse order, maintaining key to data correlations. This is useful mainly for associative arrays.","type":"bool"}},{"kind":64,"name":"mysql_thread_id","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"socket_shutdown","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create().","type":"resource"}},{"kind":128,"name":"$how","modifiers":0,"value":"2","doc":{"description":"The value of how can be one of the following: possible values for how 0 Shutdown socket reading 1 Shutdown socket writing 2 Shutdown socket reading and writing","type":"int"}}],"doc":{"description":"The socket_shutdown() function allows you to stop incoming, outgoing or all data (the default) from being sent through the socket","type":"bool"}},{"kind":64,"name":"curl_escape","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}},{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to be encoded.","type":"string"}}],"doc":{"description":"This function URL encodes the given string according to » RFC 3986.","type":"string"}},{"kind":64,"name":"mysqli_stmt_bind_param","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}},{"kind":128,"name":"$types","modifiers":0,"doc":{"description":"A string that contains one or more characters which specify the types for the corresponding bind variables: Type specification chars Character Description i corresponding variable has type integer d corresponding variable has type double s corresponding variable has type string b corresponding variable is a blob and will be sent in packets","type":"string"}},{"kind":128,"name":"$var1","modifiers":1024,"doc":{"description":"The number of variables and length of string types must match the parameters in the statement.","type":"mixed"}},{"kind":128,"name":"$...","modifiers":1024,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Bind variables for the parameter markers in the SQL statement that was passed to mysqli_prepare().","type":"bool"}},{"kind":64,"name":"xmlwriter_write_pi","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$target","modifiers":0,"doc":{"description":"The target of the processing instruction.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The content of the processing instruction.","type":"string"}}],"doc":{"description":"Writes a processing instruction.","type":"bool"}},{"kind":64,"name":"dba_firstkey","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The database handler, returned by dba_open() or dba_popen().","type":"resource"}}],"doc":{"description":"dba_firstkey() returns the first key of the database and resets the internal key pointer. This permits a linear search through the whole database.","type":"string"}},{"kind":64,"name":"pg_pconnect","modifiers":0,"children":[{"kind":128,"name":"$connection_string","modifiers":0,"doc":{"description":"The connection_string can be empty to use all default parameters, or it can contain one or more parameter settings separated by whitespace. Each parameter setting is in the form keyword = value. Spaces around the equal sign are optional. To write an empty value or a value containing spaces, surround it with single quotes, e.g., keyword = 'a value'. Single quotes and backslashes within the value must be escaped with a backslash, i.e., \\' and \\\\. The currently recognized parameter keywords are: host, hostaddr, port, dbname, user, password, connect_timeout, options, tty (ignored), sslmode, requiressl (deprecated in favor of sslmode), and service. Which of these arguments exist depends on your PostgreSQL version.","type":"string"}},{"kind":128,"name":"$connect_type","modifiers":0,"doc":{"description":"If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection is created, even if the connection_string is identical to an existing connection.","type":"int"}}],"doc":{"description":"pg_pconnect() opens a connection to a PostgreSQL database. It returns a connection resource that is needed by other PostgreSQL functions.","type":"resource"}},{"kind":64,"name":"intlcal_roll","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}},{"kind":128,"name":"$amountOrUpOrDown","modifiers":0,"doc":{"description":"The (signed) amount to add to the field, TRUE for rolling up (adding 1), or FALSE for rolling down (subtracting 1).","type":"mixed"}}],"doc":{"description":"Adds a (signed) amount to a field. The difference with respect to IntlCalendar::add() is that when the field value overflows, it does not carry into more significant fields.","type":"bool"}},{"kind":64,"name":"intlcal_get_type","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}}],"doc":{"description":"A string describing the type of this calendar. This is one of the valid values for the calendar keyword value 'calendar'.","type":"string"}},{"kind":64,"name":"mysqli_real_connect","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"Can be either a host name or an IP address. Passing the NULL value or the string \"localhost\" to this parameter, the local host is assumed. When possible, pipes will be used instead of the TCP/IP protocol.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The MySQL user name.","type":"string"}},{"kind":128,"name":"$passwd","modifiers":0,"doc":{"description":"If provided or NULL, the MySQL server will attempt to authenticate the user against those user records which have no password only. This allows one username to be used with different permissions (depending on if a password as provided or not).","type":"string"}},{"kind":128,"name":"$dbname","modifiers":0,"doc":{"description":"If provided will specify the default database to be used when performing queries.","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"doc":{"description":"Specifies the port number to attempt to connect to the MySQL server.","type":"int"}},{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"Specifies the socket or named pipe that should be used. Note: Specifying the socket parameter will not explicitly determine the type of connection to be used when connecting to the MySQL server. How the connection is made to the MySQL database is determined by the host parameter.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"With the parameter flags you can set different connection options: Supported flags Name Description MYSQLI_CLIENT_COMPRESS Use compression protocol MYSQLI_CLIENT_FOUND_ROWS return number of matched rows, not the number of affected rows MYSQLI_CLIENT_IGNORE_SPACE Allow spaces after function names. Makes all function names reserved words. MYSQLI_CLIENT_INTERACTIVE Allow interactive_timeout seconds (instead of wait_timeout seconds) of inactivity before closing the connection MYSQLI_CLIENT_SSL Use SSL (encryption) MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT Like MYSQLI_CLIENT_SSL, but disables validation of the provided SSL certificate. This is only for installations using MySQL Native Driver and MySQL 5.6 or later. Note: For security reasons the MULTI_STATEMENT flag is not supported in PHP. If you want to execute multiple queries use the mysqli_multi_query() function.","type":"int"}}],"doc":{"description":"Establish a connection to a MySQL database engine.","type":"bool"}},{"kind":64,"name":"imap_msgno","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$uid","modifiers":0,"doc":{"description":"The message UID","type":"int"}}],"doc":{"description":"Returns the message sequence number for the given uid.","type":"int"}},{"kind":64,"name":"is_resource","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable being evaluated.","type":"mixed"}}],"doc":{"description":"Finds whether the given variable is a resource.","type":"bool"}},{"kind":64,"name":"fbsql_set_password","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}},{"kind":128,"name":"$user","modifiers":0,"doc":{"description":"The user name.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The new password to be set.","type":"string"}},{"kind":128,"name":"$old_password","modifiers":0,"doc":{"description":"The old password to be replaced.","type":"string"}}],"doc":{"description":"Changes the password for the given user.","type":"bool"}},{"kind":64,"name":"recode_file","modifiers":0,"children":[{"kind":128,"name":"$request","modifiers":0,"doc":{"description":"The desired recode request type","type":"string"}},{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"A local file handle resource for the input","type":"resource"}},{"kind":128,"name":"$output","modifiers":0,"doc":{"description":"A local file handle resource for the output","type":"resource"}}],"doc":{"description":"Recode the file referenced by file handle input into the file referenced by file handle output according to the recode request.","type":"bool"}},{"kind":64,"name":"ibase_backup","modifiers":0,"description":"","children":[{"kind":128,"name":"$service_handle","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$source_db","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$dest_file","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$options","modifiers":0,"description":"","value":"0","doc":{"type":"int"}},{"kind":128,"name":"$verbose","modifiers":0,"description":"","value":"false","doc":{"type":"bool"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"mcrypt_generic_end","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"socket_bind","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create().","type":"resource"}},{"kind":128,"name":"$address","modifiers":0,"doc":{"description":"If the socket is of the AF_INET family, the address is an IP in dotted-quad notation (e.g. 127.0.0.1). If the socket is of the AF_UNIX family, the address is the path of a Unix-domain socket (e.g. /tmp/my.sock).","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"description":"","value":"0","doc":{"type":"int"}}],"doc":{"description":"Binds the name given in address to the socket described by socket. This has to be done before a connection is be established using socket_connect() or socket_listen().","type":"bool"}},{"kind":64,"name":"strpos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string to search in.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.","type":"mixed"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"If specified, search will start this number of characters counted from the beginning of the string. If the offset is negative, the search will start this number of characters counted from the end of the string.","type":"int"}}],"doc":{"description":"Find the numeric position of the first occurrence of needle in the haystack string.","type":"mixed"}},{"kind":64,"name":"oci_password_change","modifiers":0,"children":[{"kind":128,"name":"$dbname","modifiers":0,"doc":{"description":"The database name.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The Oracle user name.","type":"string"}},{"kind":128,"name":"$old_password","modifiers":0,"doc":{"description":"The old password.","type":"string"}},{"kind":128,"name":"$new_password","modifiers":0,"doc":{"description":"The new password to be set.","type":"string"}}],"doc":{"description":"Changes password for user with username.","type":"resource"}},{"kind":64,"name":"xmlrpc_is_fault","modifiers":0,"description":"","children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"Array returned by xmlrpc_decode().","type":"array"}}],"doc":{"type":"bool"}},{"kind":64,"name":"openssl_public_encrypt","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$crypted","modifiers":1024,"doc":{"description":"This will hold the result of the encryption.","type":"string"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The public key.","type":"mixed"}},{"kind":128,"name":"$padding","modifiers":0,"value":"OPENSSL_PKCS1_PADDING","doc":{"description":"padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING.","type":"int"}}],"doc":{"description":"openssl_public_encrypt() encrypts data with public key and stores the result into crypted. Encrypted data can be decrypted via openssl_private_decrypt().","type":"bool"}},{"kind":64,"name":"pg_get_notify","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}},{"kind":128,"name":"$result_type","modifiers":0,"doc":{"description":"An optional parameter that controls how the returned array is indexed. result_type is a constant and can take the following values: PGSQL_ASSOC, PGSQL_NUM and PGSQL_BOTH. Using PGSQL_NUM, pg_get_notify() will return an array with numerical indices, using PGSQL_ASSOC it will return only associative indices while PGSQL_BOTH, the default, will return both numerical and associative indices.","type":"int"}}],"doc":{"description":"pg_get_notify() gets notifications generated by a NOTIFY SQL command. To receive notifications, the LISTEN SQL command must be issued.","type":"array"}},{"kind":64,"name":"mysqli_error","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns the last error message for the most recent MySQLi function call that can succeed or fail.","type":"string"}},{"kind":64,"name":"gmp_div_r","modifiers":0,"children":[{"kind":128,"name":"$n","modifiers":0,"doc":{"description":"The number being divided. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$d","modifiers":0,"doc":{"description":"The number that n is being divided by. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$round","modifiers":0,"value":"GMP_ROUND_ZERO","doc":{"description":"See the gmp_div_q() function for description of the round argument.","type":"int"}}],"doc":{"description":"Calculates remainder of the integer division of n by d. The remainder has the sign of the n argument, if not zero.","type":"GMP"}},{"kind":64,"name":"fbsql_warnings","modifiers":0,"children":[{"kind":128,"name":"$OnOff","modifiers":0,"doc":{"description":"Whether to enable warnings or no.","type":"bool"}}],"doc":{"description":"Enables or disables FrontBase warnings.","type":"bool"}},{"kind":64,"name":"imagegd","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$to","modifiers":0,"value":"NULL","doc":{"description":"The path or an open stream resource (which is automatically being closed after this function returns) to save the file to. If not set or NULL, the raw image stream will be outputted directly.","type":"mixed"}}],"doc":{"description":"Outputs a GD image to the given to.","type":"bool"}},{"kind":64,"name":"array_diff_assoc","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The array to compare from","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"An array to compare against","type":"array"}}],"doc":{"description":"Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are also used in the comparison.","type":"array"}},{"kind":64,"name":"odbc_columns","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$qualifier","modifiers":0,"doc":{"description":"The qualifier.","type":"string"}},{"kind":128,"name":"$schema","modifiers":0,"doc":{"description":"The owner.","type":"string"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"The table name.","type":"string"}},{"kind":128,"name":"$column_name","modifiers":0,"doc":{"description":"The column name.","type":"string"}}],"doc":{"description":"Lists all columns in the requested range.","type":"resource"}},{"kind":64,"name":"imap_status","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Valid flags are: SA_MESSAGES - set $status->messages to the number of messages in the mailbox SA_RECENT - set $status->recent to the number of recent messages in the mailbox SA_UNSEEN - set $status->unseen to the number of unseen (new) messages in the mailbox SA_UIDNEXT - set $status->uidnext to the next uid to be used in the mailbox SA_UIDVALIDITY - set $status->uidvalidity to a constant that changes when uids for the mailbox may no longer be valid SA_ALL - set all of the above","type":"int"}}],"doc":{"description":"Gets status information about the given mailbox.","type":"object"}},{"kind":64,"name":"bin2hex","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"A string.","type":"string"}}],"doc":{"description":"Returns an ASCII string containing the hexadecimal representation of str. The conversion is done byte-wise with the high-nibble first.","type":"string"}},{"kind":64,"name":"locale_filter_matches","modifiers":0,"children":[{"kind":128,"name":"$langtag","modifiers":0,"doc":{"description":"The language tag to check","type":"string"}},{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The language range to check against","type":"string"}},{"kind":128,"name":"$canonicalize","modifiers":0,"value":"false","doc":{"description":"If true, the arguments will be converted to canonical form before matching.","type":"bool"}}],"doc":{"description":"Checks if a $langtag filter matches with $locale according to RFC 4647's basic filtering algorithm","type":"bool"}},{"kind":64,"name":"iconv_set_encoding","modifiers":0,"children":[{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The value of type can be any one of these: input_encoding output_encoding internal_encoding","type":"string"}},{"kind":128,"name":"$charset","modifiers":0,"doc":{"description":"The character set.","type":"string"}}],"doc":{"description":"Changes the value of the internal configuration variable specified by type to charset.","type":"bool"}},{"kind":64,"name":"curl_error","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}}],"doc":{"description":"Returns a clear text error message for the last cURL operation.","type":"string"}},{"kind":64,"name":"openssl_pkcs7_encrypt","modifiers":0,"children":[{"kind":128,"name":"$infile","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$outfile","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$recipcerts","modifiers":0,"doc":{"description":"Either a lone X.509 certificate, or an array of X.509 certificates.","type":"mixed"}},{"kind":128,"name":"$headers","modifiers":0,"doc":{"description":"headers is an array of headers that will be prepended to the data after it has been encrypted. headers can be either an associative array keyed by header name, or an indexed array, where each element contains a single header line.","type":"array"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"flags can be used to specify options that affect the encoding process - see PKCS7 constants.","type":"int"}},{"kind":128,"name":"$cipherid","modifiers":0,"value":"OPENSSL_CIPHER_RC2_40","doc":{"description":"One of cipher constants.","type":"int"}}],"doc":{"description":"openssl_pkcs7_encrypt() takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts.","type":"bool"}},{"kind":64,"name":"long2ip","modifiers":0,"children":[{"kind":128,"name":"$proper_address","modifiers":0,"doc":{"description":"A proper address representation in long integer.","type":"string"}}],"doc":{"description":"The function long2ip() generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the long integer representation.","type":"string"}},{"kind":64,"name":"ftp_pwd","modifiers":0,"description":"","children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"ldap_first_attribute","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result_entry_identifier","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Gets the first attribute in the given entry. Remaining attributes are retrieved by calling ldap_next_attribute() successively.","type":"string"}},{"kind":64,"name":"localtime","modifiers":0,"children":[{"kind":128,"name":"$timestamp","modifiers":0,"value":"time()","doc":{"description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().","type":"int"}},{"kind":128,"name":"$is_associative","modifiers":0,"value":"false","doc":{"description":"If set to FALSE or not supplied then the array is returned as a regular, numerically indexed array. If the argument is set to TRUE then localtime() returns an associative array containing all the different elements of the structure returned by the C function call to localtime. The names of the different keys of the associative array are as follows: \"tm_sec\" - seconds, 0 to 59 \"tm_min\" - minutes, 0 to 59 \"tm_hour\" - hours, 0 to 23 \"tm_mday\" - day of the month, 1 to 31 \"tm_mon\" - month of the year, 0 (Jan) to 11 (Dec) \"tm_year\" - years since 1900 \"tm_wday\" - day of the week, 0 (Sun) to 6 (Sat) \"tm_yday\" - day of the year, 0 to 365 \"tm_isdst\" - is daylight savings time in effect? Positive if yes, 0 if not, negative if unknown.","type":"bool"}}],"doc":{"description":"The localtime() function returns an array identical to that of the structure returned by the C function call.","type":"array"}},{"kind":64,"name":"sybase_data_seek","modifiers":0,"description":"","children":[{"kind":128,"name":"$result_identifier","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$row_number","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"stream_context_get_default","modifiers":0,"description":"","children":[{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"options must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value. Note: As of PHP 5.3.0, the stream_context_set_default() function can be used to set the default context.","type":"array"}}],"doc":{"type":"resource"}},{"kind":64,"name":"bzdecompress","modifiers":0,"children":[{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"The string to decompress.","type":"string"}},{"kind":128,"name":"$small","modifiers":0,"value":"0","doc":{"description":"If TRUE, an alternative decompression algorithm will be used which uses less memory (the maximum memory requirement drops to around 2300K) but works at roughly half the speed. See the » bzip2 documentation for more information about this feature.","type":"int"}}],"doc":{"description":"bzdecompress() decompresses the given string containing bzip2 encoded data.","type":"mixed"}},{"kind":64,"name":"mysqli_get_client_stats","modifiers":0,"children":[],"doc":{"description":"Returns client per-process statistics. Available only with mysqlnd.","type":"array"}},{"kind":64,"name":"uasort","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$value_compare_func","modifiers":0,"doc":{"description":"See usort() and uksort() for examples of user-defined comparison functions.","type":"callable"}}],"doc":{"description":"This function sorts an array such that array indices maintain their correlation with the array elements they are associated with, using a user-defined comparison function.","type":"bool"}},{"kind":64,"name":"locale_get_all_variants","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the variants from","type":"string"}}],"doc":{"description":"Gets the variants for the input locale","type":"array"}},{"kind":64,"name":"fbsql_field_table","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical offset of the field. The field index starts at 0.","type":"int"}}],"doc":{"description":"Returns the name of the table that the specified field is in.","type":"string"}},{"kind":64,"name":"imagepsencodefont","modifiers":0,"description":"","children":[{"kind":128,"name":"$font_index","modifiers":0,"doc":{"description":"A font resource, returned by imagepsloadfont().","type":"resource"}},{"kind":128,"name":"$encodingfile","modifiers":0,"doc":{"description":"The exact format of this file is described in T1libs documentation. T1lib comes with two ready-to-use files, IsoLatin1.enc and IsoLatin2.enc.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"disk_total_space","modifiers":0,"children":[{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"A directory of the filesystem or disk partition.","type":"string"}}],"doc":{"description":"Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition.","type":"float"}},{"kind":64,"name":"tidy_config_count","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Returns the number of errors encountered in the configuration of the specified tidy object.","type":"int"}},{"kind":64,"name":"ibase_prepare","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An InterBase link identifier returned from ibase_connect(). If omitted, the last opened link is assumed.","type":"resource"}},{"kind":128,"name":"$trans","modifiers":0,"doc":{"description":"An InterBase transaction handle the query should be associated with. If omitted, the default transaction of the connection is assumed.","type":"string"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"An InterBase query.","type":"string"}}],"doc":{"type":"resource"}},{"kind":64,"name":"msql_select_db","modifiers":0,"children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The database name.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"The mSQL connection. If not specified, the last link opened by msql_connect() is assumed. If no such link is found, the function will try to establish a link as if msql_connect() was called, and use it.","type":"resource"}}],"doc":{"description":"msql_select_db() sets the current active database on the server that's associated with the specified link_identifier.","type":"bool"}},{"kind":64,"name":"enchant_broker_request_pwl_dict","modifiers":0,"children":[{"kind":128,"name":"$broker","modifiers":0,"doc":{"description":"Broker resource","type":"resource"}},{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the PWL file. If there is no such file, a new one will be created if possible.","type":"string"}}],"doc":{"description":"Creates a dictionary using a PWL file. A PWL file is personal word file one word per line.","type":"resource"}},{"kind":64,"name":"resourcebundle_get","modifiers":0,"children":[{"kind":128,"name":"$r","modifiers":0,"doc":{"description":"ResourceBundle object.","type":"ResourceBundle"}},{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Data index, must be string or integer.","type":"string|int"}}],"doc":{"description":"Get the data from the bundle by index or string key.","type":"mixed"}},{"kind":64,"name":"curl_multi_remove_handle","modifiers":0,"children":[{"kind":128,"name":"$mh","modifiers":0,"doc":{"description":"A cURL multi handle returned by curl_multi_init().","type":"resource"}},{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}}],"doc":{"description":"Removes a given ch handle from the given mh handle. When the ch handle has been removed, it is again perfectly legal to run curl_exec() on this handle. Removing the ch handle while being used, will effectively halt the transfer in progress involving that handle.","type":"int"}},{"kind":64,"name":"gmp_invert","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Computes the inverse of a modulo b.","type":"GMP"}},{"kind":64,"name":"imagecopymerge","modifiers":0,"children":[{"kind":128,"name":"$dst_im","modifiers":0,"doc":{"description":"Destination image link resource.","type":"resource"}},{"kind":128,"name":"$src_im","modifiers":0,"doc":{"description":"Source image link resource.","type":"resource"}},{"kind":128,"name":"$dst_x","modifiers":0,"doc":{"description":"x-coordinate of destination point.","type":"int"}},{"kind":128,"name":"$dst_y","modifiers":0,"doc":{"description":"y-coordinate of destination point.","type":"int"}},{"kind":128,"name":"$src_x","modifiers":0,"doc":{"description":"x-coordinate of source point.","type":"int"}},{"kind":128,"name":"$src_y","modifiers":0,"doc":{"description":"y-coordinate of source point.","type":"int"}},{"kind":128,"name":"$src_w","modifiers":0,"doc":{"description":"Source width.","type":"int"}},{"kind":128,"name":"$src_h","modifiers":0,"doc":{"description":"Source height.","type":"int"}},{"kind":128,"name":"$pct","modifiers":0,"doc":{"description":"The two images will be merged according to pct which can range from 0 to 100. When pct = 0, no action is taken, when 100 this function behaves identically to imagecopy() for pallete images, except for ignoring alpha components, while it implements alpha transparency for true colour images.","type":"int"}}],"doc":{"description":"Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.","type":"bool"}},{"kind":64,"name":"chroot","modifiers":0,"children":[{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"The path to change the root directory to.","type":"string"}}],"doc":{"description":"Changes the root directory of the current process to directory, and changes the current working directory to \"/\".","type":"bool"}},{"kind":64,"name":"imap_createmailbox","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information. Names containing international characters should be encoded by imap_utf7_encode()","type":"string"}}],"doc":{"description":"Creates a new mailbox specified by mailbox.","type":"bool"}},{"kind":64,"name":"dba_delete","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The key of the entry which is deleted.","type":"string"}},{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The database handler, returned by dba_open() or dba_popen().","type":"resource"}}],"doc":{"description":"dba_delete() deletes the specified entry from the database.","type":"bool"}},{"kind":64,"name":"ldap_search","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$base_dn","modifiers":0,"doc":{"description":"The base DN for the directory.","type":"string"}},{"kind":128,"name":"$filter","modifiers":0,"doc":{"description":"The search filter can be simple or advanced, using boolean operators in the format described in the LDAP documentation (see the » Netscape Directory SDK or » RFC4515 for full information on filters).","type":"string"}},{"kind":128,"name":"$attributes","modifiers":0,"doc":{"description":"An array of the required attributes, e.g. array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is always returned irrespective of which attributes types are requested. Using this parameter is much more efficient than the default action (which is to return all attributes and their associated values). The use of this parameter should therefore be considered good practice.","type":"array"}},{"kind":128,"name":"$attrsonly","modifiers":0,"doc":{"description":"Should be set to 1 if only attribute types are wanted. If set to 0 both attributes types and attribute values are fetched which is the default behaviour.","type":"int"}},{"kind":128,"name":"$sizelimit","modifiers":0,"doc":{"description":"Enables you to limit the count of entries fetched. Setting this to 0 means no limit. Note: This parameter can NOT override server-side preset sizelimit. You can set it lower though. Some directory server hosts will be configured to return no more than a preset number of entries. If this occurs, the server will indicate that it has only returned a partial results set. This also occurs if you use this parameter to limit the count of fetched entries.","type":"int"}},{"kind":128,"name":"$timelimit","modifiers":0,"doc":{"description":"Sets the number of seconds how long is spend on the search. Setting this to 0 means no limit. Note: This parameter can NOT override server-side preset timelimit. You can set it lower though.","type":"int"}},{"kind":128,"name":"$deref","modifiers":0,"doc":{"description":"Specifies how aliases should be handled during the search. It can be one of the following: LDAP_DEREF_NEVER - (default) aliases are never dereferenced. LDAP_DEREF_SEARCHING - aliases should be dereferenced during the search but not when locating the base object of the search. LDAP_DEREF_FINDING - aliases should be dereferenced when locating the base object but not during the search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always.","type":"int"}}],"doc":{"description":"Performs the search for a specified filter on the directory with the scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the entire directory.","type":"resource"}},{"kind":64,"name":"mysql_get_host_info","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"stream_set_write_buffer","modifiers":0,"children":[{"kind":128,"name":"$stream","modifiers":0,"doc":{"description":"The file pointer.","type":"resource"}},{"kind":128,"name":"$buffer","modifiers":0,"doc":{"description":"The number of bytes to buffer. If buffer is 0 then write operations are unbuffered. This ensures that all writes with fwrite() are completed before other processes are allowed to write to that output stream.","type":"int"}}],"doc":{"description":"Sets the buffering for write operations on the given stream to buffer bytes.","type":"int"}},{"kind":64,"name":"usort","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$value_compare_func","modifiers":0,"doc":{"description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647. int callback ( mixed $a, mixed $b ) Caution Returning non-integer values from the comparison function, such as float, will result in an internal cast to integer of the callback's return value. So values such as 0.99 and 0.1 will both be cast to an integer value of 0, which will compare such values as equal.","type":"callable"}}],"doc":{"description":"This function will sort an array by its values using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.","type":"bool"}},{"kind":64,"name":"mysqli_stmt_num_rows","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Returns the number of rows in the result set. The use of mysqli_stmt_num_rows() depends on whether or not you used mysqli_stmt_store_result() to buffer the entire result set in the statement handle.","type":"int"}},{"kind":64,"name":"pg_update","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"Name of the table into which to update rows.","type":"string"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"An array whose keys are field names in the table table_name, and whose values are what matched rows are to be updated to.","type":"array"}},{"kind":128,"name":"$condition","modifiers":0,"doc":{"description":"An array whose keys are field names in the table table_name, and whose values are the conditions that a row must meet to be updated.","type":"array"}},{"kind":128,"name":"$options","modifiers":0,"value":"PGSQL_DML_EXEC","doc":{"description":"Any number of PGSQL_CONV_FORCE_NULL, PGSQL_DML_NO_CONV, PGSQL_DML_ESCAPE, PGSQL_DML_EXEC, PGSQL_DML_ASYNC or PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the options then query string is returned. When PGSQL_DML_NO_CONV or PGSQL_DML_ESCAPE is set, it does not call pg_convert() internally.","type":"int"}}],"doc":{"description":"pg_update() updates records that matches condition with data. If options is specified, pg_convert() is applied to data with specified options.","type":"mixed"}},{"kind":64,"name":"xmlwriter_write_dtd_element","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the DTD element.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The content of the element.","type":"string"}}],"doc":{"description":"Writes a full DTD element.","type":"bool"}},{"kind":64,"name":"curl_copy_handle","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}}],"doc":{"description":"Copies a cURL handle keeping the same preferences.","type":"resource"}},{"kind":64,"name":"enchant_dict_suggest","modifiers":0,"description":"","children":[{"kind":128,"name":"$dict","modifiers":0,"doc":{"description":"Dictionary resource","type":"resource"}},{"kind":128,"name":"$word","modifiers":0,"doc":{"description":"Word to use for the suggestions.","type":"string"}}],"doc":{"type":"array"}},{"kind":64,"name":"imageftbbox","modifiers":0,"children":[{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2).","type":"float"}},{"kind":128,"name":"$angle","modifiers":0,"doc":{"description":"Angle in degrees in which text will be measured.","type":"float"}},{"kind":128,"name":"$fontfile","modifiers":0,"doc":{"description":"The name of the TrueType font file (can be a URL). Depending on which version of the GD library that PHP is using, it may attempt to search for files that do not begin with a leading '/' by appending '.ttf' to the filename and searching along a library-defined font path.","type":"string"}},{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The string to be measured.","type":"string"}},{"kind":128,"name":"$extrainfo","modifiers":0,"doc":{"description":"Possible array indexes for extrainfo Key Type Meaning linespacing float Defines drawing linespacing","type":"array"}}],"doc":{"description":"This function calculates and returns the bounding box in pixels for a FreeType text.","type":"array"}},{"kind":64,"name":"zlib_decode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$max_decoded_len","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Uncompress any raw/gzip/zlib encoded data.","type":"string"}},{"kind":64,"name":"zip_entry_close","modifiers":0,"children":[{"kind":128,"name":"$zip_entry","modifiers":0,"doc":{"description":"A directory entry previously opened zip_entry_open().","type":"resource"}}],"doc":{"description":"Closes the specified directory entry.","type":"bool"}},{"kind":64,"name":"ftp_rawlist","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"The directory path. May include arguments for the LIST command.","type":"string"}},{"kind":128,"name":"$recursive","modifiers":0,"value":"false","doc":{"description":"If set to TRUE, the issued command will be LIST -R.","type":"bool"}}],"doc":{"description":"ftp_rawlist() executes the FTP LIST command, and returns the result as an array.","type":"mixed"}},{"kind":64,"name":"acosh","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The value to process","type":"float"}}],"doc":{"description":"Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg.","type":"float"}},{"kind":64,"name":"imap_gc","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$caches","modifiers":0,"doc":{"description":"Specifies the cache to purge. It may one or a combination of the following constants: IMAP_GC_ELT (message cache elements), IMAP_GC_ENV (envelope and bodies), IMAP_GC_TEXTS (texts).","type":"int"}}],"doc":{"description":"Purges the cache of entries of a specific type.","type":"bool"}},{"kind":64,"name":"mb_eregi","modifiers":0,"description":"","children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The regular expression pattern.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string being searched.","type":"string"}},{"kind":128,"name":"$regs","modifiers":1024,"doc":{"description":"If matches are found for parenthesized substrings of pattern and the function is called with the third argument regs, the matches will be stored in the elements of the array regs. If no matches are found, regs is set to an empty array. $regs[1] will contain the substring which starts at the first left parenthesis; $regs[2] will contain the substring starting at the second, and so on. $regs[0] will contain a copy of the complete string matched.","type":"array"}}],"doc":{"type":"int"}},{"kind":64,"name":"fbsql_database","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}},{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The database name. If given, the default database of the connexion will be changed to database.","type":"string"}}],"doc":{"description":"Get or set the database name used with the connection.","type":"string"}},{"kind":64,"name":"collator_asort","modifiers":0,"children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}},{"kind":128,"name":"$arr","modifiers":1024,"doc":{"description":"Array of strings to sort.","type":"array"}},{"kind":128,"name":"$sort_flag","modifiers":0,"doc":{"description":"Optional sorting type, one of the following: Collator::SORT_REGULAR - compare items normally (don't change types) Collator::SORT_NUMERIC - compare items numerically Collator::SORT_STRING - compare items as strings Default $sort_flag value is Collator::SORT_REGULAR. It is also used if an invalid $sort_flag value has been specified.","type":"int"}}],"doc":{"description":"This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant. Array elements will have sort order according to current locale rules.","type":"bool"}},{"kind":64,"name":"mssql_fetch_object","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}}],"doc":{"type":"object"}},{"kind":64,"name":"gmp_or","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Calculates bitwise inclusive OR of two GMP numbers.","type":"GMP"}},{"kind":64,"name":"mysql_drop_db","modifiers":0,"description":"","children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The name of the database that will be deleted.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"imagecreatefrompng","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the PNG image.","type":"string"}}],"doc":{"description":"imagecreatefrompng() returns an image identifier representing the image obtained from the given filename.","type":"resource"}},{"kind":64,"name":"variant_cast","modifiers":0,"children":[{"kind":128,"name":"$variant","modifiers":0,"doc":{"description":"The variant.","type":"variant"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"type should be one of the VT_XXX constants.","type":"int"}}],"doc":{"description":"This function makes a copy of variant and then performs a variant cast operation to force the copy to have the type given by type.","type":"variant"}},{"kind":64,"name":"imap_mailboxmsginfo","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}}],"doc":{"description":"Checks the current mailbox status on the server. It is similar to imap_status(), but will additionally sum up the size of all messages in the mailbox, which will take some additional time to execute.","type":"object"}},{"kind":64,"name":"link","modifiers":0,"children":[{"kind":128,"name":"$target","modifiers":0,"doc":{"description":"Target of the link.","type":"string"}},{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"The link name.","type":"string"}}],"doc":{"description":"link() creates a hard link.","type":"bool"}},{"kind":64,"name":"ldap_get_values","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result_entry_identifier","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$attribute","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Reads all the values of the attribute in the entry in the result.","type":"array"}},{"kind":64,"name":"sybase_free_result","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"mssql_fetch_assoc","modifiers":0,"description":"","children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}}],"doc":{"type":"array"}},{"kind":64,"name":"ob_get_level","modifiers":0,"children":[],"doc":{"description":"Returns the nesting level of the output buffering mechanism.","type":"int"}},{"kind":64,"name":"dba_nextkey","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The database handler, returned by dba_open() or dba_popen().","type":"resource"}}],"doc":{"description":"dba_nextkey() returns the next key of the database and advances the internal key pointer.","type":"string"}},{"kind":64,"name":"is_object","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable being evaluated.","type":"mixed"}}],"doc":{"description":"Finds whether the given variable is an object.","type":"bool"}},{"kind":64,"name":"odbc_field_name","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier.","type":"resource"}},{"kind":128,"name":"$field_number","modifiers":0,"doc":{"description":"The field number. Field numbering starts at 1.","type":"int"}}],"doc":{"description":"Gets the name of the field occupying the given column number in the given result identifier.","type":"string"}},{"kind":64,"name":"numfmt_format","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to format. Can be integer or float, other values will be converted to a numeric value.","type":"number"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The formatting type to use.","type":"int"}}],"doc":{"description":"Format a numeric value according to the formatter rules.","type":"string"}},{"kind":64,"name":"xmlwriter_start_dtd_entity","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the entity.","type":"string"}},{"kind":128,"name":"$isparam","modifiers":0,"description":"","doc":{"type":"bool"}}],"doc":{"description":"Starts a DTD entity.","type":"bool"}},{"kind":64,"name":"exit","modifiers":0,"children":[{"kind":128,"name":"$status","modifiers":0,"doc":{"description":"If status is a string, this function prints the status just before exiting. If status is an integer, that value will be used as the exit status and not printed. Exit statuses should be in the range 0 to 254, the exit status 255 is reserved by PHP and shall not be used. The status 0 is used to terminate the program successfully.","type":"int"}}],"doc":{"description":"Terminates execution of the script. Shutdown functions and object destructors will always be executed even if exit is called.","type":"void"}},{"kind":64,"name":"intlcal_create_instance","modifiers":0,"children":[{"kind":128,"name":"$timeZone","modifiers":0,"value":"NULL","doc":{"description":"The timezone to use. NULL, in which case the default timezone will be used, as specified in the ini setting date.timezone or through the function date_default_timezone_set() and as returned by date_default_timezone_get(). An IntlTimeZone, which will be used directly. A DateTimeZone. Its identifier will be extracted and an ICU timezone object will be created; the timezone will be backed by ICUʼs database, not PHPʼs. A string, which should be a valid ICU timezone identifier. See IntlTimeZone::createTimeZoneIDEnumeration(). Raw offsets such as \"GMT+08:30\" are also accepted.","type":"mixed"}},{"kind":128,"name":"$locale","modifiers":0,"value":"\"\"","doc":{"description":"A locale to use or NULL to use the default locale.","type":"string"}}],"doc":{"description":"Given a timezone and locale, this method creates an IntlCalendar object. This factory method may return a subclass of IntlCalendar.","type":"IntlCalendar"}},{"kind":64,"name":"juliantojd","modifiers":0,"children":[{"kind":128,"name":"$month","modifiers":0,"doc":{"description":"The month as a number from 1 (for January) to 12 (for December)","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"doc":{"description":"The day as a number from 1 to 31","type":"int"}},{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"The year as a number between -4713 and 9999","type":"int"}}],"doc":{"description":"Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.","type":"int"}},{"kind":64,"name":"fbsql_commit","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Ends the current transaction by writing all inserts, updates and deletes to the disk and unlocking all row and table locks held by the transaction. This command is only needed if autocommit is set to false.","type":"bool"}},{"kind":64,"name":"ibase_fetch_row","modifiers":0,"children":[{"kind":128,"name":"$result_identifier","modifiers":0,"doc":{"description":"An InterBase result identifier.","type":"resource"}},{"kind":128,"name":"$fetch_flag","modifiers":0,"value":"0","doc":{"description":"fetch_flag is a combination of the constants IBASE_TEXT and IBASE_UNIXTIME ORed together. Passing IBASE_TEXT will cause this function to return BLOB contents instead of BLOB ids. Passing IBASE_UNIXTIME will cause this function to return date/time values as Unix timestamps instead of as formatted strings.","type":"int"}}],"doc":{"description":"ibase_fetch_row() fetches one row of data from the given result set.","type":"array"}},{"kind":64,"name":"numfmt_get_symbol","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Symbol specifier, one of the format symbol constants.","type":"int"}}],"doc":{"description":"Get a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.","type":"string"}},{"kind":64,"name":"collator_get_error_message","modifiers":0,"children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}}],"doc":{"description":"Retrieves the message for the last error.","type":"string"}},{"kind":64,"name":"deflate_add","modifiers":0,"children":[{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"A context created with deflate_init().","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"A chunk of data to compress.","type":"string"}},{"kind":128,"name":"$flush_mode","modifiers":0,"value":"ZLIB_SYNC_FLUSH","doc":{"description":"One of ZLIB_BLOCK, ZLIB_NO_FLUSH, ZLIB_PARTIAL_FLUSH, ZLIB_SYNC_FLUSH (default), ZLIB_FULL_FLUSH, ZLIB_FINISH. Normally you will want to set ZLIB_NO_FLUSH to maximize compression, and ZLIB_FINISH to terminate with the last chunk of data. See the » zlib manual for a detailed description of these constants.","type":"int"}}],"doc":{"description":"Incrementally deflates data in the specified context.","type":"string"}},{"kind":64,"name":"socket_create_listen","modifiers":0,"children":[{"kind":128,"name":"$port","modifiers":0,"doc":{"description":"The port on which to listen on all interfaces.","type":"int"}},{"kind":128,"name":"$backlog","modifiers":0,"value":"128","doc":{"description":"The backlog parameter defines the maximum length the queue of pending connections may grow to. SOMAXCONN may be passed as backlog parameter, see socket_listen() for more information.","type":"int"}}],"doc":{"description":"socket_create_listen() creates a new socket resource of type AF_INET listening on all local interfaces on the given port waiting for new connections.","type":"resource"}},{"kind":64,"name":"hash_final","modifiers":0,"description":"","children":[{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"Hashing context returned by hash_init().","type":"resource"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"false","doc":{"description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.","type":"bool"}}],"doc":{"type":"string"}},{"kind":64,"name":"stream_socket_server","modifiers":0,"children":[{"kind":128,"name":"$local_socket","modifiers":0,"doc":{"description":"The type of socket created is determined by the transport specified using standard URL formatting: transport://target. For Internet Domain sockets (AF_INET) such as TCP and UDP, the target portion of the remote_socket parameter should consist of a hostname or IP address followed by a colon and a port number. For Unix domain sockets, the target portion should point to the socket file on the filesystem. Depending on the environment, Unix domain sockets may not be available. A list of available transports can be retrieved using stream_get_transports(). See List of Supported Socket Transports for a list of bulitin transports.","type":"string"}},{"kind":128,"name":"$errno","modifiers":1024,"doc":{"description":"If the optional errno and errstr arguments are present they will be set to indicate the actual system level error that occurred in the system-level socket(), bind(), and listen() calls. If the value returned in errno is 0 and the function returned FALSE, it is an indication that the error occurred before the bind() call. This is most likely due to a problem initializing the socket. Note that the errno and errstr arguments will always be passed by reference.","type":"int"}},{"kind":128,"name":"$errstr","modifiers":1024,"doc":{"description":"See errno description.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"STREAM_SERVER_BIND","doc":{"description":"A bitmask field which may be set to any combination of socket creation flags. Note: For UDP sockets, you must use STREAM_SERVER_BIND as the flags parameter.","type":"int"}},{"kind":128,"name":"$context","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Creates a stream or datagram socket on the specified local_socket.","type":"resource"}},{"kind":64,"name":"ldap_rename","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The distinguished name of an LDAP entity.","type":"string"}},{"kind":128,"name":"$newrdn","modifiers":0,"doc":{"description":"The new RDN.","type":"string"}},{"kind":128,"name":"$newparent","modifiers":0,"doc":{"description":"The new parent/superior entry.","type":"string"}},{"kind":128,"name":"$deleteoldrdn","modifiers":0,"doc":{"description":"If TRUE the old RDN value(s) is removed, else the old RDN value(s) is retained as non-distinguished values of the entry.","type":"bool"}}],"doc":{"description":"The entry specified by dn is renamed/moved.","type":"bool"}},{"kind":64,"name":"intlcal_get_actual_minimum","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Returns a fieldʼs relative minimum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the greatest relative minimum for the field and would decrement it until reaching the global minimum or the field value wraps around, in which the value returned would be the global minimum or the value before the wrapping, respectively.","type":"int"}},{"kind":64,"name":"pg_connection_status","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"pg_connection_status() returns the status of the specified connection.","type":"int"}},{"kind":64,"name":"mysqli_stmt_init","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Allocates and initializes a statement object suitable for mysqli_stmt_prepare().","type":"mysqli_stmt"}},{"kind":64,"name":"ftp_get_option","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"Currently, the following options are supported: Supported runtime FTP options FTP_TIMEOUT_SEC Returns the current timeout used for network related operations. FTP_AUTOSEEK Returns TRUE if this option is on, FALSE otherwise.","type":"int"}}],"doc":{"description":"This function returns the value for the requested option from the specified FTP connection.","type":"mixed"}},{"kind":64,"name":"readline_info","modifiers":0,"children":[{"kind":128,"name":"$varname","modifiers":0,"doc":{"description":"A variable name.","type":"string"}},{"kind":128,"name":"$newvalue","modifiers":0,"doc":{"description":"If provided, this will be the new value of the setting.","type":"string"}}],"doc":{"description":"Gets or sets various internal readline variables.","type":"mixed"}},{"kind":64,"name":"register_shutdown_function","modifiers":0,"children":[{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The shutdown callback to register. The shutdown callbacks are executed as the part of the request, so it's possible to send output from them and access output buffers.","type":"callable"}},{"kind":128,"name":"$parameter","modifiers":0,"doc":{"description":"It is possible to pass parameters to the shutdown function by passing additional parameters.","type":"mixed"}}],"doc":{"description":"Registers a callback to be executed after script execution finishes or exit() is called.","type":"void"}},{"kind":64,"name":"bzerrstr","modifiers":0,"children":[{"kind":128,"name":"$bz","modifiers":0,"doc":{"description":"The file pointer. It must be valid and must point to a file successfully opened by bzopen().","type":"resource"}}],"doc":{"description":"Gets the error string of any bzip2 error returned by the given file pointer.","type":"string"}},{"kind":64,"name":"imap_ping","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}}],"doc":{"description":"imap_ping() pings the stream to see if it's still active. It may discover new mail; this is the preferred method for a periodic \"new mail check\" as well as a \"keep alive\" for servers which have inactivity timeout.","type":"bool"}},{"kind":64,"name":"imagebmp","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$to","modifiers":0,"doc":{"description":"The path or an open stream resource (which is automatically being closed after this function returns) to save the file to. If not set or NULL, the raw image stream will be outputted directly.","type":"mixed"}},{"kind":128,"name":"$compressed","modifiers":0,"value":"TRUE","doc":{"description":"Whether the BMP should be compressed with run-length encoding (RLE), or not.","type":"bool"}}],"doc":{"description":"Outputs or saves a BMP version of the given image.","type":"bool"}},{"kind":64,"name":"gmp_hamdist","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number. It should be positive.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number. It should be positive.","type":"GMP"}}],"doc":{"description":"Returns the hamming distance between a and b. Both operands should be non-negative.","type":"int"}},{"kind":64,"name":"pg_field_type_oid","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$field_number","modifiers":0,"doc":{"description":"Field number, starting from 0.","type":"int"}}],"doc":{"description":"pg_field_type_oid() returns an integer containing the OID of the base type of the given field_number in the given PostgreSQL result resource.","type":"int"}},{"kind":64,"name":"xml_parser_free","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to free.","type":"resource"}}],"doc":{"description":"Frees the given XML parser.","type":"bool"}},{"kind":64,"name":"openssl_pkcs12_export_to_file","modifiers":0,"children":[{"kind":128,"name":"$x509","modifiers":0,"doc":{"description":"See Key/Certificate parameters for a list of valid values.","type":"mixed"}},{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the output file.","type":"string"}},{"kind":128,"name":"$priv_key","modifiers":0,"doc":{"description":"Private key component of PKCS#12 file.","type":"mixed"}},{"kind":128,"name":"$pass","modifiers":0,"doc":{"description":"Encryption password for unlocking the PKCS#12 file.","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"openssl_pkcs12_export_to_file() stores x509 into a file named by filename in a PKCS#12 file format.","type":"bool"}},{"kind":64,"name":"imagegrabscreen","modifiers":0,"children":[],"doc":{"description":"Grabs a screenshot of the whole screen.","type":"resource"}},{"kind":64,"name":"snmpwalkoid","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"doc":{"description":"The SNMP agent.","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The read community.","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"If NULL, object_id is taken as the root of the SNMP objects tree and all objects under that tree are returned as an array. If object_id is specified, all the SNMP objects below that object_id are returned.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"int"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"int"}}],"doc":{"description":"snmpwalkoid() function is used to read all object ids and their respective values from an SNMP agent specified by hostname.","type":"array"}},{"kind":64,"name":"numfmt_set_attribute","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute specifier - one of the numeric attribute constants.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The attribute value.","type":"int"}}],"doc":{"description":"Set a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.","type":"bool"}},{"kind":64,"name":"enchant_broker_set_dict_path","modifiers":0,"children":[{"kind":128,"name":"$broker","modifiers":0,"doc":{"description":"Broker resource.","type":"resource"}},{"kind":128,"name":"$dict_type","modifiers":0,"doc":{"description":"The type of the dictionaries, i.e. ENCHANT_MYSPELL or ENCHANT_ISPELL.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The path of the dictionary directory.","type":"string"}}],"doc":{"description":"Set the directory path for a given backend.","type":"bool"}},{"kind":64,"name":"ksort","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$sort_flags","modifiers":0,"value":"SORT_REGULAR","doc":{"description":"You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().","type":"int"}}],"doc":{"description":"Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays.","type":"bool"}},{"kind":64,"name":"mysqli_stmt_insert_id","modifiers":0,"description":"","children":[{"kind":128,"name":"$stmt","modifiers":0,"description":"","doc":{"type":"mysqli_stmt"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"readline_redisplay","modifiers":0,"children":[],"doc":{"description":"Redraws readline to redraw the display.","type":"void"}},{"kind":64,"name":"mssql_result","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}},{"kind":128,"name":"$row","modifiers":0,"doc":{"description":"The row number.","type":"int"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Can be the field's offset, the field's name or the field's table dot field's name (tablename.fieldname). If the column name has been aliased ('select foo as bar from...'), it uses the alias instead of the column name. Note: Specifying a numeric offset for the field argument is much quicker than specifying a fieldname or tablename.fieldname argument.","type":"mixed"}}],"doc":{"type":"string"}},{"kind":64,"name":"socket_create","modifiers":0,"children":[{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"The domain parameter specifies the protocol family to be used by the socket. Available address/protocol families Domain Description AF_INET IPv4 Internet based protocols. TCP and UDP are common protocols of this protocol family. AF_INET6 IPv6 Internet based protocols. TCP and UDP are common protocols of this protocol family. AF_UNIX Local communication protocol family. High efficiency and low overhead make it a great form of IPC (Interprocess Communication).","type":"int"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The type parameter selects the type of communication to be used by the socket. Available socket types Type Description SOCK_STREAM Provides sequenced, reliable, full-duplex, connection-based byte streams. An out-of-band data transmission mechanism may be supported. The TCP protocol is based on this socket type. SOCK_DGRAM Supports datagrams (connectionless, unreliable messages of a fixed maximum length). The UDP protocol is based on this socket type. SOCK_SEQPACKET Provides a sequenced, reliable, two-way connection-based data transmission path for datagrams of fixed maximum length; a consumer is required to read an entire packet with each read call. SOCK_RAW Provides raw network protocol access. This special type of socket can be used to manually construct any type of protocol. A common use for this socket type is to perform ICMP requests (like ping). SOCK_RDM Provides a reliable datagram layer that does not guarantee ordering. This is most likely not implemented on your operating system.","type":"int"}},{"kind":128,"name":"$protocol","modifiers":0,"doc":{"description":"The protocol parameter sets the specific protocol within the specified domain to be used when communicating on the returned socket. The proper value can be retrieved by name by using getprotobyname(). If the desired protocol is TCP, or UDP the corresponding constants SOL_TCP, and SOL_UDP can also be used. Common protocols Name Description icmp The Internet Control Message Protocol is used primarily by gateways and hosts to report errors in datagram communication. The \"ping\" command (present in most modern operating systems) is an example application of ICMP. udp The User Datagram Protocol is a connectionless, unreliable, protocol with fixed record lengths. Due to these aspects, UDP requires a minimum amount of protocol overhead. tcp The Transmission Control Protocol is a reliable, connection based, stream oriented, full duplex protocol. TCP guarantees that all data packets will be received in the order in which they were sent. If any packet is somehow lost during communication, TCP will automatically retransmit the packet until the destination host acknowledges that packet. For reliability and performance reasons, the TCP implementation itself decides the appropriate octet boundaries of the underlying datagram communication layer. Therefore, TCP applications must allow for the possibility of partial record transmission.","type":"int"}}],"doc":{"description":"Creates and returns a socket resource, also referred to as an endpoint of communication. A typical network connection is made up of 2 sockets, one performing the role of the client, and another performing the role of the server.","type":"resource"}},{"kind":64,"name":"session_abort","modifiers":0,"children":[],"doc":{"description":"session_abort() finishes session without saving data. Thus the original values in session data are kept.","type":"void"}},{"kind":64,"name":"numfmt_get_error_message","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}}],"doc":{"description":"Get error message from the last function performed by the formatter.","type":"string"}},{"kind":64,"name":"msql_num_fields","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}}],"doc":{"description":"msql_num_fields() returns the number of fields in a result set.","type":"int"}},{"kind":64,"name":"mcrypt_module_self_test","modifiers":0,"description":"","children":[{"kind":128,"name":"$algorithm","modifiers":0,"doc":{"description":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string.","type":"string"}},{"kind":128,"name":"$lib_dir","modifiers":0,"doc":{"description":"The optional lib_dir parameter can contain the location where the algorithm module is on the system.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"gettype","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable being type checked.","type":"mixed"}}],"doc":{"description":"Returns the type of the PHP variable var. For type checking, use is_* functions.","type":"string"}},{"kind":64,"name":"token_get_all","modifiers":0,"children":[{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"The PHP source to parse.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"Valid flags: TOKEN_PARSE - Recognises the ability to use reserved words in specific contexts.","type":"int"}}],"doc":{"description":"token_get_all() parses the given source string into PHP language tokens using the Zend engine's lexical scanner.","type":"array"}},{"kind":64,"name":"ldap_err2str","modifiers":0,"children":[{"kind":128,"name":"$errno","modifiers":0,"doc":{"description":"The error number.","type":"int"}}],"doc":{"description":"Returns the string error message explaining the error number errno. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.","type":"string"}},{"kind":64,"name":"json_last_error_msg","modifiers":0,"description":"","children":[],"doc":{"type":"string"}},{"kind":64,"name":"collator_create","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale containing the required collation rules. Special values for locales can be passed in - if null is passed for the locale, the default locale collation rules will be used. If empty string (\"\") or \"root\" are passed, » UCA rules will be used.","type":"string"}}],"doc":{"description":"The strings will be compared using the options already specified.","type":"Collator"}},{"kind":64,"name":"socket_set_block","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create() or socket_accept().","type":"resource"}}],"doc":{"description":"The socket_set_block() function removes the O_NONBLOCK flag on the socket specified by the socket parameter.","type":"bool"}},{"kind":64,"name":"datefmt_is_lenient","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource.","type":"IntlDateFormatter"}}],"doc":{"description":"Check if the parser is strict or lenient in interpreting inputs that do not match the pattern exactly.","type":"bool"}},{"kind":64,"name":"current","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The array.","type":"array"}}],"doc":{"description":"Every array has an internal pointer to its \"current\" element, which is initialized to the first element inserted into the array.","type":"mixed"}},{"kind":64,"name":"openssl_cipher_iv_length","modifiers":0,"children":[{"kind":128,"name":"$method","modifiers":0,"doc":{"description":"The cipher method, see openssl_get_cipher_methods() for a list of potential values.","type":"string"}}],"doc":{"description":"Gets the cipher initialization vector (iv) length.","type":"int"}},{"kind":64,"name":"curl_version","modifiers":0,"children":[{"kind":128,"name":"$age","modifiers":0,"description":"","value":"CURLVERSION_NOW","doc":{"type":"int"}}],"doc":{"description":"Returns information about the cURL version.","type":"array"}},{"kind":64,"name":"odbc_gettypeinfo","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$data_type","modifiers":0,"doc":{"description":"The data type, which can be used to restrict the information to a single data type.","type":"int"}}],"doc":{"description":"Retrieves information about data types supported by the data source.","type":"resource"}},{"kind":64,"name":"spl_autoload_functions","modifiers":0,"children":[],"doc":{"description":"Get all registered __autoload() functions.","type":"array"}},{"kind":64,"name":"gzclose","modifiers":0,"children":[{"kind":128,"name":"$zp","modifiers":0,"doc":{"description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().","type":"resource"}}],"doc":{"description":"Closes the given gz-file pointer.","type":"bool"}},{"kind":64,"name":"pg_untrace","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"Stop tracing started by pg_trace().","type":"bool"}},{"kind":64,"name":"zip_entry_filesize","modifiers":0,"children":[{"kind":128,"name":"$zip_entry","modifiers":0,"doc":{"description":"A directory entry returned by zip_read().","type":"resource"}}],"doc":{"description":"Returns the actual size of the specified directory entry.","type":"int"}},{"kind":64,"name":"array_filter","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The array to iterate over","type":"array"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The callback function to use If no callback is supplied, all entries of array equal to FALSE (see converting to boolean) will be removed.","type":"callable"}},{"kind":128,"name":"$flag","modifiers":0,"value":"0","doc":{"description":"Flag determining what arguments are sent to callback: ARRAY_FILTER_USE_KEY - pass key as the only argument to callback instead of the value ARRAY_FILTER_USE_BOTH - pass both value and key as arguments to callback instead of the value","type":"int"}}],"doc":{"description":"Iterates over each value in the array passing them to the callback function. If the callback function returns true, the current value from array is returned into the result array. Array keys are preserved.","type":"array"}},{"kind":64,"name":"mysqli_stmt_param_count","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Returns the number of parameter markers present in the prepared statement.","type":"int"}},{"kind":64,"name":"fbsql_read_clob","modifiers":0,"children":[{"kind":128,"name":"$clob_handle","modifiers":0,"doc":{"description":"A CLOB handle, returned by fbsql_create_clob().","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Reads CLOB data from the database.","type":"string"}},{"kind":64,"name":"imap_num_msg","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}}],"doc":{"description":"Gets the number of messages in the current mailbox.","type":"int"}},{"kind":64,"name":"stream_bucket_prepend","modifiers":0,"children":[{"kind":128,"name":"$brigade","modifiers":0,"doc":{"description":"brigade is a resource pointing to a bucket brigade which contains one or more bucket objects.","type":"resource"}},{"kind":128,"name":"$bucket","modifiers":0,"doc":{"description":"A bucket object.","type":"object"}}],"doc":{"description":"This function can be called to prepend a bucket to a bucket brigade. It is typically called from php_user_filter::filter().","type":"void"}},{"kind":64,"name":"odbc_close_all","modifiers":0,"children":[],"doc":{"description":"odbc_close_all() will close down all connections to database server(s).","type":"void"}},{"kind":64,"name":"oci_num_fields","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}}],"doc":{"description":"Gets the number of columns in the given statement.","type":"int"}},{"kind":64,"name":"base64_encode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to encode.","type":"string"}}],"doc":{"description":"Encodes the given data with base64.","type":"string"}},{"kind":64,"name":"parse_ini_string","modifiers":0,"children":[{"kind":128,"name":"$ini","modifiers":0,"doc":{"description":"The contents of the ini file being parsed.","type":"string"}},{"kind":128,"name":"$process_sections","modifiers":0,"value":"false","doc":{"description":"By setting the process_sections parameter to TRUE, you get a multidimensional array, with the section names and settings included. The default for process_sections is FALSE","type":"bool"}},{"kind":128,"name":"$scanner_mode","modifiers":0,"value":"INI_SCANNER_NORMAL","doc":{"description":"Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied, then option values will not be parsed. As of PHP 5.6.1 can also be specified as INI_SCANNER_TYPED. In this mode boolean, null and integer types are preserved when possible. String values \"true\", \"on\" and \"yes\" are converted to TRUE. \"false\", \"off\", \"no\" and \"none\" are considered FALSE. \"null\" is converted to NULL in typed mode. Also, all numeric strings are converted to integer type if it is possible.","type":"int"}}],"doc":{"description":"parse_ini_string() returns the settings in string ini in an associative array.","type":"array"}},{"kind":64,"name":"gzseek","modifiers":0,"children":[{"kind":128,"name":"$zp","modifiers":0,"doc":{"description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().","type":"resource"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The seeked offset.","type":"int"}},{"kind":128,"name":"$whence","modifiers":0,"value":"SEEK_SET","doc":{"description":"whence values are: SEEK_SET - Set position equal to offset bytes. SEEK_CUR - Set position to current location plus offset. If whence is not specified, it is assumed to be SEEK_SET.","type":"int"}}],"doc":{"description":"Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent to calling (in C) gzseek(zp, offset, SEEK_SET).","type":"int"}},{"kind":64,"name":"ftp_ssl_connect","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The FTP server address. This parameter shouldn't have any trailing slashes and shouldn't be prefixed with ftp://.","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"value":"21","doc":{"description":"This parameter specifies an alternate port to connect to. If it is omitted or set to zero, then the default FTP port, 21, will be used.","type":"int"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"90","doc":{"description":"This parameter specifies the timeout for all subsequent network operations. If omitted, the default value is 90 seconds. The timeout can be changed and queried at any time with ftp_set_option() and ftp_get_option().","type":"int"}}],"doc":{"description":"ftp_ssl_connect() opens an explicit SSL-FTP connection to the specified host. That implies that ftp_ssl_connect() will succeed even if the server is not configured for SSL-FTP, or its certificate is invalid. Only when ftp_login() is called, the client will send the appropriate AUTH FTP command, so ftp_login() will fail in the mentioned cases.","type":"resource"}},{"kind":64,"name":"stream_set_blocking","modifiers":0,"children":[{"kind":128,"name":"$stream","modifiers":0,"doc":{"description":"The stream.","type":"resource"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"If mode is FALSE, the given stream will be switched to non-blocking mode, and if TRUE, it will be switched to blocking mode. This affects calls like fgets() and fread() that read from the stream. In non-blocking mode an fgets() call will always return right away while in blocking mode it will wait for data to become available on the stream.","type":"bool"}}],"doc":{"description":"Sets blocking or non-blocking mode on a stream.","type":"bool"}},{"kind":64,"name":"posix_getppid","modifiers":0,"children":[],"doc":{"description":"Return the process identifier of the parent process of the current process.","type":"int"}},{"kind":64,"name":"mysql_db_name","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result pointer from a call to mysql_list_dbs().","type":"resource"}},{"kind":128,"name":"$row","modifiers":0,"doc":{"description":"The index into the result set.","type":"int"}},{"kind":128,"name":"$field","modifiers":0,"value":"NULL","doc":{"description":"The field name.","type":"mixed"}}],"doc":{"type":"string"}},{"kind":64,"name":"pspell_config_save_repl","modifiers":0,"children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$flag","modifiers":0,"doc":{"description":"TRUE if replacement pairs should be saved, FALSE otherwise.","type":"bool"}}],"doc":{"description":"pspell_config_save_repl() determines whether pspell_save_wordlist() will save the replacement pairs along with the wordlist. Usually there is no need to use this function because if pspell_config_repl() is used, the replacement pairs will be saved by pspell_save_wordlist() anyway, and if it is not, the replacement pairs will not be saved.","type":"bool"}},{"kind":64,"name":"stream_bucket_append","modifiers":0,"description":"","children":[{"kind":128,"name":"$brigade","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$bucket","modifiers":0,"description":"","doc":{"type":"object"}}],"doc":{"type":"void"}},{"kind":64,"name":"imap_setacl","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information","type":"string"}},{"kind":128,"name":"$id","modifiers":0,"doc":{"description":"The user to give the rights to.","type":"string"}},{"kind":128,"name":"$rights","modifiers":0,"doc":{"description":"The rights to give to the user. Passing an empty string will delete acl.","type":"string"}}],"doc":{"description":"Sets the ACL for a giving mailbox.","type":"bool"}},{"kind":64,"name":"mysqli_stmt_store_result","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"You must call mysqli_stmt_store_result() for every query that successfully produces a result set (SELECT, SHOW, DESCRIBE, EXPLAIN), if and only if you want to buffer the complete result set by the client, so that the subsequent mysqli_stmt_fetch() call returns buffered data.","type":"bool"}},{"kind":64,"name":"ftp_rmdir","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"The directory to delete. This must be either an absolute or relative path to an empty directory.","type":"string"}}],"doc":{"description":"Removes the specified directory on the FTP server.","type":"bool"}},{"kind":64,"name":"gmp_xor","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Calculates bitwise exclusive OR (XOR) of two GMP numbers.","type":"GMP"}},{"kind":64,"name":"strip_tags","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$allowable_tags","modifiers":0,"doc":{"description":"You can use the optional second parameter to specify tags which should not be stripped. Note: HTML comments and PHP tags are also stripped. This is hardcoded and can not be changed with allowable_tags. Note: In PHP 5.3.4 and later, self-closing XHTML tags are ignored and only non-self-closing tags should be used in allowable_tags. For example, to allow both <br> and <br/>, you should use: <?phpstrip_tags($input, '<br>');?>","type":"string"}}],"doc":{"description":"This function tries to return a string with all NULL bytes, HTML and PHP tags stripped from a given str. It uses the same tag stripping state machine as the fgetss() function.","type":"string"}},{"kind":64,"name":"ctype_print","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The tested string.","type":"string"}}],"doc":{"description":"Checks if all of the characters in the provided string, text, are printable.","type":"bool"}},{"kind":64,"name":"oci_statement_type","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI8 statement identifier from oci_parse().","type":"resource"}}],"doc":{"description":"Returns a keyword identifying the type of the OCI8 statement.","type":"string"}},{"kind":64,"name":"dba_popen","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"Commonly a regular path in your filesystem.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"It is r for read access, w for read/write access to an already existing database, c for read/write access and database creation if it doesn't currently exist, and n for create, truncate and read/write access.","type":"string"}},{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"The name of the handler which shall be used for accessing path. It is passed all optional parameters given to dba_popen() and can act on behalf of them.","type":"string"}}],"doc":{"description":"dba_popen() establishes a persistent database instance for path with mode using handler.","type":"resource"}},{"kind":64,"name":"imagecolormatch","modifiers":0,"children":[{"kind":128,"name":"$image1","modifiers":0,"doc":{"description":"A truecolor image link resource.","type":"resource"}},{"kind":128,"name":"$image2","modifiers":0,"doc":{"description":"A palette image link resource pointing to an image that has the same size as image1.","type":"resource"}}],"doc":{"description":"Makes the colors of the palette version of an image more closely match the true color version.","type":"bool"}},{"kind":64,"name":"numfmt_get_attribute","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute specifier - one of the numeric attribute constants.","type":"int"}}],"doc":{"description":"Get a numeric attribute associated with the formatter. An example of a numeric attribute is the number of integer digits the formatter will produce.","type":"int"}},{"kind":64,"name":"mysqli_fetch_all","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}},{"kind":128,"name":"$resulttype","modifiers":0,"value":"MYSQLI_NUM","doc":{"description":"This optional parameter is a constant indicating what type of array should be produced from the current row data. The possible values for this parameter are the constants MYSQLI_ASSOC, MYSQLI_NUM, or MYSQLI_BOTH.","type":"int"}}],"doc":{"description":"mysqli_fetch_all() fetches all result rows and returns the result set as an associative array, a numeric array, or both.","type":"mixed"}},{"kind":64,"name":"fbsql_get_autostart_info","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"type":"array"}},{"kind":64,"name":"hex2bin","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"Hexadecimal representation of data.","type":"string"}}],"doc":{"description":"Decodes a hexadecimally encoded binary string.","type":"string"}},{"kind":64,"name":"bcmul","modifiers":0,"children":[{"kind":128,"name":"$left_operand","modifiers":0,"doc":{"description":"The left operand, as a string.","type":"string"}},{"kind":128,"name":"$right_operand","modifiers":0,"doc":{"description":"The right operand, as a string.","type":"string"}},{"kind":128,"name":"$scale","modifiers":0,"value":"0","doc":{"description":"This optional parameter is used to set the number of digits after the decimal place in the result. If omitted, it will default to the scale set globally with the bcscale() function, or fallback to 0 if this has not been set.","type":"int"}}],"doc":{"description":"Multiply the left_operand by the right_operand.","type":"string"}},{"kind":64,"name":"pg_ping","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_ping() pings a database connection and tries to reconnect it if it is broken.","type":"bool"}},{"kind":64,"name":"enchant_dict_is_in_session","modifiers":0,"children":[{"kind":128,"name":"$dict","modifiers":0,"doc":{"description":"Dictionary resource","type":"resource"}},{"kind":128,"name":"$word","modifiers":0,"doc":{"description":"The word to lookup","type":"string"}}],"doc":{"description":"Tells whether or not a word already exists in the current session.","type":"bool"}},{"kind":64,"name":"curl_multi_setopt","modifiers":0,"description":"","children":[{"kind":128,"name":"$mh","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"One of the CURLMOPT_* constants.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to be set on option. value should be an int for the following values of the option parameter: Option Set value to CURLMOPT_PIPELINING Pass 1 to enable or 0 to disable. Enabling pipelining on a multi handle will make it attempt to perform HTTP Pipelining as far as possible for transfers using this handle. This means that if you add a second request that can use an already existing connection, the second request will be \"piped\" on the same connection. As of cURL 7.43.0 you can also pass 2 to try to multiplex the new transfer over an existing HTTP/2 connection if possible. Instead of integer literals, you can also use the CURLPIPE_* constants if available. CURLMOPT_MAXCONNECTS Pass a number that will be used as the maximum amount of simultaneously open connections that libcurl may cache. By default the size will be enlarged to fit four times the number of handles added via curl_multi_add_handle(). When the cache is full, curl closes the oldest one in the cache to prevent the number of open connections from increasing. CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE Pass a number that specifies the chunk length threshold for pipelining in bytes. CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE Pass a number that specifies the size threshold for pipelining penalty in bytes. CURLMOPT_MAX_HOST_CONNECTIONS Pass a number that specifies the maximum number of connections to a single host. CURLMOPT_MAX_PIPELINE_LENGTH Pass a number that specifies the maximum number of requests in a pipeline. CURLMOPT_MAX_TOTAL_CONNECTIONS Pass a number that specifies the maximum number of simultaneously open connections. CURLMOPT_PUSHFUNCTION Pass a callable that will be registered to handle server pushes and should have the following signature: int pushfunction ( resource $parent_ch , resource $pushed_ch , array $headers ) parent_ch The parent cURL handle (the request the client made). pushed_ch A new cURL handle for the pushed request. headers The push promise headers. The push function is supposed to return either CURL_PUSH_OK if it can handle the push, or CURL_PUSH_DENY to reject it.","type":"mixed"}}],"doc":{"type":"bool"}},{"kind":64,"name":"msg_receive","modifiers":0,"children":[{"kind":128,"name":"$queue","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$desiredmsgtype","modifiers":0,"doc":{"description":"If desiredmsgtype is 0, the message from the front of the queue is returned. If desiredmsgtype is greater than 0, then the first message of that type is returned. If desiredmsgtype is less than 0, the first message on the queue with the lowest type less than or equal to the absolute value of desiredmsgtype will be read. If no messages match the criteria, your script will wait until a suitable message arrives on the queue. You can prevent the script from blocking by specifying MSG_IPC_NOWAIT in the flags parameter.","type":"int"}},{"kind":128,"name":"$msgtype","modifiers":1024,"doc":{"description":"The type of the message that was received will be stored in this parameter.","type":"int"}},{"kind":128,"name":"$maxsize","modifiers":0,"doc":{"description":"The maximum size of message to be accepted is specified by the maxsize; if the message in the queue is larger than this size the function will fail (unless you set flags as described below).","type":"int"}},{"kind":128,"name":"$message","modifiers":1024,"doc":{"description":"The received message will be stored in message, unless there were errors receiving the message.","type":"mixed"}},{"kind":128,"name":"$unserialize","modifiers":0,"value":"true","doc":{"description":"If set to TRUE, the message is treated as though it was serialized using the same mechanism as the session module. The message will be unserialized and then returned to your script. This allows you to easily receive arrays or complex object structures from other PHP scripts, or if you are using the WDDX serializer, from any WDDX compatible source. If unserialize is FALSE, the message will be returned as a binary-safe string.","type":"bool"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"The optional flags allows you to pass flags to the low-level msgrcv system call. It defaults to 0, but you may specify one or more of the following values (by adding or ORing them together). Flag values for msg_receive MSG_IPC_NOWAIT If there are no messages of the desiredmsgtype, return immediately and do not wait. The function will fail and return an integer value corresponding to MSG_ENOMSG. MSG_EXCEPT Using this flag in combination with a desiredmsgtype greater than 0 will cause the function to receive the first message that is not equal to desiredmsgtype. MSG_NOERROR If the message is longer than maxsize, setting this flag will truncate the message to maxsize and will not signal an error.","type":"int"}},{"kind":128,"name":"$errorcode","modifiers":1024,"doc":{"description":"If the function fails, the optional errorcode will be set to the value of the system errno variable.","type":"int"}}],"doc":{"description":"msg_receive() will receive the first message from the specified queue of the type specified by desiredmsgtype.","type":"bool"}},{"kind":64,"name":"base_convert","modifiers":0,"children":[{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"The number to convert. Any invalid characters in number are silently ignored.","type":"string"}},{"kind":128,"name":"$frombase","modifiers":0,"doc":{"description":"The base number is in","type":"int"}},{"kind":128,"name":"$tobase","modifiers":0,"doc":{"description":"The base to convert number to","type":"int"}}],"doc":{"description":"Returns a string containing number represented in base tobase. The base in which number is given is specified in frombase. Both frombase and tobase have to be between 2 and 36, inclusive. Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35. The case of the letters doesn't matter, i.e. number is interpreted case-insensitively.","type":"string"}},{"kind":64,"name":"str_ireplace","modifiers":0,"children":[{"kind":128,"name":"$search","modifiers":0,"doc":{"description":"The value being searched for, otherwise known as the needle. An array may be used to designate multiple needles.","type":"mixed"}},{"kind":128,"name":"$replace","modifiers":0,"doc":{"description":"The replacement value that replaces found search values. An array may be used to designate multiple replacements.","type":"mixed"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The string or array being searched and replaced on, otherwise known as the haystack. If subject is an array, then the search and replace is performed with every entry of subject, and the return value is an array as well.","type":"mixed"}},{"kind":128,"name":"$count","modifiers":1024,"doc":{"description":"If passed, this will be set to the number of replacements performed.","type":"int"}}],"doc":{"description":"This function returns a string or an array with all occurrences of search in subject (ignoring case) replaced with the given replace value. If you don't need fancy replacing rules, you should generally use this function instead of preg_replace() with the i modifier.","type":"mixed"}},{"kind":64,"name":"ibase_execute","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"An InterBase query prepared by ibase_prepare().","type":"resource"}},{"kind":128,"name":"$bind_arg","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Execute a query prepared by ibase_prepare().","type":"resource"}},{"kind":64,"name":"gmp_com","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Returns the one's complement of a.","type":"GMP"}},{"kind":64,"name":"oci_free_descriptor","modifiers":0,"children":[{"kind":128,"name":"$descriptor","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Frees a descriptor allocated by oci_new_descriptor().","type":"bool"}},{"kind":64,"name":"imap_bodystruct","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msg_number","modifiers":0,"doc":{"description":"The message number","type":"int"}},{"kind":128,"name":"$section","modifiers":0,"doc":{"description":"The body section to read","type":"string"}}],"doc":{"description":"Read the structure of a specified body section of a specific message.","type":"object"}},{"kind":64,"name":"mysqli_fetch_lengths","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}}],"doc":{"description":"The mysqli_fetch_lengths() function returns an array containing the lengths of every column of the current row within the result set.","type":"array"}},{"kind":64,"name":"timezone_offset_get","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTimeZone object returned by timezone_open()","type":"DateTimeZone"}},{"kind":128,"name":"$datetime","modifiers":0,"doc":{"description":"DateTime that contains the date/time to compute the offset from.","type":"DateTime"}}],"doc":{"description":"This function returns the offset to GMT for the date/time specified in the datetime parameter. The GMT offset is calculated with the timezone information contained in the DateTimeZone object being used.","type":"int"}},{"kind":64,"name":"get_cfg_var","modifiers":0,"children":[{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"The configuration option name.","type":"string"}}],"doc":{"description":"Gets the value of a PHP configuration option.","type":"string"}},{"kind":64,"name":"memory_get_usage","modifiers":0,"children":[{"kind":128,"name":"$real_usage","modifiers":0,"value":"false","doc":{"description":"Set this to TRUE to get total memory allocated from system, including unused pages. If not set or FALSE only the used memory is reported.","type":"bool"}}],"doc":{"description":"Returns the amount of memory, in bytes, that's currently being allocated to your PHP script.","type":"int"}},{"kind":64,"name":"ldap_t61_to_8859","modifiers":0,"description":"","children":[{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"apache_reset_timeout","modifiers":0,"children":[],"doc":{"description":"apache_reset_timeout() resets the Apache write timer, which defaults to 300 seconds. With set_time_limit(0); ignore_user_abort(true) and periodic apache_reset_timeout() calls, Apache can theoretically run forever.","type":"bool"}},{"kind":64,"name":"ibase_gen_id","modifiers":0,"description":"","children":[{"kind":128,"name":"$generator","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$increment","modifiers":0,"description":"","value":"1","doc":{"type":"int"}},{"kind":128,"name":"$link_identifier","modifiers":0,"description":"","value":"NULL","doc":{"type":"resource"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"collator_get_error_code","modifiers":0,"description":"","children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}}],"doc":{"type":"int"}},{"kind":64,"name":"imagestringup","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$font","modifiers":0,"doc":{"description":"Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().","type":"int"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"x-coordinate of the bottom left corner.","type":"int"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"y-coordinate of the bottom left corner.","type":"int"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string to be written.","type":"string"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"Draws a string vertically at the given coordinates.","type":"bool"}},{"kind":64,"name":"intlcal_set_repeated_wall_time_option","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$wallTimeOption","modifiers":0,"doc":{"description":"One of the constants IntlCalendar::WALLTIME_FIRST or IntlCalendar::WALLTIME_LAST.","type":"int"}}],"doc":{"description":"Sets the current strategy for dealing with wall times that are repeated whenever the clock is set back during dailight saving time end transitions. The default value is IntlCalendar::WALLTIME_LAST (take the post-DST instant). The other possible value is IntlCalendar::WALLTIME_FIRST (take the instant that occurs during DST).","type":"bool"}},{"kind":64,"name":"msql_error","modifiers":0,"children":[],"doc":{"description":"msql_error() returns the last issued error by the mSQL server. Note that only the last error message is accessible with msql_error().","type":"string"}},{"kind":64,"name":"ftp_delete","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The file to delete.","type":"string"}}],"doc":{"description":"ftp_delete() deletes the file specified by path from the FTP server.","type":"bool"}},{"kind":64,"name":"openssl_pbkdf2","modifiers":0,"description":"","children":[{"kind":128,"name":"$password","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$salt","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$key_length","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$iterations","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$digest_algorithm","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"get_class_vars","modifiers":0,"children":[{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"The class name","type":"string"}}],"doc":{"description":"Get the default properties of the given class.","type":"array"}},{"kind":64,"name":"fbsql_field_flags","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result pointer returned by fbsql_list_fields().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical offset of the field. The field index starts at 0.","type":"int"}}],"doc":{"description":"Gets the flags associated with the specified field in a result.","type":"string"}},{"kind":64,"name":"str_pad","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$pad_length","modifiers":0,"doc":{"description":"If the value of pad_length is negative, less than, or equal to the length of the input string, no padding takes place, and input will be returned.","type":"int"}},{"kind":128,"name":"$pad_string","modifiers":0,"value":"\"","doc":{"description":"Note: The pad_string may be truncated if the required number of padding characters can't be evenly divided by the pad_string's length.","type":"string"}},{"kind":128,"name":"$pad_type","modifiers":0,"value":"STR_PAD_RIGHT","doc":{"description":"Optional argument pad_type can be STR_PAD_RIGHT, STR_PAD_LEFT, or STR_PAD_BOTH. If pad_type is not specified it is assumed to be STR_PAD_RIGHT.","type":"int"}}],"doc":{"description":"This functions returns the input string padded on the left, the right, or both sides to the specified padding length. If the optional argument pad_string is not supplied, the input is padded with spaces, otherwise it is padded with characters from pad_string up to the limit.","type":"string"}},{"kind":64,"name":"intlcal_set_time_zone","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$timeZone","modifiers":0,"doc":{"description":"The new timezone to be used by this calendar. It can be specified in the following ways: NULL, in which case the default timezone will be used, as specified in the ini setting date.timezone or through the function date_default_timezone_set() and as returned by date_default_timezone_get(). An IntlTimeZone, which will be used directly. A DateTimeZone. Its identifier will be extracted and an ICU timezone object will be created; the timezone will be backed by ICUʼs database, not PHPʼs. A string, which should be a valid ICU timezone identifier. See IntlTimeZone::createTimeZoneIDEnumeration(). Raw offsets such as \"GMT+08:30\" are also accepted.","type":"mixed"}}],"doc":{"description":"Defines a new timezone for this calendar. The time represented by the object is preserved to the detriment of the field values.","type":"bool"}},{"kind":64,"name":"hash_update","modifiers":0,"description":"","children":[{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"Hashing context returned by hash_init().","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"Message to be included in the hash digest.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"gmp_jacobi","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$p","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number. Should be odd and must be positive.","type":"GMP"}}],"doc":{"description":"Computes » Jacobi symbol of a and p. p should be odd and must be positive.","type":"int"}},{"kind":64,"name":"error_reporting","modifiers":0,"children":[{"kind":128,"name":"$level","modifiers":0,"doc":{"description":"The new error_reporting level. It takes on either a bitmask, or named constants. Using named constants is strongly encouraged to ensure compatibility for future versions. As error levels are added, the range of integers increases, so older integer-based error levels will not always behave as expected. The available error level constants and the actual meanings of these error levels are described in the predefined constants.","type":"int"}}],"doc":{"description":"The error_reporting() function sets the error_reporting directive at runtime. PHP has many levels of errors, using this function sets that level for the duration (runtime) of your script. If the optional level is not set, error_reporting() will just return the current error reporting level.","type":"int"}},{"kind":64,"name":"pg_fetch_object","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$row","modifiers":0,"doc":{"description":"Row number in result to fetch. Rows are numbered from 0 upwards. If omitted or NULL, the next row is fetched.","type":"int"}},{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"The name of the class to instantiate, set the properties of and return. If not specified, a stdClass object is returned.","type":"string"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"An optional array of parameters to pass to the constructor for class_name objects.","type":"array"}}],"doc":{"description":"pg_fetch_object() returns an object with properties that correspond to the fetched row's field names. It can optionally instantiate an object of a specific class, and pass parameters to that class's constructor.","type":"object"}},{"kind":64,"name":"mssql_fetch_batch","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"ftp_close","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}}],"doc":{"description":"ftp_close() closes the given link identifier and releases the resource.","type":"bool"}},{"kind":64,"name":"imap_fetchmime","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msg_number","modifiers":0,"doc":{"description":"The message number","type":"int"}},{"kind":128,"name":"$section","modifiers":0,"doc":{"description":"The part number. It is a string of integers delimited by period which index into a body part list as per the IMAP4 specification","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"A bitmask with one or more of the following: FT_UID - The msg_number is a UID FT_PEEK - Do not set the \\Seen flag if not already set FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.","type":"int"}}],"doc":{"description":"Fetch the MIME headers of a particular section of the body of the specified messages.","type":"string"}},{"kind":64,"name":"inet_pton","modifiers":0,"children":[{"kind":128,"name":"$address","modifiers":0,"doc":{"description":"A human readable IPv4 or IPv6 address.","type":"string"}}],"doc":{"description":"This function converts a human readable IPv4 or IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate 32bit or 128bit binary structure.","type":"string"}},{"kind":64,"name":"msql_field_seek","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 1.","type":"int"}}],"doc":{"description":"Seeks to the specified field offset. If the next call to msql_fetch_field() won't include a field offset, this field would be returned.","type":"bool"}},{"kind":64,"name":"bzerror","modifiers":0,"children":[{"kind":128,"name":"$bz","modifiers":0,"doc":{"description":"The file pointer. It must be valid and must point to a file successfully opened by bzopen().","type":"resource"}}],"doc":{"description":"Returns the error number and error string of any bzip2 error returned by the given file pointer.","type":"array"}},{"kind":64,"name":"fbsql_fetch_row","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}}],"doc":{"description":"fbsql_fetch_row() fetches one row of data from the result associated with the specified result identifier.","type":"array"}},{"kind":64,"name":"msql_result","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}},{"kind":128,"name":"$row","modifiers":0,"doc":{"description":"The row offset.","type":"int"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Can be the field's offset, or the field's name, or the field's table dot field's name (tablename.fieldname.). If the column name has been aliased ('select foo as bar from ...'), use the alias instead of the column name. Note: Specifying a numeric field offset is much quicker than specifying a fieldname or tablename.fieldname.","type":"mixed"}}],"doc":{"description":"msql_result() returns the contents of one cell from a mSQL result set.","type":"string"}},{"kind":64,"name":"enchant_broker_free_dict","modifiers":0,"children":[{"kind":128,"name":"$dict","modifiers":0,"doc":{"description":"Dictionary resource.","type":"resource"}}],"doc":{"description":"Free a dictionary resource.","type":"bool"}},{"kind":64,"name":"getrusage","modifiers":0,"children":[{"kind":128,"name":"$who","modifiers":0,"value":"0","doc":{"description":"If who is 1, getrusage will be called with RUSAGE_CHILDREN.","type":"int"}}],"doc":{"description":"This is an interface to getrusage(2). It gets data returned from the system call.","type":"array"}},{"kind":64,"name":"ctype_alpha","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The tested string.","type":"string"}}],"doc":{"description":"Checks if all of the characters in the provided string, text, are alphabetic. In the standard C locale letters are just [A-Za-z] and ctype_alpha() is equivalent to (ctype_upper($text) || ctype_lower($text)) if $text is just a single character, but other languages have letters that are considered neither upper nor lower case.","type":"bool"}},{"kind":64,"name":"mcrypt_enc_get_block_size","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"setcookie","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the cookie.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"value":"\"\"","doc":{"description":"The value of the cookie. This value is stored on the clients computer; do not store sensitive information. Assuming the name is 'cookiename', this value is retrieved through $_COOKIE['cookiename']","type":"string"}},{"kind":128,"name":"$expire","modifiers":0,"value":"0","doc":{"description":"The time the cookie expires. This is a Unix timestamp so is in number of seconds since the epoch. In other words, you'll most likely set this with the time() function plus the number of seconds before you want it to expire. Or you might use mktime(). time()+60*60*24*30 will set the cookie to expire in 30 days. If set to 0, or omitted, the cookie will expire at the end of the session (when the browser closes). Note: You may notice the expire parameter takes on a Unix timestamp, as opposed to the date format Wdy, DD-Mon-YYYY HH:MM:SS GMT, this is because PHP does this conversion internally.","type":"int"}},{"kind":128,"name":"$path","modifiers":0,"value":"\"\"","doc":{"description":"The path on the server in which the cookie will be available on. If set to '/', the cookie will be available within the entire domain. If set to '/foo/', the cookie will only be available within the /foo/ directory and all sub-directories such as /foo/bar/ of domain. The default value is the current directory that the cookie is being set in.","type":"string"}},{"kind":128,"name":"$domain","modifiers":0,"value":"\"\"","doc":{"description":"The (sub)domain that the cookie is available to. Setting this to a subdomain (such as 'www.example.com') will make the cookie available to that subdomain and all other sub-domains of it (i.e. w2.www.example.com). To make the cookie available to the whole domain (including all subdomains of it), simply set the value to the domain name ('example.com', in this case). Older browsers still implementing the deprecated » RFC 2109 may require a leading . to match all subdomains.","type":"string"}},{"kind":128,"name":"$secure","modifiers":0,"value":"false","doc":{"description":"Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client. When set to TRUE, the cookie will only be set if a secure connection exists. On the server-side, it's on the programmer to send this kind of cookie only on secure connection (e.g. with respect to $_SERVER[\"HTTPS\"]).","type":"bool"}},{"kind":128,"name":"$httponly","modifiers":0,"value":"false","doc":{"description":"When TRUE the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. It has been suggested that this setting can effectively help to reduce identity theft through XSS attacks (although it is not supported by all browsers), but that claim is often disputed. Added in PHP 5.2.0. TRUE or FALSE","type":"bool"}}],"doc":{"description":"setcookie() defines a cookie to be sent along with the rest of the HTTP headers. Like other headers, cookies must be sent before any output from your script (this is a protocol restriction). This requires that you place calls to this function prior to any output, including <html> and <head> tags as well as any whitespace.","type":"bool"}},{"kind":64,"name":"pg_get_result","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"pg_get_result() gets the result resource from an asynchronous query executed by pg_send_query(), pg_send_query_params() or pg_send_execute().","type":"resource"}},{"kind":64,"name":"imagefill","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"x-coordinate of start point.","type":"int"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"y-coordinate of start point.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"The fill color. A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given color in the image.","type":"bool"}},{"kind":64,"name":"imagewebp","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$to","modifiers":0,"doc":{"description":"The path or an open stream resource (which is automatically being closed after this function returns) to save the file to. If not set or NULL, the raw image stream will be outputted directly.","type":"mixed"}},{"kind":128,"name":"$quality","modifiers":0,"value":"80","doc":{"description":"quality ranges from 0 (worst quality, smaller file) to 100 (best quality, biggest file).","type":"int"}}],"doc":{"description":"Outputs or save an WebP version of the given image.","type":"bool"}},{"kind":64,"name":"sleep","modifiers":0,"description":"","children":[{"kind":128,"name":"$seconds","modifiers":0,"doc":{"description":"Halt time in seconds.","type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"dl","modifiers":0,"children":[{"kind":128,"name":"$library","modifiers":0,"doc":{"description":"This parameter is only the filename of the extension to load which also depends on your platform. For example, the sockets extension (if compiled as a shared module, not the default!) would be called sockets.so on Unix platforms whereas it is called php_sockets.dll on the Windows platform. The directory where the extension is loaded from depends on your platform: Windows - If not explicitly set in the php.ini, the extension is loaded from C:\\php5\\ by default. Unix - If not explicitly set in the php.ini, the default extension directory depends on whether PHP has been built with --enable-debug or not whether PHP has been built with (experimental) ZTS (Zend Thread Safety) support or not the current internal ZEND_MODULE_API_NO (Zend internal module API number, which is basically the date on which a major module API change happened, e.g. 20010901) Taking into account the above, the directory then defaults to <install-dir>/lib/php/extensions/ <debug-or-not>-<zts-or-not>-ZEND_MODULE_API_NO, e.g. /usr/local/php/lib/php/extensions/debug-non-zts-20010901 or /usr/local/php/lib/php/extensions/no-debug-zts-20010901.","type":"string"}}],"doc":{"description":"Loads the PHP extension given by the parameter library.","type":"bool"}},{"kind":64,"name":"com_event_sink","modifiers":0,"children":[{"kind":128,"name":"$comobject","modifiers":0,"description":"","doc":{"type":"variant"}},{"kind":128,"name":"$sinkobject","modifiers":0,"doc":{"description":"sinkobject should be an instance of a class with methods named after those of the desired dispinterface; you may use com_print_typeinfo() to help generate a template class for this purpose.","type":"object"}},{"kind":128,"name":"$sinkinterface","modifiers":0,"doc":{"description":"PHP will attempt to use the default dispinterface type specified by the typelibrary associated with comobject, but you may override this choice by setting sinkinterface to the name of the dispinterface that you want to use.","type":"mixed"}}],"doc":{"description":"Instructs COM to sink events generated by comobject into the PHP object sinkobject.","type":"bool"}},{"kind":64,"name":"date_create_immutable","modifiers":0,"children":[{"kind":128,"name":"$time","modifiers":0,"description":"","value":"\"now\"","doc":{"type":"string"}},{"kind":128,"name":"$timezone","modifiers":0,"description":"","value":"NULL","doc":{"type":"DateTimeZone"}}],"doc":{"description":"Like DateTime::__construct() but works with DateTimeImmutable.","type":"DateTimeImmutable"}},{"kind":64,"name":"phpinfo","modifiers":0,"children":[{"kind":128,"name":"$what","modifiers":0,"value":"INFO_ALL","doc":{"description":"The output may be customized by passing one or more of the following constants bitwise values summed together in the optional what parameter. One can also combine the respective constants or bitwise values together with the or operator. phpinfo() options Name (constant) Value Description INFO_GENERAL 1 The configuration line, php.ini location, build date, Web Server, System and more. INFO_CREDITS 2 PHP Credits. See also phpcredits(). INFO_CONFIGURATION 4 Current Local and Master values for PHP directives. See also ini_get(). INFO_MODULES 8 Loaded modules and their respective settings. See also get_loaded_extensions(). INFO_ENVIRONMENT 16 Environment Variable information that's also available in $_ENV. INFO_VARIABLES 32 Shows all predefined variables from EGPCS (Environment, GET, POST, Cookie, Server). INFO_LICENSE 64 PHP License information. See also the » license FAQ. INFO_ALL -1 Shows all of the above.","type":"int"}}],"doc":{"description":"Outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License.","type":"bool"}},{"kind":64,"name":"openssl_csr_export_to_file","modifiers":0,"children":[{"kind":128,"name":"$csr","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$outfilename","modifiers":0,"doc":{"description":"Path to the output file.","type":"string"}},{"kind":128,"name":"$notext","modifiers":0,"value":"true","doc":{"description":"The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. The default value of notext is TRUE.","type":"bool"}}],"doc":{"description":"openssl_csr_export_to_file() takes the Certificate Signing Request represented by csr and saves it as ascii-armoured text into the file named by outfilename.","type":"bool"}},{"kind":64,"name":"tidy_get_output","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Gets a string with the repaired html.","type":"string"}},{"kind":64,"name":"enchant_dict_check","modifiers":0,"children":[{"kind":128,"name":"$dict","modifiers":0,"doc":{"description":"Dictionary resource","type":"resource"}},{"kind":128,"name":"$word","modifiers":0,"doc":{"description":"The word to check","type":"string"}}],"doc":{"description":"If the word is correctly spelled return TRUE, otherwise return FALSE","type":"bool"}},{"kind":64,"name":"mysqli_sqlstate","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns a string containing the SQLSTATE error code for the last error. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see » http://dev.mysql.com/doc/mysql/en/error-handling.html.","type":"string"}},{"kind":64,"name":"closedir","modifiers":0,"children":[{"kind":128,"name":"$dir_handle","modifiers":0,"doc":{"description":"The directory handle resource previously opened with opendir(). If the directory handle is not specified, the last link opened by opendir() is assumed.","type":"resource"}}],"doc":{"description":"Closes the directory stream indicated by dir_handle. The stream must have previously been opened by opendir().","type":"void"}},{"kind":64,"name":"collator_sort","modifiers":0,"children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}},{"kind":128,"name":"$arr","modifiers":1024,"doc":{"description":"Array of strings to sort.","type":"array"}},{"kind":128,"name":"$sort_flag","modifiers":0,"doc":{"description":"Optional sorting type, one of the following: Collator::SORT_REGULAR - compare items normally (don't change types) Collator::SORT_NUMERIC - compare items numerically Collator::SORT_STRING - compare items as strings Default sorting type is Collator::SORT_REGULAR. It is also used if an invalid sort_flag value has been specified.","type":"int"}}],"doc":{"description":"This function sorts an array according to current locale rules.","type":"bool"}},{"kind":64,"name":"imap_getmailboxes","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$ref","modifiers":0,"doc":{"description":"ref should normally be just the server specification as described in imap_open()","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. '*' means to return all mailboxes. If you pass pattern as '*', you will get a list of the entire mailbox hierarchy. '%' means to return the current level only. '%' as the pattern parameter will return only the top level mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox in the ~/mail directory, but none in subfolders of that directory.","type":"string"}}],"doc":{"description":"Gets information on the mailboxes.","type":"array"}},{"kind":64,"name":"odbc_num_rows","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier returned by odbc_exec().","type":"resource"}}],"doc":{"description":"Gets the number of rows in a result. For INSERT, UPDATE and DELETE statements odbc_num_rows() returns the number of rows affected. For a SELECT clause this can be the number of rows available.","type":"int"}},{"kind":64,"name":"xml_set_start_namespace_decl_handler","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser.","type":"resource"}},{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser. The function named by handler must accept three parameters, and should return an integer value. If the value returned from the handler is FALSE (which it will be if no value is returned), the XML parser will stop parsing and xml_get_error_code() will return XML_ERROR_EXTERNAL_ENTITY_HANDLING. handler ( resource $parser , string $prefix , string $uri ) parser The first parameter, parser, is a reference to the XML parser calling the handler. prefix The prefix is a string used to reference the namespace within an XML object. uri Uniform Resource Identifier (URI) of namespace. If a handler function is set to an empty string, or FALSE, the handler in question is disabled. Note: Instead of a function name, an array containing an object reference and a method name can also be supplied.","type":"callable"}}],"doc":{"description":"Set a handler to be called when a namespace is declared. Namespace declarations occur inside start tags. But the namespace declaration start handler is called before the start tag handler for each namespace declared in that start tag.","type":"bool"}},{"kind":64,"name":"getopt","modifiers":0,"children":[{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Each character in this string will be used as option characters and matched against options passed to the script starting with a single hyphen (-). For example, an option string \"x\" recognizes an option -x. Only a-z, A-Z and 0-9 are allowed.","type":"string"}},{"kind":128,"name":"$longopts","modifiers":0,"doc":{"description":"An array of options. Each element in this array will be used as option strings and matched against options passed to the script starting with two hyphens (--). For example, an longopts element \"opt\" recognizes an option --opt.","type":"array"}},{"kind":128,"name":"$optind","modifiers":1024,"doc":{"description":"If the optind parameter is present, then the index where argument parsing stopped will be written to this variable.","type":"int"}}],"doc":{"description":"Parses options passed to the script.","type":"array"}},{"kind":64,"name":"datefmt_get_datetype","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource.","type":"IntlDateFormatter"}}],"doc":{"description":"Returns date type used by the formatter.","type":"int"}},{"kind":64,"name":"pg_select","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"Name of the table from which to select rows.","type":"string"}},{"kind":128,"name":"$assoc_array","modifiers":0,"doc":{"description":"An array whose keys are field names in the table table_name, and whose values are the conditions that a row must meet to be retrieved.","type":"array"}},{"kind":128,"name":"$options","modifiers":0,"value":"PGSQL_DML_EXEC","doc":{"description":"Any number of PGSQL_CONV_FORCE_NULL, PGSQL_DML_NO_CONV, PGSQL_DML_ESCAPE, PGSQL_DML_EXEC, PGSQL_DML_ASYNC or PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the options then query string is returned. When PGSQL_DML_NO_CONV or PGSQL_DML_ESCAPE is set, it does not call pg_convert() internally.","type":"int"}}],"doc":{"description":"pg_select() selects records specified by assoc_array which has field=>value. For a successful query, it returns an array containing all records and fields that match the condition specified by assoc_array.","type":"mixed"}},{"kind":64,"name":"mcrypt_module_is_block_algorithm","modifiers":0,"description":"","children":[{"kind":128,"name":"$algorithm","modifiers":0,"doc":{"description":"The algorithm to check.","type":"string"}},{"kind":128,"name":"$lib_dir","modifiers":0,"doc":{"description":"The optional lib_dir parameter can contain the location where the algorithm module is on the system.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"pg_lo_seek","modifiers":0,"children":[{"kind":128,"name":"$large_object","modifiers":0,"doc":{"description":"PostgreSQL large object (LOB) resource, returned by pg_lo_open().","type":"resource"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The number of bytes to seek.","type":"int"}},{"kind":128,"name":"$whence","modifiers":0,"value":"PGSQL_SEEK_CUR","doc":{"description":"One of the constants PGSQL_SEEK_SET (seek from object start), PGSQL_SEEK_CUR (seek from current position) or PGSQL_SEEK_END (seek from object end) .","type":"int"}}],"doc":{"description":"pg_lo_seek() seeks a position within a large object resource.","type":"bool"}},{"kind":64,"name":"imagettftext","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2).","type":"float"}},{"kind":128,"name":"$angle","modifiers":0,"doc":{"description":"The angle in degrees, with 0 degrees being left-to-right reading text. Higher values represent a counter-clockwise rotation. For example, a value of 90 would result in bottom-to-top reading text.","type":"float"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"The coordinates given by x and y will define the basepoint of the first character (roughly the lower-left corner of the character). This is different from the imagestring(), where x and y define the upper-left corner of the first character. For example, \"top left\" is 0, 0.","type":"int"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"The y-ordinate. This sets the position of the fonts baseline, not the very bottom of the character.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"The color index. Using the negative of a color index has the effect of turning off antialiasing. See imagecolorallocate().","type":"int"}},{"kind":128,"name":"$fontfile","modifiers":0,"doc":{"description":"The path to the TrueType font you wish to use. Depending on which version of the GD library PHP is using, when fontfile does not begin with a leading / then .ttf will be appended to the filename and the library will attempt to search for that filename along a library-defined font path. When using versions of the GD library lower than 2.0.18, a space character, rather than a semicolon, was used as the 'path separator' for different font files. Unintentional use of this feature will result in the warning message: Warning: Could not find/open font. For these affected versions, the only solution is moving the font to a path which does not contain spaces. In many cases where a font resides in the same directory as the script using it the following trick will alleviate any include problems. <?php// Set the enviroment variable for GDputenv('GDFONTPATH=' . realpath('.'));// Name the font to be used (note the lack of the .ttf extension)$font = 'SomeFont';?>","type":"string"}},{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The text string in UTF-8 encoding. May include decimal numeric character references (of the form: &#8364;) to access characters in a font beyond position 127. The hexadecimal format (like &#xA9;) is supported. Strings in UTF-8 encoding can be passed directly. Named entities, such as &copy;, are not supported. Consider using html_entity_decode() to decode these named entities into UTF-8 strings. If a character is used in the string which is not supported by the font, a hollow rectangle will replace the character.","type":"string"}}],"doc":{"description":"Writes the given text into the image using TrueType fonts.","type":"array"}},{"kind":64,"name":"pclose","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer must be valid, and must have been returned by a successful call to popen().","type":"resource"}}],"doc":{"description":"Closes a file pointer to a pipe opened by popen().","type":"int"}},{"kind":64,"name":"memory_get_peak_usage","modifiers":0,"children":[{"kind":128,"name":"$real_usage","modifiers":0,"value":"false","doc":{"description":"Set this to TRUE to get the real size of memory allocated from system. If not set or FALSE only the memory used by emalloc() is reported.","type":"bool"}}],"doc":{"description":"Returns the peak of memory, in bytes, that's been allocated to your PHP script.","type":"int"}},{"kind":64,"name":"pathinfo","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The path to be parsed.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"PATHINFO_DIRNAME","doc":{"description":"If present, specifies a specific element to be returned; one of PATHINFO_DIRNAME, PATHINFO_BASENAME, PATHINFO_EXTENSION or PATHINFO_FILENAME. If options is not specified, returns all available elements.","type":"int"}}],"doc":{"description":"pathinfo() returns information about path: either an associative array or a string, depending on options.","type":"mixed"}},{"kind":64,"name":"sybase_min_server_severity","modifiers":0,"description":"","children":[{"kind":128,"name":"$severity","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"void"}},{"kind":64,"name":"mktime","modifiers":0,"children":[{"kind":128,"name":"$hour","modifiers":0,"value":"date(\"H\")","doc":{"description":"The number of the hour relative to the start of the day determined by month, day and year. Negative values reference the hour before midnight of the day in question. Values greater than 23 reference the appropriate hour in the following day(s).","type":"int"}},{"kind":128,"name":"$minute","modifiers":0,"value":"date(\"i\")","doc":{"description":"The number of the minute relative to the start of the hour. Negative values reference the minute in the previous hour. Values greater than 59 reference the appropriate minute in the following hour(s).","type":"int"}},{"kind":128,"name":"$second","modifiers":0,"value":"date(\"s\")","doc":{"description":"The number of seconds relative to the start of the minute. Negative values reference the second in the previous minute. Values greater than 59 reference the appropriate second in the following minute(s).","type":"int"}},{"kind":128,"name":"$month","modifiers":0,"value":"date(\"n\")","doc":{"description":"The number of the month relative to the end of the previous year. Values 1 to 12 reference the normal calendar months of the year in question. Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc. Values greater than 12 reference the appropriate month in the following year(s).","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"value":"date(\"j\")","doc":{"description":"The number of the day relative to the end of the previous month. Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month. Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc. Values greater than the number of days in the relevant month reference the appropriate day in the following month(s).","type":"int"}},{"kind":128,"name":"$year","modifiers":0,"value":"date(\"Y\")","doc":{"description":"The number of the year, may be a two or four digit value, with values between 0-69 mapping to 2000-2069 and 70-100 to 1970-2000. On systems where time_t is a 32bit signed integer, as most common today, the valid range for year is somewhere between 1901 and 2038. However, before PHP 5.1.0 this range was limited from 1970 to 2038 on some systems (e.g. Windows).","type":"int"}},{"kind":128,"name":"$is_dst","modifiers":0,"value":"-1","doc":{"description":"This parameter can be set to 1 if the time is during daylight savings time (DST), 0 if it is not, or -1 (the default) if it is unknown whether the time is within daylight savings time or not. If it's unknown, PHP tries to figure it out itself. This can cause unexpected (but not incorrect) results. Some times are invalid if DST is enabled on the system PHP is running on or is_dst is set to 1. If DST is enabled in e.g. 2:00, all times between 2:00 and 3:00 are invalid and mktime() returns an undefined (usually negative) value. Some systems (e.g. Solaris 8) enable DST at midnight so time 0:30 of the day when DST is enabled is evaluated as 23:30 of the previous day. Note: As of PHP 5.1.0, this parameter became deprecated. As a result, the new timezone handling features should be used instead. Note: This parameter has been removed in PHP 7.0.0.","type":"int"}}],"doc":{"description":"Returns the Unix timestamp corresponding to the arguments given. This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.","type":"int"}},{"kind":64,"name":"mb_strrpos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string being checked, for the last occurrence of needle","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to find in haystack.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"May be specified to begin searching an arbitrary number of characters into the string. Negative values will stop searching at an arbitrary point prior to the end of the string.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Performs a multibyte safe strrpos() operation based on the number of characters. needle position is counted from the beginning of haystack. First character's position is 0. Second character position is 1.","type":"int"}},{"kind":64,"name":"dns_get_record","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"doc":{"description":"hostname should be a valid DNS hostname such as \"www.example.com\". Reverse lookups can be generated using in-addr.arpa notation, but gethostbyaddr() is more suitable for the majority of reverse lookups. Note: Per DNS standards, email addresses are given in user.host format (for example: hostmaster.example.com as opposed to hostmaster@example.com), be sure to check this value and modify if necessary before using it with a functions such as mail().","type":"string"}},{"kind":128,"name":"$type","modifiers":0,"value":"DNS_ANY","doc":{"description":"By default, dns_get_record() will search for any resource records associated with hostname. To limit the query, specify the optional type parameter. May be any one of the following: DNS_A, DNS_CNAME, DNS_HINFO, DNS_CAA, DNS_MX, DNS_NS, DNS_PTR, DNS_SOA, DNS_TXT, DNS_AAAA, DNS_SRV, DNS_NAPTR, DNS_A6, DNS_ALL or DNS_ANY. Note: Because of eccentricities in the performance of libresolv between platforms, DNS_ANY will not always return every record, the slower DNS_ALL will collect all records more reliably.","type":"int"}},{"kind":128,"name":"$authns","modifiers":1024,"doc":{"description":"Passed by reference and, if given, will be populated with Resource Records for the Authoritative Name Servers.","type":"array"}},{"kind":128,"name":"$addtl","modifiers":1024,"doc":{"description":"Passed by reference and, if given, will be populated with any Additional Records.","type":"array"}},{"kind":128,"name":"$raw","modifiers":0,"value":"false","doc":{"description":"In case of raw mode, we query only the requested type instead of looping type by type before going with the additional info stuff.","type":"bool"}}],"doc":{"description":"Fetch DNS Resource Records associated with the given hostname.","type":"array"}},{"kind":64,"name":"oci_fetch_array","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI8 statement identifier created by oci_parse() and executed by oci_execute(), or a REF CURSOR statement identifier. Can also be a statement identifier returned by oci_get_implicit_resultset().","type":"resource"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"An optional second parameter can be any combination of the following constants: oci_fetch_array() Modes Constant Description OCI_BOTH Returns an array with both associative and numeric indices. This is the same as OCI_ASSOC + OCI_NUM and is the default behavior. OCI_ASSOC Returns an associative array. OCI_NUM Returns a numeric array. OCI_RETURN_NULLS Creates elements for NULL fields. The element values will be a PHP NULL. OCI_RETURN_LOBS Returns the contents of LOBs instead of the LOB descriptors. The default mode is OCI_BOTH. Use the addition operator \"+\" to specify more than one mode at a time.","type":"int"}}],"doc":{"description":"Returns an array containing the next result-set row of a query. Each array entry corresponds to a column of the row. This function is typically called in a loop until it returns FALSE, indicating no more rows exist.","type":"array"}},{"kind":64,"name":"cyrus_bind","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"The connection handle.","type":"resource"}},{"kind":128,"name":"$callbacks","modifiers":0,"doc":{"description":"An array of callbacks.","type":"array"}}],"doc":{"description":"Binds callbacks to a Cyrus IMAP connection.","type":"bool"}},{"kind":64,"name":"mb_ereg_search_getregs","modifiers":0,"description":"","children":[],"doc":{"type":"array"}},{"kind":64,"name":"gmp_gcd","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Calculate greatest common divisor of a and b. The result is always positive even if either of, or both, input operands are negative.","type":"GMP"}},{"kind":64,"name":"variant_and","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Performs a bitwise AND operation. Note that this is slightly different from a regular AND operation.","type":"mixed"}},{"kind":64,"name":"simplexml_load_file","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the XML file Note: Libxml 2 unescapes the URI, so if you want to pass e.g. b&c as the URI parameter a, you have to call simplexml_load_file(rawurlencode('http://example.com/?a=' . urlencode('b&c'))). Since PHP 5.1.0 you don't need to do this because PHP will do it for you.","type":"string"}},{"kind":128,"name":"$class_name","modifiers":0,"value":"\"SimpleXMLElement\"","doc":{"description":"You may use this optional parameter so that simplexml_load_file() will return an object of the specified class. That class should extend the SimpleXMLElement class.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Since PHP 5.1.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters.","type":"int"}},{"kind":128,"name":"$ns","modifiers":0,"value":"\"\"","doc":{"description":"Namespace prefix or URI.","type":"string"}},{"kind":128,"name":"$is_prefix","modifiers":0,"value":"false","doc":{"description":"TRUE if ns is a prefix, FALSE if it's a URI; defaults to FALSE.","type":"bool"}}],"doc":{"description":"Convert the well-formed XML document in the given file to an object.","type":"SimpleXMLElement"}},{"kind":64,"name":"com_print_typeinfo","modifiers":0,"children":[{"kind":128,"name":"$comobject","modifiers":0,"doc":{"description":"comobject should be either an instance of a COM object, or be the name of a typelibrary (which will be resolved according to the rules set out in com_load_typelib()).","type":"object"}},{"kind":128,"name":"$dispinterface","modifiers":0,"doc":{"description":"The name of an IDispatch descendant interface that you want to display.","type":"string"}},{"kind":128,"name":"$wantsink","modifiers":0,"value":"false","doc":{"description":"If set to TRUE, the corresponding sink interface will be displayed instead.","type":"bool"}}],"doc":{"description":"The purpose of this function is to help generate a skeleton class for use as an event sink. You may also use it to generate a dump of any COM object, provided that it supports enough of the introspection interfaces, and that you know the name of the interface you want to display.","type":"bool"}},{"kind":64,"name":"stream_notification_callback","modifiers":0,"children":[{"kind":128,"name":"$notification_code","modifiers":0,"doc":{"description":"One of the STREAM_NOTIFY_* notification constants.","type":"int"}},{"kind":128,"name":"$severity","modifiers":0,"doc":{"description":"One of the STREAM_NOTIFY_SEVERITY_* notification constants.","type":"int"}},{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"Passed if a descriptive message is available for the event.","type":"string"}},{"kind":128,"name":"$message_code","modifiers":0,"doc":{"description":"Passed if a descriptive message code is available for the event. The meaning of this value is dependent on the specific wrapper in use.","type":"int"}},{"kind":128,"name":"$bytes_transferred","modifiers":0,"doc":{"description":"If applicable, the bytes_transferred will be populated.","type":"int"}},{"kind":128,"name":"$bytes_max","modifiers":0,"doc":{"description":"If applicable, the bytes_max will be populated.","type":"int"}}],"doc":{"description":"A callable function, used by the notification context parameter, called during an event.","type":"void"}},{"kind":64,"name":"xmlwriter_write_dtd","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The DTD name.","type":"string"}},{"kind":128,"name":"$publicId","modifiers":0,"doc":{"description":"The external subset public identifier.","type":"string"}},{"kind":128,"name":"$systemId","modifiers":0,"doc":{"description":"The external subset system identifier.","type":"string"}},{"kind":128,"name":"$subset","modifiers":0,"doc":{"description":"The content of the DTD.","type":"string"}}],"doc":{"description":"Writes a full DTD.","type":"bool"}},{"kind":64,"name":"gmstrftime","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"See description in strftime().","type":"string"}},{"kind":128,"name":"$timestamp","modifiers":0,"value":"time()","doc":{"description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().","type":"int"}}],"doc":{"description":"Behaves the same as strftime() except that the time returned is Greenwich Mean Time (GMT). For example, when run in Eastern Standard Time (GMT -0500), the first line below prints \"Dec 31 1998 20:00:00\", while the second prints \"Jan 01 1999 01:00:00\".","type":"string"}},{"kind":64,"name":"mysqli_get_server_version","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"The mysqli_get_server_version() function returns the version of the server connected to (represented by the link parameter) as an integer.","type":"int"}},{"kind":64,"name":"wddx_deserialize","modifiers":0,"children":[{"kind":128,"name":"$packet","modifiers":0,"doc":{"description":"A WDDX packet, as a string or stream.","type":"string"}}],"doc":{"description":"Unserializes a WDDX packet.","type":"mixed"}},{"kind":64,"name":"class_alias","modifiers":0,"children":[{"kind":128,"name":"$original","modifiers":0,"doc":{"description":"The original class.","type":"string"}},{"kind":128,"name":"$alias","modifiers":0,"doc":{"description":"The alias name for the class.","type":"string"}},{"kind":128,"name":"$autoload","modifiers":0,"value":"TRUE","doc":{"description":"Whether to autoload if the original class is not found.","type":"bool"}}],"doc":{"description":"Creates an alias named alias based on the user defined class original. The aliased class is exactly the same as the original class.","type":"bool"}},{"kind":64,"name":"mt_srand","modifiers":0,"children":[{"kind":128,"name":"$seed","modifiers":0,"doc":{"description":"An arbitrary integer seed value.","type":"int"}},{"kind":128,"name":"$mode","modifiers":0,"value":"MT_RAND_MT19937","doc":{"description":"Use one of the following constants to specify the implementation of the algorithm to use. Constant Description MT_RAND_MT19937 Uses the fixed, correct, Mersenne Twister implementation, available as of PHP 7.1.0. MT_RAND_PHP Uses an incorrect Mersenne Twister implementation which was used as the default up till PHP 7.1.0. This mode is available for backward compatibility.","type":"int"}}],"doc":{"description":"Seeds the random number generator with seed or with a random value if no seed is given.","type":"void"}},{"kind":64,"name":"gethostbyname","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"doc":{"description":"The host name.","type":"string"}}],"doc":{"description":"Returns the IPv4 address of the Internet host specified by hostname.","type":"string"}},{"kind":64,"name":"mysqli_stmt_attr_set","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"The attribute that you want to set. It can have one of the following values: Attribute values Character Description MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH Setting to TRUE causes mysqli_stmt_store_result() to update the metadata MYSQL_FIELD->max_length value. MYSQLI_STMT_ATTR_CURSOR_TYPE Type of cursor to open for statement when mysqli_stmt_execute() is invoked. mode can be MYSQLI_CURSOR_TYPE_NO_CURSOR (the default) or MYSQLI_CURSOR_TYPE_READ_ONLY. MYSQLI_STMT_ATTR_PREFETCH_ROWS Number of rows to fetch from server at a time when using a cursor. mode can be in the range from 1 to the maximum value of unsigned long. The default is 1. If you use the MYSQLI_STMT_ATTR_CURSOR_TYPE option with MYSQLI_CURSOR_TYPE_READ_ONLY, a cursor is opened for the statement when you invoke mysqli_stmt_execute(). If there is already an open cursor from a previous mysqli_stmt_execute() call, it closes the cursor before opening a new one. mysqli_stmt_reset() also closes any open cursor before preparing the statement for re-execution. mysqli_stmt_free_result() closes any open cursor. If you open a cursor for a prepared statement, mysqli_stmt_store_result() is unnecessary.","type":"int"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The value to assign to the attribute.","type":"int"}}],"doc":{"description":"Used to modify the behavior of a prepared statement. This function may be called multiple times to set several attributes.","type":"bool"}},{"kind":64,"name":"mysql_list_tables","modifiers":0,"description":"","children":[{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The name of the database","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"resource"}},{"kind":64,"name":"curl_init","modifiers":0,"children":[{"kind":128,"name":"$url","modifiers":0,"value":"NULL","doc":{"description":"If provided, the CURLOPT_URL option will be set to its value. You can manually set this using the curl_setopt() function. Note: The file protocol is disabled by cURL if open_basedir is set.","type":"string"}}],"doc":{"description":"Initializes a new session and return a cURL handle for use with the curl_setopt(), curl_exec(), and curl_close() functions.","type":"resource"}},{"kind":64,"name":"error_get_last","modifiers":0,"children":[],"doc":{"description":"Gets information about the last error that occurred.","type":"array"}},{"kind":64,"name":"strstr","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.","type":"mixed"}},{"kind":128,"name":"$before_needle","modifiers":0,"value":"false","doc":{"description":"If TRUE, strstr() returns the part of the haystack before the first occurrence of the needle (excluding the needle).","type":"bool"}}],"doc":{"description":"Returns part of haystack string starting from and including the first occurrence of needle to the end of haystack.","type":"string"}},{"kind":64,"name":"libxml_clear_errors","modifiers":0,"children":[],"doc":{"description":"libxml_clear_errors() clears the libxml error buffer.","type":"void"}},{"kind":64,"name":"array_merge","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"Initial array to merge.","type":"array"}}],"doc":{"description":"Merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.","type":"array"}},{"kind":64,"name":"mysql_num_fields","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"trigger_error","modifiers":0,"children":[{"kind":128,"name":"$error_msg","modifiers":0,"doc":{"description":"The designated error message for this error. It's limited to 1024 bytes in length. Any additional characters beyond 1024 bytes will be truncated.","type":"string"}},{"kind":128,"name":"$error_type","modifiers":0,"value":"E_USER_NOTICE","doc":{"description":"The designated error type for this error. It only works with the E_USER family of constants, and will default to E_USER_NOTICE.","type":"int"}}],"doc":{"description":"Used to trigger a user error condition, it can be used in conjunction with the built-in error handler, or with a user defined function that has been set as the new error handler (set_error_handler()).","type":"bool"}},{"kind":64,"name":"mysqli_use_result","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"mysqli"}}],"doc":{"description":"Used to initiate the retrieval of a result set from the last query executed using the mysqli_real_query() function on the database connection.","type":"mysqli_result"}},{"kind":64,"name":"imap_fetchbody","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msg_number","modifiers":0,"doc":{"description":"The message number","type":"int"}},{"kind":128,"name":"$section","modifiers":0,"doc":{"description":"The part number. It is a string of integers delimited by period which index into a body part list as per the IMAP4 specification","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"A bitmask with one or more of the following: FT_UID - The msg_number is a UID FT_PEEK - Do not set the \\Seen flag if not already set FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.","type":"int"}}],"doc":{"description":"Fetch of a particular section of the body of the specified messages. Body parts are not decoded by this function.","type":"string"}},{"kind":64,"name":"array_reduce","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"mixed callback ( mixed $carry , mixed $item ) carry Holds the return value of the previous iteration; in the case of the first iteration it instead holds the value of initial. item Holds the value of the current iteration.","type":"callable"}},{"kind":128,"name":"$initial","modifiers":0,"value":"NULL","doc":{"description":"If the optional initial is available, it will be used at the beginning of the process, or as a final result in case the array is empty.","type":"mixed"}}],"doc":{"description":"array_reduce() applies iteratively the callback function to the elements of the array, so as to reduce the array to a single value.","type":"mixed"}},{"kind":64,"name":"imap_rfc822_write_address","modifiers":0,"children":[{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information","type":"string"}},{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The email host part","type":"string"}},{"kind":128,"name":"$personal","modifiers":0,"doc":{"description":"The name of the account owner","type":"string"}}],"doc":{"description":"Returns a properly formatted email address as defined in » RFC2822 given the needed information.","type":"string"}},{"kind":64,"name":"session_start","modifiers":0,"children":[{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"If provided, this is an associative array of options that will override the currently set session configuration directives. The keys should not include the session. prefix. In addition to the normal set of configuration directives, a read_and_close option may also be provided. If set to TRUE, this will result in the session being closed immediately after being read, thereby avoiding unnecessary locking if the session data won't be changed.","type":"array"}}],"doc":{"description":"session_start() creates a session or resumes the current one based on a session identifier passed via a GET or POST request, or passed via a cookie.","type":"bool"}},{"kind":64,"name":"msql_list_tables","modifiers":0,"children":[{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The name of the database.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"The mSQL connection. If not specified, the last link opened by msql_connect() is assumed. If no such link is found, the function will try to establish a link as if msql_connect() was called, and use it.","type":"resource"}}],"doc":{"description":"msql_list_tables() lists the tables on the specified database.","type":"resource"}},{"kind":64,"name":"openssl_csr_new","modifiers":0,"children":[{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The Distinguished Name to be used in the certificate.","type":"array"}},{"kind":128,"name":"$privkey","modifiers":1024,"doc":{"description":"privkey should be set to a private key that was previously generated by openssl_pkey_new() (or otherwise obtained from the other openssl_pkey family of functions). The corresponding public portion of the key will be used to sign the CSR.","type":"resource"}},{"kind":128,"name":"$configargs","modifiers":0,"doc":{"description":"By default, the information in your system openssl.conf is used to initialize the request; you can specify a configuration file section by setting the config_section_section key of configargs. You can also specify an alternative openssl configuration file by setting the value of the config key to the path of the file you want to use. The following keys, if present in configargs behave as their equivalents in the openssl.conf, as listed in the table below. Configuration overrides configargs key type openssl.conf equivalent description digest_alg string default_md Selects which digest method to use x509_extensions string x509_extensions Selects which extensions should be used when creating an x509 certificate req_extensions string req_extensions Selects which extensions should be used when creating a CSR private_key_bits integer default_bits Specifies how many bits should be used to generate a private key private_key_type integer none Specifies the type of private key to create. This can be one of OPENSSL_KEYTYPE_DSA, OPENSSL_KEYTYPE_DH or OPENSSL_KEYTYPE_RSA. The default value is OPENSSL_KEYTYPE_RSA which is currently the only supported key type. encrypt_key boolean encrypt_key Should an exported key (with passphrase) be encrypted? encrypt_key_cipher integer none One of cipher constants.","type":"array"}},{"kind":128,"name":"$extraattribs","modifiers":0,"doc":{"description":"extraattribs is used to specify additional configuration options for the CSR. Both dn and extraattribs are associative arrays whose keys are converted to OIDs and applied to the relevant part of the request.","type":"array"}}],"doc":{"description":"openssl_csr_new() generates a new CSR (Certificate Signing Request) based on the information provided by dn, which represents the Distinguished Name to be used in the certificate.","type":"mixed"}},{"kind":64,"name":"sybase_min_message_severity","modifiers":0,"description":"","children":[{"kind":128,"name":"$severity","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"void"}},{"kind":64,"name":"datefmt_get_timezone_id","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource.","type":"IntlDateFormatter"}}],"doc":{"description":"Get the timezone-id used for the IntlDateFormatter.","type":"string"}},{"kind":64,"name":"stream_copy_to_stream","modifiers":0,"children":[{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"The source stream","type":"resource"}},{"kind":128,"name":"$dest","modifiers":0,"doc":{"description":"The destination stream","type":"resource"}},{"kind":128,"name":"$maxlength","modifiers":0,"value":"-1","doc":{"description":"Maximum bytes to copy","type":"int"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"The offset where to start to copy data","type":"int"}}],"doc":{"description":"Makes a copy of up to maxlength bytes of data from the current position (or from the offset position, if specified) in source to dest. If maxlength is not specified, all remaining content in source will be copied.","type":"int"}},{"kind":64,"name":"imageantialias","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$enabled","modifiers":0,"doc":{"description":"Whether to enable antialiasing or not.","type":"bool"}}],"doc":{"description":"Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components. It works using a direct blend operation. It works only with truecolor images.","type":"bool"}},{"kind":64,"name":"snmp2_get","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The SNMP agent.","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The read community.","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"string"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"string"}}],"doc":{"description":"The snmp2_get() function is used to read the value of an SNMP object specified by the object_id.","type":"string"}},{"kind":64,"name":"resourcebundle_get_error_message","modifiers":0,"children":[{"kind":128,"name":"$r","modifiers":0,"doc":{"description":"ResourceBundle object.","type":"ResourceBundle"}}],"doc":{"description":"Get error message from the last function performed by the bundle object.","type":"string"}},{"kind":64,"name":"imap_fetchheader","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msg_number","modifiers":0,"doc":{"description":"The message number","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"The possible options are: FT_UID - The msgno argument is a UID FT_INTERNAL - The return string is in \"internal\" format, without any attempt to canonicalize to CRLF newlines FT_PREFETCHTEXT - The RFC822.TEXT should be pre-fetched at the same time. This avoids an extra RTT on an IMAP connection if a full message text is desired (e.g. in a \"save to local file\" operation)","type":"int"}}],"doc":{"description":"This function causes a fetch of the complete, unfiltered » RFC2822 format header of the specified message.","type":"string"}},{"kind":64,"name":"ob_iconv_handler","modifiers":0,"children":[{"kind":128,"name":"$contents","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$status","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Converts the string encoded in internal_encoding to output_encoding.","type":"string"}},{"kind":64,"name":"array_keys","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"An array containing keys to return.","type":"array"}},{"kind":128,"name":"$search_value","modifiers":0,"value":"null","doc":{"description":"If specified, then only keys containing these values are returned.","type":"mixed"}},{"kind":128,"name":"$strict","modifiers":0,"value":"false","doc":{"description":"Determines if strict comparison (===) should be used during the search.","type":"bool"}}],"doc":{"description":"array_keys() returns the keys, numeric and string, from the array.","type":"array"}},{"kind":64,"name":"mssql_field_length","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}},{"kind":128,"name":"$offset","modifiers":0,"value":"-1","doc":{"description":"The field offset, starts at 0. If omitted, the current field is used.","type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"isset","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable to be checked.","type":"mixed"}}],"doc":{"description":"Determine if a variable is set and is not NULL.","type":"bool"}},{"kind":64,"name":"array_pop","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The array to get the value from.","type":"array"}}],"doc":{"description":"array_pop() pops and returns the last value of the array, shortening the array by one element.","type":"mixed"}},{"kind":64,"name":"ibase_num_fields","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"An InterBase result identifier.","type":"resource"}}],"doc":{"description":"Get the number of fields in a result set.","type":"int"}},{"kind":64,"name":"bzclose","modifiers":0,"children":[{"kind":128,"name":"$bz","modifiers":0,"doc":{"description":"The file pointer. It must be valid and must point to a file successfully opened by bzopen().","type":"resource"}}],"doc":{"description":"Closes the given bzip2 file pointer.","type":"int"}},{"kind":64,"name":"mysqli_stmt_bind_result","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}},{"kind":128,"name":"$var1","modifiers":1024,"doc":{"description":"The variable to be bound.","type":"mixed"}},{"kind":128,"name":"$...","modifiers":1024,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Binds columns in the result set to variables.","type":"bool"}},{"kind":64,"name":"mb_strlen","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being checked for length.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Gets the length of a string.","type":"mixed"}},{"kind":64,"name":"openssl_error_string","modifiers":0,"children":[],"doc":{"description":"openssl_error_string() returns the last error from the openSSL library. Error messages are queued, so this function should be called multiple times to collect all of the information. The last error will be the most recent one.","type":"string"}},{"kind":64,"name":"imap_open","modifiers":0,"children":[{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"A mailbox name consists of a server and a mailbox path on this server. The special name INBOX stands for the current users personal mailbox. Mailbox names that contain international characters besides those in the printable ASCII space have to be encoded width imap_utf7_encode(). The server part, which is enclosed in '{' and '}', consists of the servers name or ip address, an optional port (prefixed by ':'), and an optional protocol specification (prefixed by '/'). The server part is mandatory in all mailbox parameters. All names which start with { are remote names, and are in the form \"{\" remote_system_name [\":\" port] [flags] \"}\" [mailbox_name] where: remote_system_name - Internet domain name or bracketed IP address of server. port - optional TCP port number, default is the default port for that service flags - optional flags, see following table. mailbox_name - remote mailbox name, default is INBOX Optional flags for names Flag Description /service=service mailbox access service, default is \"imap\" /user=user remote user name for login on the server /authuser=user remote authentication user; if specified this is the user name whose password is used (e.g. administrator) /anonymous remote access as anonymous user /debug record protocol telemetry in application's debug log /secure do not transmit a plaintext password over the network /imap, /imap2, /imap2bis, /imap4, /imap4rev1 equivalent to /service=imap /pop3 equivalent to /service=pop3 /nntp equivalent to /service=nntp /norsh do not use rsh or ssh to establish a preauthenticated IMAP session /ssl use the Secure Socket Layer to encrypt the session /validate-cert validate certificates from TLS/SSL server (this is the default behavior) /novalidate-cert do not validate certificates from TLS/SSL server, needed if server uses self-signed certificates /tls force use of start-TLS to encrypt the session, and reject connection to servers that do not support it /notls do not do start-TLS to encrypt the session, even with servers that support it /readonly request read-only mailbox open (IMAP only; ignored on NNTP, and an error with SMTP and POP3)","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The user name","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password associated with the username","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"The options are a bit mask with one or more of the following: OP_READONLY - Open mailbox read-only OP_ANONYMOUS - Don't use or update a .newsrc for news (NNTP only) OP_HALFOPEN - For IMAP and NNTP names, open a connection but don't open a mailbox. CL_EXPUNGE - Expunge mailbox automatically upon mailbox close (see also imap_delete() and imap_expunge()) OP_DEBUG - Debug protocol negotiations OP_SHORTCACHE - Short (elt-only) caching OP_SILENT - Don't pass up events (internal use) OP_PROTOTYPE - Return driver prototype OP_SECURE - Don't do non-secure authentication","type":"int"}},{"kind":128,"name":"$n_retries","modifiers":0,"value":"0","doc":{"description":"Number of maximum connect attempts","type":"int"}},{"kind":128,"name":"$params","modifiers":0,"value":"NULL","doc":{"description":"Connection parameters, the following (string) keys maybe used to set one or more connection parameters: DISABLE_AUTHENTICATOR - Disable authentication properties","type":"array"}}],"doc":{"description":"Opens an IMAP stream to a mailbox.","type":"resource"}},{"kind":64,"name":"m_responsekeys","modifiers":0,"description":"","children":[{"kind":128,"name":"$conn","modifiers":0,"doc":{"description":"An MCVE_CONN resource returned by m_initengine().","type":"resource"}},{"kind":128,"name":"$identifier","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"array"}},{"kind":64,"name":"cli_get_process_title","modifiers":0,"children":[],"doc":{"description":"Returns the current process title, as set by cli_set_process_title(). Note that this may not exactly match what is shown in ps or top, depending on your operating system.","type":"string"}},{"kind":64,"name":"mysql_num_rows","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"timezone_open","modifiers":0,"children":[{"kind":128,"name":"$timezone","modifiers":0,"doc":{"description":"One of the supported timezone names or an offset value (+0200).","type":"string"}}],"doc":{"description":"Creates new DateTimeZone object.","type":"DateTimeZone"}},{"kind":64,"name":"mt_rand","modifiers":0,"description":"","children":[{"kind":128,"name":"$min","modifiers":0,"doc":{"description":"Optional lowest value to be returned (default: 0)","type":"int"}},{"kind":128,"name":"$max","modifiers":0,"doc":{"description":"Optional highest value to be returned (default: mt_getrandmax())","type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"imageflip","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"Flip mode, this can be one of the IMG_FLIP_* constants: Constant Meaning IMG_FLIP_HORIZONTAL Flips the image horizontally. IMG_FLIP_VERTICAL Flips the image vertically. IMG_FLIP_BOTH Flips the image both horizontally and vertically.","type":"int"}}],"doc":{"description":"Flips the image image using the given mode.","type":"bool"}},{"kind":64,"name":"gmp_import","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The binary string being imported","type":"string"}},{"kind":128,"name":"$word_size","modifiers":0,"doc":{"description":"Default value is 1. The number of bytes in each chunk of binary data. This is mainly used in conjunction with the options parameter.","type":"integer"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Default value is GMP_MSW_FIRST | GMP_NATIVE_ENDIAN.","type":"integer"}}],"doc":{"description":"Import a GMP number from a binary string","type":"GMP"}},{"kind":64,"name":"stream_filter_register","modifiers":0,"children":[{"kind":128,"name":"$filtername","modifiers":0,"doc":{"description":"The filter name to be registered.","type":"string"}},{"kind":128,"name":"$classname","modifiers":0,"doc":{"description":"To implement a filter, you need to define a class as an extension of php_user_filter with a number of member functions. When performing read/write operations on the stream to which your filter is attached, PHP will pass the data through your filter (and any other filters attached to that stream) so that the data may be modified as desired. You must implement the methods exactly as described in php_user_filter - doing otherwise will lead to undefined behaviour.","type":"string"}}],"doc":{"description":"stream_filter_register() allows you to implement your own filter on any registered stream used with all the other filesystem functions (such as fopen(), fread() etc.).","type":"bool"}},{"kind":64,"name":"ldap_escape","modifiers":0,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to escape.","type":"string"}},{"kind":128,"name":"$ignore","modifiers":0,"doc":{"description":"Characters to ignore when escaping.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The context the escaped string will be used in: LDAP_ESCAPE_FILTER for filters to be used with ldap_search(), or LDAP_ESCAPE_DN for DNs.","type":"int"}}],"doc":{"description":"Escapes value for use in the context implied by flags.","type":"string"}},{"kind":64,"name":"mb_language","modifiers":0,"children":[{"kind":128,"name":"$language","modifiers":0,"value":"mb_language()","doc":{"description":"Used for encoding e-mail messages. Valid languages are \"Japanese\", \"ja\",\"English\",\"en\" and \"uni\" (UTF-8). mb_send_mail() uses this setting to encode e-mail. Language and its setting is ISO-2022-JP/Base64 for Japanese, UTF-8/Base64 for uni, ISO-8859-1/quoted printable for English.","type":"string"}}],"doc":{"description":"Set/Get the current language.","type":"mixed"}},{"kind":64,"name":"preg_match_all","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern to search for, as a string.","type":"string"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$matches","modifiers":1024,"doc":{"description":"Array of all matches in multi-dimensional array ordered according to flags.","type":"array"}},{"kind":128,"name":"$flags","modifiers":0,"value":"PREG_PATTERN_ORDER","doc":{"description":"Can be a combination of the following flags (note that it doesn't make sense to use PREG_PATTERN_ORDER together with PREG_SET_ORDER): PREG_PATTERN_ORDER Orders results so that $matches[0] is an array of full pattern matches, $matches[1] is an array of strings matched by the first parenthesized subpattern, and so on. <?phppreg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\",    \"<b>example: </b><div align=left>this is a test</div>\",    $out, PREG_PATTERN_ORDER);echo $out[0][0] . \", \" . $out[0][1] . \"\\n\";echo $out[1][0] . \", \" . $out[1][1] . \"\\n\";?> The above example will output: <b>example: </b>, <div align=left>this is a test</div> example: , this is a test So, $out[0] contains array of strings that matched full pattern, and $out[1] contains array of strings enclosed by tags. If the pattern contains named subpatterns, $matches additionally contains entries for keys with the subpattern name. If the pattern contains duplicate named subpatterns, only the rightmost subpattern is stored in $matches[NAME]. <?phppreg_match_all(    '/(?J)(?<match>foo)|(?<match>bar)/',    'foo bar',    $matches,    PREG_PATTERN_ORDER);print_r($matches['match']);?> The above example will output: Array ( [0] => [1] => bar ) PREG_SET_ORDER Orders results so that $matches[0] is an array of first set of matches, $matches[1] is an array of second set of matches, and so on. <?phppreg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\",    \"<b>example: </b><div align=\\\"left\\\">this is a test</div>\",    $out, PREG_SET_ORDER);echo $out[0][0] . \", \" . $out[0][1] . \"\\n\";echo $out[1][0] . \", \" . $out[1][1] . \"\\n\";?> The above example will output: <b>example: </b>, example: <div align=\"left\">this is a test</div>, this is a test PREG_OFFSET_CAPTURE If this flag is passed, for every occurring match the appendant string offset will also be returned. Note that this changes the value of matches into an array of arrays where every element is an array consisting of the matched string at offset 0 and its string offset into subject at offset 1. <?phppreg_match_all('/(foo)(bar)(baz)/', 'foobarbaz', $matches, PREG_OFFSET_CAPTURE);print_r($matches);?> The above example will output: Array ( [0] => Array ( [0] => Array ( [0] => foobarbaz [1] => 0 ) ) [1] => Array ( [0] => Array ( [0] => foo [1] => 0 ) ) [2] => Array ( [0] => Array ( [0] => bar [1] => 3 ) ) [3] => Array ( [0] => Array ( [0] => baz [1] => 6 ) ) ) If no order flag is given, PREG_PATTERN_ORDER is assumed.","type":"int"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"Normally, the search starts from the beginning of the subject string. The optional parameter offset can be used to specify the alternate place from which to start the search (in bytes). Note: Using offset is not equivalent to passing substr($subject, $offset) to preg_match_all() in place of the subject string, because pattern can contain assertions such as ^, $ or (?<=x). See preg_match() for examples.","type":"int"}}],"doc":{"description":"Searches subject for all matches to the regular expression given in pattern and puts them in matches in the order specified by flags.","type":"int"}},{"kind":64,"name":"mcrypt_module_is_block_mode","modifiers":0,"description":"","children":[{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".","type":"string"}},{"kind":128,"name":"$lib_dir","modifiers":0,"doc":{"description":"The optional lib_dir parameter can contain the location where the algorithm module is on the system.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"pcntl_wtermsig","modifiers":0,"children":[{"kind":128,"name":"$status","modifiers":0,"doc":{"description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().","type":"int"}}],"doc":{"description":"Returns the number of the signal that caused the child process to terminate. This function is only useful if pcntl_wifsignaled() returned TRUE.","type":"int"}},{"kind":64,"name":"array_change_key_case","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The array to work on","type":"array"}},{"kind":128,"name":"$case","modifiers":0,"value":"CASE_LOWER","doc":{"description":"Either CASE_UPPER or CASE_LOWER (default)","type":"int"}}],"doc":{"description":"Returns an array with all keys from array lowercased or uppercased. Numbered indices are left as is.","type":"array"}},{"kind":64,"name":"file_get_contents","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Name of the file to read.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"false","doc":{"description":"Note: As of PHP 5 the FILE_USE_INCLUDE_PATH constant can be used to trigger include path search.","type":"bool"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"A valid context resource created with stream_context_create(). If you don't need to use a custom context, you can skip this parameter by NULL.","type":"resource"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"The offset where the reading starts on the original stream. Negative offsets count from the end of the stream. Seeking (offset) is not supported with remote files. Attempting to seek on non-local files may work with small offsets, but this is unpredictable because it works on the buffered stream.","type":"int"}},{"kind":128,"name":"$maxlen","modifiers":0,"doc":{"description":"Maximum length of data read. The default is to read until end of file is reached. Note that this parameter is applied to the stream processed by the filters.","type":"int"}}],"doc":{"description":"This function is similar to file(), except that file_get_contents() returns the file in a string, starting at the specified offset up to maxlen bytes. On failure, file_get_contents() will return FALSE.","type":"string"}},{"kind":64,"name":"mysqli_fetch_object","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}},{"kind":128,"name":"$class_name","modifiers":0,"value":"\"stdClass\"","doc":{"description":"The name of the class to instantiate, set the properties of and return. If not specified, a stdClass object is returned.","type":"string"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"An optional array of parameters to pass to the constructor for class_name objects.","type":"array"}}],"doc":{"description":"The mysqli_fetch_object() will return the current row result set as an object where the attributes of the object represent the names of the fields found within the result set.","type":"object"}},{"kind":64,"name":"mssql_connect","modifiers":0,"description":"","children":[{"kind":128,"name":"$servername","modifiers":0,"doc":{"description":"The MS SQL server. It can also include a port number, e.g. hostname:port (Linux), or hostname,port (Windows).","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The username.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password.","type":"string"}},{"kind":128,"name":"$new_link","modifiers":0,"value":"false","doc":{"description":"If a second call is made to mssql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned. This parameter modifies this behavior and makes mssql_connect() always open a new link, even if mssql_connect() was called before with the same parameters.","type":"bool"}}],"doc":{"type":"resource"}},{"kind":64,"name":"gmp_sign","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Checks the sign of a number.","type":"int"}},{"kind":64,"name":"ibase_blob_info","modifiers":0,"children":[{"kind":128,"name":"$blob_id","modifiers":0,"doc":{"description":"A BLOB id.","type":"string"}}],"doc":{"description":"Returns the BLOB length and other useful information.","type":"array"}},{"kind":64,"name":"posix_seteuid","modifiers":0,"children":[{"kind":128,"name":"$uid","modifiers":0,"doc":{"description":"The user id.","type":"int"}}],"doc":{"description":"Set the effective user ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.","type":"bool"}},{"kind":64,"name":"socket_recv","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"The socket must be a socket resource previously created by socket_create().","type":"resource"}},{"kind":128,"name":"$buf","modifiers":1024,"doc":{"description":"The data received will be fetched to the variable specified with buf. If an error occurs, if the connection is reset, or if no data is available, buf will be set to NULL.","type":"string"}},{"kind":128,"name":"$len","modifiers":0,"doc":{"description":"Up to len bytes will be fetched from remote host.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. Possible values for flags Flag Description MSG_OOB Process out-of-band data. MSG_PEEK Receive data from the beginning of the receive queue without removing it from the queue. MSG_WAITALL Block until at least len are received. However, if a signal is caught or the remote host disconnects, the function may return less data. MSG_DONTWAIT With this flag set, the function returns even if it would normally have blocked.","type":"int"}}],"doc":{"description":"The socket_recv() function receives len bytes of data in buf from socket. socket_recv() can be used to gather data from connected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function.","type":"int"}},{"kind":64,"name":"getimagesizefromstring","modifiers":0,"children":[{"kind":128,"name":"$imagedata","modifiers":0,"doc":{"description":"The image data, as a string.","type":"string"}},{"kind":128,"name":"$imageinfo","modifiers":1024,"doc":{"description":"See getimagesize().","type":"array"}}],"doc":{"description":"Identical to getimagesize() except that getimagesizefromstring() accepts a string instead of a file name as the first parameter.","type":"array"}},{"kind":64,"name":"fbsql_table_name","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result pointer returned by fbsql_list_tables().","type":"resource"}},{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"Integer index for the current table.","type":"int"}}],"doc":{"description":"fbsql_table_name() gets the name of the current table in the given result set.","type":"string"}},{"kind":64,"name":"convert_cyr_string","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to be converted.","type":"string"}},{"kind":128,"name":"$from","modifiers":0,"doc":{"description":"The source Cyrillic character set, as a single character.","type":"string"}},{"kind":128,"name":"$to","modifiers":0,"doc":{"description":"The target Cyrillic character set, as a single character.","type":"string"}}],"doc":{"description":"Converts from one Cyrillic character set to another.","type":"string"}},{"kind":64,"name":"odbc_field_len","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier.","type":"resource"}},{"kind":128,"name":"$field_number","modifiers":0,"doc":{"description":"The field number. Field numbering starts at 1.","type":"int"}}],"doc":{"description":"Gets the length of the field referenced by number in the given result identifier.","type":"int"}},{"kind":64,"name":"fbsql_pconnect","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"value":"ini_get(\"fbsql.default_host\")","doc":{"description":"The server host name.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"value":"ini_get(\"fbsql.default_user\")","doc":{"description":"The user name for the connection.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"value":"ini_get(\"fbsql.default_password\")","doc":{"description":"The password for the connection.","type":"string"}}],"doc":{"description":"Establishes a persistent connection to a FrontBase server.","type":"resource"}},{"kind":64,"name":"ctype_space","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The tested string.","type":"string"}}],"doc":{"description":"Checks if all of the characters in the provided string, text, creates whitespace.","type":"bool"}},{"kind":64,"name":"posix_mkfifo","modifiers":0,"children":[{"kind":128,"name":"$pathname","modifiers":0,"doc":{"description":"Path to the FIFO file.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The second parameter mode has to be given in octal notation (e.g. 0644). The permission of the newly created FIFO also depends on the setting of the current umask(). The permissions of the created file are (mode & ~umask).","type":"int"}}],"doc":{"description":"posix_mkfifo() creates a special FIFO file which exists in the file system and acts as a bidirectional communication endpoint for processes.","type":"bool"}},{"kind":64,"name":"curl_multi_getcontent","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}}],"doc":{"description":"If CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, then this function will return the content of that cURL handle in the form of a string.","type":"string"}},{"kind":64,"name":"is_link","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Tells whether the given file is a symbolic link.","type":"bool"}},{"kind":64,"name":"imageinterlace","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$interlace","modifiers":0,"value":"0","doc":{"description":"If non-zero, the image will be interlaced, else the interlace bit is turned off.","type":"int"}}],"doc":{"description":"imageinterlace() turns the interlace bit on or off.","type":"int"}},{"kind":64,"name":"gmp_scan0","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"The number to scan. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"The starting bit.","type":"int"}}],"doc":{"description":"Scans a, starting with bit start, towards more significant bits, until the first clear bit is found.","type":"int"}},{"kind":64,"name":"array_intersect_key","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The array with master keys to check.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"An array to compare keys against.","type":"array"}}],"doc":{"description":"array_intersect_key() returns an array containing all the entries of array1 which have keys that are present in all the arguments.","type":"array"}},{"kind":64,"name":"curl_setopt","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"The CURLOPT_XXX option to set.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to be set on option.","type":"mixed"}}],"doc":{"description":"Sets an option on the given cURL session handle.","type":"bool"}},{"kind":64,"name":"readline_list_history","modifiers":0,"children":[],"doc":{"description":"Gets the entire command line history.","type":"array"}},{"kind":64,"name":"msgfmt_format_message","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to use for formatting locale-dependent parts","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern string to insert things into. The pattern uses an 'apostrophe-friendly' syntax; it is run through » umsg_autoQuoteApostrophe before being interpreted.","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"The array of values to insert into the format string","type":"array"}}],"doc":{"description":"Quick formatting function that formats the string without having to explicitly create the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.","type":"string"}},{"kind":64,"name":"defined","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The constant name.","type":"string"}}],"doc":{"description":"Checks whether the given constant exists and is defined.","type":"bool"}},{"kind":64,"name":"imap_errors","modifiers":0,"children":[],"doc":{"description":"Gets all of the IMAP errors (if any) that have occurred during this page request or since the error stack was reset.","type":"array"}},{"kind":64,"name":"transliterator_create_from_rules","modifiers":0,"children":[{"kind":128,"name":"$id","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$direction","modifiers":0,"doc":{"description":"The direction, defaults to >Transliterator::FORWARD. May also be set to Transliterator::REVERSE.","type":"int"}}],"doc":{"description":"Creates a Transliterator from rules.","type":"Transliterator"}},{"kind":64,"name":"oci_field_is_null","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Can be the field's index (1-based) or name.","type":"mixed"}}],"doc":{"description":"Checks if the given field from the current row of statement is NULL.","type":"bool"}},{"kind":64,"name":"stream_is_local","modifiers":0,"children":[{"kind":128,"name":"$stream_or_url","modifiers":0,"doc":{"description":"The stream resource or URL to check.","type":"mixed"}}],"doc":{"description":"Checks if a stream, or a URL, is a local one or not.","type":"bool"}},{"kind":64,"name":"fputcsv","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).","type":"resource"}},{"kind":128,"name":"$fields","modifiers":0,"doc":{"description":"An array of values.","type":"array"}},{"kind":128,"name":"$delimiter","modifiers":0,"value":"\",\"","doc":{"description":"The optional delimiter parameter sets the field delimiter (one character only).","type":"string"}},{"kind":128,"name":"$enclosure","modifiers":0,"value":"'\"'","doc":{"description":"The optional enclosure parameter sets the field enclosure (one character only).","type":"string"}},{"kind":128,"name":"$escape_char","modifiers":0,"value":"\"\\\"","doc":{"description":"The optional escape_char parameter sets the escape character (one character only).","type":"string"}}],"doc":{"description":"fputcsv() formats a line (passed as a fields array) as CSV and write it (terminated by a newline) to the specified file handle.","type":"int"}},{"kind":64,"name":"mysqli_get_client_version","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"mysqli"}}],"doc":{"description":"Returns client version number as an integer.","type":"int"}},{"kind":64,"name":"ldap_get_entries","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result_identifier","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Reads multiple entries from the given result, and then reading the attributes and multiple values.","type":"array"}},{"kind":64,"name":"bcadd","modifiers":0,"children":[{"kind":128,"name":"$left_operand","modifiers":0,"doc":{"description":"The left operand, as a string.","type":"string"}},{"kind":128,"name":"$right_operand","modifiers":0,"doc":{"description":"The right operand, as a string.","type":"string"}},{"kind":128,"name":"$scale","modifiers":0,"value":"0","doc":{"description":"This optional parameter is used to set the number of digits after the decimal place in the result. If omitted, it will default to the scale set globally with the bcscale() function, or fallback to 0 if this has not been set.","type":"int"}}],"doc":{"description":"Sums left_operand and right_operand.","type":"string"}},{"kind":64,"name":"var_export","modifiers":0,"description":"","children":[{"kind":128,"name":"$expression","modifiers":0,"doc":{"description":"The variable you want to export.","type":"mixed"}},{"kind":128,"name":"$return","modifiers":0,"value":"false","doc":{"description":"If used and set to TRUE, var_export() will return the variable representation instead of outputting it.","type":"bool"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"mcrypt_enc_is_block_mode","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"ob_implicit_flush","modifiers":0,"children":[{"kind":128,"name":"$flag","modifiers":0,"value":"true","doc":{"description":"TRUE to turn implicit flushing on, FALSE otherwise.","type":"int"}}],"doc":{"description":"ob_implicit_flush() will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush() will no longer be needed.","type":"void"}},{"kind":64,"name":"pg_send_execute","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}},{"kind":128,"name":"$stmtname","modifiers":0,"doc":{"description":"The name of the prepared statement to execute. if \"\" is specified, then the unnamed statement is executed. The name must have been previously prepared using pg_prepare(), pg_send_prepare() or a PREPARE SQL command.","type":"string"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"An array of parameter values to substitute for the $1, $2, etc. placeholders in the original prepared query string. The number of elements in the array must match the number of placeholders.","type":"array"}}],"doc":{"description":"Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).","type":"bool"}},{"kind":64,"name":"mysqli_report","modifiers":0,"children":[{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"Supported flags Name Description MYSQLI_REPORT_OFF Turns reporting off MYSQLI_REPORT_ERROR Report errors from mysqli function calls MYSQLI_REPORT_STRICT Throw mysqli_sql_exception for errors instead of warnings MYSQLI_REPORT_INDEX Report if no index or bad index was used in a query MYSQLI_REPORT_ALL Set all options (report all)","type":"int"}}],"doc":{"description":"A function helpful in improving queries during code development and testing. Depending on the flags, it reports errors from mysqli function calls or queries that don't use an index (or use a bad index).","type":"bool"}},{"kind":64,"name":"stream_socket_get_name","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The socket to get the name of.","type":"resource"}},{"kind":128,"name":"$want_peer","modifiers":0,"doc":{"description":"If set to TRUE the remote socket name will be returned, if set to FALSE the local socket name will be returned.","type":"bool"}}],"doc":{"description":"Returns the local or remote name of a given socket connection.","type":"string"}},{"kind":64,"name":"hash_update_file","modifiers":0,"description":"","children":[{"kind":128,"name":"$hcontext","modifiers":0,"doc":{"description":"Hashing context returned by hash_init().","type":"resource"}},{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"URL describing location of file to be hashed; Supports fopen wrappers.","type":"string"}},{"kind":128,"name":"$scontext","modifiers":0,"value":"NULL","doc":{"description":"Stream context as returned by stream_context_create().","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"pspell_config_mode","modifiers":0,"description":"","children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The mode parameter is the mode in which spellchecker will work. There are several modes available: PSPELL_FAST - Fast mode (least number of suggestions) PSPELL_NORMAL - Normal mode (more suggestions) PSPELL_BAD_SPELLERS - Slow mode (a lot of suggestions)","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"sybase_fetch_object","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Use the second object to specify the type of object you want to return. If this parameter is omitted, the object will be of type stdClass.","type":"mixed"}}],"doc":{"type":"object"}},{"kind":64,"name":"intlcal_get_actual_maximum","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Returns a fieldʼs relative maximum value around the current time. The exact semantics vary by field, but in the general case this is the value that would be obtained if one would set the field value into the smallest relative maximum for the field and would increment it until reaching the global maximum or the field value wraps around, in which the value returned would be the global maximum or the value before the wrapping, respectively.","type":"int"}},{"kind":64,"name":"msql_affected_rows","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}}],"doc":{"description":"Returns number of affected rows by the last SELECT, UPDATE or DELETE query associated with result.","type":"int"}},{"kind":64,"name":"opendir","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The directory path that is to be opened","type":"string"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"For a description of the context parameter, refer to the streams section of the manual.","type":"resource"}}],"doc":{"description":"Opens up a directory handle to be used in subsequent closedir(), readdir(), and rewinddir() calls.","type":"resource"}},{"kind":64,"name":"xmlwriter_start_document","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$version","modifiers":0,"value":"1.0","doc":{"description":"The version number of the document as part of the XML declaration.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"NULL","doc":{"description":"The encoding of the document as part of the XML declaration.","type":"string"}},{"kind":128,"name":"$standalone","modifiers":0,"doc":{"description":"yes or no.","type":"string"}}],"doc":{"description":"Starts a document.","type":"bool"}},{"kind":64,"name":"gmp_testbit","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The bit to test","type":"int"}}],"doc":{"description":"Tests if the specified bit is set.","type":"bool"}},{"kind":64,"name":"ldap_get_values_len","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result_entry_identifier","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$attribute","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Reads all the values of the attribute in the entry in the result.","type":"array"}},{"kind":64,"name":"bcscale","modifiers":0,"children":[{"kind":128,"name":"$scale","modifiers":0,"doc":{"description":"The scale factor.","type":"int"}}],"doc":{"description":"Sets the default scale parameter for all subsequent calls to bc math functions that do not explicitly specify a scale parameter.","type":"bool"}},{"kind":64,"name":"ngettext","modifiers":0,"children":[{"kind":128,"name":"$msgid1","modifiers":0,"doc":{"description":"The singular message ID.","type":"string"}},{"kind":128,"name":"$msgid2","modifiers":0,"doc":{"description":"The plural message ID.","type":"string"}},{"kind":128,"name":"$n","modifiers":0,"doc":{"description":"The number (e.g. item count) to determine the translation for the respective grammatical number.","type":"int"}}],"doc":{"description":"The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.","type":"string"}},{"kind":64,"name":"cal_days_in_month","modifiers":0,"children":[{"kind":128,"name":"$calendar","modifiers":0,"doc":{"description":"Calendar to use for calculation","type":"int"}},{"kind":128,"name":"$month","modifiers":0,"doc":{"description":"Month in the selected calendar","type":"int"}},{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"Year in the selected calendar","type":"int"}}],"doc":{"description":"This function will return the number of days in the month of year for the specified calendar.","type":"int"}},{"kind":64,"name":"mysqli_get_warnings","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"mysqli"}}],"doc":{"description":"Procedural style","type":"mysqli_warning"}},{"kind":64,"name":"fileatime","modifiers":0,"description":"","children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"xml_set_character_data_handler","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to set up character data handler function.","type":"resource"}},{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser. The function named by handler must accept two parameters: handler ( resource $parser , string $data ) parser The first parameter, parser, is a reference to the XML parser calling the handler. data The second parameter, data, contains the character data as a string. Character data handler is called for every piece of a text in the XML document. It can be called multiple times inside each fragment (e.g. for non-ASCII strings). If a handler function is set to an empty string, or FALSE, the handler in question is disabled. Note: Instead of a function name, an array containing an object reference and a method name can also be supplied.","type":"callable"}}],"doc":{"description":"Sets the character data handler function for the XML parser parser.","type":"bool"}},{"kind":64,"name":"is_numeric","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable being evaluated.","type":"mixed"}}],"doc":{"description":"Finds whether the given variable is numeric. Numeric strings consist of optional sign, any number of digits, optional decimal part and optional exponential part. Thus +0123.45e6 is a valid numeric value. Hexadecimal (e.g. 0xf4c3b00c) and binary (e.g. 0b10100111001) notation is not allowed.","type":"bool"}},{"kind":64,"name":"log1p","modifiers":0,"children":[{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"log1p() returns log(1 + number) computed in a way that is accurate even when the value of number is close to zero. log() might only return log(1) in this case due to lack of precision.","type":"float"}},{"kind":64,"name":"mysql_list_dbs","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"resource"}},{"kind":64,"name":"spl_object_hash","modifiers":0,"children":[{"kind":128,"name":"$obj","modifiers":0,"description":"","doc":{"type":"object"}}],"doc":{"description":"This function returns a unique identifier for the object. This id can be used as a hash key for storing objects, or for identifying an object, as long as the object is not destroyed. Once the object is destroyed, its hash may be reused for other objects.","type":"string"}},{"kind":64,"name":"sem_get","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$max_acquire","modifiers":0,"value":"1","doc":{"description":"The number of processes that can acquire the semaphore simultaneously is set to max_acquire.","type":"int"}},{"kind":128,"name":"$perm","modifiers":0,"value":"0666","doc":{"description":"The semaphore permissions. Actually this value is set only if the process finds it is the only process currently attached to the semaphore.","type":"int"}},{"kind":128,"name":"$auto_release","modifiers":0,"value":"1","doc":{"description":"Specifies if the semaphore should be automatically released on request shutdown.","type":"int"}}],"doc":{"description":"sem_get() returns an id that can be used to access the System V semaphore with the given key.","type":"resource"}},{"kind":64,"name":"ftp_get","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$local_file","modifiers":0,"doc":{"description":"The local file path (will be overwritten if the file already exists).","type":"string"}},{"kind":128,"name":"$remote_file","modifiers":0,"doc":{"description":"The remote file path.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY.","type":"int"}},{"kind":128,"name":"$resumepos","modifiers":0,"value":"0","doc":{"description":"The position in the remote file to start downloading from.","type":"int"}}],"doc":{"description":"ftp_get() retrieves a remote file from the FTP server, and saves it into a local file.","type":"bool"}},{"kind":64,"name":"fbsql_list_dbs","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Return a result pointer containing the databases available from the current fbsql daemon. Use the fbsql_tablename() to traverse this result pointer.","type":"resource"}},{"kind":64,"name":"mysql_db_query","modifiers":0,"description":"","children":[{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The name of the database that will be selected.","type":"string"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The MySQL query. Data inside the query should be properly escaped.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"resource"}},{"kind":64,"name":"ibase_close","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"value":"NULL","doc":{"description":"An InterBase link identifier returned from ibase_connect(). If omitted, the last opened link is assumed.","type":"resource"}}],"doc":{"description":"Closes the link to an InterBase database that's associated with a connection id returned from ibase_connect(). Default transaction on link is committed, other transactions are rolled back.","type":"bool"}},{"kind":64,"name":"oci_internal_debug","modifiers":0,"children":[{"kind":128,"name":"$onoff","modifiers":0,"doc":{"description":"Set this to FALSE to turn debug output off or TRUE to turn it on.","type":"bool"}}],"doc":{"description":"Enables or disables internal debug output.","type":"void"}},{"kind":64,"name":"constant","modifiers":0,"description":"","children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The constant name.","type":"string"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"posix_ctermid","modifiers":0,"children":[],"doc":{"description":"Generates a string which is the pathname for the current controlling terminal for the process. On error this will set errno, which can be checked using posix_get_last_error()","type":"string"}},{"kind":64,"name":"php_uname","modifiers":0,"children":[{"kind":128,"name":"$mode","modifiers":0,"value":"\"a\"","doc":{"description":"mode is a single character that defines what information is returned: 'a': This is the default. Contains all modes in the sequence \"s n r v m\". 's': Operating system name. eg. FreeBSD. 'n': Host name. eg. localhost.example.com. 'r': Release name. eg. 5.1.2-RELEASE. 'v': Version information. Varies a lot between operating systems. 'm': Machine type. eg. i386.","type":"string"}}],"doc":{"description":"php_uname() returns a description of the operating system PHP is running on. This is the same string you see at the very top of the phpinfo() output. For the name of just the operating system, consider using the PHP_OS constant, but keep in mind this constant will contain the operating system PHP was built on.","type":"string"}},{"kind":64,"name":"get_defined_constants","modifiers":0,"children":[{"kind":128,"name":"$categorize","modifiers":0,"value":"false","doc":{"description":"Causing this function to return a multi-dimensional array with categories in the keys of the first dimension and constants and their values in the second dimension. <?phpdefine(\"MY_CONSTANT\", 1);print_r(get_defined_constants(true));?> The above example will output something similar to: Array ( [Core] => Array ( [E_ERROR] => 1 [E_WARNING] => 2 [E_PARSE] => 4 [E_NOTICE] => 8 [E_CORE_ERROR] => 16 [E_CORE_WARNING] => 32 [E_COMPILE_ERROR] => 64 [E_COMPILE_WARNING] => 128 [E_USER_ERROR] => 256 [E_USER_WARNING] => 512 [E_USER_NOTICE] => 1024 [E_ALL] => 2047 [TRUE] => 1 ) [pcre] => Array ( [PREG_PATTERN_ORDER] => 1 [PREG_SET_ORDER] => 2 [PREG_OFFSET_CAPTURE] => 256 [PREG_SPLIT_NO_EMPTY] => 1 [PREG_SPLIT_DELIM_CAPTURE] => 2 [PREG_SPLIT_OFFSET_CAPTURE] => 4 [PREG_GREP_INVERT] => 1 ) [user] => Array ( [MY_CONSTANT] => 1 ) )","type":"bool"}}],"doc":{"description":"Returns the names and values of all the constants currently defined. This includes those created by extensions as well as those created with the define() function.","type":"array"}},{"kind":64,"name":"stream_context_get_params","modifiers":0,"children":[{"kind":128,"name":"$stream_or_context","modifiers":0,"doc":{"description":"A stream resource or a context resource","type":"resource"}}],"doc":{"description":"Retrieves parameter and options information from the stream or context.","type":"array"}},{"kind":64,"name":"spliti","modifiers":0,"description":"","children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Case insensitive regular expression. If you want to split on any of the characters which are considered special by regular expressions, you'll need to escape them first. If you think spliti() (or any other regex function, for that matter) is doing something weird, please read the file regex.7, included in the regex/ subdirectory of the PHP distribution. It's in manpage format, so you'll want to do something along the lines of man /usr/local/src/regex/regex.7 in order to read it.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$limit","modifiers":0,"value":"-1","doc":{"description":"If limit is set, the returned array will contain a maximum of limit elements with the last element containing the whole rest of string.","type":"int"}}],"doc":{"type":"array"}},{"kind":64,"name":"mysqli_thread_safe","modifiers":0,"children":[],"doc":{"description":"Tells whether the client library is compiled as thread-safe.","type":"bool"}},{"kind":64,"name":"oci_fetch_row","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI8 statement identifier created by oci_parse() and executed by oci_execute(), or a REF CURSOR statement identifier.","type":"resource"}}],"doc":{"description":"Returns a numerically indexed array containing the next result-set row of a query. Each array entry corresponds to a column of the row. This function is typically called in a loop until it returns FALSE, indicating no more rows exist.","type":"array"}},{"kind":64,"name":"timezone_abbreviations_list","modifiers":0,"children":[],"doc":{"description":"Procedural style","type":"array"}},{"kind":64,"name":"method_exists","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"An object instance or a class name","type":"mixed"}},{"kind":128,"name":"$method_name","modifiers":0,"doc":{"description":"The method name","type":"string"}}],"doc":{"description":"Checks if the class method exists in the given object.","type":"bool"}},{"kind":64,"name":"tidy_get_root","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Returns a tidyNode object representing the root of the tidy parse tree.","type":"tidyNode"}},{"kind":64,"name":"pspell_new_config","modifiers":0,"description":"","children":[{"kind":128,"name":"$config","modifiers":0,"doc":{"description":"The config parameter is the one returned by pspell_config_create() when the config was created.","type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"exec","modifiers":0,"children":[{"kind":128,"name":"$command","modifiers":0,"doc":{"description":"The command that will be executed.","type":"string"}},{"kind":128,"name":"$output","modifiers":1024,"doc":{"description":"If the output argument is present, then the specified array will be filled with every line of output from the command. Trailing whitespace, such as \\n, is not included in this array. Note that if the array already contains some elements, exec() will append to the end of the array. If you do not want the function to append elements, call unset() on the array before passing it to exec().","type":"array"}},{"kind":128,"name":"$return_var","modifiers":1024,"doc":{"description":"If the return_var argument is present along with the output argument, then the return status of the executed command will be written to this variable.","type":"int"}}],"doc":{"description":"exec() executes the given command.","type":"string"}},{"kind":64,"name":"str_shuffle","modifiers":0,"description":"","children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"mysqli_store_result","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"The option that you want to set. It can be one of the following values: Valid options Name Description MYSQLI_STORE_RESULT_COPY_DATA Copy results from the internal mysqlnd buffer into the PHP variables fetched. By default, mysqlnd will use a reference logic to avoid copying and duplicating results held in memory. For certain result sets, for example, result sets with many small rows, the copy approach can reduce the overall memory usage because PHP variables holding results may be released earlier (available with mysqlnd only, since PHP 5.6.0)","type":"int"}}],"doc":{"description":"Transfers the result set from the last query on the database connection represented by the link parameter to be used with the mysqli_data_seek() function.","type":"mysqli_result"}},{"kind":64,"name":"scandir","modifiers":0,"children":[{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"The directory that will be scanned.","type":"string"}},{"kind":128,"name":"$sorting_order","modifiers":0,"value":"SCANDIR_SORT_ASCENDING","doc":{"description":"By default, the sorted order is alphabetical in ascending order. If the optional sorting_order is set to SCANDIR_SORT_DESCENDING, then the sort order is alphabetical in descending order. If it is set to SCANDIR_SORT_NONE then the result is unsorted.","type":"int"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"For a description of the context parameter, refer to the streams section of the manual.","type":"resource"}}],"doc":{"description":"Returns an array of files and directories from the directory.","type":"array"}},{"kind":64,"name":"msg_queue_exists","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"Queue key.","type":"int"}}],"doc":{"description":"Checks whether the message queue key exists.","type":"bool"}},{"kind":64,"name":"pfsockopen","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$port","modifiers":0,"description":"","value":"-1","doc":{"type":"int"}},{"kind":128,"name":"$errno","modifiers":1024,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$errstr","modifiers":1024,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"description":"","value":"ini_get(\"default_socket_timeout\")","doc":{"type":"float"}}],"doc":{"description":"This function behaves exactly as fsockopen() with the difference that the connection is not closed after the script finishes. It is the persistent version of fsockopen().","type":"resource"}},{"kind":64,"name":"libxml_set_external_entity_loader","modifiers":0,"children":[{"kind":128,"name":"$resolver_function","modifiers":0,"doc":{"description":"A callable that takes three arguments. Two strings, a public id and system id, and a context (an array with four keys) as the third argument. This callback should return a resource, a string from which a resource can be opened, or NULL.","type":"callable"}}],"doc":{"description":"Changes the default external entity loader.","type":"void"}},{"kind":64,"name":"flock","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"A file system pointer resource that is typically created using fopen().","type":"resource"}},{"kind":128,"name":"$operation","modifiers":0,"doc":{"description":"operation is one of the following: LOCK_SH to acquire a shared lock (reader). LOCK_EX to acquire an exclusive lock (writer). LOCK_UN to release a lock (shared or exclusive). It is also possible to add LOCK_NB as a bitmask to one of the above operations if you don't want flock() to block while locking.","type":"int"}},{"kind":128,"name":"$wouldblock","modifiers":1024,"doc":{"description":"The optional third argument is set to 1 if the lock would block (EWOULDBLOCK errno condition).","type":"int"}}],"doc":{"description":"flock() allows you to perform a simple reader/writer model which can be used on virtually every platform (including most Unix derivatives and even Windows).","type":"bool"}},{"kind":64,"name":"date_add","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTime object returned by date_create(). The function modifies this object.","type":"DateTime"}},{"kind":128,"name":"$interval","modifiers":0,"doc":{"description":"A DateInterval object","type":"DateInterval"}}],"doc":{"description":"Adds the specified DateInterval object to the specified DateTime object.","type":"DateTime"}},{"kind":64,"name":"count","modifiers":0,"children":[{"kind":128,"name":"$array_or_countable","modifiers":0,"doc":{"description":"An array or Countable object.","type":"mixed"}},{"kind":128,"name":"$mode","modifiers":0,"value":"COUNT_NORMAL","doc":{"description":"If the optional mode parameter is set to COUNT_RECURSIVE (or 1), count() will recursively count the array. This is particularly useful for counting all the elements of a multidimensional array. Caution count() can detect recursion to avoid an infinite loop, but will emit an E_WARNING every time it does (in case the array contains itself more than once) and return a count higher than may be expected.","type":"int"}}],"doc":{"description":"Counts all elements in an array, or something in an object.","type":"int"}},{"kind":64,"name":"sha1","modifiers":0,"description":"","children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"false","doc":{"description":"If the optional raw_output is set to TRUE, then the sha1 digest is instead returned in raw binary format with a length of 20, otherwise the returned value is a 40-character hexadecimal number.","type":"bool"}}],"doc":{"type":"string"}},{"kind":64,"name":"snmp_set_oid_output_format","modifiers":0,"children":[{"kind":128,"name":"$oid_format","modifiers":0,"value":"SNMP_OID_OUTPUT_MODULE","doc":{"description":"OID .1.3.6.1.2.1.1.3.0 representation for various oid_format values SNMP_OID_OUTPUT_FULL.iso.org.dod.internet.mgmt.mib-2.system.sysUpTime.sysUpTimeInstanceSNMP_OID_OUTPUT_NUMERIC.1.3.6.1.2.1.1.3.0 Begining from PHP 5.4.0 four additional constants available: SNMP_OID_OUTPUT_MODULEDISMAN-EVENT-MIB::sysUpTimeInstanceSNMP_OID_OUTPUT_SUFFIXsysUpTimeInstanceSNMP_OID_OUTPUT_UCDsystem.sysUpTime.sysUpTimeInstanceSNMP_OID_OUTPUT_NONEUndefined","type":"int"}}],"doc":{"description":"snmp_set_oid_output_format() sets the output format to be full or numeric.","type":"bool"}},{"kind":64,"name":"m_validateidentifier","modifiers":0,"description":"","children":[{"kind":128,"name":"$conn","modifiers":0,"doc":{"description":"An MCVE_CONN resource returned by m_initengine().","type":"resource"}},{"kind":128,"name":"$tf","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"mcrypt_module_get_algo_key_size","modifiers":0,"description":"","children":[{"kind":128,"name":"$algorithm","modifiers":0,"doc":{"description":"The algorithm name.","type":"string"}},{"kind":128,"name":"$lib_dir","modifiers":0,"doc":{"description":"This optional parameter can contain the location where the mode module is on the system.","type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"imagecreatefromxbm","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the XBM image.","type":"string"}}],"doc":{"description":"imagecreatefromxbm() returns an image identifier representing the image obtained from the given filename.","type":"resource"}},{"kind":64,"name":"openssl_get_cert_locations","modifiers":0,"children":[],"doc":{"description":"openssl_get_cert_locations() returns an array with information about the available certificate locations that will be searched for SSL certificates.","type":"array"}},{"kind":64,"name":"imagesy","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}}],"doc":{"description":"Returns the height of the given image resource.","type":"int"}},{"kind":64,"name":"mysqli_query","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query string. Data inside the query should be properly escaped.","type":"string"}},{"kind":128,"name":"$resultmode","modifiers":0,"value":"MYSQLI_STORE_RESULT","doc":{"description":"Either the constant MYSQLI_USE_RESULT or MYSQLI_STORE_RESULT depending on the desired behavior. By default, MYSQLI_STORE_RESULT is used. If you use MYSQLI_USE_RESULT all subsequent calls will return error Commands out of sync unless you call mysqli_free_result() With MYSQLI_ASYNC (available with mysqlnd), it is possible to perform query asynchronously. mysqli_poll() is then used to get results from such queries.","type":"int"}}],"doc":{"description":"Performs a query against the database.","type":"mixed"}},{"kind":64,"name":"mysqli_autocommit","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"Whether to turn on auto-commit or not.","type":"bool"}}],"doc":{"description":"Turns on or off auto-commit mode on queries for the database connection.","type":"bool"}},{"kind":64,"name":"xmlwriter_open_memory","modifiers":0,"children":[],"doc":{"description":"Creates a new XMLWriter using memory for string output.","type":"resource"}},{"kind":64,"name":"oci_fetch_all","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI8 statement identifier created by oci_parse() and executed by oci_execute(), or a REF CURSOR statement identifier.","type":"resource"}},{"kind":128,"name":"$output","modifiers":1024,"doc":{"description":"The variable to contain the returned rows. LOB columns are returned as strings, where Oracle supports conversion. See oci_fetch_array() for more information on how data and types are fetched.","type":"array"}},{"kind":128,"name":"$skip","modifiers":0,"value":"0","doc":{"description":"The number of initial rows to discard when fetching the result. The default value is 0, so the first row onwards is returned.","type":"int"}},{"kind":128,"name":"$maxrows","modifiers":0,"value":"-1","doc":{"description":"The number of rows to return. The default is -1 meaning return all the rows from skip + 1 onwards.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"value":"OCI_FETCHSTATEMENT_BY_COLUMN","doc":{"description":"Parameter flags indicates the array structure and whether associative arrays should be used. oci_fetch_all() Array Structure Modes Constant Description OCI_FETCHSTATEMENT_BY_ROW The outer array will contain one sub-array per query row. OCI_FETCHSTATEMENT_BY_COLUMN The outer array will contain one sub-array per query column. This is the default. Arrays can be indexed either by column heading or numerically. Only one index mode will be returned. oci_fetch_all() Array Index Modes Constant Description OCI_NUM Numeric indexes are used for each column's array. OCI_ASSOC Associative indexes are used for each column's array. This is the default. Use the addition operator \"+\" to choose a combination of array structure and index modes. Oracle's default, non-case sensitive column names will have uppercase array keys. Case-sensitive column names will have array keys using the exact column case. Use var_dump() on output to verify the appropriate case to use for each query. Queries that have more than one column with the same name should use column aliases. Otherwise only one of the columns will appear in an associative array.","type":"int"}}],"doc":{"description":"Fetches multiple rows from a query into a two-dimensional array. By default, all rows are returned.","type":"int"}},{"kind":64,"name":"lcg_value","modifiers":0,"children":[],"doc":{"description":"lcg_value() returns a pseudo random number in the range of (0, 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes.","type":"float"}},{"kind":64,"name":"xml_set_end_namespace_decl_handler","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser.","type":"resource"}},{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser. The function named by handler must accept two parameters, and should return an integer value. If the value returned from the handler is FALSE (which it will be if no value is returned), the XML parser will stop parsing and xml_get_error_code() will return XML_ERROR_EXTERNAL_ENTITY_HANDLING. handler ( resource $parser , string $prefix ) parser The first parameter, parser, is a reference to the XML parser calling the handler. prefix The prefix is a string used to reference the namespace within an XML object. If a handler function is set to an empty string, or FALSE, the handler in question is disabled. Note: Instead of a function name, an array containing an object reference and a method name can also be supplied.","type":"callable"}}],"doc":{"description":"Set a handler to be called when leaving the scope of a namespace declaration. This will be called, for each namespace declaration, after the handler for the end tag of the element in which the namespace was declared.","type":"bool"}},{"kind":64,"name":"socket_select","modifiers":0,"children":[{"kind":128,"name":"$read","modifiers":1024,"doc":{"description":"The sockets listed in the read array will be watched to see if characters become available for reading (more precisely, to see if a read will not block - in particular, a socket resource is also ready on end-of-file, in which case a socket_read() will return a zero length string).","type":"array"}},{"kind":128,"name":"$write","modifiers":1024,"doc":{"description":"The sockets listed in the write array will be watched to see if a write will not block.","type":"array"}},{"kind":128,"name":"$except","modifiers":1024,"doc":{"description":"The sockets listed in the except array will be watched for exceptions.","type":"array"}},{"kind":128,"name":"$tv_sec","modifiers":0,"doc":{"description":"The tv_sec and tv_usec together form the timeout parameter. The timeout is an upper bound on the amount of time elapsed before socket_select() return. tv_sec may be zero , causing socket_select() to return immediately. This is useful for polling. If tv_sec is NULL (no timeout), socket_select() can block indefinitely.","type":"int"}},{"kind":128,"name":"$tv_usec","modifiers":0,"description":"","value":"0","doc":{"type":"int"}}],"doc":{"description":"socket_select() accepts arrays of sockets and waits for them to change status. Those coming with BSD sockets background will recognize that those socket resource arrays are in fact the so-called file descriptor sets. Three independent arrays of socket resources are watched.","type":"int"}},{"kind":64,"name":"ibase_rollback_ret","modifiers":0,"children":[{"kind":128,"name":"$link_or_trans_identifier","modifiers":0,"value":"NULL","doc":{"description":"If called without an argument, this function rolls back the default transaction of the default link. If the argument is a connection identifier, the default transaction of the corresponding connection will be rolled back. If the argument is a transaction identifier, the corresponding transaction will be rolled back. The transaction context will be retained, so statements executed from within this transaction will not be invalidated.","type":"resource"}}],"doc":{"description":"Rolls back a transaction without closing it.","type":"bool"}},{"kind":64,"name":"dba_open","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"Commonly a regular path in your filesystem.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"It is r for read access, w for read/write access to an already existing database, c for read/write access and database creation if it doesn't currently exist, and n for create, truncate and read/write access. The database is created in BTree mode, other modes (like Hash or Queue) are not supported. Additionally you can set the database lock method with the next char. Use l to lock the database with a .lck file or d to lock the databasefile itself. It is important that all of your applications do this consistently. If you want to test the access and do not want to wait for the lock you can add t as third character. When you are absolutely sure that you do not require database locking you can do so by using - instead of l or d. When none of d, l or - is used, dba will lock on the database file as it would with d. Note: There can only be one writer for one database file. When you use dba on a web server and more than one request requires write operations they can only be done one after another. Also read during write is not allowed. The dba extension uses locks to prevent this. See the following table: DBA locking already open mode = \"rl\" mode = \"rlt\" mode = \"wl\" mode = \"wlt\" mode = \"rd\" mode = \"rdt\" mode = \"wd\" mode = \"wdt\" not open ok ok ok ok ok ok ok ok mode = \"rl\" ok ok wait false illegal illegal illegal illegal mode = \"wl\" wait false wait false illegal illegal illegal illegal mode = \"rd\" illegal illegal illegal illegal ok ok wait false mode = \"wd\" illegal illegal illegal illegal wait false wait false ok: the second call will be successfull. wait: the second call waits until dba_close() is called for the first. false: the second call returns false. illegal: you must not mix \"l\" and \"d\" modifiers for mode parameter.","type":"string"}},{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"The name of the handler which shall be used for accessing path. It is passed all optional parameters given to dba_open() and can act on behalf of them.","type":"string"}}],"doc":{"description":"dba_open() establishes a database instance for path with mode using handler.","type":"resource"}},{"kind":64,"name":"idn_to_utf8","modifiers":0,"children":[{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"Domain to convert in an IDNA ASCII-compatible format.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Conversion options - combination of IDNA_* constants (except IDNA_ERROR_* constants).","type":"int"}},{"kind":128,"name":"$variant","modifiers":0,"value":"INTL_IDNA_VARIANT_2003","doc":{"description":"Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or INTL_IDNA_VARIANT_UTS46 for UTS #46.","type":"int"}},{"kind":128,"name":"$idna_info","modifiers":1024,"doc":{"description":"This parameter can be used only if INTL_IDNA_VARIANT_UTS46 was used for variant. In that case, it will be filled with an array with the keys 'result', the possibly illegal result of the transformation, 'isTransitionalDifferent', a boolean indicating whether the usage of the transitional mechanisms of UTS #46 either has or would have changed the result and 'errors', which is an int representing a bitset of the error constants IDNA_ERROR_*.","type":"array"}}],"doc":{"description":"This function converts a Unicode domain name from an IDNA ASCII-compatible format to plain Unicode, encoded in UTF-8.","type":"string"}},{"kind":64,"name":"debug_print_backtrace","modifiers":0,"children":[{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"As of 5.3.6, this parameter is a bitmask for the following options: debug_print_backtrace() options DEBUG_BACKTRACE_IGNORE_ARGS Whether or not to omit the \"args\" index, and thus all the function/method arguments, to save memory.","type":"int"}},{"kind":128,"name":"$limit","modifiers":0,"value":"0","doc":{"description":"As of 5.4.0, this parameter can be used to limit the number of stack frames printed. By default (limit=0) it prints all stack frames.","type":"int"}}],"doc":{"description":"debug_print_backtrace() prints a PHP backtrace. It prints the function calls, included/required files and eval()ed stuff.","type":"void"}},{"kind":64,"name":"openssl_spki_new","modifiers":0,"children":[{"kind":128,"name":"$privkey","modifiers":1024,"doc":{"description":"privkey should be set to a private key that was previously generated by openssl_pkey_new() (or otherwise obtained from the other openssl_pkey family of functions). The corresponding public portion of the key will be used to sign the CSR.","type":"resource"}},{"kind":128,"name":"$challenge","modifiers":1024,"doc":{"description":"The challenge associated to associate with the SPKAC","type":"string"}},{"kind":128,"name":"$algorithm","modifiers":0,"value":"0","doc":{"description":"The digest algorithm. See openssl_get_md_method().","type":"int"}}],"doc":{"description":"Generates a signed public key and challenge using specified hashing algorithm","type":"string"}},{"kind":64,"name":"mssql_min_message_severity","modifiers":0,"description":"","children":[{"kind":128,"name":"$severity","modifiers":0,"doc":{"description":"The new message severity.","type":"int"}}],"doc":{"type":"void"}},{"kind":64,"name":"imagepsbbox","modifiers":0,"description":"","children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The text to be written.","type":"string"}},{"kind":128,"name":"$font","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"size is expressed in pixels.","type":"int"}},{"kind":128,"name":"$space","modifiers":0,"doc":{"description":"Allows you to change the default value of a space in a font. This amount is added to the normal value and can also be negative. Expressed in character space units, where 1 unit is 1/1000th of an em-square.","type":"int"}},{"kind":128,"name":"$tightness","modifiers":0,"doc":{"description":"tightness allows you to control the amount of white space between characters. This amount is added to the normal character width and can also be negative. Expressed in character space units, where 1 unit is 1/1000th of an em-square.","type":"int"}},{"kind":128,"name":"$angle","modifiers":0,"doc":{"description":"angle is in degrees.","type":"float"}}],"doc":{"type":"array"}},{"kind":64,"name":"array_combine","modifiers":0,"children":[{"kind":128,"name":"$keys","modifiers":0,"doc":{"description":"Array of keys to be used. Illegal values for key will be converted to string.","type":"array"}},{"kind":128,"name":"$values","modifiers":0,"doc":{"description":"Array of values to be used","type":"array"}}],"doc":{"description":"Creates an array by using the values from the keys array as keys and the values from the values array as the corresponding values.","type":"array"}},{"kind":64,"name":"xml_set_unparsed_entity_decl_handler","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to set up unparsed entity declaration handler function.","type":"resource"}},{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser. The function named by handler must accept six parameters: handler ( resource $parser , string $entity_name , string $base , string $system_id , string $public_id , string $notation_name ) parser The first parameter, parser, is a reference to the XML parser calling the handler. entity_name The name of the entity that is about to be defined. base This is the base for resolving the system identifier (systemId) of the external entity.Currently this parameter will always be set to an empty string. system_id System identifier for the external entity. public_id Public identifier for the external entity. notation_name Name of the notation of this entity (see xml_set_notation_decl_handler()). If a handler function is set to an empty string, or FALSE, the handler in question is disabled. Note: Instead of a function name, an array containing an object reference and a method name can also be supplied.","type":"callable"}}],"doc":{"description":"Sets the unparsed entity declaration handler function for the XML parser parser.","type":"bool"}},{"kind":64,"name":"fbsql_field_len","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result pointer returned by fbsql_list_fields().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical offset of the field. The field index starts at 0.","type":"int"}}],"doc":{"description":"Returns the length of the specified field.","type":"int"}},{"kind":64,"name":"openssl_seal","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to seal.","type":"string"}},{"kind":128,"name":"$sealed_data","modifiers":1024,"doc":{"description":"The sealed data.","type":"string"}},{"kind":128,"name":"$env_keys","modifiers":1024,"doc":{"description":"Array of encrypted keys.","type":"array"}},{"kind":128,"name":"$pub_key_ids","modifiers":0,"doc":{"description":"Array of public key resource identifiers.","type":"array"}},{"kind":128,"name":"$method","modifiers":0,"value":"\"RC4\"","doc":{"description":"The cipher method.","type":"string"}}],"doc":{"description":"openssl_seal() seals (encrypts) data by using the given method with a randomly generated secret key. The key is encrypted with each of the public keys associated with the identifiers in pub_key_ids and each encrypted key is returned in env_keys. This means that one can send sealed data to multiple recipients (provided one has obtained their public keys). Each recipient must receive both the sealed data and the envelope key that was encrypted with the recipient's public key.","type":"int"}},{"kind":64,"name":"pg_num_fields","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}}],"doc":{"description":"pg_num_fields() returns the number of fields (columns) in a PostgreSQL result resource.","type":"int"}},{"kind":64,"name":"openssl_x509_check_private_key","modifiers":0,"children":[{"kind":128,"name":"$cert","modifiers":0,"doc":{"description":"The certificate.","type":"mixed"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The private key.","type":"mixed"}}],"doc":{"description":"Checks whether the given key is the private key that corresponds to cert.","type":"bool"}},{"kind":64,"name":"imagerectangle","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$x1","modifiers":0,"doc":{"description":"Upper left x coordinate.","type":"int"}},{"kind":128,"name":"$y1","modifiers":0,"doc":{"description":"Upper left y coordinate 0, 0 is the top left corner of the image.","type":"int"}},{"kind":128,"name":"$x2","modifiers":0,"doc":{"description":"Bottom right x coordinate.","type":"int"}},{"kind":128,"name":"$y2","modifiers":0,"doc":{"description":"Bottom right y coordinate.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"imagerectangle() creates a rectangle starting at the specified coordinates.","type":"bool"}},{"kind":64,"name":"textdomain","modifiers":0,"children":[{"kind":128,"name":"$text_domain","modifiers":0,"value":"NULL","doc":{"description":"The new message domain, or NULL to get the current setting without changing it","type":"string"}}],"doc":{"description":"This function sets the domain to search within when calls are made to gettext(), usually the named after an application.","type":"string"}},{"kind":64,"name":"imap_rfc822_parse_adrlist","modifiers":0,"children":[{"kind":128,"name":"$address","modifiers":0,"doc":{"description":"A string containing addresses","type":"string"}},{"kind":128,"name":"$default_host","modifiers":0,"doc":{"description":"The default host name","type":"string"}}],"doc":{"description":"Parses the address string as defined in » RFC2822 and for each address.","type":"array"}},{"kind":64,"name":"sybase_result","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$row","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"The field argument can be the field's offset, or the field's name, or the field's table dot field's name (tablename.fieldname). If the column name has been aliased ('select foo as bar from...'), use the alias instead of the column name.","type":"mixed"}}],"doc":{"type":"string"}},{"kind":64,"name":"socket_set_nonblock","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create() or socket_accept().","type":"resource"}}],"doc":{"description":"The socket_set_nonblock() function sets the O_NONBLOCK flag on the socket specified by the socket parameter.","type":"bool"}},{"kind":64,"name":"ctype_alnum","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The tested string.","type":"string"}}],"doc":{"description":"Checks if all of the characters in the provided string, text, are alphanumeric.","type":"bool"}},{"kind":64,"name":"pspell_new_personal","modifiers":0,"description":"","children":[{"kind":128,"name":"$personal","modifiers":0,"doc":{"description":"The file where words added to the personal list will be stored. It should be an absolute filename beginning with '/' because otherwise it will be relative to $HOME, which is \"/root\" for most systems, and is probably not what you want.","type":"string"}},{"kind":128,"name":"$language","modifiers":0,"doc":{"description":"The language code which consists of the two letter ISO 639 language code and an optional two letter ISO 3166 country code after a dash or underscore.","type":"string"}},{"kind":128,"name":"$spelling","modifiers":0,"doc":{"description":"The requested spelling for languages with more than one spelling such as English. Known values are 'american', 'british', and 'canadian'.","type":"string"}},{"kind":128,"name":"$jargon","modifiers":0,"doc":{"description":"Extra information to distinguish two different words lists that have the same language and spelling parameters.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding that words are expected to be in. Valid values are utf-8, iso8859-*, koi8-r, viscii, cp1252, machine unsigned 16, machine unsigned 32.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"value":"0","doc":{"description":"The mode in which spellchecker will work. There are several modes available: PSPELL_FAST - Fast mode (least number of suggestions) PSPELL_NORMAL - Normal mode (more suggestions) PSPELL_BAD_SPELLERS - Slow mode (a lot of suggestions) PSPELL_RUN_TOGETHER - Consider run-together words as legal compounds. That is, \"thecat\" will be a legal compound, although there should be a space between the two words. Changing this setting only affects the results returned by pspell_check(); pspell_suggest() will still return suggestions. Mode is a bitmask constructed from different constants listed above. However, PSPELL_FAST, PSPELL_NORMAL and PSPELL_BAD_SPELLERS are mutually exclusive, so you should select only one of them.","type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"odbc_pconnect","modifiers":0,"children":[{"kind":128,"name":"$dsn","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$user","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$password","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$cursor_type","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Opens a persistent database connection.","type":"resource"}},{"kind":64,"name":"intlcal_get_least_maximum","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Returns the smallest local maximumw for a field. This should be a value smaller or equal to that returned by IntlCalendar::getActualMaxmimum(), which is in its turn smaller or equal to that returned by IntlCalendar::getMaximum().","type":"int"}},{"kind":64,"name":"random_int","modifiers":0,"children":[{"kind":128,"name":"$min","modifiers":0,"doc":{"description":"The lowest value to be returned, which must be PHP_INT_MIN or higher.","type":"int"}},{"kind":128,"name":"$max","modifiers":0,"doc":{"description":"The highest value to be returned, which must be less than or equal to PHP_INT_MAX.","type":"int"}}],"doc":{"description":"Generates cryptographic random integers that are suitable for use where unbiased results are critical, such as when shuffling a deck of cards for a poker game.","type":"int"}},{"kind":64,"name":"rewinddir","modifiers":0,"children":[{"kind":128,"name":"$dir_handle","modifiers":0,"doc":{"description":"The directory handle resource previously opened with opendir(). If the directory handle is not specified, the last link opened by opendir() is assumed.","type":"resource"}}],"doc":{"description":"Resets the directory stream indicated by dir_handle to the beginning of the directory.","type":"void"}},{"kind":64,"name":"dba_sync","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The database handler, returned by dba_open() or dba_popen().","type":"resource"}}],"doc":{"description":"dba_sync() synchronizes the database. This will probably trigger a physical write to the disk, if supported.","type":"bool"}},{"kind":64,"name":"mysqli_stmt_get_warnings","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"description":"","doc":{"type":"mysqli_stmt"}}],"doc":{"description":"Procedural style","type":"object"}},{"kind":64,"name":"pspell_check","modifiers":0,"description":"","children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$word","modifiers":0,"doc":{"description":"The tested word.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"ob_clean","modifiers":0,"children":[],"doc":{"description":"This function discards the contents of the output buffer.","type":"void"}},{"kind":64,"name":"opcache_get_configuration","modifiers":0,"children":[],"doc":{"description":"This function returns configuration information about the cache instance","type":"array"}},{"kind":64,"name":"readline_callback_handler_install","modifiers":0,"children":[{"kind":128,"name":"$prompt","modifiers":0,"doc":{"description":"The prompt message.","type":"string"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"The callback function takes one parameter; the user input returned.","type":"callable"}}],"doc":{"description":"Sets up a readline callback interface then prints prompt and immediately returns. Calling this function twice without removing the previous callback interface will automatically and conveniently overwrite the old interface.","type":"bool"}},{"kind":64,"name":"sybase_pconnect","modifiers":0,"description":"","children":[{"kind":128,"name":"$servername","modifiers":0,"doc":{"description":"The servername argument has to be a valid servername that is defined in the 'interfaces' file.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"Sybase user name","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"Password associated with username.","type":"string"}},{"kind":128,"name":"$charset","modifiers":0,"doc":{"description":"Specifies the charset for the connection","type":"string"}},{"kind":128,"name":"$appname","modifiers":0,"doc":{"description":"Specifies an appname for the Sybase connection. This allow you to make separate connections in the same script to the same database. This may come handy when you have started a transaction in your current connection, and you need to be able to do a separate query which cannot be performed inside this transaction.","type":"string"}}],"doc":{"type":"resource"}},{"kind":64,"name":"stream_resolve_include_path","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The filename to resolve.","type":"string"}}],"doc":{"description":"Resolve filename against the include path according to the same rules as fopen()/include.","type":"string"}},{"kind":64,"name":"oci_field_precision","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Can be the field's index (1-based) or name.","type":"mixed"}}],"doc":{"description":"Returns precision of the field.","type":"int"}},{"kind":64,"name":"mysql_field_name","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.","type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"msql_fetch_object","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}}],"doc":{"description":"msql_fetch_object() is similar to msql_fetch_array(), with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).","type":"object"}},{"kind":64,"name":"hash_copy","modifiers":0,"description":"","children":[{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"Hashing context returned by hash_init().","type":"resource"}}],"doc":{"type":"resource"}},{"kind":64,"name":"imagescale","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$new_width","modifiers":0,"doc":{"description":"The width to scale the image to.","type":"int"}},{"kind":128,"name":"$new_height","modifiers":0,"value":"-1","doc":{"description":"The height to scale the image to. If omitted or negative, the aspect ratio will be preserved. Caution You should always provide the height if using PHP 5.5.18 or earlier, or PHP 5.6.2 or earlier, as the aspect ratio calculation was incorrect.","type":"int"}},{"kind":128,"name":"$mode","modifiers":0,"value":"IMG_BILINEAR_FIXED","doc":{"description":"One of IMG_NEAREST_NEIGHBOUR, IMG_BILINEAR_FIXED, IMG_BICUBIC, IMG_BICUBIC_FIXED or anything else (will use two pass). Note: IMG_WEIGHTED4 is not yet supported.","type":"int"}}],"doc":{"description":"imagescale() scales an image using the given interpolation algorithm.","type":"resource"}},{"kind":64,"name":"mb_strpos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string being checked.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to find in haystack. In contrast with strpos(), numeric values are not applied as the ordinal value of a character.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"The search offset. If it is not specified, 0 is used. A negative offset counts from the end of the string.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Finds position of the first occurrence of a string in a string.","type":"int"}},{"kind":64,"name":"readgzfile","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The file name. This file will be opened from the filesystem and its contents written to standard output.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"0","doc":{"description":"You can set this optional parameter to 1, if you want to search for the file in the include_path too.","type":"int"}}],"doc":{"description":"Reads a file, decompresses it and writes it to standard output.","type":"int"}},{"kind":64,"name":"fbsql_rollback","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Ends the current transaction by rolling back all statements issued since last commit.","type":"bool"}},{"kind":64,"name":"mysqli_get_proto_info","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns an integer representing the MySQL protocol version used by the connection represented by the link parameter.","type":"int"}},{"kind":64,"name":"imageaffinematrixget","modifiers":0,"children":[{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"One of the IMG_AFFINE_* constants.","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"If type is IMG_AFFINE_TRANSLATE or IMG_AFFINE_SCALE, options has to be an array with keys x and y, both having float values. If type is IMG_AFFINE_ROTATE, IMG_AFFINE_SHEAR_HORIZONTAL or IMG_AFFINE_SHEAR_VERTICAL, options has to be a float specifying the angle.","type":"mixed"}}],"doc":{"description":"Returns an affine transformation matrix.","type":"array"}},{"kind":64,"name":"fclose","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen().","type":"resource"}}],"doc":{"description":"The file pointed to by handle is closed.","type":"bool"}},{"kind":64,"name":"zlib_encode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to compress.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The compression algorithm. Either ZLIB_ENCODING_RAW, ZLIB_ENCODING_DEFLATE or ZLIB_ENCODING_GZIP.","type":"string"}},{"kind":128,"name":"$level","modifiers":0,"description":"","value":"-1","doc":{"type":"string"}}],"doc":{"description":"Compress data with the specified encoding.","type":"string"}},{"kind":64,"name":"shm_put_var","modifiers":0,"children":[{"kind":128,"name":"$shm_identifier","modifiers":0,"doc":{"description":"A shared memory resource handle as returned by shm_attach()","type":"resource"}},{"kind":128,"name":"$variable_key","modifiers":0,"doc":{"description":"The variable key.","type":"int"}},{"kind":128,"name":"$variable","modifiers":0,"doc":{"description":"The variable. All variable types that serialize() supports may be used: generally this means all types except for resources and some internal objects that cannot be serialized.","type":"mixed"}}],"doc":{"description":"shm_put_var() inserts or updates the variable with the given variable_key.","type":"bool"}},{"kind":64,"name":"enchant_broker_list_dicts","modifiers":0,"children":[{"kind":128,"name":"$broker","modifiers":0,"doc":{"description":"Broker resource","type":"resource"}}],"doc":{"description":"Returns a list of available dictionaries with their details.","type":"mixed"}},{"kind":64,"name":"date_get_last_errors","modifiers":0,"children":[],"doc":{"description":"Returns an array of warnings and errors found while parsing a date/time string.","type":"array"}},{"kind":64,"name":"imagecolorexact","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$red","modifiers":0,"doc":{"description":"Value of red component.","type":"int"}},{"kind":128,"name":"$green","modifiers":0,"doc":{"description":"Value of green component.","type":"int"}},{"kind":128,"name":"$blue","modifiers":0,"doc":{"description":"Value of blue component.","type":"int"}}],"doc":{"description":"Returns the index of the specified color in the palette of the image.","type":"int"}},{"kind":64,"name":"iconv_get_encoding","modifiers":0,"children":[{"kind":128,"name":"$type","modifiers":0,"value":"\"all\"","doc":{"description":"The value of the optional type can be: all input_encoding output_encoding internal_encoding","type":"string"}}],"doc":{"description":"Retrieve internal configuration variables of iconv extension.","type":"mixed"}},{"kind":64,"name":"locale_get_primary_language","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the primary language code from","type":"string"}}],"doc":{"description":"Gets the primary language for the input locale","type":"string"}},{"kind":64,"name":"readline_callback_read_char","modifiers":0,"children":[],"doc":{"description":"Reads a character of user input. When a line is received, this function informs the readline callback interface installed using readline_callback_handler_install() that a line is ready for input.","type":"void"}},{"kind":32,"name":"getWidth","modifiers":1,"children":[],"doc":{"description":"Retrieves the Width","type":"float"}},{"kind":64,"name":"proc_open","modifiers":0,"children":[{"kind":128,"name":"$cmd","modifiers":0,"doc":{"description":"The command to execute","type":"string"}},{"kind":128,"name":"$descriptorspec","modifiers":0,"doc":{"description":"An indexed array where the key represents the descriptor number and the value represents how PHP will pass that descriptor to the child process. 0 is stdin, 1 is stdout, while 2 is stderr. Each element can be: An array describing the pipe to pass to the process. The first element is the descriptor type and the second element is an option for the given type. Valid types are pipe (the second element is either r to pass the read end of the pipe to the process, or w to pass the write end) and file (the second element is a filename). A stream resource representing a real file descriptor (e.g. opened file, a socket, STDIN). The file descriptor numbers are not limited to 0, 1 and 2 - you may specify any valid file descriptor number and it will be passed to the child process. This allows your script to interoperate with other scripts that run as \"co-processes\". In particular, this is useful for passing passphrases to programs like PGP, GPG and openssl in a more secure manner. It is also useful for reading status information provided by those programs on auxiliary file descriptors.","type":"array"}},{"kind":128,"name":"$pipes","modifiers":1024,"doc":{"description":"Will be set to an indexed array of file pointers that correspond to PHP's end of any pipes that are created.","type":"array"}},{"kind":128,"name":"$cwd","modifiers":0,"doc":{"description":"The initial working dir for the command. This must be an absolute directory path, or NULL if you want to use the default value (the working dir of the current PHP process)","type":"string"}},{"kind":128,"name":"$env","modifiers":0,"doc":{"description":"An array with the environment variables for the command that will be run, or NULL to use the same environment as the current PHP process","type":"array"}},{"kind":128,"name":"$other_options","modifiers":0,"doc":{"description":"Allows you to specify additional options. Currently supported options include: suppress_errors (windows only): suppresses errors generated by this function when it's set to TRUE bypass_shell (windows only): bypass cmd.exe shell when set to TRUE","type":"array"}}],"doc":{"description":"proc_open() is similar to popen() but provides a much greater degree of control over the program execution.","type":"resource"}},{"kind":64,"name":"apache_getenv","modifiers":0,"children":[{"kind":128,"name":"$variable","modifiers":0,"doc":{"description":"The Apache environment variable","type":"string"}},{"kind":128,"name":"$walk_to_top","modifiers":0,"value":"false","doc":{"description":"Whether to get the top-level variable available to all Apache layers.","type":"bool"}}],"doc":{"description":"Retrieve an Apache environment variable specified by variable.","type":"string"}},{"kind":64,"name":"sort","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$sort_flags","modifiers":0,"value":"SORT_REGULAR","doc":{"description":"The optional second parameter sort_flags may be used to modify the sorting behavior using these values: Sorting type flags: SORT_REGULAR - compare items normally (don't change types) SORT_NUMERIC - compare items numerically SORT_STRING - compare items as strings SORT_LOCALE_STRING - compare items as strings, based on the current locale. It uses the locale, which can be changed using setlocale() SORT_NATURAL - compare items as strings using \"natural ordering\" like natsort() SORT_FLAG_CASE - can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively","type":"int"}}],"doc":{"description":"This function sorts an array. Elements will be arranged from lowest to highest when this function has completed.","type":"bool"}},{"kind":64,"name":"mcrypt_module_get_supported_key_sizes","modifiers":0,"description":"","children":[{"kind":128,"name":"$algorithm","modifiers":0,"doc":{"description":"The algorithm to be used.","type":"string"}},{"kind":128,"name":"$lib_dir","modifiers":0,"doc":{"description":"The optional lib_dir parameter can contain the location where the algorithm module is on the system.","type":"string"}}],"doc":{"type":"array"}},{"kind":64,"name":"date_parse","modifiers":0,"description":"","children":[{"kind":128,"name":"$date","modifiers":0,"doc":{"description":"Date in format accepted by strtotime().","type":"string"}}],"doc":{"type":"array"}},{"kind":64,"name":"class_parents","modifiers":0,"children":[{"kind":128,"name":"$class","modifiers":0,"doc":{"description":"An object (class instance) or a string (class name).","type":"mixed"}},{"kind":128,"name":"$autoload","modifiers":0,"value":"true","doc":{"description":"Whether to allow this function to load the class automatically through the __autoload() magic method.","type":"bool"}}],"doc":{"description":"This function returns an array with the name of the parent classes of the given class.","type":"array"}},{"kind":64,"name":"snmpset","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The hostname of the SNMP agent (server).","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The write community.","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object id.","type":"string"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The MIB defines the type of each object id. It has to be specified as a single character from the below list. types =The type is taken from the MIBiINTEGER uINTEGERsSTRINGxHEX STRINGdDECIMAL STRINGnNULLOBJoOBJIDtTIMETICKSaIPADDRESSbBITS If OPAQUE_SPECIAL_TYPES was defined while compiling the SNMP library, the following are also valid: types Uunsigned int64Isigned int64FfloatDdouble Most of these will use the obvious corresponding ASN.1 type. 's', 'x', 'd' and 'b' are all different ways of specifying an OCTET STRING value, and the 'u' unsigned type is also used for handling Gauge32 values. If the MIB-Files are loaded by into the MIB Tree with \"snmp_read_mib\" or by specifying it in the libsnmp config, '=' may be used as the type parameter for all object ids as the type can then be automatically read from the MIB. Note that there are two ways to set a variable of the type BITS like e.g. \"SYNTAX BITS {telnet(0), ftp(1), http(2), icmp(3), snmp(4), ssh(5), https(6)}\": Using type \"b\" and a list of bit numbers. This method is not recommended since GET query for the same OID would return e.g. 0xF8. Using type \"x\" and a hex number but without(!) the usual \"0x\" prefix. See examples section for more details.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The new value.","type":"mixed"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"int"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"int"}}],"doc":{"description":"snmpset() is used to set the value of an SNMP object specified by the object_id.","type":"bool"}},{"kind":64,"name":"func_get_args","modifiers":0,"children":[],"doc":{"description":"Gets an array of the function's argument list.","type":"array"}},{"kind":64,"name":"mysqli_get_server_info","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns a string representing the version of the MySQL server that the MySQLi extension is connected to.","type":"string"}},{"kind":64,"name":"mb_substr_count","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string being checked.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string being found.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Counts the number of times the needle substring occurs in the haystack string.","type":"int"}},{"kind":64,"name":"snmp2_walk","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The SNMP agent (server).","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The read community.","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"If NULL, object_id is taken as the root of the SNMP objects tree and all objects under that tree are returned as an array. If object_id is specified, all the SNMP objects below that object_id are returned.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"string"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"string"}}],"doc":{"description":"snmp2_walk() function is used to read all the values from an SNMP agent specified by the hostname.","type":"array"}},{"kind":64,"name":"class_uses","modifiers":0,"children":[{"kind":128,"name":"$class","modifiers":0,"doc":{"description":"An object (class instance) or a string (class name).","type":"mixed"}},{"kind":128,"name":"$autoload","modifiers":0,"value":"true","doc":{"description":"Whether to allow this function to load the class automatically through the __autoload() magic method.","type":"bool"}}],"doc":{"description":"This function returns an array with the names of the traits that the given class uses. This does however not include any traits used by a parent class.","type":"array"}},{"kind":64,"name":"mcrypt_generic_deinit","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"imagepalettetotruecolor","modifiers":0,"children":[{"kind":128,"name":"$src","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Converts a palette based image, created by functions like imagecreate() to a true color image, like imagecreatetruecolor().","type":"bool"}},{"kind":64,"name":"lstat","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to a file or a symbolic link.","type":"string"}}],"doc":{"description":"Gathers the statistics of the file or symbolic link named by filename.","type":"array"}},{"kind":64,"name":"fread","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"A file system pointer resource that is typically created using fopen().","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"Up to length number of bytes read.","type":"int"}}],"doc":{"description":"fread() reads up to length bytes from the file pointer referenced by handle. Reading stops as soon as one of the following conditions is met:","type":"string"}},{"kind":64,"name":"pg_port","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_port() returns the port number that the given PostgreSQL connection resource is connected to.","type":"int"}},{"kind":64,"name":"strrev","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string to be reversed.","type":"string"}}],"doc":{"description":"Returns string, reversed.","type":"string"}},{"kind":64,"name":"intlcal_after","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$other","modifiers":0,"doc":{"description":"The calendar whose time will be checked against the primary objectʼs time.","type":"IntlCalendar"}}],"doc":{"description":"Returns whether this objectʼs time succeeds the argumentʼs time.","type":"bool"}},{"kind":64,"name":"imagefilledellipse","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$cx","modifiers":0,"doc":{"description":"x-coordinate of the center.","type":"int"}},{"kind":128,"name":"$cy","modifiers":0,"doc":{"description":"y-coordinate of the center.","type":"int"}},{"kind":128,"name":"$width","modifiers":0,"doc":{"description":"The ellipse width.","type":"int"}},{"kind":128,"name":"$height","modifiers":0,"doc":{"description":"The ellipse height.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"The fill color. A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"Draws an ellipse centered at the specified coordinate on the given image.","type":"bool"}},{"kind":64,"name":"posix_setegid","modifiers":0,"children":[{"kind":128,"name":"$gid","modifiers":0,"doc":{"description":"The group id.","type":"int"}}],"doc":{"description":"Set the effective group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.","type":"bool"}},{"kind":64,"name":"oci_set_client_info","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"An Oracle connection identifier, returned by oci_connect(), oci_pconnect(), or oci_new_connect().","type":"resource"}},{"kind":128,"name":"$client_info","modifiers":0,"doc":{"description":"User chosen string up to 64 bytes long.","type":"string"}}],"doc":{"description":"Sets the client information for Oracle tracing.","type":"bool"}},{"kind":64,"name":"mssql_num_rows","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"socket_accept","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create().","type":"resource"}}],"doc":{"description":"After the socket socket has been created using socket_create(), bound to a name with socket_bind(), and told to listen for connections with socket_listen(), this function will accept incoming connections on that socket. Once a successful connection is made, a new socket resource is returned, which may be used for communication. If there are multiple connections queued on the socket, the first will be used. If there are no pending connections, socket_accept() will block until a connection becomes present. If socket has been made non-blocking using socket_set_blocking() or socket_set_nonblock(), FALSE will be returned.","type":"resource"}},{"kind":64,"name":"msgfmt_get_pattern","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The message formatter","type":"MessageFormatter"}}],"doc":{"description":"Get the pattern used by the formatter","type":"string"}},{"kind":64,"name":"ceil","modifiers":0,"description":"","children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to round","type":"float"}}],"doc":{"type":"float"}},{"kind":64,"name":"filemtime","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed.","type":"int"}},{"kind":64,"name":"mysqli_set_charset","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$charset","modifiers":0,"doc":{"description":"The charset to be set as default.","type":"string"}}],"doc":{"description":"Sets the default character set to be used when sending data from and to the database server.","type":"bool"}},{"kind":64,"name":"proc_terminate","modifiers":0,"children":[{"kind":128,"name":"$process","modifiers":0,"doc":{"description":"The proc_open() resource that will be closed.","type":"resource"}},{"kind":128,"name":"$signal","modifiers":0,"value":"15","doc":{"description":"This optional parameter is only useful on POSIX operating systems; you may specify a signal to send to the process using the kill(2) system call. The default is SIGTERM.","type":"int"}}],"doc":{"description":"Signals a process (created using proc_open()) that it should terminate. proc_terminate() returns immediately and does not wait for the process to terminate.","type":"bool"}},{"kind":64,"name":"mysqli_affected_rows","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns the number of rows affected by the last INSERT, UPDATE, REPLACE or DELETE query.","type":"int"}},{"kind":64,"name":"pg_lo_read","modifiers":0,"children":[{"kind":128,"name":"$large_object","modifiers":0,"doc":{"description":"PostgreSQL large object (LOB) resource, returned by pg_lo_open().","type":"resource"}},{"kind":128,"name":"$len","modifiers":0,"value":"8192","doc":{"description":"An optional maximum number of bytes to return.","type":"int"}}],"doc":{"description":"pg_lo_read() reads at most len bytes from a large object and returns it as a string.","type":"string"}},{"kind":64,"name":"mb_detect_encoding","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being detected.","type":"string"}},{"kind":128,"name":"$encoding_list","modifiers":0,"value":"mb_detect_order()","doc":{"description":"encoding_list is list of character encoding. Encoding order may be specified by array or comma separated list string. If encoding_list is omitted, detect_order is used.","type":"mixed"}},{"kind":128,"name":"$strict","modifiers":0,"value":"false","doc":{"description":"strict specifies whether to use the strict encoding detection or not. Default is FALSE.","type":"bool"}}],"doc":{"description":"Detects character encoding in string str.","type":"string"}},{"kind":64,"name":"pspell_config_personal","modifiers":0,"children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$file","modifiers":0,"doc":{"description":"The personal wordlist. If the file does not exist, it will be created. The file should be writable by whoever PHP runs as (e.g. nobody).","type":"string"}}],"doc":{"description":"Set a file that contains personal wordlist. The personal wordlist will be loaded and used in addition to the standard one after you call pspell_new_config(). The file is also the file where pspell_save_wordlist() will save personal wordlist to.","type":"bool"}},{"kind":64,"name":"socket_send","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create() or socket_accept().","type":"resource"}},{"kind":128,"name":"$buf","modifiers":0,"doc":{"description":"A buffer containing the data that will be sent to the remote host.","type":"string"}},{"kind":128,"name":"$len","modifiers":0,"doc":{"description":"The number of bytes that will be sent to the remote host from buf.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. Possible values for flags MSG_OOB Send OOB (out-of-band) data. MSG_EOR Indicate a record mark. The sent data completes the record. MSG_EOF Close the sender side of the socket and include an appropriate notification of this at the end of the sent data. The sent data completes the transaction. MSG_DONTROUTE Bypass routing, use direct interface.","type":"int"}}],"doc":{"description":"The function socket_send() sends len bytes to the socket socket from buf.","type":"int"}},{"kind":64,"name":"intlcal_field_difference","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$when","modifiers":0,"doc":{"description":"The time against which to compare the quantity represented by the field. For the result to be positive, the time given for this parameter must be ahead of the time of the object the method is being invoked on.","type":"float"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"The field that represents the quantity being compared. One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Return the difference between the given time and the time this object is set to, with respect to the quantity specified the field parameter.","type":"int"}},{"kind":64,"name":"timezone_transitions_get","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTimeZone object returned by timezone_open()","type":"DateTimeZone"}},{"kind":128,"name":"$timestamp_begin","modifiers":0,"doc":{"description":"Begin timestamp.","type":"int"}},{"kind":128,"name":"$timestamp_end","modifiers":0,"doc":{"description":"End timestamp.","type":"int"}}],"doc":{"description":"Procedural style","type":"array"}},{"kind":64,"name":"mb_convert_case","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being converted.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The mode of the conversion. It can be one of MB_CASE_UPPER, MB_CASE_LOWER, or MB_CASE_TITLE.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Performs case folding on a string, converted in the way specified by mode.","type":"string"}},{"kind":64,"name":"imagetruecolortopalette","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$dither","modifiers":0,"doc":{"description":"Indicates if the image should be dithered - if it is TRUE then dithering will be used which will result in a more speckled image but with better color approximation.","type":"bool"}},{"kind":128,"name":"$ncolors","modifiers":0,"doc":{"description":"Sets the maximum number of colors that should be retained in the palette.","type":"int"}}],"doc":{"description":"imagetruecolortopalette() converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality.","type":"bool"}},{"kind":64,"name":"shmop_write","modifiers":0,"children":[{"kind":128,"name":"$shmid","modifiers":0,"doc":{"description":"The shared memory block identifier created by shmop_open()","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"A string to write into shared memory block","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"Specifies where to start writing data inside the shared memory segment.","type":"int"}}],"doc":{"description":"shmop_write() will write a string into shared memory block.","type":"int"}},{"kind":64,"name":"iconv_mime_encode","modifiers":0,"children":[{"kind":128,"name":"$field_name","modifiers":0,"doc":{"description":"The field name.","type":"string"}},{"kind":128,"name":"$field_value","modifiers":0,"doc":{"description":"The field value.","type":"string"}},{"kind":128,"name":"$preferences","modifiers":0,"value":"NULL","doc":{"description":"You can control the behaviour of iconv_mime_encode() by specifying an associative array that contains configuration items to the optional third parameter preferences. The items supported by iconv_mime_encode() are listed below. Note that item names are treated case-sensitive. Configuration items supported by iconv_mime_encode() Item Type Description Default value Example scheme string Specifies the method to encode a field value by. The value of this item may be either \"B\" or \"Q\", where \"B\" stands for base64 encoding scheme and \"Q\" stands for quoted-printable encoding scheme. B B input-charset string Specifies the character set in which the first parameter field_name and the second parameter field_value are presented. If not given, iconv_mime_encode() assumes those parameters are presented to it in the iconv.internal_encoding ini setting. iconv.internal_encoding ISO-8859-1 output-charset string Specifies the character set to use to compose the MIME header. iconv.internal_encoding UTF-8 line-length integer Specifies the maximum length of the header lines. The resulting header is \"folded\" to a set of multiple lines in case the resulting header field would be longer than the value of this parameter, according to » RFC2822 - Internet Message Format. If not given, the length will be limited to 76 characters. 76 996 line-break-chars string Specifies the sequence of characters to append to each line as an end-of-line sign when \"folding\" is performed on a long header field. If not given, this defaults to \"\\r\\n\" (CR LF). Note that this parameter is always treated as an ASCII string regardless of the value of input-charset. \\r\\n \\n","type":"array"}}],"doc":{"description":"Composes and returns a string that represents a valid MIME header field, which looks like the following:","type":"string"}},{"kind":64,"name":"array_replace_recursive","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The array in which elements are replaced.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"The array from which elements will be extracted.","type":"array"}}],"doc":{"description":"array_replace_recursive() replaces the values of array1 with the same values from all the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later array overwriting the previous values.","type":"array"}},{"kind":64,"name":"array_intersect","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The array with master values to check.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"An array to compare values against.","type":"array"}}],"doc":{"description":"array_intersect() returns an array containing all the values of array1 that are present in all the arguments. Note that keys are preserved.","type":"array"}},{"kind":64,"name":"date_date_set","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTime object returned by date_create(). The function modifies this object.","type":"DateTime"}},{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"Year of the date.","type":"int"}},{"kind":128,"name":"$month","modifiers":0,"doc":{"description":"Month of the date.","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"doc":{"description":"Day of the date.","type":"int"}}],"doc":{"description":"Resets the current date of the DateTime object to a different date.","type":"DateTime"}},{"kind":64,"name":"fsockopen","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"doc":{"description":"If OpenSSL support is installed, you may prefix the hostname with either ssl:// or tls:// to use an SSL or TLS client connection over TCP/IP to connect to the remote host.","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"value":"-1","doc":{"description":"The port number. This can be omitted and skipped with -1 for transports that do not use ports, such as unix://.","type":"int"}},{"kind":128,"name":"$errno","modifiers":1024,"doc":{"description":"If provided, holds the system level error number that occurred in the system-level connect() call. If the value returned in errno is 0 and the function returned FALSE, it is an indication that the error occurred before the connect() call. This is most likely due to a problem initializing the socket.","type":"int"}},{"kind":128,"name":"$errstr","modifiers":1024,"doc":{"description":"The error message as a string.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"ini_get(\"default_socket_timeout\")","doc":{"description":"The connection timeout, in seconds. Note: If you need to set a timeout for reading/writing data over the socket, use stream_set_timeout(), as the timeout parameter to fsockopen() only applies while connecting the socket.","type":"float"}}],"doc":{"description":"Initiates a socket connection to the resource specified by hostname.","type":"resource"}},{"kind":64,"name":"mysqli_error_list","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns a array of errors for the most recent MySQLi function call that can succeed or fail.","type":"array"}},{"kind":64,"name":"xmlwriter_write_dtd_attlist","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the DTD attribute list.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The content of the DTD attribute list.","type":"string"}}],"doc":{"description":"Writes a DTD attribute list.","type":"bool"}},{"kind":64,"name":"bzwrite","modifiers":0,"children":[{"kind":128,"name":"$bz","modifiers":0,"doc":{"description":"The file pointer. It must be valid and must point to a file successfully opened by bzopen().","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The written data.","type":"string"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"If supplied, writing will stop after length (uncompressed) bytes have been written or the end of data is reached, whichever comes first.","type":"int"}}],"doc":{"description":"bzwrite() writes a string into the given bzip2 file stream.","type":"int"}},{"kind":64,"name":"snmp_get_quick_print","modifiers":0,"children":[],"doc":{"description":"Returns the current value stored in the UCD Library for quick_print. quick_print is off by default.","type":"bool"}},{"kind":64,"name":"mysql_stat","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"stream_socket_pair","modifiers":0,"children":[{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"The protocol family to be used: STREAM_PF_INET, STREAM_PF_INET6 or STREAM_PF_UNIX","type":"int"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The type of communication to be used: STREAM_SOCK_DGRAM, STREAM_SOCK_RAW, STREAM_SOCK_RDM, STREAM_SOCK_SEQPACKET or STREAM_SOCK_STREAM","type":"int"}},{"kind":128,"name":"$protocol","modifiers":0,"doc":{"description":"The protocol to be used: STREAM_IPPROTO_ICMP, STREAM_IPPROTO_IP, STREAM_IPPROTO_RAW, STREAM_IPPROTO_TCP or STREAM_IPPROTO_UDP","type":"int"}}],"doc":{"description":"stream_socket_pair() creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication).","type":"array"}},{"kind":64,"name":"gmp_export","modifiers":0,"children":[{"kind":128,"name":"$gmpnumber","modifiers":0,"doc":{"description":"The GMP number being exported","type":"GMP"}},{"kind":128,"name":"$word_size","modifiers":0,"doc":{"description":"Default value is 1. The number of bytes in each chunk of binary data. This is mainly used in conjunction with the options parameter.","type":"integer"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Default value is GMP_MSW_FIRST | GMP_NATIVE_ENDIAN.","type":"integer"}}],"doc":{"description":"Export a GMP number to a binary string","type":"string"}},{"kind":64,"name":"gmp_clrbit","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"The index of the bit to clear. Index 0 represents the least significant bit.","type":"int"}}],"doc":{"description":"Clears (sets to 0) bit index in a. The index starts at 0.","type":"void"}},{"kind":64,"name":"odbc_columnprivileges","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$qualifier","modifiers":0,"doc":{"description":"The qualifier.","type":"string"}},{"kind":128,"name":"$owner","modifiers":0,"doc":{"description":"The owner.","type":"string"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"The table name.","type":"string"}},{"kind":128,"name":"$column_name","modifiers":0,"doc":{"description":"The column_name argument accepts search patterns ('%' to match zero or more characters and '_' to match a single character).","type":"string"}}],"doc":{"description":"Lists columns and associated privileges for the given table.","type":"resource"}},{"kind":64,"name":"grapheme_substr","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"Start position in default grapheme units. If $start is non-negative, the returned string will start at the $start'th position in $string, counting from zero. If $start is negative, the returned string will start at the $start'th grapheme unit from the end of string.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"Length in grapheme units. If $length is given and is positive, the string returned will contain at most $length grapheme units beginning from $start (depending on the length of string). If $length is given and is negative, then that many grapheme units will be omitted from the end of string (after the start position has been calculated when a start is negative). If $start denotes a position beyond this truncation, FALSE will be returned.","type":"int"}}],"doc":{"description":"Return part of a string","type":"int"}},{"kind":64,"name":"imagepstext","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The text to be written.","type":"string"}},{"kind":128,"name":"$font_index","modifiers":0,"doc":{"description":"A font resource, returned by imagepsloadfont().","type":"resource"}},{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"size is expressed in pixels.","type":"int"}},{"kind":128,"name":"$foreground","modifiers":0,"doc":{"description":"The color in which the text will be painted.","type":"int"}},{"kind":128,"name":"$background","modifiers":0,"doc":{"description":"The color to which the text will try to fade in with antialiasing. No pixels with the color background are actually painted, so the background image does not need to be of solid color.","type":"int"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"x-coordinate for the lower-left corner of the first character.","type":"int"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"y-coordinate for the lower-left corner of the first character.","type":"int"}},{"kind":128,"name":"$space","modifiers":0,"value":"0","doc":{"description":"Allows you to change the default value of a space in a font. This amount is added to the normal value and can also be negative. Expressed in character space units, where 1 unit is 1/1000th of an em-square.","type":"int"}},{"kind":128,"name":"$tightness","modifiers":0,"value":"0","doc":{"description":"tightness allows you to control the amount of white space between characters. This amount is added to the normal character width and can also be negative. Expressed in character space units, where 1 unit is 1/1000th of an em-square.","type":"int"}},{"kind":128,"name":"$angle","modifiers":0,"value":"0.0","doc":{"description":"angle is in degrees.","type":"float"}},{"kind":128,"name":"$antialias_steps","modifiers":0,"value":"4","doc":{"description":"Allows you to control the number of colours used for antialiasing text. Allowed values are 4 and 16. The higher value is recommended for text sizes lower than 20, where the effect in text quality is quite visible. With bigger sizes, use 4. It's less computationally intensive.","type":"int"}}],"doc":{"description":"Draws a text on an image using PostScript Type1 fonts.","type":"array"}},{"kind":64,"name":"odbc_specialcolumns","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"When the type argument is SQL_BEST_ROWID, odbc_specialcolumns() returns the column or columns that uniquely identify each row in the table. When the type argument is SQL_ROWVER, odbc_specialcolumns() returns the column or columns in the specified table, if any, that are automatically updated by the data source when any value in the row is updated by any transaction.","type":"int"}},{"kind":128,"name":"$qualifier","modifiers":0,"doc":{"description":"The qualifier.","type":"string"}},{"kind":128,"name":"$owner","modifiers":0,"doc":{"description":"The owner.","type":"string"}},{"kind":128,"name":"$table","modifiers":0,"doc":{"description":"The table.","type":"string"}},{"kind":128,"name":"$scope","modifiers":0,"doc":{"description":"The scope, which orders the result set.","type":"int"}},{"kind":128,"name":"$nullable","modifiers":0,"doc":{"description":"The nullable option.","type":"int"}}],"doc":{"description":"Retrieves either the optimal set of columns that uniquely identifies a row in the table, or columns that are automatically updated when any value in the row is updated by a transaction.","type":"resource"}},{"kind":64,"name":"ibase_free_result","modifiers":0,"children":[{"kind":128,"name":"$result_identifier","modifiers":0,"doc":{"description":"A result set created by ibase_query() or ibase_execute().","type":"resource"}}],"doc":{"description":"Frees a result set.","type":"bool"}},{"kind":64,"name":"msgfmt_parse_message","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to use for parsing locale-dependent parts","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern with which to parse the value.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Parses input string without explicitly creating the formatter object. Use this function when the format operation is done only once and does not need and parameters or state to be kept.","type":"array"}},{"kind":64,"name":"mysqli_stmt_result_metadata","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"If a statement passed to mysqli_prepare() is one that produces a result set, mysqli_stmt_result_metadata() returns the result object that can be used to process the meta information such as total number of fields and individual field information.","type":"mysqli_result"}},{"kind":64,"name":"get_loaded_extensions","modifiers":0,"children":[{"kind":128,"name":"$zend_extensions","modifiers":0,"value":"false","doc":{"description":"Only return Zend extensions, if not then regular extensions, like mysqli are listed. Defaults to FALSE (return regular extensions).","type":"bool"}}],"doc":{"description":"This function returns the names of all the modules compiled and loaded in the PHP interpreter.","type":"array"}},{"kind":64,"name":"mcrypt_get_key_size","modifiers":0,"description":"","children":[{"kind":128,"name":"$cipher","modifiers":0,"doc":{"description":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".","type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"tidy_warning_count","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Returns the number of Tidy warnings encountered for the specified document.","type":"int"}},{"kind":64,"name":"serialize","modifiers":0,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to be serialized. serialize() handles all types, except the resource-type. You can even serialize() arrays that contain references to itself. Circular references inside the array/object you are serializing will also be stored. Any other reference will be lost. When serializing objects, PHP will attempt to call the member function __sleep() prior to serialization. This is to allow the object to do any last minute clean-up, etc. prior to being serialized. Likewise, when the object is restored using unserialize() the __wakeup() member function is called. Note: Object's private members have the class name prepended to the member name; protected members have a '*' prepended to the member name. These prepended values have null bytes on either side.","type":"mixed"}}],"doc":{"description":"Generates a storable representation of a value.","type":"string"}},{"kind":64,"name":"imagecreatefromgd2part","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the GD2 image.","type":"string"}},{"kind":128,"name":"$srcX","modifiers":0,"doc":{"description":"x-coordinate of source point.","type":"int"}},{"kind":128,"name":"$srcY","modifiers":0,"doc":{"description":"y-coordinate of source point.","type":"int"}},{"kind":128,"name":"$width","modifiers":0,"doc":{"description":"Source width.","type":"int"}},{"kind":128,"name":"$height","modifiers":0,"doc":{"description":"Source height.","type":"int"}}],"doc":{"description":"Create a new image from a given part of GD2 file or URL.","type":"resource"}},{"kind":64,"name":"ftell","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or popen(). ftell() gives undefined results for append-only streams (opened with \"a\" flag).","type":"resource"}}],"doc":{"description":"Returns the position of the file pointer referenced by handle.","type":"int"}},{"kind":64,"name":"lchown","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}},{"kind":128,"name":"$user","modifiers":0,"doc":{"description":"User name or number.","type":"mixed"}}],"doc":{"description":"Attempts to change the owner of the symlink filename to user user.","type":"bool"}},{"kind":64,"name":"date_parse_from_format","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"Format accepted by DateTime::createFromFormat().","type":"string"}},{"kind":128,"name":"$date","modifiers":0,"doc":{"description":"String representing the date.","type":"string"}}],"doc":{"description":"Returns associative array with detailed info about given date.","type":"array"}},{"kind":64,"name":"ob_get_flush","modifiers":0,"children":[],"doc":{"description":"ob_get_flush() flushes the output buffer, return it as a string and turns off output buffering.","type":"string"}},{"kind":64,"name":"ldap_mod_del","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The distinguished name of an LDAP entity.","type":"string"}},{"kind":128,"name":"$entry","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"Removes one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level deletions are done by the ldap_delete() function.","type":"bool"}},{"kind":64,"name":"pcntl_sigwaitinfo","modifiers":0,"children":[{"kind":128,"name":"$set","modifiers":0,"doc":{"description":"Array of signals to wait for.","type":"array"}},{"kind":128,"name":"$siginfo","modifiers":1024,"doc":{"description":"The siginfo parameter is set to an array containing informations about the signal. The following elements are set for all signals: signo: Signal number errno: An error number code: Signal code The following elements may be set for the SIGCHLD signal: status: Exit value or signal utime: User time consumed stime: System time consumed pid: Sending process ID uid: Real user ID of sending process The following elements may be set for the SIGILL, SIGFPE, SIGSEGV and SIGBUS signals: addr: Memory location which caused fault The following element may be set for the SIGPOLL signal: band: Band event fd: File descriptor number","type":"array"}}],"doc":{"description":"The pcntl_sigwaitinfo() function suspends execution of the calling script until one of the signals given in set are delivered. If one of the signal is already pending (e.g. blocked by pcntl_sigprocmask()), pcntl_sigwaitinfo() will return immediately.","type":"int"}},{"kind":64,"name":"com_create_guid","modifiers":0,"children":[],"doc":{"description":"Generates a Globally Unique Identifier (GUID).","type":"string"}},{"kind":64,"name":"tmpfile","modifiers":0,"children":[],"doc":{"description":"Creates a temporary file with a unique name in read-write (w+) mode and returns a file handle .","type":"resource"}},{"kind":64,"name":"msql_field_table","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 1.","type":"int"}}],"doc":{"description":"Returns the name of the table that the specified field is in.","type":"int"}},{"kind":64,"name":"posix_getgroups","modifiers":0,"children":[],"doc":{"description":"Gets the group set of the current process.","type":"array"}},{"kind":64,"name":"mysqli_stat","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"mysqli_stat() returns a string containing information similar to that provided by the 'mysqladmin status' command. This includes uptime in seconds and the number of running threads, questions, reloads, and open tables.","type":"string"}},{"kind":64,"name":"mb_eregi_replace","modifiers":0,"description":"","children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The regular expression pattern. Multibyte characters may be used. The case will be ignored.","type":"string"}},{"kind":128,"name":"$replace","modifiers":0,"doc":{"description":"The replacement text.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The searched string.","type":"string"}},{"kind":128,"name":"$option","modifiers":0,"value":"\"msri\"","doc":{"description":"option has the same meaning as in mb_ereg_replace().","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"fbsql_close","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Closes the connection to the FrontBase server that's associated with the specified link identifier.","type":"bool"}},{"kind":64,"name":"xmlwriter_end_attribute","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Ends the current attribute.","type":"bool"}},{"kind":64,"name":"ldap_explode_dn","modifiers":0,"children":[{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The distinguished name of an LDAP entity.","type":"string"}},{"kind":128,"name":"$with_attrib","modifiers":0,"doc":{"description":"Used to request if the RDNs are returned with only values or their attributes as well. To get RDNs with the attributes (i.e. in attribute=value format) set with_attrib to 0 and to get only values set it to 1.","type":"int"}}],"doc":{"description":"Splits the DN returned by ldap_get_dn() and breaks it up into its component parts. Each part is known as Relative Distinguished Name, or RDN.","type":"array"}},{"kind":64,"name":"dba_list","modifiers":0,"children":[],"doc":{"description":"dba_list() list all open database files.","type":"array"}},{"kind":64,"name":"gmp_powm","modifiers":0,"children":[{"kind":128,"name":"$base","modifiers":0,"doc":{"description":"The base number. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$exp","modifiers":0,"doc":{"description":"The positive power to raise the base. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$mod","modifiers":0,"doc":{"description":"The modulo. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Calculate (base raised into power exp) modulo mod. If exp is negative, result is undefined.","type":"GMP"}},{"kind":64,"name":"mb_send_mail","modifiers":0,"children":[{"kind":128,"name":"$to","modifiers":0,"doc":{"description":"The mail addresses being sent to. Multiple recipients may be specified by putting a comma between each address in to. This parameter is not automatically encoded.","type":"string"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The subject of the mail.","type":"string"}},{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"The message of the mail.","type":"string"}},{"kind":128,"name":"$additional_headers","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}},{"kind":128,"name":"$additional_parameter","modifiers":0,"value":"NULL","doc":{"description":"additional_parameter is a MTA command line parameter. It is useful when setting the correct Return-Path header when using sendmail. This parameter is escaped by escapeshellcmd() internally to prevent command execution. escapeshellcmd() prevents command execution, but allows to add addtional parameters. For security reason, this parameter should be validated. Since escapeshellcmd() is applied automatically, some characters that are allowed as email addresses by internet RFCs cannot be used. Programs that are required to use these characters mail() cannot be used. The user that the webserver runs as should be added as a trusted user to the sendmail configuration to prevent a 'X-Warning' header from being added to the message when the envelope sender (-f) is set using this method. For sendmail users, this file is /etc/mail/trusted-users.","type":"string"}}],"doc":{"description":"Sends email. Headers and messages are converted and encoded according to the mb_language() setting. It's a wrapper function for mail(), so see also mail() for details.","type":"bool"}},{"kind":64,"name":"curl_file_create","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file which will be uploaded.","type":"string"}},{"kind":128,"name":"$mimetype","modifiers":0,"doc":{"description":"Mimetype of the file.","type":"string"}},{"kind":128,"name":"$postname","modifiers":0,"doc":{"description":"Name of the file to be used in the upload data.","type":"string"}}],"doc":{"description":"Creates a CURLFile object, used to upload a file with CURLOPT_POSTFIELDS.","type":"CURLFile"}},{"kind":64,"name":"datefmt_get_timezone","modifiers":0,"children":[],"doc":{"description":"Returns an IntlTimeZone object representing the timezone that will be used by this object to format dates and times. When formatting IntlCalendar and DateTime objects with this IntlDateFormatter, the timezone used will be the one returned by this method, not the one associated with the objects being formatted.","type":"IntlTimeZone"}},{"kind":64,"name":"ldap_sort","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"An search result identifier, returned by ldap_search().","type":"resource"}},{"kind":128,"name":"$sortfilter","modifiers":0,"doc":{"description":"The attribute to use as a key in the sort.","type":"string"}}],"doc":{"description":"Sort the result of a LDAP search, returned by ldap_search().","type":"bool"}},{"kind":64,"name":"numfmt_set_symbol","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Symbol specifier, one of the format symbol constants.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Text for the symbol.","type":"string"}}],"doc":{"description":"Set a symbol associated with the formatter. The formatter uses symbols to represent the special locale-dependent characters in a number, for example the percent sign. This API is not supported for rule-based formatters.","type":"bool"}},{"kind":64,"name":"finfo_close","modifiers":0,"children":[{"kind":128,"name":"$finfo","modifiers":0,"doc":{"description":"Fileinfo resource returned by finfo_open().","type":"resource"}}],"doc":{"description":"This function closes the resource opened by finfo_open().","type":"bool"}},{"kind":64,"name":"dcngettext","modifiers":0,"children":[{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"The domain","type":"string"}},{"kind":128,"name":"$msgid1","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$msgid2","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$n","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$category","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"This function allows you to override the current domain for a single plural message lookup.","type":"string"}},{"kind":64,"name":"mysqli_begin_transaction","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"Valid flags are: MYSQLI_TRANS_START_READ_ONLY: Start the transaction as \"START TRANSACTION READ ONLY\". MYSQLI_TRANS_START_READ_WRITE: Start the transaction as \"START TRANSACTION READ WRITE\". MYSQLI_TRANS_START_WITH_CONSISTENT_SNAPSHOT: Start the transaction as \"START TRANSACTION WITH CONSISTENT SNAPSHOT\".","type":"int"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"Savepoint name for the transaction.","type":"string"}}],"doc":{"description":"Begins a transaction. Requires MySQL 5.6 and above, and the InnoDB engine (it is enabled by default). For additional details about how MySQL transactions work, see » http://dev.mysql.com/doc/mysql/en/commit.html.","type":"bool"}},{"kind":64,"name":"fbsql_fetch_object","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}}],"doc":{"description":"fbsql_fetch_object() is similar to fbsql_fetch_array(), with one difference - an object is returned, instead of an array. Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).","type":"object"}},{"kind":64,"name":"vprintf","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"See sprintf() for a description of format.","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"Display array values as a formatted string according to format (which is described in the documentation for sprintf()).","type":"int"}},{"kind":64,"name":"datefmt_format_object","modifiers":32,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"An object of type IntlCalendar or DateTime. The timezone information in the object will be used.","type":"object"}},{"kind":128,"name":"$format","modifiers":0,"value":"NULL","doc":{"description":"How to format the date/time. This can either be an array with two elements (first the date style, then the time style, these being one of the constants IntlDateFormatter::NONE, IntlDateFormatter::SHORT, IntlDateFormatter::MEDIUM, IntlDateFormatter::LONG, IntlDateFormatter::FULL), a long with the value of one of these constants (in which case it will be used both for the time and the date) or a string with the format described in » the ICU documentation. If NULL, the default style will be used.","type":"mixed"}},{"kind":128,"name":"$locale","modifiers":0,"value":"NULL","doc":{"description":"The locale to use, or NULL to use the default one.","type":"string"}}],"doc":{"description":"This function allows formatting an IntlCalendar or DateTime object without first explicitly creating a IntlDateFormatter object.","type":"string"}},{"kind":64,"name":"mcrypt_ofb","modifiers":0,"description":"","children":[{"kind":128,"name":"$cipher","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$key","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$iv","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"com_load_typelib","modifiers":0,"children":[{"kind":128,"name":"$typelib_name","modifiers":0,"doc":{"description":"typelib_name can be one of the following: The filename of a .tlb file or the executable module that contains the type library. The type library GUID, followed by its version number, for example {00000200-0000-0010-8000-00AA006D2EA4},2,0. The type library name, e.g. Microsoft OLE DB ActiveX Data Objects 1.0 Library. PHP will attempt to resolve the type library in this order, as the process gets more and more expensive as you progress down the list; searching for the type library by name is handled by physically enumerating the registry until we find a match.","type":"string"}},{"kind":128,"name":"$case_insensitive","modifiers":0,"value":"true","doc":{"description":"The case_insensitive behaves in the same way as the parameter with the same name in the define() function.","type":"bool"}}],"doc":{"description":"Loads a type-library and registers its constants in the engine, as though they were defined using define().","type":"bool"}},{"kind":64,"name":"odbc_num_fields","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier returned by odbc_exec().","type":"resource"}}],"doc":{"description":"Gets the number of fields (columns) in an ODBC result.","type":"int"}},{"kind":64,"name":"imap_setflag_full","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$sequence","modifiers":0,"doc":{"description":"A sequence of message numbers. You can enumerate desired messages with the X,Y syntax, or retrieve all messages within an interval with the X:Y syntax","type":"string"}},{"kind":128,"name":"$flag","modifiers":0,"doc":{"description":"The flags which you can set are \\Seen, \\Answered, \\Flagged, \\Deleted, and \\Draft as defined by » RFC2060.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"NIL","doc":{"description":"A bit mask that may contain the single option: ST_UID - The sequence argument contains UIDs instead of sequence numbers","type":"int"}}],"doc":{"description":"Causes a store to add the specified flag to the flags set for the messages in the specified sequence.","type":"bool"}},{"kind":64,"name":"preg_replace","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern to search for. It can be either a string or an array with strings. Several PCRE modifiers are also available.","type":"mixed"}},{"kind":128,"name":"$replacement","modifiers":0,"doc":{"description":"The string or an array with strings to replace. If this parameter is a string and the pattern parameter is an array, all patterns will be replaced by that string. If both pattern and replacement parameters are arrays, each pattern will be replaced by the replacement counterpart. If there are fewer elements in the replacement array than in the pattern array, any extra patterns will be replaced by an empty string. replacement may contain references of the form \\\\n or $n, with the latter form being the preferred one. Every such reference will be replaced by the text captured by the n'th parenthesized pattern. n can be from 0 to 99, and \\\\0 or $0 refers to the text matched by the whole pattern. Opening parentheses are counted from left to right (starting from 1) to obtain the number of the capturing subpattern. To use backslash in replacement, it must be doubled (\"\\\\\\\\\" PHP string). When working with a replacement pattern where a backreference is immediately followed by another number (i.e.: placing a literal number immediately after a matched pattern), you cannot use the familiar \\\\1 notation for your backreference. \\\\11, for example, would confuse preg_replace() since it does not know whether you want the \\\\1 backreference followed by a literal 1, or the \\\\11 backreference followed by nothing. In this case the solution is to use ${1}1. This creates an isolated $1 backreference, leaving the 1 as a literal. When using the deprecated e modifier, this function escapes some characters (namely ', \", \\ and NULL) in the strings that replace the backreferences. This is done to ensure that no syntax errors arise from backreference usage with either single or double quotes (e.g. 'strlen(\\'$1\\')+strlen(\"$2\")'). Make sure you are aware of PHP's string syntax to know exactly how the interpreted string will look.","type":"mixed"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The string or an array with strings to search and replace. If subject is an array, then the search and replace is performed on every entry of subject, and the return value is an array as well.","type":"mixed"}},{"kind":128,"name":"$limit","modifiers":0,"value":"-1","doc":{"description":"The maximum possible replacements for each pattern in each subject string. Defaults to -1 (no limit).","type":"int"}},{"kind":128,"name":"$count","modifiers":1024,"doc":{"description":"If specified, this variable will be filled with the number of replacements done.","type":"int"}}],"doc":{"description":"Searches subject for matches to pattern and replaces them with replacement.","type":"mixed"}},{"kind":64,"name":"apache_setenv","modifiers":0,"children":[{"kind":128,"name":"$variable","modifiers":0,"doc":{"description":"The environment variable that's being set.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The new variable value.","type":"string"}},{"kind":128,"name":"$walk_to_top","modifiers":0,"value":"false","doc":{"description":"Whether to set the top-level variable available to all Apache layers.","type":"bool"}}],"doc":{"description":"apache_setenv() sets the value of the Apache environment variable specified by variable.","type":"bool"}},{"kind":64,"name":"mb_http_input","modifiers":0,"description":"","children":[{"kind":128,"name":"$type","modifiers":0,"value":"\"\"","doc":{"description":"Input string specifies the input type. \"G\" for GET, \"P\" for POST, \"C\" for COOKIE, \"S\" for string, \"L\" for list, and \"I\" for the whole list (will return array). If type is omitted, it returns the last input type processed.","type":"string"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"mb_strrchr","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string from which to get the last occurrence of needle","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to find in haystack","type":"string"}},{"kind":128,"name":"$part","modifiers":0,"value":"false","doc":{"description":"Determines which portion of haystack this function returns. If set to TRUE, it returns all of haystack from the beginning to the last occurrence of needle. If set to FALSE, it returns all of haystack from the last occurrence of needle to the end,","type":"bool"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"Character encoding name to use. If it is omitted, internal character encoding is used.","type":"string"}}],"doc":{"description":"mb_strrchr() finds the last occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.","type":"string"}},{"kind":64,"name":"fbsql_connect","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"value":"ini_get(\"fbsql.default_host\")","doc":{"description":"The server host name.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"value":"ini_get(\"fbsql.default_user\")","doc":{"description":"The user name for the connection.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"value":"ini_get(\"fbsql.default_password\")","doc":{"description":"The password for the connection.","type":"string"}}],"doc":{"description":"fbsql_connect() establishes a connection to a FrontBase server.","type":"resource"}},{"kind":64,"name":"tidy_get_config","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Gets the list of the configuration options in use by the given tidy object.","type":"array"}},{"kind":64,"name":"socket_write","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$buffer","modifiers":0,"doc":{"description":"The buffer to be written.","type":"string"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The optional parameter length can specify an alternate length of bytes written to the socket. If this length is greater than the buffer length, it is silently truncated to the length of the buffer.","type":"int"}}],"doc":{"description":"The function socket_write() writes to the socket from the given buffer.","type":"int"}},{"kind":64,"name":"dba_exists","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The key the check is performed for.","type":"string"}},{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The database handler, returned by dba_open() or dba_popen().","type":"resource"}}],"doc":{"description":"dba_exists() checks whether the specified key exists in the database.","type":"bool"}},{"kind":64,"name":"sybase_unbuffered_query","modifiers":0,"description":"","children":[{"kind":128,"name":"$query","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$store_result","modifiers":0,"doc":{"description":"The optional store_result can be FALSE to indicate the resultsets shouldn't be fetched into memory, thus minimizing memory usage which is particularly interesting with very large resultsets.","type":"bool"}}],"doc":{"type":"resource"}},{"kind":64,"name":"reset","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}}],"doc":{"description":"reset() rewinds array's internal pointer to the first element and returns the value of the first array element.","type":"mixed"}},{"kind":64,"name":"xml_get_current_line_number","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to get line number from.","type":"resource"}}],"doc":{"description":"Gets the current line number for the given XML parser.","type":"int"}},{"kind":64,"name":"array_diff","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The array to compare from","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"An array to compare against","type":"array"}}],"doc":{"description":"Compares array1 against one or more other arrays and returns the values in array1 that are not present in any of the other arrays.","type":"array"}},{"kind":64,"name":"xml_set_notation_decl_handler","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to set up notation declaration handler function.","type":"resource"}},{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser. The function named by handler must accept five parameters: handler ( resource $parser , string $notation_name , string $base , string $system_id , string $public_id ) parser The first parameter, parser, is a reference to the XML parser calling the handler. notation_name This is the notation's name, as per the notation format described above. base This is the base for resolving the system identifier (system_id) of the notation declaration. Currently this parameter will always be set to an empty string. system_id System identifier of the external notation declaration. public_id Public identifier of the external notation declaration. If a handler function is set to an empty string, or FALSE, the handler in question is disabled. Note: Instead of a function name, an array containing an object reference and a method name can also be supplied.","type":"callable"}}],"doc":{"description":"Sets the notation declaration handler function for the XML parser parser.","type":"bool"}},{"kind":64,"name":"odbc_connect","modifiers":0,"description":"","children":[{"kind":128,"name":"$dsn","modifiers":0,"doc":{"description":"The database source name for the connection. Alternatively, a DSN-less connection string can be used.","type":"string"}},{"kind":128,"name":"$user","modifiers":0,"doc":{"description":"The username.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password.","type":"string"}},{"kind":128,"name":"$cursor_type","modifiers":0,"doc":{"description":"This sets the type of cursor to be used for this connection. This parameter is not normally needed, but can be useful for working around problems with some ODBC drivers. The following constants are defined for cursortype: SQL_CUR_USE_IF_NEEDED SQL_CUR_USE_ODBC SQL_CUR_USE_DRIVER","type":"int"}}],"doc":{"type":"resource"}},{"kind":64,"name":"snmp_set_quick_print","modifiers":0,"children":[{"kind":128,"name":"$quick_print","modifiers":0,"description":"","doc":{"type":"bool"}}],"doc":{"description":"Sets the value of quick_print within the UCD SNMP library. When this is set (1), the SNMP library will return 'quick printed' values. This means that just the value will be printed. When quick_print is not enabled (default) the UCD SNMP library prints extra information including the type of the value (i.e. IpAddress or OID). Additionally, if quick_print is not enabled, the library prints additional hex values for all strings of three characters or less.","type":"bool"}},{"kind":64,"name":"msql_list_dbs","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"The mSQL connection. If not specified, the last link opened by msql_connect() is assumed. If no such link is found, the function will try to establish a link as if msql_connect() was called, and use it.","type":"resource"}}],"doc":{"description":"msql_list_tables() lists the databases available on the specified link_identifier.","type":"resource"}},{"kind":64,"name":"variant_date_from_timestamp","modifiers":0,"children":[{"kind":128,"name":"$timestamp","modifiers":0,"doc":{"description":"A unix timestamp.","type":"int"}}],"doc":{"description":"Converts timestamp from a unix timestamp value into a variant of type VT_DATE. This allows easier interopability between the unix-ish parts of PHP and COM.","type":"variant"}},{"kind":64,"name":"finfo_open","modifiers":0,"children":[{"kind":128,"name":"$options","modifiers":0,"value":"FILEINFO_NONE","doc":{"description":"One or disjunction of more Fileinfo constants.","type":"int"}},{"kind":128,"name":"$magic_file","modifiers":0,"value":"NULL","doc":{"description":"Name of a magic database file, usually something like /path/to/magic.mime. If not specified, the MAGIC environment variable is used. If the environment variable isn't set, then PHP's bundled magic database will be used. Passing NULL or an empty string will be equivalent to the default value.","type":"string"}}],"doc":{"description":"This function opens a magic database and returns its resource.","type":"resource"}},{"kind":64,"name":"collator_get_locale","modifiers":0,"children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"You can choose between valid and actual locale ( Locale::VALID_LOCALE and Locale::ACTUAL_LOCALE, respectively).","type":"int"}}],"doc":{"description":"Get collector locale name.","type":"string"}},{"kind":64,"name":"imap_thread","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$options","modifiers":0,"description":"","value":"SE_FREE","doc":{"type":"int"}}],"doc":{"description":"Gets a tree of a threaded message.","type":"array"}},{"kind":64,"name":"mssql_fetch_array","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}},{"kind":128,"name":"$result_type","modifiers":0,"value":"MSSQL_BOTH","doc":{"description":"The type of array that is to be fetched. It's a constant and can take the following values: MSSQL_ASSOC, MSSQL_NUM, and MSSQL_BOTH.","type":"int"}}],"doc":{"type":"array"}},{"kind":64,"name":"gzfile","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The file name.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"0","doc":{"description":"You can set this optional parameter to 1, if you want to search for the file in the include_path too.","type":"int"}}],"doc":{"description":"This function is identical to readgzfile(), except that it returns the file in an array.","type":"array"}},{"kind":64,"name":"transliterator_create_inverse","modifiers":0,"children":[],"doc":{"description":"Opens the inverse transliterator.","type":"Transliterator"}},{"kind":64,"name":"variant_int","modifiers":0,"children":[{"kind":128,"name":"$variant","modifiers":0,"doc":{"description":"The variant.","type":"mixed"}}],"doc":{"description":"Gets the integer portion of a variant.","type":"mixed"}},{"kind":64,"name":"localeconv","modifiers":0,"children":[],"doc":{"description":"Returns an associative array containing localized numeric and monetary formatting information.","type":"array"}},{"kind":64,"name":"sys_getloadavg","modifiers":0,"children":[],"doc":{"description":"Returns three samples representing the average system load (the number of processes in the system run queue) over the last 1, 5 and 15 minutes, respectively.","type":"array"}},{"kind":64,"name":"mcrypt_create_iv","modifiers":0,"description":"","children":[{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"The size of the IV.","type":"int"}},{"kind":128,"name":"$source","modifiers":0,"value":"MCRYPT_DEV_URANDOM","doc":{"description":"The source of the IV. The source can be MCRYPT_RAND (system random number generator), MCRYPT_DEV_RANDOM (read data from /dev/random) and MCRYPT_DEV_URANDOM (read data from /dev/urandom). Prior to 5.3.0, MCRYPT_RAND was the only one supported on Windows. Note that the default value of this parameter was MCRYPT_DEV_RANDOM prior to PHP 5.6.0. Note: Note that MCRYPT_DEV_RANDOM may block until more entropy is available.","type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"mysqli_info","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"The mysqli_info() function returns a string providing information about the last query executed. The nature of this string is provided below:","type":"string"}},{"kind":64,"name":"jddayofweek","modifiers":0,"children":[{"kind":128,"name":"$julianday","modifiers":0,"doc":{"description":"A julian day number as integer","type":"int"}},{"kind":128,"name":"$mode","modifiers":0,"value":"CAL_DOW_DAYNO","doc":{"description":"Calendar week modes Mode Meaning 0 (Default) Return the day number as an int (0=Sunday, 1=Monday, etc) 1 Returns string containing the day of week (English-Gregorian) 2 Return a string containing the abbreviated day of week (English-Gregorian)","type":"int"}}],"doc":{"description":"Returns the day of the week. Can return a string or an integer depending on the mode.","type":"mixed"}},{"kind":64,"name":"mysqli_stmt_data_seek","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"Must be between zero and the total number of rows minus one (0.. mysqli_stmt_num_rows() - 1).","type":"int"}}],"doc":{"description":"Seeks to an arbitrary result pointer in the statement result set.","type":"void"}},{"kind":64,"name":"mysqli_stmt_reset","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Resets a prepared statement on client and server to state after prepare.","type":"bool"}},{"kind":64,"name":"parse_str","modifiers":0,"children":[{"kind":128,"name":"$encoded_string","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$result","modifiers":1024,"doc":{"description":"If the second parameter result is present, variables are stored in this variable as array elements instead. Warning Using this function without the result parameter is highly DISCOURAGED and DEPRECATED as of PHP 7.2. Dynamically setting variables in function's scope suffers from exactly same problems as register_globals. Read section on security of Using Register Globals explaining why it is dangerous.","type":"array"}}],"doc":{"description":"Parses encoded_string as if it were the query string passed via a URL and sets variables in the current scope (or in the array if result is provided).","type":"void"}},{"kind":64,"name":"mysql_list_processes","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"resource"}},{"kind":64,"name":"fbsql_affected_rows","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"fbsql_affected_rows() returns the number of rows affected by the last INSERT, UPDATE or DELETE query associated with link_identifier.","type":"int"}},{"kind":64,"name":"finfo_file","modifiers":0,"children":[{"kind":128,"name":"$finfo","modifiers":0,"doc":{"description":"Fileinfo resource returned by finfo_open().","type":"resource"}},{"kind":128,"name":"$file_name","modifiers":0,"value":"NULL","doc":{"description":"Name of a file to be checked.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"FILEINFO_NONE","doc":{"description":"One or disjunction of more Fileinfo constants.","type":"int"}},{"kind":128,"name":"$context","modifiers":0,"value":"NULL","doc":{"description":"For a description of contexts, refer to Stream Functions.","type":"resource"}}],"doc":{"description":"This function is used to get information about a file.","type":"string"}},{"kind":64,"name":"get_parent_class","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The tested object or class name. This parameter is optional if called from the object's method.","type":"mixed"}}],"doc":{"description":"Retrieves the parent class name for object or class.","type":"string"}},{"kind":64,"name":"openssl_public_decrypt","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$decrypted","modifiers":1024,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"key must be the public key corresponding that was used to encrypt the data.","type":"mixed"}},{"kind":128,"name":"$padding","modifiers":0,"value":"OPENSSL_PKCS1_PADDING","doc":{"description":"padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_NO_PADDING.","type":"int"}}],"doc":{"description":"openssl_public_decrypt() decrypts data that was previous encrypted via openssl_private_encrypt() and stores the result into decrypted.","type":"bool"}},{"kind":64,"name":"stream_wrapper_register","modifiers":0,"children":[{"kind":128,"name":"$protocol","modifiers":0,"doc":{"description":"The wrapper name to be registered.","type":"string"}},{"kind":128,"name":"$classname","modifiers":0,"doc":{"description":"The classname which implements the protocol.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"Should be set to STREAM_IS_URL if protocol is a URL protocol. Default is 0, local stream.","type":"int"}}],"doc":{"description":"Allows you to implement your own protocol handlers and streams for use with all the other filesystem functions (such as fopen(), fread() etc.).","type":"bool"}},{"kind":64,"name":"restore_error_handler","modifiers":0,"children":[],"doc":{"description":"Used after changing the error handler function using set_error_handler(), to revert to the previous error handler (which could be the built-in or a user defined function).","type":"bool"}},{"kind":64,"name":"readline_read_history","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the filename containing the command history.","type":"string"}}],"doc":{"description":"This function reads a command history from a file.","type":"bool"}},{"kind":64,"name":"fbsql_next_result","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}}],"doc":{"description":"When sending more than one SQL statement to the server or executing a stored procedure with multiple results will cause the server to return multiple result sets. This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the words from the new result set.","type":"bool"}},{"kind":64,"name":"pg_flush","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"pg_flush() flushes any outbound query data waiting to be sent on the connection.","type":"mixed"}},{"kind":64,"name":"array_diff_key","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The array to compare from","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"An array to compare against","type":"array"}}],"doc":{"description":"Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values.","type":"array"}},{"kind":64,"name":"mysql_escape_string","modifiers":0,"description":"","children":[{"kind":128,"name":"$unescaped_string","modifiers":0,"doc":{"description":"The string that is to be escaped.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"mssql_min_error_severity","modifiers":0,"description":"","children":[{"kind":128,"name":"$severity","modifiers":0,"doc":{"description":"The new error severity.","type":"int"}}],"doc":{"type":"void"}},{"kind":64,"name":"date_sunset","modifiers":0,"children":[{"kind":128,"name":"$timestamp","modifiers":0,"doc":{"description":"The timestamp of the day from which the sunset time is taken.","type":"int"}},{"kind":128,"name":"$format","modifiers":0,"value":"SUNFUNCS_RET_STRING","doc":{"description":"format constants constant description example SUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp) 1095034606","type":"int"}},{"kind":128,"name":"$latitude","modifiers":0,"value":"ini_get(\"date.default_latitude\")","doc":{"description":"Defaults to North, pass in a negative value for South. See also: date.default_latitude","type":"float"}},{"kind":128,"name":"$longitude","modifiers":0,"value":"ini_get(\"date.default_longitude\")","doc":{"description":"Defaults to East, pass in a negative value for West. See also: date.default_longitude","type":"float"}},{"kind":128,"name":"$zenith","modifiers":0,"value":"ini_get(\"date.sunset_zenith\")","doc":{"description":"Default: date.sunset_zenith","type":"float"}},{"kind":128,"name":"$gmt_offset","modifiers":0,"description":"","value":"0","doc":{"type":"float"}}],"doc":{"description":"date_sunset() returns the sunset time for a given day (specified as a timestamp) and location.","type":"mixed"}},{"kind":64,"name":"pcntl_wifstopped","modifiers":0,"children":[{"kind":128,"name":"$status","modifiers":0,"doc":{"description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().","type":"int"}}],"doc":{"description":"Checks whether the child process which caused the return is currently stopped; this is only possible if the call to pcntl_waitpid() was done using the option WUNTRACED.","type":"bool"}},{"kind":64,"name":"pg_host","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_host() returns the host name of the given PostgreSQL connection resource is connected to.","type":"string"}},{"kind":64,"name":"ob_list_handlers","modifiers":0,"children":[],"doc":{"description":"Lists all output handlers in use.","type":"array"}},{"kind":64,"name":"passthru","modifiers":0,"children":[{"kind":128,"name":"$command","modifiers":0,"doc":{"description":"The command that will be executed.","type":"string"}},{"kind":128,"name":"$return_var","modifiers":1024,"doc":{"description":"If the return_var argument is present, the return status of the Unix command will be placed here.","type":"int"}}],"doc":{"description":"The passthru() function is similar to the exec() function in that it executes a command. This function should be used in place of exec() or system() when the output from the Unix command is binary data which needs to be passed directly back to the browser. A common use for this is to execute something like the pbmplus utilities that can output an image stream directly. By setting the Content-type to image/gif and then calling a pbmplus program to output a gif, you can create PHP scripts that output images directly.","type":"void"}},{"kind":64,"name":"date_sunrise","modifiers":0,"children":[{"kind":128,"name":"$timestamp","modifiers":0,"doc":{"description":"The timestamp of the day from which the sunrise time is taken.","type":"int"}},{"kind":128,"name":"$format","modifiers":0,"value":"SUNFUNCS_RET_STRING","doc":{"description":"format constants constant description example SUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp) 1095034606","type":"int"}},{"kind":128,"name":"$latitude","modifiers":0,"value":"ini_get(\"date.default_latitude\")","doc":{"description":"Defaults to North, pass in a negative value for South. See also: date.default_latitude","type":"float"}},{"kind":128,"name":"$longitude","modifiers":0,"value":"ini_get(\"date.default_longitude\")","doc":{"description":"Defaults to East, pass in a negative value for West. See also: date.default_longitude","type":"float"}},{"kind":128,"name":"$zenith","modifiers":0,"value":"ini_get(\"date.sunrise_zenith\")","doc":{"description":"Default: date.sunrise_zenith","type":"float"}},{"kind":128,"name":"$gmt_offset","modifiers":0,"description":"","value":"0","doc":{"type":"float"}}],"doc":{"description":"date_sunrise() returns the sunrise time for a given day (specified as a timestamp) and location.","type":"mixed"}},{"kind":64,"name":"gettext","modifiers":0,"children":[{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"The message being translated.","type":"string"}}],"doc":{"description":"Looks up a message in the current domain.","type":"string"}},{"kind":64,"name":"ldap_get_attributes","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result_entry_identifier","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Reads attributes and values from an entry in the search result.","type":"array"}},{"kind":64,"name":"get_declared_interfaces","modifiers":0,"children":[],"doc":{"description":"Gets the declared interfaces.","type":"array"}},{"kind":64,"name":"imagefontheight","modifiers":0,"children":[{"kind":128,"name":"$font","modifiers":0,"doc":{"description":"Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().","type":"int"}}],"doc":{"description":"Returns the pixel height of a character in the specified font.","type":"int"}},{"kind":64,"name":"easter_date","modifiers":0,"children":[{"kind":128,"name":"$year","modifiers":0,"value":"date(\"Y\")","doc":{"description":"The year as a number between 1970 an 2037. If omitted, defaults to the current year according to the local time.","type":"int"}}],"doc":{"description":"Returns the Unix timestamp corresponding to midnight on Easter of the given year.","type":"int"}},{"kind":64,"name":"xmlwriter_start_dtd_attlist","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The attribute list name.","type":"string"}}],"doc":{"description":"Starts a DTD attribute list.","type":"bool"}},{"kind":64,"name":"numfmt_get_pattern","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}}],"doc":{"description":"Extract pattern used by the formatter.","type":"string"}},{"kind":64,"name":"msg_remove_queue","modifiers":0,"children":[{"kind":128,"name":"$queue","modifiers":0,"doc":{"description":"Message queue resource handle","type":"resource"}}],"doc":{"description":"msg_remove_queue() destroys the message queue specified by the queue. Only use this function when all processes have finished working with the message queue and you need to release the system resources held by it.","type":"bool"}},{"kind":64,"name":"is_float","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable being evaluated.","type":"mixed"}}],"doc":{"description":"Finds whether the type of the given variable is float.","type":"bool"}},{"kind":64,"name":"ibase_query","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"],","doc":{"description":"An InterBase link identifier. If omitted, the last opened link is assumed.","type":"resource"}},{"kind":128,"name":"$bind_args","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"resource"}},{"kind":64,"name":"is_callable","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The value to check","type":"mixed"}},{"kind":128,"name":"$syntax_only","modifiers":0,"value":"false","doc":{"description":"If set to TRUE the function only verifies that name might be a function or method. It will only reject simple variables that are not strings, or an array that does not have a valid structure to be used as a callback. The valid ones are supposed to have only 2 entries, the first of which is an object or a string, and the second a string.","type":"bool"}},{"kind":128,"name":"$callable_name","modifiers":1024,"doc":{"description":"Receives the \"callable name\". In the example below it is \"someClass::someMethod\". Note, however, that despite the implication that someClass::SomeMethod() is a callable static method, this is not the case.","type":"string"}}],"doc":{"description":"Verify that the contents of a variable can be called as a function. This can check that a simple variable contains the name of a valid function, or that an array contains a properly encoded object and function name.","type":"bool"}},{"kind":64,"name":"odbc_binmode","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier. If result_id is 0, the settings apply as default for new results. Note: Default for longreadlen is 4096 and mode defaults to ODBC_BINMODE_RETURN. Handling of binary long columns is also affected by odbc_longreadlen().","type":"resource"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"Possible values for mode are: ODBC_BINMODE_PASSTHRU: Passthru BINARY data ODBC_BINMODE_RETURN: Return as is ODBC_BINMODE_CONVERT: Convert to char and return","type":"int"}}],"doc":{"description":"Enables handling of binary column data. ODBC SQL types affected are BINARY, VARBINARY, and LONGVARBINARY.","type":"bool"}},{"kind":64,"name":"openssl_csr_sign","modifiers":0,"children":[{"kind":128,"name":"$csr","modifiers":0,"doc":{"description":"A CSR previously generated by openssl_csr_new(). It can also be the path to a PEM encoded CSR when specified as file://path/to/csr or an exported string generated by openssl_csr_export().","type":"mixed"}},{"kind":128,"name":"$cacert","modifiers":0,"doc":{"description":"The generated certificate will be signed by cacert. If cacert is NULL, the generated certificate will be a self-signed certificate.","type":"mixed"}},{"kind":128,"name":"$priv_key","modifiers":0,"doc":{"description":"priv_key is the private key that corresponds to cacert.","type":"mixed"}},{"kind":128,"name":"$days","modifiers":0,"doc":{"description":"days specifies the length of time for which the generated certificate will be valid, in days.","type":"int"}},{"kind":128,"name":"$configargs","modifiers":0,"doc":{"description":"You can finetune the CSR signing by configargs. See openssl_csr_new() for more information about configargs.","type":"array"}},{"kind":128,"name":"$serial","modifiers":0,"value":"0","doc":{"description":"An optional the serial number of issued certificate. If not specified it will default to 0.","type":"int"}}],"doc":{"description":"openssl_csr_sign() generates an x509 certificate resource from the given CSR.","type":"resource"}},{"kind":64,"name":"tidy_diagnose","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Runs diagnostic tests on the given tidy object, adding some more information about the document in the error buffer.","type":"bool"}},{"kind":64,"name":"locale_compose","modifiers":0,"children":[{"kind":128,"name":"$subtags","modifiers":0,"doc":{"description":"an array containing a list of key-value pairs, where the keys identify the particular locale ID subtags, and the values are the associated subtag values. Note: The 'variant' and 'private' subtags can take maximum 15 values whereas 'extlang' can take maximum 3 values.e.g. Variants are allowed with the suffix ranging from 0-14. Hence the keys for the input array can be variant0, variant1, ...,variant14. In the returned locale id, the subtag is ordered by suffix resulting in variant0 followed by variant1 followed by variant2 and so on. The 'variant', 'private' and 'extlang' multiple values can be specified both as array under specific key (e.g. 'variant') and as multiple numbered keys (e.g. 'variant0', 'variant1', etc.).","type":"array"}}],"doc":{"description":"Returns a correctly ordered and delimited locale ID the keys identify the particular locale ID subtags, and the values are the associated subtag values.","type":"string"}},{"kind":64,"name":"error_log","modifiers":0,"children":[{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"The error message that should be logged.","type":"string"}},{"kind":128,"name":"$message_type","modifiers":0,"value":"0","doc":{"description":"Says where the error should go. The possible message types are as follows: error_log() log types 0 message is sent to PHP's system logger, using the Operating System's system logging mechanism or a file, depending on what the error_log configuration directive is set to. This is the default option. 1 message is sent by email to the address in the destination parameter. This is the only message type where the fourth parameter, extra_headers is used. 2 No longer an option. 3 message is appended to the file destination. A newline is not automatically added to the end of the message string. 4 message is sent directly to the SAPI logging handler.","type":"int"}},{"kind":128,"name":"$destination","modifiers":0,"doc":{"description":"The destination. Its meaning depends on the message_type parameter as described above.","type":"string"}},{"kind":128,"name":"$extra_headers","modifiers":0,"doc":{"description":"The extra headers. It's used when the message_type parameter is set to 1. This message type uses the same internal function as mail() does.","type":"string"}}],"doc":{"description":"Sends an error message to the web server's error log or to a file.","type":"bool"}},{"kind":64,"name":"system","modifiers":0,"children":[{"kind":128,"name":"$command","modifiers":0,"doc":{"description":"The command that will be executed.","type":"string"}},{"kind":128,"name":"$return_var","modifiers":1024,"doc":{"description":"If the return_var argument is present, then the return status of the executed command will be written to this variable.","type":"int"}}],"doc":{"description":"system() is just like the C version of the function in that it executes the given command and outputs the result.","type":"string"}},{"kind":64,"name":"stream_filter_remove","modifiers":0,"children":[{"kind":128,"name":"$stream_filter","modifiers":0,"doc":{"description":"The stream filter to be removed.","type":"resource"}}],"doc":{"description":"Removes a stream filter previously added to a stream with stream_filter_prepend() or stream_filter_append(). Any data remaining in the filter's internal buffer will be flushed through to the next filter before removing it.","type":"bool"}},{"kind":64,"name":"gettimeofday","modifiers":0,"children":[{"kind":128,"name":"$return_float","modifiers":0,"value":"false","doc":{"description":"When set to TRUE, a float instead of an array is returned.","type":"bool"}}],"doc":{"description":"This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call.","type":"mixed"}},{"kind":64,"name":"apache_request_headers","modifiers":0,"children":[],"doc":{"description":"Fetches all HTTP request headers from the current request.","type":"array"}},{"kind":64,"name":"stream_select","modifiers":0,"children":[{"kind":128,"name":"$read","modifiers":1024,"doc":{"description":"The streams listed in the read array will be watched to see if characters become available for reading (more precisely, to see if a read will not block - in particular, a stream resource is also ready on end-of-file, in which case an fread() will return a zero length string).","type":"array"}},{"kind":128,"name":"$write","modifiers":1024,"doc":{"description":"The streams listed in the write array will be watched to see if a write will not block.","type":"array"}},{"kind":128,"name":"$except","modifiers":1024,"doc":{"description":"The streams listed in the except array will be watched for high priority exceptional (\"out-of-band\") data arriving. Note: When stream_select() returns, the arrays read, write and except are modified to indicate which stream resource(s) actually changed status. You do not need to pass every array to stream_select(). You can leave it out and use an empty array or NULL instead. Also do not forget that those arrays are passed by reference and will be modified after stream_select() returns.","type":"array"}},{"kind":128,"name":"$tv_sec","modifiers":0,"doc":{"description":"The tv_sec and tv_usec together form the timeout parameter, tv_sec specifies the number of seconds while tv_usec the number of microseconds. The timeout is an upper bound on the amount of time that stream_select() will wait before it returns. If tv_sec and tv_usec are both set to 0, stream_select() will not wait for data - instead it will return immediately, indicating the current status of the streams. If tv_sec is NULL stream_select() can block indefinitely, returning only when an event on one of the watched streams occurs (or if a signal interrupts the system call). Warning Using a timeout value of 0 allows you to instantaneously poll the status of the streams, however, it is NOT a good idea to use a 0 timeout value in a loop as it will cause your script to consume too much CPU time. It is much better to specify a timeout value of a few seconds, although if you need to be checking and running other code concurrently, using a timeout value of at least 200000 microseconds will help reduce the CPU usage of your script. Remember that the timeout value is the maximum time that will elapse; stream_select() will return as soon as the requested streams are ready for use.","type":"int"}},{"kind":128,"name":"$tv_usec","modifiers":0,"value":"0","doc":{"description":"See tv_sec description.","type":"int"}}],"doc":{"description":"The stream_select() function accepts arrays of streams and waits for them to change status. Its operation is equivalent to that of the socket_select() function except in that it acts on streams.","type":"int"}},{"kind":64,"name":"array_column","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"A multi-dimensional array or an array of objects from which to pull a column of values from. If an array of objects is provided, then public properties can be directly pulled. In order for protected or private properties to be pulled, the class must implement both the __get() and __isset() magic methods.","type":"array"}},{"kind":128,"name":"$column_key","modifiers":0,"doc":{"description":"The column of values to return. This value may be an integer key of the column you wish to retrieve, or it may be a string key name for an associative array or property name. It may also be NULL to return complete arrays or objects (this is useful together with index_key to reindex the array).","type":"mixed"}},{"kind":128,"name":"$index_key","modifiers":0,"value":"null","doc":{"description":"The column to use as the index/keys for the returned array. This value may be the integer key of the column, or it may be the string key name.","type":"mixed"}}],"doc":{"description":"array_column() returns the values from a single column of the input, identified by the column_key. Optionally, an index_key may be provided to index the values in the returned array by the values from the index_key column of the input array.","type":"array"}},{"kind":64,"name":"mb_regex_set_options","modifiers":0,"description":"","children":[{"kind":128,"name":"$options","modifiers":0,"value":"mb_regex_set_options()","doc":{"description":"The options to set. This is a string where each character is an option. To set a mode, the mode character must be the last one set, however there can only be set one mode but multiple options. Regex options Option Meaning i Ambiguity match on x Enables extended pattern form m '.' matches with newlines s '^' -> '\\A', '$' -> '\\Z' p Same as both the m and s options l Finds longest matches n Ignores empty matches e eval() resulting code Regex syntax modes Mode Meaning j Java (Sun java.util.regex) u GNU regex g grep c Emacs r Ruby z Perl b POSIX Basic regex d POSIX Extended regex","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"xmlwriter_set_indent","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$indent","modifiers":0,"doc":{"description":"Whether indentation is enabled.","type":"bool"}}],"doc":{"description":"Toggles indentation on or off.","type":"bool"}},{"kind":64,"name":"ctype_graph","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The tested string.","type":"string"}}],"doc":{"description":"Checks if all of the characters in the provided string, text, creates visible output.","type":"bool"}},{"kind":64,"name":"get_declared_traits","modifiers":0,"description":"","children":[],"doc":{"type":"array"}},{"kind":64,"name":"mysql_data_seek","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}},{"kind":128,"name":"$row_number","modifiers":0,"doc":{"description":"The desired row number of the new result pointer.","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"oci_rollback","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"An Oracle connection identifier, returned by oci_connect(), oci_pconnect() or oci_new_connect().","type":"resource"}}],"doc":{"description":"Reverts all uncommitted changes for the Oracle connection and ends the transaction. It releases all locks held. All Oracle SAVEPOINTS are erased.","type":"bool"}},{"kind":64,"name":"strrpos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string to search in.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"If specified, search will start this number of characters counted from the beginning of the string. If the value is negative, search will instead start from that many characters from the end of the string, searching backwards.","type":"int"}}],"doc":{"description":"Find the numeric position of the last occurrence of needle in the haystack string.","type":"int"}},{"kind":64,"name":"imagepsextendfont","modifiers":0,"description":"","children":[{"kind":128,"name":"$font_index","modifiers":0,"doc":{"description":"A font resource, returned by imagepsloadfont().","type":"resource"}},{"kind":128,"name":"$extend","modifiers":0,"doc":{"description":"Extension value, must be greater than 0.","type":"float"}}],"doc":{"type":"bool"}},{"kind":64,"name":"date_default_timezone_get","modifiers":0,"children":[],"doc":{"description":"In order of preference, this function returns the default timezone by:","type":"string"}},{"kind":64,"name":"mysqli_rpl_query_type","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"mysqli"}},{"kind":128,"name":"$query","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Returns MYSQLI_RPL_MASTER, MYSQLI_RPL_SLAVE or MYSQLI_RPL_ADMIN depending on a query type. INSERT, UPDATE and similar are master queries, SELECT is slave, and FLUSH, REPAIR and similar are admin.","type":"int"}},{"kind":64,"name":"imap_alerts","modifiers":0,"children":[],"doc":{"description":"Returns all of the IMAP alert messages generated since the last imap_alerts() call, or the beginning of the page.","type":"array"}},{"kind":64,"name":"ibase_service_attach","modifiers":0,"description":"","children":[{"kind":128,"name":"$host","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$dba_username","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$dba_password","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"resource"}},{"kind":64,"name":"getenv","modifiers":0,"children":[{"kind":128,"name":"$varname","modifiers":0,"doc":{"description":"The variable name.","type":"string"}},{"kind":128,"name":"$local_only","modifiers":0,"value":"false","doc":{"description":"Set to true to only return local environment variables (set by the operating system or putenv).","type":"bool"}}],"doc":{"description":"Gets the value of an environment variable.","type":"string"}},{"kind":64,"name":"sybase_select_db","modifiers":0,"description":"","children":[{"kind":128,"name":"$database_name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"If no link identifier is specified, the last opened link is assumed. If no link is open, the function will try to establish a link as if sybase_connect() was called, and use it.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"fbsql_drop_db","modifiers":0,"children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The database name, as a string.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"fbsql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier.","type":"bool"}},{"kind":64,"name":"datefmt_set_timezone_id","modifiers":0,"description":"","children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource.","type":"IntlDateFormatter"}},{"kind":128,"name":"$zone","modifiers":0,"doc":{"description":"The time zone ID string of the time zone to use. If NULL or the empty string, the default time zone for the runtime is used.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"msgfmt_format","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The message formatter","type":"MessageFormatter"}},{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"Arguments to insert into the format string","type":"array"}}],"doc":{"description":"Format the message by substituting the data into the format string according to the locale rules","type":"string"}},{"kind":64,"name":"pg_connect","modifiers":0,"children":[{"kind":128,"name":"$connection_string","modifiers":0,"doc":{"description":"The connection_string can be empty to use all default parameters, or it can contain one or more parameter settings separated by whitespace. Each parameter setting is in the form keyword = value. Spaces around the equal sign are optional. To write an empty value or a value containing spaces, surround it with single quotes, e.g., keyword = 'a value'. Single quotes and backslashes within the value must be escaped with a backslash, i.e., \\' and \\\\. The currently recognized parameter keywords are: host, hostaddr, port, dbname (defaults to value of user), user, password, connect_timeout, options, tty (ignored), sslmode, requiressl (deprecated in favor of sslmode), and service. Which of these arguments exist depends on your PostgreSQL version. The options parameter can be used to set command line parameters to be invoked by the server.","type":"string"}},{"kind":128,"name":"$connect_type","modifiers":0,"doc":{"description":"If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection is created, even if the connection_string is identical to an existing connection. If PGSQL_CONNECT_ASYNC is given, then the connection is established asynchronously. The state of the connection can then be checked via pg_connect_poll() or pg_connection_status().","type":"int"}}],"doc":{"description":"pg_connect() opens a connection to a PostgreSQL database specified by the connection_string.","type":"resource"}},{"kind":64,"name":"pg_field_is_null","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Field number (starting from 0) as an integer or the field name as a string.","type":"mixed"}}],"doc":{"description":"pg_field_is_null() tests if a field in a PostgreSQL result resource is SQL NULL or not.","type":"int"}},{"kind":64,"name":"mysqli_thread_id","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"The mysqli_thread_id() function returns the thread ID for the current connection which can then be killed using the mysqli_kill() function. If the connection is lost and you reconnect with mysqli_ping(), the thread ID will be other. Therefore you should get the thread ID only when you need it.","type":"int"}},{"kind":64,"name":"numfmt_parse","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"The formatting type to use. By default, NumberFormatter::TYPE_DOUBLE is used.","type":"int"}},{"kind":128,"name":"$position","modifiers":1024,"doc":{"description":"Offset in the string at which to begin parsing. On return, this value will hold the offset at which parsing ended.","type":"int"}}],"doc":{"description":"Parse a string into a number using the current formatter rules.","type":"mixed"}},{"kind":64,"name":"mssql_field_seek","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The field offset, starts at 0.","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"enchant_dict_get_error","modifiers":0,"children":[{"kind":128,"name":"$dict","modifiers":0,"doc":{"description":"Dictinaray resource","type":"resource"}}],"doc":{"description":"Returns the last error of the current spelling-session","type":"string"}},{"kind":64,"name":"odbc_next_result","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier.","type":"resource"}}],"doc":{"description":"Checks if there are more result sets available as well as allowing access to the next result set via odbc_fetch_array(), odbc_fetch_row(), odbc_result(), etc.","type":"bool"}},{"kind":64,"name":"hash_init","modifiers":0,"description":"","children":[{"kind":128,"name":"$algo","modifiers":0,"doc":{"description":"Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..). For a list of supported algorithms see hash_algos().","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Optional settings for hash generation, currently supports only one option: HASH_HMAC. When specified, the key must be specified.","type":"int"}},{"kind":128,"name":"$key","modifiers":0,"value":"NULL","doc":{"description":"When HASH_HMAC is specified for options, a shared secret key to be used with the HMAC hashing method must be supplied in this parameter.","type":"string"}}],"doc":{"type":"resource"}},{"kind":64,"name":"xml_error_string","modifiers":0,"children":[{"kind":128,"name":"$code","modifiers":0,"doc":{"description":"An error code from xml_get_error_code().","type":"int"}}],"doc":{"description":"Gets the XML parser error string associated with the given code.","type":"string"}},{"kind":64,"name":"password_verify","modifiers":0,"children":[{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The user's password.","type":"string"}},{"kind":128,"name":"$hash","modifiers":0,"doc":{"description":"A hash created by password_hash().","type":"string"}}],"doc":{"description":"Verifies that the given hash matches the given password.","type":"boolean"}},{"kind":64,"name":"tidy_error_count","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Returns the number of Tidy errors encountered for the specified document.","type":"int"}},{"kind":64,"name":"levenshtein","modifiers":0,"children":[{"kind":128,"name":"$str1","modifiers":0,"doc":{"description":"One of the strings being evaluated for Levenshtein distance.","type":"string"}},{"kind":128,"name":"$str2","modifiers":0,"doc":{"description":"One of the strings being evaluated for Levenshtein distance.","type":"string"}},{"kind":128,"name":"$cost_ins","modifiers":0,"doc":{"description":"Defines the cost of insertion.","type":"int"}},{"kind":128,"name":"$cost_rep","modifiers":0,"doc":{"description":"Defines the cost of replacement.","type":"int"}},{"kind":128,"name":"$cost_del","modifiers":0,"doc":{"description":"Defines the cost of deletion.","type":"int"}}],"doc":{"description":"The Levenshtein distance is defined as the minimal number of characters you have to replace, insert or delete to transform str1 into str2. The complexity of the algorithm is O(m*n), where n and m are the length of str1 and str2 (rather good when compared to similar_text(), which is O(max(n,m)**3), but still expensive).","type":"int"}},{"kind":64,"name":"pg_meta_data","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"The name of the table.","type":"string"}},{"kind":128,"name":"$extended","modifiers":0,"doc":{"description":"Flag for returning extended meta data. Default to FALSE.","type":"bool"}}],"doc":{"description":"pg_meta_data() returns table definition for table_name as an array.","type":"array"}},{"kind":64,"name":"msql_connect","modifiers":0,"children":[{"kind":128,"name":"$hostname","modifiers":0,"doc":{"description":"The hostname can also include a port number. e.g. hostname,port. If not specified, the connection is established by the means of a Unix domain socket, being then more efficient then a localhost TCP socket connection. Note: While this function will accept a colon (:) as a host/port separator, a comma (,) is the preferred method.","type":"string"}}],"doc":{"description":"msql_connect() establishes a connection to a mSQL server.","type":"resource"}},{"kind":64,"name":"ob_get_clean","modifiers":0,"children":[],"doc":{"description":"Gets the current buffer contents and delete current output buffer.","type":"string"}},{"kind":64,"name":"mysqli_savepoint","modifiers":0,"description":"","children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$name","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"list","modifiers":0,"children":[{"kind":128,"name":"$var1","modifiers":0,"doc":{"description":"A variable.","type":"mixed"}}],"doc":{"description":"Like array(), this is not really a function, but a language construct. list() is used to assign a list of variables in one operation.","type":"array"}},{"kind":64,"name":"ob_end_clean","modifiers":0,"children":[],"doc":{"description":"This function discards the contents of the topmost output buffer and turns off this output buffering. If you want to further process the buffer's contents you have to call ob_get_contents() before ob_end_clean() as the buffer contents are discarded when ob_end_clean() is called.","type":"bool"}},{"kind":64,"name":"msg_get_queue","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"Message queue numeric ID","type":"int"}},{"kind":128,"name":"$perms","modifiers":0,"value":"0666","doc":{"description":"Queue permissions. Default to 0666. If the message queue already exists, the perms will be ignored.","type":"int"}}],"doc":{"description":"msg_get_queue() returns an id that can be used to access the System V message queue with the given key. The first call creates the message queue with the optional perms. A second call to msg_get_queue() for the same key will return a different message queue identifier, but both identifiers access the same underlying message queue.","type":"resource"}},{"kind":64,"name":"basename","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"A path. On Windows, both slash (/) and backslash (\\) are used as directory separator character. In other environments, it is the forward slash (/).","type":"string"}},{"kind":128,"name":"$suffix","modifiers":0,"doc":{"description":"If the name component ends in suffix this will also be cut off.","type":"string"}}],"doc":{"description":"Given a string containing the path to a file or directory, this function will return the trailing name component.","type":"string"}},{"kind":64,"name":"cyrus_query","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"The connection handle.","type":"resource"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query string.","type":"string"}}],"doc":{"description":"Sends a query to a Cyrus IMAP server.","type":"array"}},{"kind":64,"name":"stream_context_set_option","modifiers":0,"description":"","children":[{"kind":128,"name":"$stream_or_context","modifiers":0,"doc":{"description":"The stream or context resource to apply the options to.","type":"resource"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"The options to set for stream_or_context. Note: options must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value. Refer to context options and parameters for a listing of stream options.","type":"array"}}],"doc":{"type":"bool"}},{"kind":64,"name":"fgetc","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).","type":"resource"}}],"doc":{"description":"Gets a character from the given file pointer.","type":"string"}},{"kind":64,"name":"mysql_fetch_assoc","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}}],"doc":{"type":"array"}},{"kind":64,"name":"imap_savebody","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$file","modifiers":0,"doc":{"description":"The path to the saved file as a string, or a valid file descriptor returned by fopen().","type":"mixed"}},{"kind":128,"name":"$msg_number","modifiers":0,"doc":{"description":"The message number","type":"int"}},{"kind":128,"name":"$part_number","modifiers":0,"value":"\"\"","doc":{"description":"The part number. It is a string of integers delimited by period which index into a body part list as per the IMAP4 specification","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"A bitmask with one or more of the following: FT_UID - The msg_number is a UID FT_PEEK - Do not set the \\Seen flag if not already set FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.","type":"int"}}],"doc":{"description":"Saves a part or the whole body of the specified message.","type":"bool"}},{"kind":64,"name":"is_finite","modifiers":0,"children":[{"kind":128,"name":"$val","modifiers":0,"doc":{"description":"The value to check","type":"float"}}],"doc":{"description":"Checks whether val is a legal finite on this platform.","type":"bool"}},{"kind":64,"name":"strpbrk","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string where char_list is looked for.","type":"string"}},{"kind":128,"name":"$char_list","modifiers":0,"doc":{"description":"This parameter is case sensitive.","type":"string"}}],"doc":{"description":"strpbrk() searches the haystack string for a char_list.","type":"string"}},{"kind":64,"name":"curl_setopt_array","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"An array specifying which options to set and their values. The keys should be valid curl_setopt() constants or their integer equivalents.","type":"array"}}],"doc":{"description":"Sets multiple options for a cURL session. This function is useful for setting a large amount of cURL options without repetitively calling curl_setopt().","type":"bool"}},{"kind":64,"name":"mysql_set_charset","modifiers":0,"description":"","children":[{"kind":128,"name":"$charset","modifiers":0,"doc":{"description":"A valid character set name.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"mb_convert_kana","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being converted.","type":"string"}},{"kind":128,"name":"$option","modifiers":0,"value":"\"KV\"","doc":{"description":"The conversion option. Specify with a combination of following options. Applicable Conversion Options Option Meaning r Convert \"zen-kaku\" alphabets to \"han-kaku\" R Convert \"han-kaku\" alphabets to \"zen-kaku\" n Convert \"zen-kaku\" numbers to \"han-kaku\" N Convert \"han-kaku\" numbers to \"zen-kaku\" a Convert \"zen-kaku\" alphabets and numbers to \"han-kaku\" A Convert \"han-kaku\" alphabets and numbers to \"zen-kaku\" (Characters included in \"a\", \"A\" options are U+0021 - U+007E excluding U+0022, U+0027, U+005C, U+007E) s Convert \"zen-kaku\" space to \"han-kaku\" (U+3000 -> U+0020) S Convert \"han-kaku\" space to \"zen-kaku\" (U+0020 -> U+3000) k Convert \"zen-kaku kata-kana\" to \"han-kaku kata-kana\" K Convert \"han-kaku kata-kana\" to \"zen-kaku kata-kana\" h Convert \"zen-kaku hira-gana\" to \"han-kaku kata-kana\" H Convert \"han-kaku kata-kana\" to \"zen-kaku hira-gana\" c Convert \"zen-kaku kata-kana\" to \"zen-kaku hira-gana\" C Convert \"zen-kaku hira-gana\" to \"zen-kaku kata-kana\" V Collapse voiced sound notation and convert them into a character. Use with \"K\",\"H\"","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Performs a \"han-kaku\" - \"zen-kaku\" conversion for string str. This function is only useful for Japanese.","type":"string"}},{"kind":64,"name":"imagecreatefromxpm","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the XPM image.","type":"string"}}],"doc":{"description":"imagecreatefromxpm() returns an image identifier representing the image obtained from the given filename.","type":"resource"}},{"kind":64,"name":"getservbyname","modifiers":0,"children":[{"kind":128,"name":"$service","modifiers":0,"doc":{"description":"The Internet service name, as a string.","type":"string"}},{"kind":128,"name":"$protocol","modifiers":0,"doc":{"description":"protocol is either \"tcp\" or \"udp\" (in lowercase).","type":"string"}}],"doc":{"description":"getservbyname() returns the Internet port which corresponds to service for the specified protocol as per /etc/services.","type":"int"}},{"kind":64,"name":"shell_exec","modifiers":0,"children":[{"kind":128,"name":"$cmd","modifiers":0,"doc":{"description":"The command that will be executed.","type":"string"}}],"doc":{"description":"This function is identical to the backtick operator.","type":"string"}},{"kind":64,"name":"escapeshellarg","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument that will be escaped.","type":"string"}}],"doc":{"description":"escapeshellarg() adds single quotes around a string and quotes/escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument. This function should be used to escape individual arguments to shell functions coming from user input. The shell functions include exec(), system() and the backtick operator.","type":"string"}},{"kind":64,"name":"variant_imp","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Performs a bitwise implication operation.","type":"mixed"}},{"kind":64,"name":"png2wbmp","modifiers":0,"description":"","children":[{"kind":128,"name":"$pngname","modifiers":0,"doc":{"description":"Path to PNG file.","type":"string"}},{"kind":128,"name":"$wbmpname","modifiers":0,"doc":{"description":"Path to destination WBMP file.","type":"string"}},{"kind":128,"name":"$dest_height","modifiers":0,"doc":{"description":"Destination image height.","type":"int"}},{"kind":128,"name":"$dest_width","modifiers":0,"doc":{"description":"Destination image width.","type":"int"}},{"kind":128,"name":"$threshold","modifiers":0,"doc":{"description":"Threshold value, between 0 and 8 (inclusive).","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"imagepsloadfont","modifiers":0,"description":"","children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the Postscript font file.","type":"string"}}],"doc":{"type":"resource"}},{"kind":64,"name":"fbsql_set_transaction","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}},{"kind":128,"name":"$locking","modifiers":0,"doc":{"description":"The type of locking to be set. It can be one of the following constants: FBSQL_LOCK_DEFERRED, FBSQL_LOCK_OPTIMISTIC, or FBSQL_LOCK_PESSIMISTIC.","type":"int"}},{"kind":128,"name":"$isolation","modifiers":0,"doc":{"description":"The type of isolation to be set. It can be one of the following constants: FBSQL_ISO_READ_UNCOMMITTED, FBSQL_ISO_READ_COMMITTED, FBSQL_ISO_REPEATABLE_READ, FBSQL_ISO_SERIALIZABLE, or FBSQL_ISO_VERSIONED.","type":"int"}}],"doc":{"description":"Sets the transaction locking and isolation.","type":"void"}},{"kind":64,"name":"resourcebundle_get_error_code","modifiers":0,"children":[{"kind":128,"name":"$r","modifiers":0,"doc":{"description":"ResourceBundle object.","type":"ResourceBundle"}}],"doc":{"description":"Get error code from the last function performed by the bundle object.","type":"int"}},{"kind":64,"name":"ftp_pasv","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$pasv","modifiers":0,"doc":{"description":"If TRUE, the passive mode is turned on, else it's turned off.","type":"bool"}}],"doc":{"description":"ftp_pasv() turns on or off passive mode. In passive mode, data connections are initiated by the client, rather than by the server. It may be needed if the client is behind firewall.","type":"bool"}},{"kind":64,"name":"snmpgetnext","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The hostname of the SNMP agent (server).","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The read community.","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object id which precedes the wanted one.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"int"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"int"}}],"doc":{"description":"The snmpgetnext() function is used to read the value of the SNMP object that follows the specified object_id.","type":"string"}},{"kind":64,"name":"fbsql_blob_size","modifiers":0,"children":[{"kind":128,"name":"$blob_handle","modifiers":0,"doc":{"description":"A BLOB handle, returned by fbsql_create_blob().","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Returns the size of the given BLOB.","type":"int"}},{"kind":64,"name":"ucfirst","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"description":"Returns a string with the first character of str capitalized, if that character is alphabetic.","type":"string"}},{"kind":64,"name":"openssl_pkey_get_private","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"key can be one of the following: a string having the format file://path/to/file.pem. The named file must contain a PEM encoded certificate/private key (it may contain both). A PEM formatted private key.","type":"mixed"}},{"kind":128,"name":"$passphrase","modifiers":0,"value":"\"\"","doc":{"description":"The optional parameter passphrase must be used if the specified key is encrypted (protected by a passphrase).","type":"string"}}],"doc":{"description":"openssl_get_privatekey() parses key and prepares it for use by other functions.","type":"resource"}},{"kind":64,"name":"finfo_buffer","modifiers":0,"children":[{"kind":128,"name":"$finfo","modifiers":0,"doc":{"description":"Fileinfo resource returned by finfo_open().","type":"resource"}},{"kind":128,"name":"$string","modifiers":0,"value":"NULL","doc":{"description":"Content of a file to be checked.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"FILEINFO_NONE","doc":{"description":"One or disjunction of more Fileinfo constants.","type":"int"}},{"kind":128,"name":"$context","modifiers":0,"description":"","value":"NULL","doc":{"type":"resource"}}],"doc":{"description":"This function is used to get information about binary data in a string.","type":"string"}},{"kind":64,"name":"mysqli_stmt_prepare","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query, as a string. It must consist of a single SQL statement. You can include one or more parameter markers in the SQL statement by embedding question mark (?) characters at the appropriate positions. Note: You should not add a terminating semicolon or \\g to the statement. Note: The markers are legal only in certain places in SQL statements. For example, they are allowed in the VALUES() list of an INSERT statement (to specify column values for a row), or in a comparison with a column in a WHERE clause to specify a comparison value. However, they are not allowed for identifiers (such as table or column names), in the select list that names the columns to be returned by a SELECT statement), or to specify both operands of a binary operator such as the = equal sign. The latter restriction is necessary because it would be impossible to determine the parameter type. In general, parameters are legal only in Data Manipulation Language (DML) statements, and not in Data Definition Language (DDL) statements.","type":"string"}}],"doc":{"description":"Prepares the SQL query pointed to by the null-terminated string query.","type":"bool"}},{"kind":64,"name":"bcsub","modifiers":0,"children":[{"kind":128,"name":"$left_operand","modifiers":0,"doc":{"description":"The left operand, as a string.","type":"string"}},{"kind":128,"name":"$right_operand","modifiers":0,"doc":{"description":"The right operand, as a string.","type":"string"}},{"kind":128,"name":"$scale","modifiers":0,"value":"0","doc":{"description":"This optional parameter is used to set the number of digits after the decimal place in the result. If omitted, it will default to the scale set globally with the bcscale() function, or fallback to 0 if this has not been set.","type":"int"}}],"doc":{"description":"Subtracts the right_operand from the left_operand.","type":"string"}},{"kind":64,"name":"date_timestamp_get","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"description":"","doc":{"type":"DateTimeInterface"}}],"doc":{"description":"Gets the Unix timestamp.","type":"int"}},{"kind":64,"name":"odbc_error","modifiers":0,"description":"","children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"wddx_add_vars","modifiers":0,"children":[{"kind":128,"name":"$packet_id","modifiers":0,"doc":{"description":"A WDDX packet, returned by wddx_packet_start().","type":"resource"}},{"kind":128,"name":"$var_name","modifiers":0,"doc":{"description":"Can be either a string naming a variable or an array containing strings naming the variables or another array, etc.","type":"mixed"}}],"doc":{"description":"Serializes the passed variables and add the result to the given packet.","type":"bool"}},{"kind":64,"name":"ftp_mkdir","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"The name of the directory that will be created.","type":"string"}}],"doc":{"description":"Creates the specified directory on the FTP server.","type":"string"}},{"kind":64,"name":"wddx_serialize_value","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The value to be serialized","type":"mixed"}},{"kind":128,"name":"$comment","modifiers":0,"doc":{"description":"An optional comment string that appears in the packet header.","type":"string"}}],"doc":{"description":"Creates a WDDX packet from a single given value.","type":"string"}},{"kind":64,"name":"socket_set_option","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create() or socket_accept().","type":"resource"}},{"kind":128,"name":"$level","modifiers":0,"doc":{"description":"The level parameter specifies the protocol level at which the option resides. For example, to retrieve options at the socket level, a level parameter of SOL_SOCKET would be used. Other levels, such as TCP, can be used by specifying the protocol number of that level. Protocol numbers can be found by using the getprotobyname() function.","type":"int"}},{"kind":128,"name":"$optname","modifiers":0,"doc":{"description":"The available socket options are the same as those for the socket_get_option() function.","type":"int"}},{"kind":128,"name":"$optval","modifiers":0,"doc":{"description":"The option value.","type":"mixed"}}],"doc":{"description":"The socket_set_option() function sets the option specified by the optname parameter, at the specified protocol level, to the value pointed to by the optval parameter for the socket.","type":"bool"}},{"kind":64,"name":"openssl_x509_checkpurpose","modifiers":0,"children":[{"kind":128,"name":"$x509cert","modifiers":0,"doc":{"description":"The examined certificate.","type":"mixed"}},{"kind":128,"name":"$purpose","modifiers":0,"doc":{"description":"openssl_x509_checkpurpose() purposes Constant Description X509_PURPOSE_SSL_CLIENT Can the certificate be used for the client side of an SSL connection? X509_PURPOSE_SSL_SERVER Can the certificate be used for the server side of an SSL connection? X509_PURPOSE_NS_SSL_SERVER Can the cert be used for Netscape SSL server? X509_PURPOSE_SMIME_SIGN Can the cert be used to sign S/MIME email? X509_PURPOSE_SMIME_ENCRYPT Can the cert be used to encrypt S/MIME email? X509_PURPOSE_CRL_SIGN Can the cert be used to sign a certificate revocation list (CRL)? X509_PURPOSE_ANY Can the cert be used for Any/All purposes? These options are not bitfields - you may specify one only!","type":"int"}},{"kind":128,"name":"$cainfo","modifiers":0,"value":"array()","doc":{"description":"cainfo should be an array of trusted CA files/dirs as described in Certificate Verification.","type":"array"}},{"kind":128,"name":"$untrustedfile","modifiers":0,"doc":{"description":"If specified, this should be the name of a PEM encoded file holding certificates that can be used to help verify the certificate, although no trust is placed in the certificates that come from that file.","type":"string"}}],"doc":{"description":"openssl_x509_checkpurpose() examines a certificate to see if it can be used for the specified purpose.","type":"int"}},{"kind":64,"name":"inet_ntop","modifiers":0,"description":"","children":[{"kind":128,"name":"$in_addr","modifiers":0,"doc":{"description":"A 32bit IPv4, or 128bit IPv6 address.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"imagegammacorrect","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$inputgamma","modifiers":0,"doc":{"description":"The input gamma.","type":"float"}},{"kind":128,"name":"$outputgamma","modifiers":0,"doc":{"description":"The output gamma.","type":"float"}}],"doc":{"description":"Applies gamma correction to the given gd image given an input and an output gamma.","type":"bool"}},{"kind":64,"name":"msg_send","modifiers":0,"children":[{"kind":128,"name":"$queue","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$msgtype","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$message","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$serialize","modifiers":0,"value":"true","doc":{"description":"The optional serialize controls how the message is sent. serialize defaults to TRUE which means that the message is serialized using the same mechanism as the session module before being sent to the queue. This allows complex arrays and objects to be sent to other PHP scripts, or if you are using the WDDX serializer, to any WDDX compatible client.","type":"bool"}},{"kind":128,"name":"$blocking","modifiers":0,"value":"true","doc":{"description":"If the message is too large to fit in the queue, your script will wait until another process reads messages from the queue and frees enough space for your message to be sent. This is called blocking; you can prevent blocking by setting the optional blocking parameter to FALSE, in which case msg_send() will immediately return FALSE if the message is too big for the queue, and set the optional errorcode to MSG_EAGAIN, indicating that you should try to send your message again a little later on.","type":"bool"}},{"kind":128,"name":"$errorcode","modifiers":1024,"description":"","doc":{"type":"int"}}],"doc":{"description":"msg_send() sends a message of type msgtype (which MUST be greater than 0) to the message queue specified by queue.","type":"bool"}},{"kind":64,"name":"msql_data_seek","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}},{"kind":128,"name":"$row_number","modifiers":0,"doc":{"description":"The seeked row number.","type":"int"}}],"doc":{"description":"msql_data_seek() moves the internal row pointer of the mSQL result associated with the specified query identifier to point to the specified row number. The next call to msql_fetch_row() would return that row.","type":"bool"}},{"kind":64,"name":"pg_last_oid","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}}],"doc":{"description":"pg_last_oid() is used to retrieve the OID assigned to an inserted row.","type":"string"}},{"kind":64,"name":"func_get_arg","modifiers":0,"children":[{"kind":128,"name":"$arg_num","modifiers":0,"doc":{"description":"The argument offset. Function arguments are counted starting from zero.","type":"int"}}],"doc":{"description":"Gets the specified argument from a user-defined function's argument list.","type":"mixed"}},{"kind":64,"name":"array_slice","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"If offset is non-negative, the sequence will start at that offset in the array. If offset is negative, the sequence will start that far from the end of the array.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"value":"NULL","doc":{"description":"If length is given and is positive, then the sequence will have up to that many elements in it. If the array is shorter than the length, then only the available array elements will be present. If length is given and is negative then the sequence will stop that many elements from the end of the array. If it is omitted, then the sequence will have everything from offset up until the end of the array.","type":"int"}},{"kind":128,"name":"$preserve_keys","modifiers":0,"value":"false","doc":{"description":"Note that array_slice() will reorder and reset the numeric array indices by default. You can change this behaviour by setting preserve_keys to TRUE.","type":"bool"}}],"doc":{"description":"array_slice() returns the sequence of elements from the array array as specified by the offset and length parameters.","type":"array"}},{"kind":64,"name":"transliterator_transliterate","modifiers":0,"children":[{"kind":128,"name":"$transliterator","modifiers":0,"doc":{"description":"In the procedural version, either a Transliterator or a string from which a Transliterator can be built.","type":"mixed"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The string to be transformed.","type":"string"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"The start index (in UTF-16 code units) from which the string will start to be transformed, inclusive. Indexing starts at 0. The text before will be left as is.","type":"int"}},{"kind":128,"name":"$end","modifiers":0,"doc":{"description":"The end index (in UTF-16 code units) until which the string will be transformed, exclusive. Indexing starts at 0. The text after will be left as is.","type":"int"}}],"doc":{"description":"Transforms a string or part thereof using an ICU transliterator.","type":"void"}},{"kind":64,"name":"libxml_disable_entity_loader","modifiers":0,"children":[{"kind":128,"name":"$disable","modifiers":0,"value":"true","doc":{"description":"Disable (TRUE) or enable (FALSE) libxml extensions (such as DOM, XMLWriter and XMLReader) to load external entities.","type":"bool"}}],"doc":{"description":"Disable/enable the ability to load external entities.","type":"bool"}},{"kind":64,"name":"mb_preferred_mime_name","modifiers":0,"children":[{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding being checked.","type":"string"}}],"doc":{"description":"Get a MIME charset string for a specific encoding.","type":"string"}},{"kind":64,"name":"xmlrpc_set_type","modifiers":0,"children":[{"kind":128,"name":"$value","modifiers":1024,"doc":{"description":"Value to set the type","type":"string"}},{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"'base64' or 'datetime'","type":"string"}}],"doc":{"description":"Sets xmlrpc type, base64 or datetime, for a PHP string value.","type":"bool"}},{"kind":64,"name":"snmp3_real_walk","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The hostname of the SNMP agent (server).","type":"string"}},{"kind":128,"name":"$sec_name","modifiers":0,"doc":{"description":"the security name, usually some kind of username","type":"string"}},{"kind":128,"name":"$sec_level","modifiers":0,"doc":{"description":"the security level (noAuthNoPriv|authNoPriv|authPriv)","type":"string"}},{"kind":128,"name":"$auth_protocol","modifiers":0,"doc":{"description":"the authentication protocol (MD5 or SHA)","type":"string"}},{"kind":128,"name":"$auth_passphrase","modifiers":0,"doc":{"description":"the authentication pass phrase","type":"string"}},{"kind":128,"name":"$priv_protocol","modifiers":0,"doc":{"description":"the privacy protocol (DES or AES)","type":"string"}},{"kind":128,"name":"$priv_passphrase","modifiers":0,"doc":{"description":"the privacy pass phrase","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object id.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"string"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"string"}}],"doc":{"description":"The snmp3_real_walk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids.","type":"array"}},{"kind":64,"name":"pspell_config_dict_dir","modifiers":0,"description":"","children":[{"kind":128,"name":"$conf","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$directory","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"strtok","modifiers":0,"children":[{"kind":128,"name":"$token","modifiers":0,"doc":{"description":"The delimiter used when splitting up str.","type":"string"}}],"doc":{"description":"strtok() splits a string (str) into smaller strings (tokens), with each token being delimited by any character from token. That is, if you have a string like \"This is an example string\" you could tokenize this string into its individual words by using the space character as the token.","type":"string"}},{"kind":64,"name":"stream_socket_enable_crypto","modifiers":0,"description":"","children":[{"kind":128,"name":"$stream","modifiers":0,"doc":{"description":"The stream resource.","type":"resource"}},{"kind":128,"name":"$enable","modifiers":0,"doc":{"description":"Enable/disable cryptography on the stream.","type":"bool"}},{"kind":128,"name":"$crypto_type","modifiers":0,"doc":{"description":"Setup encryption on the stream. Valid methods are STREAM_CRYPTO_METHOD_SSLv2_CLIENT STREAM_CRYPTO_METHOD_SSLv3_CLIENT STREAM_CRYPTO_METHOD_SSLv23_CLIENT STREAM_CRYPTO_METHOD_ANY_CLIENT STREAM_CRYPTO_METHOD_TLS_CLIENT STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT STREAM_CRYPTO_METHOD_SSLv2_SERVER STREAM_CRYPTO_METHOD_SSLv3_SERVER STREAM_CRYPTO_METHOD_SSLv23_SERVER STREAM_CRYPTO_METHOD_ANY_SERVER STREAM_CRYPTO_METHOD_TLS_SERVER STREAM_CRYPTO_METHOD_TLSv1_0_SERVER STREAM_CRYPTO_METHOD_TLSv1_1_SERVER STREAM_CRYPTO_METHOD_TLSv1_2_SERVER If omitted, the crypto_type context option on the stream's SSL context will be used instead.","type":"int"}},{"kind":128,"name":"$session_stream","modifiers":0,"doc":{"description":"Seed the stream with settings from session_stream.","type":"resource"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"preg_filter","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$replacement","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$subject","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$limit","modifiers":0,"description":"","value":"-1","doc":{"type":"int"}},{"kind":128,"name":"$count","modifiers":1024,"description":"","doc":{"type":"int"}}],"doc":{"description":"preg_filter() is identical to preg_replace() except it only returns the (possibly transformed) subjects where there was a match. For details about how this function works, read the preg_replace() documentation.","type":"mixed"}},{"kind":64,"name":"odbc_autocommit","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$OnOff","modifiers":0,"value":"false","doc":{"description":"If OnOff is TRUE, auto-commit is enabled, if it is FALSE auto-commit is disabled.","type":"bool"}}],"doc":{"description":"Toggles autocommit behaviour.","type":"mixed"}},{"kind":64,"name":"pg_fetch_assoc","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$row","modifiers":0,"doc":{"description":"Row number in result to fetch. Rows are numbered from 0 upwards. If omitted or NULL, the next row is fetched.","type":"int"}}],"doc":{"description":"pg_fetch_assoc() returns an associative array that corresponds to the fetched row (records).","type":"array"}},{"kind":64,"name":"filegroup","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Gets the file group. The group ID is returned in numerical format, use posix_getgrgid() to resolve it to a group name.","type":"int"}},{"kind":64,"name":"mb_convert_variables","modifiers":0,"children":[{"kind":128,"name":"$to_encoding","modifiers":0,"doc":{"description":"The encoding that the string is being converted to.","type":"string"}},{"kind":128,"name":"$from_encoding","modifiers":0,"doc":{"description":"from_encoding is specified as an array or comma separated string, it tries to detect encoding from from-coding. When from_encoding is omitted, detect_order is used.","type":"mixed"}},{"kind":128,"name":"$vars","modifiers":1024,"doc":{"description":"vars is the reference to the variable being converted. String, Array and Object are accepted. mb_convert_variables() assumes all parameters have the same encoding.","type":"mixed"}},{"kind":128,"name":"$...","modifiers":1024,"doc":{"description":"Additional vars.","type":"mixed"}}],"doc":{"description":"Converts character encoding of variables vars in encoding from_encoding to encoding to_encoding.","type":"string"}},{"kind":64,"name":"pg_cancel_query","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"pg_cancel_query() cancels an asynchronous query sent with pg_send_query(), pg_send_query_params() or pg_send_execute(). You cannot cancel a query executed using pg_query().","type":"bool"}},{"kind":64,"name":"bccomp","modifiers":0,"children":[{"kind":128,"name":"$left_operand","modifiers":0,"doc":{"description":"The left operand, as a string.","type":"string"}},{"kind":128,"name":"$right_operand","modifiers":0,"doc":{"description":"The right operand, as a string.","type":"string"}},{"kind":128,"name":"$scale","modifiers":0,"value":"0","doc":{"description":"The optional scale parameter is used to set the number of digits after the decimal place which will be used in the comparison.","type":"int"}}],"doc":{"description":"Compares the left_operand to the right_operand and returns the result as an integer.","type":"int"}},{"kind":64,"name":"date_offset_get","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTime object returned by date_create()","type":"DateTimeInterface"}}],"doc":{"description":"Returns the timezone offset.","type":"int"}},{"kind":64,"name":"pg_last_notice","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"pg_last_notice() returns the last notice message from the PostgreSQL server on the specified connection. The PostgreSQL server sends notice messages in several cases, for instance when creating a SERIAL column in a table.","type":"string"}},{"kind":64,"name":"fstat","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"A file system pointer resource that is typically created using fopen().","type":"resource"}}],"doc":{"description":"Gathers the statistics of the file opened by the file pointer handle. This function is similar to the stat() function except that it operates on an open file pointer instead of a filename.","type":"array"}},{"kind":64,"name":"datefmt_get_locale","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource","type":"IntlDateFormatter"}},{"kind":128,"name":"$which","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Get locale used by the formatter.","type":"string"}},{"kind":64,"name":"array_fill","modifiers":0,"children":[{"kind":128,"name":"$start_index","modifiers":0,"doc":{"description":"The first index of the returned array. If start_index is negative, the first index of the returned array will be start_index and the following indices will start from zero (see example).","type":"int"}},{"kind":128,"name":"$num","modifiers":0,"doc":{"description":"Number of elements to insert. Must be greater than or equal to zero.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Value to use for filling","type":"mixed"}}],"doc":{"description":"Fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter.","type":"array"}},{"kind":64,"name":"oci_commit","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"An Oracle connection identifier, returned by oci_connect(), oci_pconnect(), or oci_new_connect().","type":"resource"}}],"doc":{"description":"Commits the outstanding transaction for the Oracle connection. A commit ends the current transaction and makes permanent all changes. It releases all locks held.","type":"bool"}},{"kind":64,"name":"floatval","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"May be any scalar type. floatval() should not be used on objects, as doing so will emit an E_NOTICE level error and return 1.","type":"mixed"}}],"doc":{"description":"Gets the float value of var.","type":"float"}},{"kind":64,"name":"snmp2_getnext","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The hostname of the SNMP agent (server).","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The read community.","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object id which precedes the wanted one.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"string"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"string"}}],"doc":{"description":"The snmp2_get_next() function is used to read the value of the SNMP object that follows the specified object_id.","type":"string"}},{"kind":64,"name":"ob_gzhandler","modifiers":0,"children":[{"kind":128,"name":"$buffer","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"ob_gzhandler() is intended to be used as a callback function for ob_start() to help facilitate sending gz-encoded data to web browsers that support compressed web pages. Before ob_gzhandler() actually sends compressed data, it determines what type of content encoding the browser will accept (\"gzip\", \"deflate\" or none at all) and will return its output accordingly. All browsers are supported since it's up to the browser to send the correct header saying that it accepts compressed web pages. If a browser doesn't support compressed pages this function returns FALSE.","type":"string"}},{"kind":64,"name":"intl_is_failure","modifiers":0,"description":"","children":[{"kind":128,"name":"$error_code","modifiers":0,"doc":{"description":"is a value that returned by functions: intl_get_error_code(), collator_get_error_code() .","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"is_dir","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file. If filename is a relative filename, it will be checked relative to the current working directory. If filename is a symbolic or hard link then the link will be resolved and checked. If you have enabled safe mode, or open_basedir further restrictions may apply.","type":"string"}}],"doc":{"description":"Tells whether the given filename is a directory.","type":"bool"}},{"kind":64,"name":"mcrypt_module_get_algo_block_size","modifiers":0,"description":"","children":[{"kind":128,"name":"$algorithm","modifiers":0,"doc":{"description":"The algorithm name.","type":"string"}},{"kind":128,"name":"$lib_dir","modifiers":0,"doc":{"description":"This optional parameter can contain the location where the mode module is on the system.","type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"atan","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"Returns the arc tangent of arg in radians. atan() is the complementary function of tan(), which means that a==tan(atan(a)) for every value of a that is within atan()'s range.","type":"float"}},{"kind":64,"name":"pg_field_table","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$field_number","modifiers":0,"doc":{"description":"Field number, starting from 0.","type":"int"}},{"kind":128,"name":"$oid_only","modifiers":0,"value":"false","doc":{"description":"By default the tables name that field belongs to is returned but if oid_only is set to TRUE, then the oid will instead be returned.","type":"bool"}}],"doc":{"description":"pg_field_table() returns the name of the table that field belongs to, or the table's oid if oid_only is TRUE.","type":"mixed"}},{"kind":64,"name":"imagegd2","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$to","modifiers":0,"value":"NULL","doc":{"description":"The path or an open stream resource (which is automatically being closed after this function returns) to save the file to. If not set or NULL, the raw image stream will be outputted directly.","type":"mixed"}},{"kind":128,"name":"$chunk_size","modifiers":0,"value":"128","doc":{"description":"Chunk size.","type":"int"}},{"kind":128,"name":"$type","modifiers":0,"value":"IMG_GD2_RAW","doc":{"description":"Either IMG_GD2_RAW or IMG_GD2_COMPRESSED. Default is IMG_GD2_RAW.","type":"int"}}],"doc":{"description":"Outputs a GD2 image to the given to.","type":"bool"}},{"kind":64,"name":"variant_div","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Divides left by right and returns the result.","type":"mixed"}},{"kind":64,"name":"msgfmt_set_pattern","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The message formatter","type":"MessageFormatter"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern string to use in this message formatter. The pattern uses an 'apostrophe-friendly' syntax; it is run through » umsg_autoQuoteApostrophe before being interpreted.","type":"string"}}],"doc":{"description":"Set the pattern used by the formatter","type":"bool"}},{"kind":64,"name":"gmp_random_range","modifiers":0,"children":[{"kind":128,"name":"$min","modifiers":0,"doc":{"description":"A GMP number representing the lower bound for the random number","type":"GMP"}},{"kind":128,"name":"$max","modifiers":0,"doc":{"description":"A GMP number representing the upper bound for the random number","type":"GMP"}}],"doc":{"description":"Generate a random number. The number will be between min and max.","type":"GMP"}},{"kind":64,"name":"ibase_field_info","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"An InterBase result identifier.","type":"resource"}},{"kind":128,"name":"$field_number","modifiers":0,"doc":{"description":"Field offset.","type":"int"}}],"doc":{"description":"Returns an array with information about a field after a select query has been run.","type":"array"}},{"kind":64,"name":"stream_socket_client","modifiers":0,"children":[{"kind":128,"name":"$remote_socket","modifiers":0,"doc":{"description":"Address to the socket to connect to.","type":"string"}},{"kind":128,"name":"$errno","modifiers":1024,"doc":{"description":"Will be set to the system level error number if connection fails.","type":"int"}},{"kind":128,"name":"$errstr","modifiers":1024,"doc":{"description":"Will be set to the system level error message if the connection fails.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"ini_get(\"default_socket_timeout\")","doc":{"description":"Number of seconds until the connect() system call should timeout. Note: This parameter only applies when not making asynchronous connection attempts. Note: To set a timeout for reading/writing data over the socket, use the stream_set_timeout(), as the timeout only applies while making connecting the socket.","type":"float"}},{"kind":128,"name":"$flags","modifiers":0,"value":"STREAM_CLIENT_CONNECT","doc":{"description":"Bitmask field which may be set to any combination of connection flags. Currently the select of connection flags is limited to STREAM_CLIENT_CONNECT (default), STREAM_CLIENT_ASYNC_CONNECT and STREAM_CLIENT_PERSISTENT.","type":"int"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"A valid context resource created with stream_context_create().","type":"resource"}}],"doc":{"description":"Initiates a stream or datagram connection to the destination specified by remote_socket. The type of socket created is determined by the transport specified using standard URL formatting: transport://target. For Internet Domain sockets (AF_INET) such as TCP and UDP, the target portion of the remote_socket parameter should consist of a hostname or IP address followed by a colon and a port number. For Unix domain sockets, the target portion should point to the socket file on the filesystem.","type":"resource"}},{"kind":64,"name":"echo","modifiers":0,"description":"","children":[{"kind":128,"name":"$arg1","modifiers":0,"doc":{"description":"The parameter to output.","type":"string"}}],"doc":{"type":"void"}},{"kind":64,"name":"stream_wrapper_unregister","modifiers":0,"children":[{"kind":128,"name":"$protocol","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Allows you to disable an already defined stream wrapper. Once the wrapper has been disabled you may override it with a user-defined wrapper using stream_wrapper_register() or reenable it later on with stream_wrapper_restore().","type":"bool"}},{"kind":64,"name":"posix_getlogin","modifiers":0,"children":[],"doc":{"description":"Returns the login name of the user owning the current process.","type":"string"}},{"kind":64,"name":"session_decode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The encoded data to be stored.","type":"string"}}],"doc":{"description":"session_decode() decodes the serialized session data provided in $data, and populates the $_SESSION superglobal with the result.","type":"bool"}},{"kind":64,"name":"mb_ereg_replace","modifiers":0,"description":"","children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The regular expression pattern. Multibyte characters may be used in pattern.","type":"string"}},{"kind":128,"name":"$replacement","modifiers":0,"doc":{"description":"The replacement text.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string being checked.","type":"string"}},{"kind":128,"name":"$option","modifiers":0,"value":"\"msr\"","doc":{"description":"Matching condition can be set by option parameter. If i is specified for this parameter, the case will be ignored. If x is specified, white space will be ignored. If m is specified, match will be executed in multiline mode and line break will be included in '.'. If p is specified, match will be executed in POSIX mode, line break will be considered as normal character. If e is specified, replacement string will be evaluated as PHP expression.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"openssl_pkcs7_sign","modifiers":0,"children":[{"kind":128,"name":"$infilename","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$outfilename","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$signcert","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$privkey","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$headers","modifiers":0,"doc":{"description":"headers is an array of headers that will be prepended to the data after it has been signed (see openssl_pkcs7_encrypt() for more information about the format of this parameter).","type":"array"}},{"kind":128,"name":"$flags","modifiers":0,"value":"PKCS7_DETACHED","doc":{"description":"flags can be used to alter the output - see PKCS7 constants.","type":"int"}},{"kind":128,"name":"$extracerts","modifiers":0,"doc":{"description":"extracerts specifies the name of a file containing a bunch of extra certificates to include in the signature which can for example be used to help the recipient to verify the certificate that you used.","type":"string"}}],"doc":{"description":"openssl_pkcs7_sign() takes the contents of the file named infilename and signs them using the certificate and its matching private key specified by signcert and privkey parameters.","type":"bool"}},{"kind":64,"name":"ini_get_all","modifiers":0,"children":[{"kind":128,"name":"$extension","modifiers":0,"doc":{"description":"An optional extension name. If set, the function return only options specific for that extension.","type":"string"}},{"kind":128,"name":"$details","modifiers":0,"value":"true","doc":{"description":"Retrieve details settings or only the current value for each setting. Default is TRUE (retrieve details).","type":"bool"}}],"doc":{"description":"Returns all the registered configuration options.","type":"array"}},{"kind":64,"name":"mysql_result","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}},{"kind":128,"name":"$row","modifiers":0,"doc":{"description":"The row number from the result that's being retrieved. Row numbers start at 0.","type":"int"}},{"kind":128,"name":"$field","modifiers":0,"value":"0","doc":{"description":"The name or offset of the field being retrieved. It can be the field's offset, the field's name, or the field's table dot field name (tablename.fieldname). If the column name has been aliased ('select foo as bar from...'), use the alias instead of the column name. If undefined, the first field is retrieved.","type":"mixed"}}],"doc":{"type":"string"}},{"kind":64,"name":"mysqli_get_connection_stats","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns statistics about the client connection. Available only with mysqlnd.","type":"array"}},{"kind":64,"name":"locale_get_display_language","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to return a display language for","type":"string"}},{"kind":128,"name":"$in_locale","modifiers":0,"doc":{"description":"Optional format locale to use to display the language name","type":"string"}}],"doc":{"description":"Returns an appropriately localized display name for language of the input locale. If is NULL then the default locale is used.","type":"string"}},{"kind":64,"name":"log10","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"Returns the base-10 logarithm of arg.","type":"float"}},{"kind":64,"name":"ftp_size","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$remote_file","modifiers":0,"doc":{"description":"The remote file.","type":"string"}}],"doc":{"description":"ftp_size() returns the size of the given file in bytes.","type":"int"}},{"kind":64,"name":"gmp_perfect_square","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"The number being checked as a perfect square. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Check if a number is a perfect square.","type":"bool"}},{"kind":64,"name":"mhash_get_hash_name","modifiers":0,"children":[{"kind":128,"name":"$hash","modifiers":0,"doc":{"description":"The hash ID. One of the MHASH_hashname constants.","type":"int"}}],"doc":{"description":"Gets the name of the specified hash.","type":"string"}},{"kind":64,"name":"snmp3_getnext","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The hostname of the SNMP agent (server).","type":"string"}},{"kind":128,"name":"$sec_name","modifiers":0,"doc":{"description":"the security name, usually some kind of username","type":"string"}},{"kind":128,"name":"$sec_level","modifiers":0,"doc":{"description":"the security level (noAuthNoPriv|authNoPriv|authPriv)","type":"string"}},{"kind":128,"name":"$auth_protocol","modifiers":0,"doc":{"description":"the authentication protocol (MD5 or SHA)","type":"string"}},{"kind":128,"name":"$auth_passphrase","modifiers":0,"doc":{"description":"the authentication pass phrase","type":"string"}},{"kind":128,"name":"$priv_protocol","modifiers":0,"doc":{"description":"the privacy protocol (DES or AES)","type":"string"}},{"kind":128,"name":"$priv_passphrase","modifiers":0,"doc":{"description":"the privacy pass phrase","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object id.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"string"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"string"}}],"doc":{"description":"The snmp3_getnext() function is used to read the value of the SNMP object that follows the specified object_id.","type":"string"}},{"kind":64,"name":"intlcal_is_lenient","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}}],"doc":{"description":"Returns whether the current date/time interpretations is lenient (the default). If that is case, some out of range values for fields will be accepted instead of raising an error.","type":"bool"}},{"kind":64,"name":"xmlwriter_write_attribute_ns","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The namespace prefix.","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The attribute name.","type":"string"}},{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The attribute value.","type":"string"}}],"doc":{"description":"Writes a full namespaced attribute.","type":"bool"}},{"kind":64,"name":"imap_utf7_encode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"An ISO-8859-1 string.","type":"string"}}],"doc":{"description":"Converts data to modified UTF-7 text.","type":"string"}},{"kind":64,"name":"odbc_execute","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result id resource, from odbc_prepare().","type":"resource"}},{"kind":128,"name":"$parameters_array","modifiers":0,"doc":{"description":"Parameters in parameter_array will be substituted for placeholders in the prepared statement in order. Elements of this array will be converted to strings by calling this function. Any parameters in parameter_array which start and end with single quotes will be taken as the name of a file to read and send to the database server as the data for the appropriate placeholder. If you wish to store a string which actually begins and ends with single quotes, you must add a space or other non-single-quote character to the beginning or end of the parameter, which will prevent the parameter from being taken as a file name. If this is not an option, then you must use another mechanism to store the string, such as executing the query directly with odbc_exec()).","type":"array"}}],"doc":{"description":"Executes a statement prepared with odbc_prepare().","type":"bool"}},{"kind":64,"name":"eval","modifiers":0,"children":[{"kind":128,"name":"$code","modifiers":0,"doc":{"description":"Valid PHP code to be evaluated. The code must not be wrapped in opening and closing PHP tags, i.e. 'echo \"Hi!\";' must be passed instead of '<?php echo \"Hi!\"; ?>'. It is still possible to leave and re-enter PHP mode though using the appropriate PHP tags, e.g. 'echo \"In PHP mode!\"; ?>In HTML mode!<?php echo \"Back in PHP mode!\";'. Apart from that the passed code must be valid PHP. This includes that all statements must be properly terminated using a semicolon. 'echo \"Hi!\"' for example will cause a parse error, whereas 'echo \"Hi!\";' will work. A return statement will immediately terminate the evaluation of the code. The code will be executed in the scope of the code calling eval(). Thus any variables defined or changed in the eval() call will remain visible after it terminates.","type":"string"}}],"doc":{"description":"Evaluates the given code as PHP.","type":"mixed"}},{"kind":64,"name":"msgfmt_create","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to use when formatting arguments","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern string to stick arguments into. The pattern uses an 'apostrophe-friendly' syntax; it is run through » umsg_autoQuoteApostrophe before being interpreted.","type":"string"}}],"doc":{"description":"Constructs a new Message Formatter","type":"MessageFormatter"}},{"kind":64,"name":"variant_mod","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Divides left by right and returns the remainder.","type":"mixed"}},{"kind":64,"name":"cal_info","modifiers":0,"children":[{"kind":128,"name":"$calendar","modifiers":0,"value":"-1","doc":{"description":"Calendar to return information for. If no calendar is specified information about all calendars is returned.","type":"int"}}],"doc":{"description":"cal_info() returns information on the specified calendar.","type":"array"}},{"kind":64,"name":"readline_on_new_line","modifiers":0,"children":[],"doc":{"description":"Tells readline that the cursor has moved to a new line.","type":"void"}},{"kind":64,"name":"xmlwriter_write_element_ns","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The namespace prefix.","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The element name.","type":"string"}},{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The element contents.","type":"string"}}],"doc":{"description":"Writes a full namespaced element tag.","type":"bool"}},{"kind":64,"name":"xmlwriter_end_dtd_element","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Ends the current DTD element.","type":"bool"}},{"kind":64,"name":"posix_getcwd","modifiers":0,"children":[],"doc":{"description":"Gets the absolute pathname of the script's current working directory. On error, it sets errno which can be checked using posix_get_last_error()","type":"string"}},{"kind":64,"name":"pg_lo_close","modifiers":0,"children":[{"kind":128,"name":"$large_object","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"pg_lo_close() closes a large object. large_object is a resource for the large object from pg_lo_open().","type":"bool"}},{"kind":64,"name":"stream_context_get_options","modifiers":0,"description":"","children":[{"kind":128,"name":"$stream_or_context","modifiers":0,"doc":{"description":"The stream or context to get options from","type":"resource"}}],"doc":{"type":"array"}},{"kind":64,"name":"oci_server_version","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Returns a string with the Oracle Database version and available options","type":"string"}},{"kind":64,"name":"odbc_fetch_array","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource from odbc_exec().","type":"resource"}},{"kind":128,"name":"$rownumber","modifiers":0,"doc":{"description":"Optionally choose which row number to retrieve.","type":"int"}}],"doc":{"description":"Fetch an associative array from an ODBC query.","type":"array"}},{"kind":64,"name":"gzgetc","modifiers":0,"children":[{"kind":128,"name":"$zp","modifiers":0,"doc":{"description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().","type":"resource"}}],"doc":{"description":"Returns a string containing a single (uncompressed) character read from the given gz-file pointer.","type":"string"}},{"kind":64,"name":"mb_ereg_search_init","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The search string.","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The search pattern.","type":"string"}},{"kind":128,"name":"$option","modifiers":0,"value":"\"msr\"","doc":{"description":"The search option.","type":"string"}}],"doc":{"description":"mb_ereg_search_init() sets string and pattern for a multibyte regular expression. These values are used for mb_ereg_search(), mb_ereg_search_pos(), and mb_ereg_search_regs().","type":"bool"}},{"kind":64,"name":"mb_encode_numericentity","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being encoded.","type":"string"}},{"kind":128,"name":"$convmap","modifiers":0,"doc":{"description":"convmap is array specifies code area to convert.","type":"array"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}},{"kind":128,"name":"$is_hex","modifiers":0,"description":"","value":"FALSE","doc":{"type":"bool"}}],"doc":{"description":"Converts specified character codes in string str from character code to HTML numeric character reference.","type":"string"}},{"kind":64,"name":"mcrypt_module_open","modifiers":0,"description":"","children":[{"kind":128,"name":"$algorithm","modifiers":0,"doc":{"description":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string.","type":"string"}},{"kind":128,"name":"$algorithm_directory","modifiers":0,"doc":{"description":"The algorithm_directory parameter is used to locate the encryption module. When you supply a directory name, it is used. When you set it to an empty string (\"\"), the value set by the mcrypt.algorithms_dir php.ini directive is used. When it is not set, the default directory that is used is the one that was compiled into libmcrypt (usually /usr/local/lib/libmcrypt).","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".","type":"string"}},{"kind":128,"name":"$mode_directory","modifiers":0,"doc":{"description":"The mode_directory parameter is used to locate the encryption module. When you supply a directory name, it is used. When you set it to an empty string (\"\"), the value set by the mcrypt.modes_dir php.ini directive is used. When it is not set, the default directory that is used is the one that was compiled-in into libmcrypt (usually /usr/local/lib/libmcrypt).","type":"string"}}],"doc":{"type":"resource"}},{"kind":64,"name":"stripslashes","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"description":"Un-quotes a quoted string.","type":"string"}},{"kind":64,"name":"chunk_split","modifiers":0,"children":[{"kind":128,"name":"$body","modifiers":0,"doc":{"description":"The string to be chunked.","type":"string"}},{"kind":128,"name":"$chunklen","modifiers":0,"value":"76","doc":{"description":"The chunk length.","type":"int"}},{"kind":128,"name":"$end","modifiers":0,"value":"\"\\r\\n\"","doc":{"description":"The line ending sequence.","type":"string"}}],"doc":{"description":"Can be used to split a string into smaller chunks which is useful for e.g. converting base64_encode() output to match RFC 2045 semantics. It inserts end every chunklen characters.","type":"string"}},{"kind":64,"name":"pcntl_waitpid","modifiers":0,"children":[{"kind":128,"name":"$pid","modifiers":0,"doc":{"description":"The value of pid can be one of the following: possible values for pid < -1 wait for any child process whose process group ID is equal to the absolute value of pid. -1 wait for any child process; this is the same behaviour that the wait function exhibits. 0 wait for any child process whose process group ID is equal to that of the calling process. > 0 wait for the child whose process ID is equal to the value of pid. Note: Specifying -1 as the pid is equivalent to the functionality pcntl_wait() provides (minus options).","type":"int"}},{"kind":128,"name":"$status","modifiers":1024,"doc":{"description":"pcntl_waitpid() will store status information in the status parameter which can be evaluated using the following functions: pcntl_wifexited(), pcntl_wifstopped(), pcntl_wifsignaled(), pcntl_wexitstatus(), pcntl_wtermsig() and pcntl_wstopsig().","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"The value of options is the value of zero or more of the following two global constants OR'ed together: possible values for options WNOHANG return immediately if no child has exited. WUNTRACED return for children which are stopped, and whose status has not been reported.","type":"int"}}],"doc":{"description":"Suspends execution of the current process until a child as specified by the pid argument has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function.","type":"int"}},{"kind":64,"name":"stream_filter_append","modifiers":0,"children":[{"kind":128,"name":"$stream","modifiers":0,"doc":{"description":"The target stream.","type":"resource"}},{"kind":128,"name":"$filtername","modifiers":0,"doc":{"description":"The filter name.","type":"string"}},{"kind":128,"name":"$read_write","modifiers":0,"doc":{"description":"By default, stream_filter_append() will attach the filter to the read filter chain if the file was opened for reading (i.e. File Mode: r, and/or +). The filter will also be attached to the write filter chain if the file was opened for writing (i.e. File Mode: w, a, and/or +). STREAM_FILTER_READ, STREAM_FILTER_WRITE, and/or STREAM_FILTER_ALL can also be passed to the read_write parameter to override this behavior.","type":"int"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"This filter will be added with the specified params to the end of the list and will therefore be called last during stream operations. To add a filter to the beginning of the list, use stream_filter_prepend().","type":"mixed"}}],"doc":{"description":"Adds filtername to the list of filters attached to stream.","type":"resource"}},{"kind":64,"name":"gd_info","modifiers":0,"children":[],"doc":{"description":"Gets information about the version and capabilities of the installed GD library.","type":"array"}},{"kind":64,"name":"transliterator_get_error_message","modifiers":0,"children":[],"doc":{"description":"Gets the last error message for this transliterator.","type":"string"}},{"kind":64,"name":"class_implements","modifiers":0,"children":[{"kind":128,"name":"$class","modifiers":0,"doc":{"description":"An object (class instance) or a string (class or interface name).","type":"mixed"}},{"kind":128,"name":"$autoload","modifiers":0,"value":"true","doc":{"description":"Whether to allow this function to load the class automatically through the __autoload() magic method.","type":"bool"}}],"doc":{"description":"This function returns an array with the names of the interfaces that the given class and its parents implement.","type":"array"}},{"kind":64,"name":"fbsql_num_fields","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}}],"doc":{"description":"Returns the number of fields in the given result set.","type":"int"}},{"kind":64,"name":"locale_get_display_name","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to return a display name for.","type":"string"}},{"kind":128,"name":"$in_locale","modifiers":0,"doc":{"description":"optional format locale","type":"string"}}],"doc":{"description":"Returns an appropriately localized display name for the input locale. If is NULL then the default locale is used.","type":"string"}},{"kind":64,"name":"hash_hmac","modifiers":0,"description":"","children":[{"kind":128,"name":"$algo","modifiers":0,"doc":{"description":"Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..) See hash_algos() for a list of supported algorithms.","type":"string"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"Message to be hashed.","type":"string"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"Shared secret key used for generating the HMAC variant of the message digest.","type":"string"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"false","doc":{"description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.","type":"bool"}}],"doc":{"type":"string"}},{"kind":64,"name":"ldap_mod_replace","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The distinguished name of an LDAP entity.","type":"string"}},{"kind":128,"name":"$entry","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"Replaces one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level. Object-level modifications are done by the ldap_modify() function.","type":"bool"}},{"kind":64,"name":"crc32","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The data.","type":"string"}}],"doc":{"description":"Generates the cyclic redundancy checksum polynomial of 32-bit lengths of the str. This is usually used to validate the integrity of data being transmitted.","type":"int"}},{"kind":64,"name":"openssl_x509_parse","modifiers":0,"children":[{"kind":128,"name":"$x509cert","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$shortnames","modifiers":0,"value":"true","doc":{"description":"shortnames controls how the data is indexed in the array - if shortnames is TRUE (the default) then fields will be indexed with the short name form, otherwise, the long name form will be used - e.g.: CN is the shortname form of commonName.","type":"bool"}}],"doc":{"description":"openssl_x509_parse() returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc.","type":"array"}},{"kind":64,"name":"shm_attach","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"A numeric shared memory segment ID","type":"int"}},{"kind":128,"name":"$memsize","modifiers":0,"doc":{"description":"The memory size. If not provided, default to the sysvshm.init_mem in the php.ini, otherwise 10000 bytes.","type":"int"}},{"kind":128,"name":"$perm","modifiers":0,"value":"0666","doc":{"description":"The optional permission bits. Default to 0666.","type":"int"}}],"doc":{"description":"shm_attach() returns an id that can be used to access the System V shared memory with the given key, the first call creates the shared memory segment with memsize and the optional perm-bits perm.","type":"resource"}},{"kind":64,"name":"readline_write_history","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the saved file.","type":"string"}}],"doc":{"description":"This function writes the command history to a file.","type":"bool"}},{"kind":64,"name":"oci_connect","modifiers":0,"children":[{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The Oracle user name.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password for username.","type":"string"}},{"kind":128,"name":"$connection_string","modifiers":0,"doc":{"description":"Contains the Oracle instance to connect to. It can be an » Easy Connect string, or a Connect Name from the tnsnames.ora file, or the name of a local Oracle instance. If not specified, PHP uses environment variables such as TWO_TASK (on Linux) or LOCAL (on Windows) and ORACLE_SID to determine the Oracle instance to connect to. To use the Easy Connect naming method, PHP must be linked with Oracle 10g or greater Client libraries. The Easy Connect string for Oracle 10g is of the form: [//]host_name[:port][/service_name]. From Oracle 11g, the syntax is: [//]host_name[:port][/service_name][:server_type][/instance_name]. Service names can be found by running the Oracle utility lsnrctl status on the database server machine. The tnsnames.ora file can be in the Oracle Net search path, which includes $ORACLE_HOME/network/admin and /etc. Alternatively set TNS_ADMIN so that $TNS_ADMIN/tnsnames.ora is read. Make sure the web daemon has read access to the file.","type":"string"}},{"kind":128,"name":"$character_set","modifiers":0,"doc":{"description":"Determines the character set used by the Oracle Client libraries. The character set does not need to match the character set used by the database. If it doesn't match, Oracle will do its best to convert data to and from the database character set. Depending on the character sets this may not give usable results. Conversion also adds some time overhead. If not specified, the Oracle Client libraries determine a character set from the NLS_LANG environment variable. Passing this parameter can reduce the time taken to connect.","type":"string"}},{"kind":128,"name":"$session_mode","modifiers":0,"doc":{"description":"This parameter is available since version PHP 5 (PECL OCI8 1.1) and accepts the following values: OCI_DEFAULT, OCI_SYSOPER and OCI_SYSDBA. If either OCI_SYSOPER or OCI_SYSDBA were specified, this function will try to establish privileged connection using external credentials. Privileged connections are disabled by default. To enable them you need to set oci8.privileged_connect to On. PHP 5.3 (PECL OCI8 1.3.4) introduced the OCI_CRED_EXT mode value. This tells Oracle to use External or OS authentication, which must be configured in the database. The OCI_CRED_EXT flag can only be used with username of \"/\" and a empty password. oci8.privileged_connect may be On or Off. OCI_CRED_EXT may be combined with the OCI_SYSOPER or OCI_SYSDBA modes. OCI_CRED_EXT is not supported on Windows for security reasons.","type":"int"}}],"doc":{"description":"Returns a connection identifier needed for most other OCI8 operations.","type":"resource"}},{"kind":64,"name":"strcspn","modifiers":0,"children":[{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The string to examine.","type":"string"}},{"kind":128,"name":"$mask","modifiers":0,"doc":{"description":"The string containing every disallowed character.","type":"string"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"The position in subject to start searching. If start is given and is non-negative, then strcspn() will begin examining subject at the start'th position. For instance, in the string 'abcdef', the character at position 0 is 'a', the character at position 2 is 'c', and so forth. If start is given and is negative, then strcspn() will begin examining subject at the start'th position from the end of subject.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The length of the segment from subject to examine. If length is given and is non-negative, then subject will be examined for length characters after the starting position. If length is given and is negative, then subject will be examined from the starting position up to length characters from the end of subject.","type":"int"}}],"doc":{"description":"Returns the length of the initial segment of subject which does not contain any of the characters in mask.","type":"int"}},{"kind":64,"name":"header_remove","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The header name to be removed. Note: This parameter is case-insensitive.","type":"string"}}],"doc":{"description":"Removes an HTTP header previously set using header().","type":"void"}},{"kind":64,"name":"mysql_pconnect","modifiers":0,"description":"","children":[{"kind":128,"name":"$server","modifiers":0,"value":"ini_get(\"mysql.default_host\")","doc":{"description":"The MySQL server. It can also include a port number. e.g. \"hostname:port\" or a path to a local socket e.g. \":/path/to/socket\" for the localhost. If the PHP directive mysql.default_host is undefined (default), then the default value is 'localhost:3306'","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"value":"ini_get(\"mysql.default_user\")","doc":{"description":"The username. Default value is the name of the user that owns the server process.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"value":"ini_get(\"mysql.default_password\")","doc":{"description":"The password. Default value is an empty password.","type":"string"}},{"kind":128,"name":"$client_flags","modifiers":0,"value":"0","doc":{"description":"The client_flags parameter can be a combination of the following constants: 128 (enable LOAD DATA LOCAL handling), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE or MYSQL_CLIENT_INTERACTIVE.","type":"int"}}],"doc":{"type":"resource"}},{"kind":64,"name":"pg_close","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_close() closes the non-persistent connection to a PostgreSQL database associated with the given connection resource.","type":"bool"}},{"kind":64,"name":"tidy_get_release","modifiers":0,"children":[],"doc":{"description":"Gets the release date of the Tidy library.","type":"string"}},{"kind":64,"name":"mysqli_stmt_sqlstate","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Returns a string containing the SQLSTATE error code for the most recently invoked prepared statement function that can succeed or fail. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. For a list of possible values, see » http://dev.mysql.com/doc/mysql/en/error-handling.html.","type":"string"}},{"kind":64,"name":"openlog","modifiers":0,"children":[{"kind":128,"name":"$ident","modifiers":0,"doc":{"description":"The string ident is added to each message.","type":"string"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"The option argument is used to indicate what logging options will be used when generating a log message. openlog() Options Constant Description LOG_CONS if there is an error while sending data to the system logger, write directly to the system console LOG_NDELAY open the connection to the logger immediately LOG_ODELAY (default) delay opening the connection until the first message is logged LOG_PERROR print log message also to standard error LOG_PID include PID with each message You can use one or more of this options. When using multiple options you need to OR them, i.e. to open the connection immediately, write to the console and include the PID in each message, you will use: LOG_CONS | LOG_NDELAY | LOG_PID","type":"int"}},{"kind":128,"name":"$facility","modifiers":0,"doc":{"description":"The facility argument is used to specify what type of program is logging the message. This allows you to specify (in your machine's syslog configuration) how messages coming from different facilities will be handled. openlog() Facilities Constant Description LOG_AUTH security/authorization messages (use LOG_AUTHPRIV instead in systems where that constant is defined) LOG_AUTHPRIV security/authorization messages (private) LOG_CRON clock daemon (cron and at) LOG_DAEMON other system daemons LOG_KERN kernel messages LOG_LOCAL0 ... LOG_LOCAL7 reserved for local use, these are not available in Windows LOG_LPR line printer subsystem LOG_MAIL mail subsystem LOG_NEWS USENET news subsystem LOG_SYSLOG messages generated internally by syslogd LOG_USER generic user-level messages LOG_UUCP UUCP subsystem Note: LOG_USER is the only valid log type under Windows operating systems","type":"int"}}],"doc":{"description":"openlog() opens a connection to the system logger for a program.","type":"bool"}},{"kind":64,"name":"fbsql_select_db","modifiers":0,"children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The name of the database to be selected. If the database is protected with a database password, the you must call fbsql_database_password() before selecting the database.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Sets the current active database on the given link identifier.","type":"bool"}},{"kind":64,"name":"locale_get_display_region","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to return a display region for.","type":"string"}},{"kind":128,"name":"$in_locale","modifiers":0,"doc":{"description":"Optional format locale to use to display the region name","type":"string"}}],"doc":{"description":"Returns an appropriately localized display name for region of the input locale. If is NULL then the default locale is used.","type":"string"}},{"kind":64,"name":"array_fill_keys","modifiers":0,"children":[{"kind":128,"name":"$keys","modifiers":0,"doc":{"description":"Array of values that will be used as keys. Illegal values for key will be converted to string.","type":"array"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Value to use for filling","type":"mixed"}}],"doc":{"description":"Fills an array with the value of the value parameter, using the values of the keys array as keys.","type":"array"}},{"kind":64,"name":"imap_expunge","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}}],"doc":{"description":"Deletes all the messages marked for deletion by imap_delete(), imap_mail_move(), or imap_setflag_full().","type":"bool"}},{"kind":64,"name":"fnmatch","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The shell wildcard pattern.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The tested string. This function is especially useful for filenames, but may also be used on regular strings. The average user may be used to shell patterns or at least in their simplest form to '?' and '*' wildcards so using fnmatch() instead of preg_match() for frontend search expression input may be way more convenient for non-programming users.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. A list of possible flags for fnmatch() Flag Description FNM_NOESCAPE Disable backslash escaping. FNM_PATHNAME Slash in string only matches slash in the given pattern. FNM_PERIOD Leading period in string must be exactly matched by period in the given pattern. FNM_CASEFOLD Caseless match. Part of the GNU extension.","type":"int"}}],"doc":{"description":"fnmatch() checks if the passed string would match the given shell wildcard pattern.","type":"bool"}},{"kind":64,"name":"imagesettile","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$tile","modifiers":0,"doc":{"description":"The image resource to be used as a tile.","type":"resource"}}],"doc":{"description":"imagesettile() sets the tile image to be used by all region filling functions (such as imagefill() and imagefilledpolygon()) when filling with the special color IMG_COLOR_TILED.","type":"bool"}},{"kind":64,"name":"mysqli_stmt_errno","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Returns the error code for the most recently invoked statement function that can succeed or fail.","type":"int"}},{"kind":64,"name":"forward_static_call_array","modifiers":0,"children":[{"kind":128,"name":"$function","modifiers":0,"doc":{"description":"The function or method to be called. This parameter may be an array, with the name of the class, and the method, or a string, with a function name.","type":"callable"}},{"kind":128,"name":"$parameters","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"Calls a user defined function or method given by the function parameter. This function must be called within a method context, it can't be used outside a class. It uses the late static binding. All arguments of the forwarded method are passed as values, and as an array, similarly to call_user_func_array().","type":"mixed"}},{"kind":64,"name":"ftp_put","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$remote_file","modifiers":0,"doc":{"description":"The remote file path.","type":"string"}},{"kind":128,"name":"$local_file","modifiers":0,"doc":{"description":"The local file path.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY.","type":"int"}},{"kind":128,"name":"$startpos","modifiers":0,"value":"0","doc":{"description":"The position in the remote file to start uploading to.","type":"int"}}],"doc":{"description":"ftp_put() stores a local file on the FTP server.","type":"bool"}},{"kind":64,"name":"openssl_pkey_new","modifiers":0,"children":[{"kind":128,"name":"$configargs","modifiers":0,"doc":{"description":"You can finetune the key generation (such as specifying the number of bits) using configargs. See openssl_csr_new() for more information about configargs.","type":"array"}}],"doc":{"description":"openssl_pkey_new() generates a new private and public key pair. The public component of the key can be obtained using openssl_pkey_get_public().","type":"resource"}},{"kind":64,"name":"odbc_procedures","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$qualifier","modifiers":0,"doc":{"description":"The qualifier.","type":"string"}},{"kind":128,"name":"$owner","modifiers":0,"doc":{"description":"The owner. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.","type":"string"}}],"doc":{"description":"Lists all procedures in the requested range.","type":"resource"}},{"kind":64,"name":"gzencode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to encode.","type":"string"}},{"kind":128,"name":"$level","modifiers":0,"value":"-1","doc":{"description":"The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. If not given, the default compression level will be the default compression level of the zlib library.","type":"int"}},{"kind":128,"name":"$encoding_mode","modifiers":0,"value":"FORCE_GZIP","doc":{"description":"The encoding mode. Can be FORCE_GZIP (the default) or FORCE_DEFLATE. Prior to PHP 5.4.0, using FORCE_DEFLATE results in a standard zlib deflated string (inclusive zlib headers) after a gzip file header but without the trailing crc32 checksum. In PHP 5.4.0 and later, FORCE_DEFLATE generates RFC 1950 compliant output, consisting of a zlib header, the deflated data, and an Adler checksum.","type":"int"}}],"doc":{"description":"This function returns a compressed version of the input data compatible with the output of the gzip program.","type":"string"}},{"kind":64,"name":"restore_exception_handler","modifiers":0,"children":[],"doc":{"description":"Used after changing the exception handler function using set_exception_handler(), to revert to the previous exception handler (which could be the built-in or a user defined function).","type":"bool"}},{"kind":64,"name":"mssql_field_type","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}},{"kind":128,"name":"$offset","modifiers":0,"value":"-1","doc":{"description":"The field offset, starts at 0. If omitted, the current field is used.","type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"eregi_replace","modifiers":0,"description":"","children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"A POSIX extended regular expression.","type":"string"}},{"kind":128,"name":"$replacement","modifiers":0,"doc":{"description":"If pattern contains parenthesized substrings, replacement may contain substrings of the form \\digit, which will be replaced by the text matching the digit'th parenthesized substring; \\0 will produce the entire contents of string. Up to nine substrings may be used. Parentheses may be nested, in which case they are counted by the opening parenthesis.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"transliterator_create","modifiers":0,"children":[{"kind":128,"name":"$id","modifiers":0,"doc":{"description":"The id.","type":"string"}},{"kind":128,"name":"$direction","modifiers":0,"doc":{"description":"The direction, defaults to >Transliterator::FORWARD. May also be set to Transliterator::REVERSE.","type":"int"}}],"doc":{"description":"Opens a Transliterator by id.","type":"Transliterator"}},{"kind":64,"name":"mysqli_fetch_assoc","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}}],"doc":{"description":"Returns an associative array that corresponds to the fetched row or NULL if there are no more rows.","type":"array"}},{"kind":64,"name":"touch","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The name of the file being touched.","type":"string"}},{"kind":128,"name":"$time","modifiers":0,"value":"time()","doc":{"description":"The touch time. If time is not supplied, the current system time is used.","type":"int"}},{"kind":128,"name":"$atime","modifiers":0,"doc":{"description":"If present, the access time of the given filename is set to the value of atime. Otherwise, it is set to the value passed to the time parameter. If neither are present, the current system time is used.","type":"int"}}],"doc":{"description":"Attempts to set the access and modification times of the file named in the filename parameter to the value given in time. Note that the access time is always modified, regardless of the number of parameters.","type":"bool"}},{"kind":64,"name":"ldap_errno","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}}],"doc":{"description":"Returns the standardized error number returned by the last LDAP command. This number can be converted into a textual error message using ldap_err2str().","type":"int"}},{"kind":64,"name":"date_timezone_get","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTime object returned by date_create()","type":"DateTimeInterface"}}],"doc":{"description":"Return time zone relative to given DateTime.","type":"DateTimeZone"}},{"kind":64,"name":"pcntl_getpriority","modifiers":0,"children":[{"kind":128,"name":"$pid","modifiers":0,"value":"getmypid()","doc":{"description":"If not specified, the pid of the current process is used.","type":"int"}},{"kind":128,"name":"$process_identifier","modifiers":0,"value":"PRIO_PROCESS","doc":{"description":"One of PRIO_PGRP, PRIO_USER or PRIO_PROCESS.","type":"int"}}],"doc":{"description":"pcntl_getpriority() gets the priority of pid. Because priority levels can differ between system types and kernel versions, please see your system's getpriority(2) man page for specific details.","type":"int"}},{"kind":64,"name":"gregoriantojd","modifiers":0,"children":[{"kind":128,"name":"$month","modifiers":0,"doc":{"description":"The month as a number from 1 (for January) to 12 (for December)","type":"int"}},{"kind":128,"name":"$day","modifiers":0,"doc":{"description":"The day as a number from 1 to 31","type":"int"}},{"kind":128,"name":"$year","modifiers":0,"doc":{"description":"The year as a number between -4714 and 9999","type":"int"}}],"doc":{"description":"Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.","type":"int"}},{"kind":64,"name":"enchant_broker_describe","modifiers":0,"children":[{"kind":128,"name":"$broker","modifiers":0,"doc":{"description":"Broker resource","type":"resource"}}],"doc":{"description":"Enumerates the Enchant providers and tells you some rudimentary information about them. The same info is provided through phpinfo().","type":"array"}},{"kind":64,"name":"pg_lo_unlink","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}},{"kind":128,"name":"$oid","modifiers":0,"doc":{"description":"The OID of the large object in the database.","type":"int"}}],"doc":{"description":"pg_lo_unlink() deletes a large object with the oid. Returns TRUE on success or FALSE on failure.","type":"bool"}},{"kind":64,"name":"preg_replace_callback_array","modifiers":0,"children":[{"kind":128,"name":"$patterns_and_callbacks","modifiers":0,"doc":{"description":"An associative array mapping patterns (keys) to callbacks (values).","type":"array"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The string or an array with strings to search and replace.","type":"mixed"}},{"kind":128,"name":"$limit","modifiers":0,"value":"-1","doc":{"description":"The maximum possible replacements for each pattern in each subject string. Defaults to -1 (no limit).","type":"int"}},{"kind":128,"name":"$count","modifiers":1024,"doc":{"description":"If specified, this variable will be filled with the number of replacements done.","type":"int"}}],"doc":{"description":"The behavior of this function is similar to preg_replace_callback(), except that callbacks are executed on a per-pattern basis.","type":"mixed"}},{"kind":64,"name":"datefmt_set_pattern","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource.","type":"IntlDateFormatter"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"New pattern string to use. Possible patterns are documented at » http://userguide.icu-project.org/formatparse/datetime.","type":"string"}}],"doc":{"description":"Set the pattern used for the IntlDateFormatter.","type":"bool"}},{"kind":64,"name":"mysql_query","modifiers":0,"description":"","children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"An SQL query The query string should not end with a semicolon. Data inside the query should be properly escaped.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"password_needs_rehash","modifiers":0,"children":[{"kind":128,"name":"$hash","modifiers":0,"doc":{"description":"A hash created by password_hash().","type":"string"}},{"kind":128,"name":"$algo","modifiers":0,"doc":{"description":"A password algorithm constant denoting the algorithm to use when hashing the password.","type":"integer"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"An associative array containing options. See the password algorithm constants for documentation on the supported options for each algorithm.","type":"array"}}],"doc":{"description":"This function checks to see if the supplied hash implements the algorithm and options provided. If not, it is assumed that the hash needs to be rehashed.","type":"boolean"}},{"kind":64,"name":"enchant_broker_set_ordering","modifiers":0,"children":[{"kind":128,"name":"$broker","modifiers":0,"doc":{"description":"Broker resource","type":"resource"}},{"kind":128,"name":"$tag","modifiers":0,"doc":{"description":"Language tag. The special \"*\" tag can be used as a language tag to declare a default ordering for any language that does not explicitly declare an ordering.","type":"string"}},{"kind":128,"name":"$ordering","modifiers":0,"doc":{"description":"Comma delimited list of provider names","type":"string"}}],"doc":{"description":"Declares a preference of dictionaries to use for the language described/referred to by 'tag'. The ordering is a comma delimited list of provider names. As a special exception, the \"*\" tag can be used as a language tag to declare a default ordering for any language that does not explicitly declare an ordering.","type":"bool"}},{"kind":64,"name":"intlcal_before","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$other","modifiers":0,"doc":{"description":"The calendar whose time will be checked against the primary objectʼs time.","type":"IntlCalendar"}}],"doc":{"description":"Returns whether this objectʼs time precedes the argumentʼs time.","type":"bool"}},{"kind":64,"name":"json_encode","modifiers":0,"children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value being encoded. Can be any type except a resource. All string data must be UTF-8 encoded. Note: PHP implements a superset of JSON as specified in the original » RFC 7159.","type":"mixed"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT, JSON_PRESERVE_ZERO_FRACTION, JSON_UNESCAPED_UNICODE, JSON_PARTIAL_OUTPUT_ON_ERROR. The behaviour of these constants is described on the JSON constants page.","type":"int"}},{"kind":128,"name":"$depth","modifiers":0,"value":"512","doc":{"description":"Set the maximum depth. Must be greater than zero.","type":"int"}}],"doc":{"description":"Returns a string containing the JSON representation of the supplied value.","type":"string"}},{"kind":64,"name":"pg_result_seek","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"Row to move the internal offset to in the result resource. Rows are numbered starting from zero.","type":"int"}}],"doc":{"description":"pg_result_seek() sets the internal row offset in a result resource.","type":"bool"}},{"kind":64,"name":"imagelayereffect","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$effect","modifiers":0,"doc":{"description":"One of the following constants: IMG_EFFECT_REPLACE Use pixel replacement (equivalent of passing TRUE to imagealphablending()) IMG_EFFECT_ALPHABLEND Use normal pixel blending (equivalent of passing FALSE to imagealphablending()) IMG_EFFECT_NORMAL Same as IMG_EFFECT_ALPHABLEND. IMG_EFFECT_OVERLAY Overlay has the effect that black background pixels will remain black, white background pixels will remain white, but grey background pixels will take the colour of the foreground pixel. IMG_EFFECT_MULTIPLY Overlays with a multiply effect.","type":"int"}}],"doc":{"description":"Set the alpha blending flag to use layering effects.","type":"bool"}},{"kind":64,"name":"dgettext","modifiers":0,"children":[{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"The domain","type":"string"}},{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"The message","type":"string"}}],"doc":{"description":"The dgettext() function allows you to override the current domain for a single message lookup.","type":"string"}},{"kind":64,"name":"fbsql_create_db","modifiers":0,"children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The database name, as a string.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}},{"kind":128,"name":"$database_options","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Attempts to create a new database on the specified server.","type":"bool"}},{"kind":64,"name":"opcache_get_status","modifiers":0,"children":[{"kind":128,"name":"$get_scripts","modifiers":0,"value":"TRUE","doc":{"description":"Include script specific state information","type":"boolean"}}],"doc":{"description":"This function returns state information about the cache instance","type":"array"}},{"kind":64,"name":"copy","modifiers":0,"children":[{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"Path to the source file.","type":"string"}},{"kind":128,"name":"$dest","modifiers":0,"doc":{"description":"The destination path. If dest is a URL, the copy operation may fail if the wrapper does not support overwriting of existing files. Warning If the destination file already exists, it will be overwritten.","type":"string"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"A valid context resource created with stream_context_create().","type":"resource"}}],"doc":{"description":"Makes a copy of the file source to dest.","type":"bool"}},{"kind":64,"name":"exif_imagetype","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The image being checked.","type":"string"}}],"doc":{"description":"exif_imagetype() reads the first bytes of an image and checks its signature.","type":"int"}},{"kind":64,"name":"hash_file","modifiers":0,"description":"","children":[{"kind":128,"name":"$algo","modifiers":0,"doc":{"description":"Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..)","type":"string"}},{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"URL describing location of file to be hashed; Supports fopen wrappers.","type":"string"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"false","doc":{"description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.","type":"bool"}}],"doc":{"type":"string"}},{"kind":64,"name":"imap_mail_compose","modifiers":0,"children":[{"kind":128,"name":"$envelope","modifiers":0,"doc":{"description":"An associative array of headers fields. Valid keys are: \"remail\", \"return_path\", \"date\", \"from\", \"reply_to\", \"in_reply_to\", \"subject\", \"to\", \"cc\", \"bcc\", \"message_id\" and \"custom_headers\" (which contains associative array of other headers).","type":"array"}},{"kind":128,"name":"$body","modifiers":0,"doc":{"description":"An indexed array of bodies A body is an associative array which can consist of the following keys: \"type\", \"encoding\", \"charset\", \"type.parameters\", \"subtype\", \"id\", \"description\", \"disposition.type\", \"disposition\", \"contents.data\", \"lines\", \"bytes\" and \"md5\".","type":"array"}}],"doc":{"description":"Create a MIME message based on the given envelope and body sections.","type":"string"}},{"kind":64,"name":"variant_cat","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Concatenates left with right and returns the result.","type":"mixed"}},{"kind":64,"name":"fbsql_rows_fetched","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}}],"doc":{"description":"Gets the number of rows affected by the last statement.","type":"int"}},{"kind":64,"name":"odbc_fetch_object","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource from odbc_exec().","type":"resource"}},{"kind":128,"name":"$rownumber","modifiers":0,"doc":{"description":"Optionally choose which row number to retrieve.","type":"int"}}],"doc":{"description":"Fetch an object from an ODBC query.","type":"object"}},{"kind":64,"name":"spl_autoload_extensions","modifiers":0,"children":[{"kind":128,"name":"$file_extensions","modifiers":0,"doc":{"description":"When calling without an argument, it simply returns the current list of extensions each separated by comma. To modify the list of file extensions, simply invoke the functions with the new list of file extensions to use in a single string with each extensions separated by comma.","type":"string"}}],"doc":{"description":"This function can modify and check the file extensions that the built in __autoload() fallback function spl_autoload() will be using.","type":"string"}},{"kind":64,"name":"pg_socket","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"pg_socket() returns a read only resource corresponding to the socket underlying the given PostgreSQL connection.","type":"resource"}},{"kind":64,"name":"imageline","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$x1","modifiers":0,"doc":{"description":"x-coordinate for first point.","type":"int"}},{"kind":128,"name":"$y1","modifiers":0,"doc":{"description":"y-coordinate for first point.","type":"int"}},{"kind":128,"name":"$x2","modifiers":0,"doc":{"description":"x-coordinate for second point.","type":"int"}},{"kind":128,"name":"$y2","modifiers":0,"doc":{"description":"y-coordinate for second point.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"The line color. A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"Draws a line between the two given points.","type":"bool"}},{"kind":64,"name":"mysqli_set_local_infile_default","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Deactivates a LOAD DATA INFILE LOCAL handler previously set with mysqli_set_local_infile_handler().","type":"void"}},{"kind":64,"name":"grapheme_stripos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string to look in. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to look for. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"The optional $offset parameter allows you to specify where in haystack to start searching as an offset in grapheme units (not bytes or characters). If the offset is negative, it is treated relative to the end of the string. The position returned is still relative to the beginning of haystack regardless of the value of $offset.","type":"int"}}],"doc":{"description":"Find position (in grapheme units) of first occurrence of a case-insensitive string","type":"int"}},{"kind":64,"name":"dcgettext","modifiers":0,"children":[{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"The domain","type":"string"}},{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"The message","type":"string"}},{"kind":128,"name":"$category","modifiers":0,"doc":{"description":"The category","type":"int"}}],"doc":{"description":"This function allows you to override the current domain for a single message lookup.","type":"string"}},{"kind":64,"name":"sinh","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))/2.","type":"float"}},{"kind":64,"name":"iptcembed","modifiers":0,"children":[{"kind":128,"name":"$iptcdata","modifiers":0,"doc":{"description":"The data to be written.","type":"string"}},{"kind":128,"name":"$jpeg_file_name","modifiers":0,"doc":{"description":"Path to the JPEG image.","type":"string"}},{"kind":128,"name":"$spool","modifiers":0,"value":"0","doc":{"description":"Spool flag. If the spool flag is less than 2 then the JPEG will be returned as a string. Otherwise the JPEG will be printed to STDOUT.","type":"int"}}],"doc":{"description":"Embeds binary IPTC data into a JPEG image.","type":"mixed"}},{"kind":64,"name":"curl_strerror","modifiers":0,"children":[{"kind":128,"name":"$errornum","modifiers":0,"doc":{"description":"One of the » cURL error codes constants.","type":"int"}}],"doc":{"description":"Returns a text error message describing the given error code.","type":"string"}},{"kind":64,"name":"print_r","modifiers":0,"children":[{"kind":128,"name":"$expression","modifiers":0,"doc":{"description":"The expression to be printed.","type":"mixed"}},{"kind":128,"name":"$return","modifiers":0,"value":"false","doc":{"description":"If you would like to capture the output of print_r(), use the return parameter. When this parameter is set to TRUE, print_r() will return the information rather than print it.","type":"bool"}}],"doc":{"description":"print_r() displays information about a variable in a way that's readable by humans.","type":"mixed"}},{"kind":64,"name":"fbsql_db_status","modifiers":0,"children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The database name.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Gets the current status of the specified database.","type":"int"}},{"kind":64,"name":"mysql_get_proto_info","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"collator_get_sort_key","modifiers":0,"children":[{"kind":128,"name":"$coll","modifiers":0,"doc":{"description":"Collator object.","type":"Collator"}},{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to produce the key from.","type":"string"}}],"doc":{"description":"Return collation key for a string.","type":"string"}},{"kind":64,"name":"mysqli_stmt_attr_get","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"The attribute that you want to get.","type":"int"}}],"doc":{"description":"Gets the current value of a statement attribute.","type":"int"}},{"kind":64,"name":"log","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The value to calculate the logarithm for","type":"float"}},{"kind":128,"name":"$base","modifiers":0,"value":"M_E","doc":{"description":"The optional logarithmic base to use (defaults to 'e' and so to the natural logarithm).","type":"float"}}],"doc":{"description":"If the optional base parameter is specified, log() returns logbasearg, otherwise log() returns the natural logarithm of arg.","type":"float"}},{"kind":64,"name":"array_diff_ukey","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The array to compare from","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"An array to compare against","type":"array"}}],"doc":{"description":"Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values.","type":"array"}},{"kind":64,"name":"timezone_name_from_abbr","modifiers":0,"description":"","children":[{"kind":128,"name":"$abbr","modifiers":0,"doc":{"description":"Time zone abbreviation.","type":"string"}},{"kind":128,"name":"$gmtOffset","modifiers":0,"value":"-1","doc":{"description":"Offset from GMT in seconds. Defaults to -1 which means that first found time zone corresponding to abbr is returned. Otherwise exact offset is searched and only if not found then the first time zone with any offset is returned.","type":"int"}},{"kind":128,"name":"$isdst","modifiers":0,"value":"-1","doc":{"description":"Daylight saving time indicator. Defaults to -1, which means that whether the time zone has daylight saving or not is not taken into consideration when searching. If this is set to 1, then the gmtOffset is assumed to be an offset with daylight saving in effect; if 0, then gmtOffset is assumed to be an offset without daylight saving in effect. If abbr doesn't exist then the time zone is searched solely by the gmtOffset and isdst.","type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"date_create_from_format","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The format that the passed in string should be in. See the formatting options below. In most cases, the same letters as for the date() can be used. The following characters are recognized in the format parameter string format character Description Example parsable values Day --- --- d and j Day of the month, 2 digits with or without leading zeros 01 to 31 or 1 to 31 D and l A textual representation of a day Mon through Sun or Sunday through Saturday S English ordinal suffix for the day of the month, 2 characters. It's ignored while processing. st, nd, rd or th. z The day of the year (starting from 0) 0 through 365 Month --- --- F and M A textual representation of a month, such as January or Sept January through December or Jan through Dec m and n Numeric representation of a month, with or without leading zeros 01 through 12 or 1 through 12 Year --- --- Y A full numeric representation of a year, 4 digits Examples: 1999 or 2003 y A two digit representation of a year (which is assumed to be in the range 1970-2069, inclusive) Examples: 99 or 03 (which will be interpreted as 1999 and 2003, respectively) Time --- --- a and A Ante meridiem and Post meridiem am or pm g and h 12-hour format of an hour with or without leading zero 1 through 12 or 01 through 12 G and H 24-hour format of an hour with or without leading zeros 0 through 23 or 00 through 23 i Minutes with leading zeros 00 to 59 s Seconds, with leading zeros 00 through 59 u Microseconds (up to six digits) Example: 45, 654321 Timezone --- --- e, O, P and T Timezone identifier, or difference to UTC in hours, or difference to UTC with colon between hours and minutes, or timezone abbreviation Examples: UTC, GMT, Atlantic/Azores or +0200 or +02:00 or EST, MDT Full Date/Time --- --- U Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT) Example: 1292177455 Whitespace and Separators --- --- (space) One space or one tab Example: # One of the following separation symbol: ;, :, /, ., ,, -, ( or ) Example: / ;, :, /, ., ,, -, ( or ) The specified character. Example: - ? A random byte Example: ^ (Be aware that for UTF-8 characters you might need more than one ?. In this case, using * is probably what you want instead) * Random bytes until the next separator or digit Example: * in Y-*-d with the string 2009-aWord-08 will match aWord ! Resets all fields (year, month, day, hour, minute, second, fraction and timzone information) to the Unix Epoch Without !, all fields will be set to the current date and time. | Resets all fields (year, month, day, hour, minute, second, fraction and timzone information) to the Unix Epoch if they have not been parsed yet Y-m-d| will set the year, month and day to the information found in the string to parse, and sets the hour, minute and second to 0. + If this format specifier is present, trailing data in the string will not cause an error, but a warning instead Use DateTime::getLastErrors() to find out whether trailing data was present. Unrecognized characters in the format string will cause the parsing to fail and an error message is appended to the returned structure. You can query error messages with DateTime::getLastErrors(). To include literal characters in format, you have to escape them with a backslash (\\). If format does not contain the character ! then portions of the generated time which are not specified in format will be set to the current system time. If format contains the character !, then portions of the generated time not provided in format, as well as values to the left-hand side of the !, will be set to corresponding values from the Unix epoch. The Unix epoch is 1970-01-01 00:00:00 UTC.","type":"string"}},{"kind":128,"name":"$time","modifiers":0,"doc":{"description":"String representing the time.","type":"string"}},{"kind":128,"name":"$timezone","modifiers":0,"doc":{"description":"A DateTimeZone object representing the desired time zone. If timezone is omitted and time contains no timezone, the current timezone will be used. Note: The timezone parameter and the current timezone are ignored when the time parameter either contains a UNIX timestamp (e.g. 946684800) or specifies a timezone (e.g. 2010-01-28T15:00:00+02:00).","type":"DateTimeZone"}}],"doc":{"description":"Returns a new DateTime object representing the date and time specified by the time string, which was formatted in the given format.","type":"DateTime"}},{"kind":64,"name":"variant_idiv","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Converts left and right to integer values, and then performs integer division.","type":"mixed"}},{"kind":64,"name":"mysqli_send_query","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"mysqli"}},{"kind":128,"name":"$query","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Procedural style","type":"bool"}},{"kind":64,"name":"array_count_values","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The array of values to count","type":"array"}}],"doc":{"description":"array_count_values() returns an array using the values of array as keys and their frequency in array as values.","type":"array"}},{"kind":64,"name":"ctype_lower","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The tested string.","type":"string"}}],"doc":{"description":"Checks if all of the characters in the provided string, text, are lowercase letters.","type":"bool"}},{"kind":64,"name":"chmod","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"Note that mode is not automatically assumed to be an octal value, so to ensure the expected operation, you need to prefix mode with a zero (0). Strings such as \"g+w\" will not work properly. <?phpchmod(\"/somedir/somefile\", 755);   // decimal; probably incorrectchmod(\"/somedir/somefile\", \"u+rwx,go+rx\"); // string; incorrectchmod(\"/somedir/somefile\", 0755);  // octal; correct value of mode?> The mode parameter consists of three octal number components specifying access restrictions for the owner, the user group in which the owner is in, and to everybody else in this order. One component can be computed by adding up the needed permissions for that target user base. Number 1 means that you grant execute rights, number 2 means that you make the file writeable, number 4 means that you make the file readable. Add up these numbers to specify needed rights. You can also read more about modes on Unix systems with 'man 1 chmod' and 'man 2 chmod'. <?php// Read and write for owner, nothing for everybody elsechmod(\"/somedir/somefile\", 0600);// Read and write for owner, read for everybody elsechmod(\"/somedir/somefile\", 0644);// Everything for owner, read and execute for otherschmod(\"/somedir/somefile\", 0755);// Everything for owner, read and execute for owner's groupchmod(\"/somedir/somefile\", 0750);?>","type":"int"}}],"doc":{"description":"Attempts to change the mode of the specified file to that given in mode.","type":"bool"}},{"kind":64,"name":"imagecolorallocatealpha","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$red","modifiers":0,"doc":{"description":"Value of red component.","type":"int"}},{"kind":128,"name":"$green","modifiers":0,"doc":{"description":"Value of green component.","type":"int"}},{"kind":128,"name":"$blue","modifiers":0,"doc":{"description":"Value of blue component.","type":"int"}},{"kind":128,"name":"$alpha","modifiers":0,"doc":{"description":"A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.","type":"int"}}],"doc":{"description":"imagecolorallocatealpha() behaves identically to imagecolorallocate() with the addition of the transparency parameter alpha.","type":"int"}},{"kind":64,"name":"mcrypt_enc_get_key_size","modifiers":0,"description":"","children":[{"kind":128,"name":"$td","modifiers":0,"doc":{"description":"The encryption descriptor.","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"ereg","modifiers":0,"description":"","children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Case sensitive regular expression.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$regs","modifiers":1024,"doc":{"description":"If matches are found for parenthesized substrings of pattern and the function is called with the third argument regs, the matches will be stored in the elements of the array regs. $regs[1] will contain the substring which starts at the first left parenthesis; $regs[2] will contain the substring starting at the second, and so on. $regs[0] will contain a copy of the complete string matched.","type":"array"}}],"doc":{"type":"int"}},{"kind":64,"name":"get_browser","modifiers":0,"children":[{"kind":128,"name":"$user_agent","modifiers":0,"doc":{"description":"The User Agent to be analyzed. By default, the value of HTTP User-Agent header is used; however, you can alter this (i.e., look up another browser's info) by passing this parameter. You can bypass this parameter with a NULL value.","type":"string"}},{"kind":128,"name":"$return_array","modifiers":0,"value":"false","doc":{"description":"If set to TRUE, this function will return an array instead of an object.","type":"bool"}}],"doc":{"description":"Attempts to determine the capabilities of the user's browser, by looking up the browser's information in the browscap.ini file.","type":"mixed"}},{"kind":64,"name":"odbc_longreadlen","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier.","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The number of bytes returned to PHP is controlled by the parameter length. If it is set to 0, Long column data is passed through to the client.","type":"int"}}],"doc":{"description":"Enables handling of LONG and LONGVARBINARY columns.","type":"bool"}},{"kind":64,"name":"stream_socket_shutdown","modifiers":0,"children":[{"kind":128,"name":"$stream","modifiers":0,"doc":{"description":"An open stream (opened with stream_socket_client(), for example)","type":"resource"}},{"kind":128,"name":"$how","modifiers":0,"doc":{"description":"One of the following constants: STREAM_SHUT_RD (disable further receptions), STREAM_SHUT_WR (disable further transmissions) or STREAM_SHUT_RDWR (disable further receptions and transmissions).","type":"int"}}],"doc":{"description":"Shutdowns (partially or not) a full-duplex connection.","type":"bool"}},{"kind":64,"name":"shmop_open","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"System's id for the shared memory block. Can be passed as a decimal or hex.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The flags that you can use: \"a\" for access (sets SHM_RDONLY for shmat) use this flag when you need to open an existing shared memory segment for read only \"c\" for create (sets IPC_CREATE) use this flag when you need to create a new shared memory segment or if a segment with the same key exists, try to open it for read and write \"w\" for read & write access use this flag when you need to read and write to a shared memory segment, use this flag in most cases. \"n\" create a new memory segment (sets IPC_CREATE|IPC_EXCL) use this flag when you want to create a new shared memory segment but if one already exists with the same flag, fail. This is useful for security purposes, using this you can prevent race condition exploits.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The permissions that you wish to assign to your memory segment, those are the same as permission for a file. Permissions need to be passed in octal form, like for example 0644","type":"int"}},{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"The size of the shared memory block you wish to create in bytes","type":"int"}}],"doc":{"description":"shmop_open() can create or open a shared memory block.","type":"resource"}},{"kind":64,"name":"ob_flush","modifiers":0,"children":[],"doc":{"description":"This function will send the contents of the output buffer (if any). If you want to further process the buffer's contents you have to call ob_get_contents() before ob_flush() as the buffer contents are discarded after ob_flush() is called.","type":"void"}},{"kind":64,"name":"pcntl_signal_dispatch","modifiers":0,"children":[],"doc":{"description":"The pcntl_signal_dispatch() function calls the signal handlers installed by pcntl_signal() for each pending signal.","type":"bool"}},{"kind":64,"name":"deg2rad","modifiers":0,"children":[{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"Angular value in degrees","type":"float"}}],"doc":{"description":"This function converts number from degrees to the radian equivalent.","type":"float"}},{"kind":64,"name":"mysqli_get_links_stats","modifiers":0,"children":[],"doc":{"description":"mysqli_get_links_stats() returns information about open and cached MySQL links.","type":"array"}},{"kind":64,"name":"stream_get_line","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"A valid file handle.","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The number of bytes to read from the handle.","type":"int"}},{"kind":128,"name":"$ending","modifiers":0,"doc":{"description":"An optional string delimiter.","type":"string"}}],"doc":{"description":"Gets a line from the given handle.","type":"string"}},{"kind":64,"name":"imap_sort","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$criteria","modifiers":0,"doc":{"description":"Criteria can be one (and only one) of the following: SORTDATE - message Date SORTARRIVAL - arrival date SORTFROM - mailbox in first From address SORTSUBJECT - message subject SORTTO - mailbox in first To address SORTCC - mailbox in first cc address SORTSIZE - size of message in octets","type":"int"}},{"kind":128,"name":"$reverse","modifiers":0,"doc":{"description":"Set this to 1 for reverse sorting","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"The options are a bitmask of one or more of the following: SE_UID - Return UIDs instead of sequence numbers SE_NOPREFETCH - Don't prefetch searched messages","type":"int"}},{"kind":128,"name":"$search_criteria","modifiers":0,"value":"NULL","doc":{"description":"IMAP2-format search criteria string. For details see imap_search().","type":"string"}},{"kind":128,"name":"$charset","modifiers":0,"value":"NULL","doc":{"description":"MIME character set to use when sorting strings.","type":"string"}}],"doc":{"description":"Gets and sorts message numbers by the given parameters.","type":"array"}},{"kind":64,"name":"msql_num_rows","modifiers":0,"children":[{"kind":128,"name":"$query_identifier","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"msql_num_rows() returns the number of rows in a result set.","type":"int"}},{"kind":64,"name":"oci_fetch","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI8 statement identifier created by oci_parse() and executed by oci_execute(), or a REF CURSOR statement identifier.","type":"resource"}}],"doc":{"description":"Fetches the next row from a query into internal buffers accessible either with oci_result(), or by using variables previously defined with oci_define_by_name().","type":"bool"}},{"kind":64,"name":"gethostname","modifiers":0,"children":[],"doc":{"description":"gethostname() gets the standard host name for the local machine.","type":"string"}},{"kind":64,"name":"pg_lo_import","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"If an object_id is given the function will try to create a large object with this id, else a free object id is assigned by the server. The parameter was added in PHP 5.3 and relies on functionality that first appeared in PostgreSQL 8.1.","type":"mixed"}}],"doc":{"description":"pg_lo_import() creates a new large object in the database using a file on the filesystem as its data source.","type":"int"}},{"kind":64,"name":"nsapi_virtual","modifiers":0,"children":[{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The URI of the script.","type":"string"}}],"doc":{"description":"nsapi_virtual() is an NSAPI-specific function which is equivalent to <!--#include virtual...--> in SSI (.shtml files). It does an NSAPI sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you'd parse through webserver.","type":"bool"}},{"kind":64,"name":"chdir","modifiers":0,"children":[{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"The new current directory","type":"string"}}],"doc":{"description":"Changes PHP's current directory to directory.","type":"bool"}},{"kind":64,"name":"pg_lo_tell","modifiers":0,"children":[{"kind":128,"name":"$large_object","modifiers":0,"doc":{"description":"PostgreSQL large object (LOB) resource, returned by pg_lo_open().","type":"resource"}}],"doc":{"description":"pg_lo_tell() returns the current position (offset from the beginning) of a large object.","type":"int"}},{"kind":64,"name":"odbc_statistics","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$qualifier","modifiers":0,"doc":{"description":"The qualifier.","type":"string"}},{"kind":128,"name":"$owner","modifiers":0,"doc":{"description":"The owner.","type":"string"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"The table name.","type":"string"}},{"kind":128,"name":"$unique","modifiers":0,"doc":{"description":"The unique attribute.","type":"int"}},{"kind":128,"name":"$accuracy","modifiers":0,"doc":{"description":"The accuracy.","type":"int"}}],"doc":{"description":"Get statistics about a table and its indexes.","type":"resource"}},{"kind":64,"name":"ibase_add_user","modifiers":0,"description":"","children":[{"kind":128,"name":"$service_handle","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$user_name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$password","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$first_name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$middle_name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$last_name","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"mysqli_insert_id","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"The mysqli_insert_id() function returns the ID generated by a query (usually INSERT) on a table with a column having the AUTO_INCREMENT attribute. If no INSERT or UPDATE statements were sent via this connection, or if the modified table does not have a column with the AUTO_INCREMENT attribute, this function will return zero.","type":"mixed"}},{"kind":64,"name":"ibase_restore","modifiers":0,"description":"","children":[{"kind":128,"name":"$service_handle","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$source_file","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$dest_db","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$options","modifiers":0,"description":"","value":"0","doc":{"type":"int"}},{"kind":128,"name":"$verbose","modifiers":0,"description":"","value":"false","doc":{"type":"bool"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"openssl_private_decrypt","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$decrypted","modifiers":1024,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"key must be the private key corresponding that was used to encrypt the data.","type":"mixed"}},{"kind":128,"name":"$padding","modifiers":0,"value":"OPENSSL_PKCS1_PADDING","doc":{"description":"padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING.","type":"int"}}],"doc":{"description":"openssl_private_decrypt() decrypts data that was previously encrypted via openssl_public_encrypt() and stores the result into decrypted.","type":"bool"}},{"kind":64,"name":"tanh","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg).","type":"float"}},{"kind":64,"name":"intlcal_set_first_day_of_week","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$dayOfWeek","modifiers":0,"doc":{"description":"One of the constants IntlCalendar::DOW_SUNDAY, IntlCalendar::DOW_MONDAY, …, IntlCalendar::DOW_SATURDAY.","type":"int"}}],"doc":{"description":"Defines the day of week deemed to start the week. This affects the behavior of fields that depend on the concept of week start and end such as IntlCalendar::FIELD_WEEK_OF_YEAR and IntlCalendar::FIELD_YEAR_WOY.","type":"bool"}},{"kind":64,"name":"datefmt_get_error_code","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource.","type":"IntlDateFormatter"}}],"doc":{"description":"Get the error code from last operation. Returns error code from the last number formatting operation.","type":"int"}},{"kind":64,"name":"pg_transaction_status","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"Returns the current in-transaction status of the server.","type":"int"}},{"kind":64,"name":"enchant_broker_dict_exists","modifiers":0,"children":[{"kind":128,"name":"$broker","modifiers":0,"doc":{"description":"Broker resource","type":"resource"}},{"kind":128,"name":"$tag","modifiers":0,"doc":{"description":"non-empty tag in the LOCALE format, ex: us_US, ch_DE, etc.","type":"string"}}],"doc":{"description":"Tells if a dictionary exists or not, using a non-empty tags","type":"bool"}},{"kind":64,"name":"mysqli_stmt_more_results","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysql_stmt"}}],"doc":{"description":"Checks if there are more query results from a multiple query.","type":"bool"}},{"kind":64,"name":"imagecolorexactalpha","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$red","modifiers":0,"doc":{"description":"Value of red component.","type":"int"}},{"kind":128,"name":"$green","modifiers":0,"doc":{"description":"Value of green component.","type":"int"}},{"kind":128,"name":"$blue","modifiers":0,"doc":{"description":"Value of blue component.","type":"int"}},{"kind":128,"name":"$alpha","modifiers":0,"doc":{"description":"A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.","type":"int"}}],"doc":{"description":"Returns the index of the specified color+alpha in the palette of the image.","type":"int"}},{"kind":64,"name":"assert","modifiers":0,"children":[{"kind":128,"name":"$assertion","modifiers":0,"doc":{"description":"The assertion. In PHP 5, this must be either a string to be evaluated or a boolean to be tested. In PHP 7, this may also be any expression that returns a value, which will be executed and the result used to indicate whether the assertion succeeded or failed. Warning Using string as the assertion is DEPRECATED as of PHP 7.2.","type":"mixed"}},{"kind":128,"name":"$exception","modifiers":0,"doc":{"description":"In PHP 7, the second parameter can be a Throwable object instead of a descriptive string, in which case this is the object that will be thrown if the assertion fails and the assert.exception configuration directive is enabled.","type":"Throwable"}}],"doc":{"description":"assert() will check the given assertion and take appropriate action if its result is FALSE.","type":"bool"}},{"kind":64,"name":"call_user_method","modifiers":0,"description":"","children":[{"kind":128,"name":"$method_name","modifiers":0,"doc":{"description":"The method name being called.","type":"string"}},{"kind":128,"name":"$obj","modifiers":1024,"doc":{"description":"The object that method_name is being called on.","type":"object"}},{"kind":128,"name":"$parameter","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"enchant_broker_get_error","modifiers":0,"children":[{"kind":128,"name":"$broker","modifiers":0,"doc":{"description":"Broker resource.","type":"resource"}}],"doc":{"description":"Returns the last error which occurred in this broker.","type":"string"}},{"kind":64,"name":"opcache_invalidate","modifiers":0,"children":[{"kind":128,"name":"$script","modifiers":0,"doc":{"description":"The path to the script being invalidated.","type":"string"}},{"kind":128,"name":"$force","modifiers":0,"value":"FALSE","doc":{"description":"If set to TRUE, the script will be invalidated regardless of whether invalidation is necessary.","type":"boolean"}}],"doc":{"description":"This function invalidates a particular script from the opcode cache. If force is unset or FALSE, the script will only be invalidated if the modification time of the script is newer than the cached opcodes.","type":"boolean"}},{"kind":64,"name":"gethostbyaddr","modifiers":0,"children":[{"kind":128,"name":"$ip_address","modifiers":0,"doc":{"description":"The host IP address.","type":"string"}}],"doc":{"description":"Returns the host name of the Internet host specified by ip_address.","type":"string"}},{"kind":64,"name":"getallheaders","modifiers":0,"children":[],"doc":{"description":"Fetches all HTTP headers from the current request.","type":"array"}},{"kind":64,"name":"imagefontwidth","modifiers":0,"children":[{"kind":128,"name":"$font","modifiers":0,"doc":{"description":"Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().","type":"int"}}],"doc":{"description":"Returns the pixel width of a character in font.","type":"int"}},{"kind":64,"name":"openssl_pkcs7_verify","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the message.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"flags can be used to affect how the signature is verified - see PKCS7 constants for more information.","type":"int"}},{"kind":128,"name":"$outfilename","modifiers":0,"doc":{"description":"If the outfilename is specified, it should be a string holding the name of a file into which the certificates of the persons that signed the messages will be stored in PEM format.","type":"string"}},{"kind":128,"name":"$cainfo","modifiers":0,"doc":{"description":"If the cainfo is specified, it should hold information about the trusted CA certificates to use in the verification process - see certificate verification for more information about this parameter.","type":"array"}},{"kind":128,"name":"$extracerts","modifiers":0,"doc":{"description":"If the extracerts is specified, it is the filename of a file containing a bunch of certificates to use as untrusted CAs.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"You can specify a filename with content that will be filled with the verified data, but with the signature information stripped.","type":"string"}}],"doc":{"description":"openssl_pkcs7_verify() reads the S/MIME message contained in the given file and examines the digital signature.","type":"mixed"}},{"kind":64,"name":"numfmt_get_text_attribute","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$attr","modifiers":0,"doc":{"description":"Attribute specifier - one of the text attribute constants.","type":"int"}}],"doc":{"description":"Get a text attribute associated with the formatter. An example of a text attribute is the suffix for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR error is produced. Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS.","type":"string"}},{"kind":64,"name":"is_infinite","modifiers":0,"children":[{"kind":128,"name":"$val","modifiers":0,"doc":{"description":"The value to check","type":"float"}}],"doc":{"description":"Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform.","type":"bool"}},{"kind":64,"name":"exif_thumbnail","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The name of the image file being read. This image contains an embedded thumbnail.","type":"string"}},{"kind":128,"name":"$width","modifiers":1024,"doc":{"description":"The return width of the returned thumbnail.","type":"int"}},{"kind":128,"name":"$height","modifiers":1024,"doc":{"description":"The returned height of the returned thumbnail.","type":"int"}},{"kind":128,"name":"$imagetype","modifiers":1024,"doc":{"description":"The returned image type of the returned thumbnail. This is either TIFF or JPEG.","type":"int"}}],"doc":{"description":"exif_thumbnail() reads the embedded thumbnail of a TIFF or JPEG image.","type":"string"}},{"kind":64,"name":"ftp_rename","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$oldname","modifiers":0,"doc":{"description":"The old file/directory name.","type":"string"}},{"kind":128,"name":"$newname","modifiers":0,"doc":{"description":"The new name.","type":"string"}}],"doc":{"description":"ftp_rename() renames a file or a directory on the FTP server.","type":"bool"}},{"kind":64,"name":"get_resources","modifiers":0,"children":[{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"If defined, this will cause get_resources() to only return resources of the given type. A list of resource types is available. If the string Unknown is provided as the type, then only resources that are of an unknown type will be returned. If omitted, all resources will be returned.","type":"string"}}],"doc":{"description":"Returns an array of all currently active resources, optionally filtered by resource type.","type":"array"}},{"kind":64,"name":"mb_strtoupper","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being uppercased.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Returns str with all alphabetic characters converted to uppercase.","type":"string"}},{"kind":64,"name":"imagecolortransparent","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"Sets the transparent color in the given image.","type":"int"}},{"kind":64,"name":"php_ini_scanned_files","modifiers":0,"children":[],"doc":{"description":"php_ini_scanned_files() returns a comma-separated list of configuration files parsed after php.ini. The directories searched are set by a compile time option and, optionally, by an environment variable at run time: more information can be found in the installation guide.","type":"string"}},{"kind":64,"name":"imap_num_recent","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}}],"doc":{"description":"Gets the number of recent messages in the current mailbox.","type":"int"}},{"kind":64,"name":"enchant_broker_request_dict","modifiers":0,"children":[{"kind":128,"name":"$broker","modifiers":0,"doc":{"description":"Broker resource","type":"resource"}},{"kind":128,"name":"$tag","modifiers":0,"doc":{"description":"A tag describing the locale, for example en_US, de_DE","type":"string"}}],"doc":{"description":"create a new dictionary using tag, the non-empty language tag you wish to request a dictionary for (\"en_US\", \"de_DE\", ...)","type":"resource"}},{"kind":64,"name":"socket_cmsg_space","modifiers":0,"children":[{"kind":128,"name":"$level","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$type","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Calculates the size of the buffer that should be allocated for receiving the ancillary data.","type":"int"}},{"kind":64,"name":"intlcal_set_skipped_wall_time_option","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$wallTimeOption","modifiers":0,"doc":{"description":"One of the constants IntlCalendar::WALLTIME_FIRST, IntlCalendar::WALLTIME_LAST or IntlCalendar::WALLTIME_NEXT_VALID.","type":"int"}}],"doc":{"description":"Sets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is IntlCalendar::WALLTIME_LAST (take it as being the same instant as the one when the wall time is one hour more). Alternative values are IntlCalendar::WALLTIME_FIRST (same instant as the one with a wall time of one hour less) and IntlCalendar::WALLTIME_NEXT_VALID (same instant as when DST begins).","type":"bool"}},{"kind":64,"name":"datefmt_set_calendar","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The formatter resource.","type":"IntlDateFormatter"}},{"kind":128,"name":"$which","modifiers":0,"doc":{"description":"This can either be: the calendar type to use (default is IntlDateFormatter::GREGORIAN, which is also used if NULL is specified) or an IntlCalendar object. Any IntlCalendar object passed in will be cloned; no modifications will be made to the argument object. The timezone of the formatter will only be kept if an IntlCalendar object is not passed, otherwise the new timezone will be that of the passed object.","type":"mixed"}}],"doc":{"description":"Sets the calendar or calendar type used by the formatter.","type":"bool"}},{"kind":64,"name":"hexdec","modifiers":0,"children":[{"kind":128,"name":"$hex_string","modifiers":0,"doc":{"description":"The hexadecimal string to convert","type":"string"}}],"doc":{"description":"Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec() converts a hexadecimal string to a decimal number.","type":"number"}},{"kind":64,"name":"mysqli_multi_query","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query, as a string. Data inside the query should be properly escaped.","type":"string"}}],"doc":{"description":"Executes one or multiple queries which are concatenated by a semicolon.","type":"bool"}},{"kind":64,"name":"odbc_procedurecolumns","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$qualifier","modifiers":0,"doc":{"description":"The qualifier.","type":"string"}},{"kind":128,"name":"$owner","modifiers":0,"doc":{"description":"The owner. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.","type":"string"}},{"kind":128,"name":"$proc","modifiers":0,"doc":{"description":"The proc. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.","type":"string"}},{"kind":128,"name":"$column","modifiers":0,"doc":{"description":"The column. This parameter accepts the following search patterns: \"%\" to match zero or more characters, and \"_\" to match a single character.","type":"string"}}],"doc":{"description":"Retrieve information about parameters to procedures.","type":"resource"}},{"kind":64,"name":"oci_lob_is_equal","modifiers":0,"children":[{"kind":128,"name":"$lob1","modifiers":0,"doc":{"description":"A LOB identifier.","type":"OCI-Lob"}},{"kind":128,"name":"$lob2","modifiers":0,"doc":{"description":"A LOB identifier.","type":"OCI-Lob"}}],"doc":{"description":"Compares two LOB/FILE locators.","type":"bool"}},{"kind":64,"name":"pi","modifiers":0,"description":"","children":[],"doc":{"type":"float"}},{"kind":64,"name":"imagecopy","modifiers":0,"children":[{"kind":128,"name":"$dst_im","modifiers":0,"doc":{"description":"Destination image link resource.","type":"resource"}},{"kind":128,"name":"$src_im","modifiers":0,"doc":{"description":"Source image link resource.","type":"resource"}},{"kind":128,"name":"$dst_x","modifiers":0,"doc":{"description":"x-coordinate of destination point.","type":"int"}},{"kind":128,"name":"$dst_y","modifiers":0,"doc":{"description":"y-coordinate of destination point.","type":"int"}},{"kind":128,"name":"$src_x","modifiers":0,"doc":{"description":"x-coordinate of source point.","type":"int"}},{"kind":128,"name":"$src_y","modifiers":0,"doc":{"description":"y-coordinate of source point.","type":"int"}},{"kind":128,"name":"$src_w","modifiers":0,"doc":{"description":"Source width.","type":"int"}},{"kind":128,"name":"$src_h","modifiers":0,"doc":{"description":"Source height.","type":"int"}}],"doc":{"description":"Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.","type":"bool"}},{"kind":64,"name":"datefmt_create","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"Locale to use when formatting or parsing or NULL to use the value specified in the ini setting intl.default_locale.","type":"string"}},{"kind":128,"name":"$datetype","modifiers":0,"doc":{"description":"Date type to use (none, short, medium, long, full). This is one of the IntlDateFormatter constants. It can also be NULL, in which case ICUʼs default date type will be used.","type":"int"}},{"kind":128,"name":"$timetype","modifiers":0,"doc":{"description":"Time type to use (none, short, medium, long, full). This is one of the IntlDateFormatter constants. It can also be NULL, in which case ICUʼs default time type will be used.","type":"int"}},{"kind":128,"name":"$timezone","modifiers":0,"value":"NULL","doc":{"description":"Time zone ID. The default (and the one used if NULL is given) is the one returned by date_default_timezone_get() or, if applicable, that of the IntlCalendar object passed for the calendar parameter. This ID must be a valid identifier on ICUʼs database or an ID representing an explicit offset, such as GMT-05:30. This can also be an IntlTimeZone or a DateTimeZone object.","type":"mixed"}},{"kind":128,"name":"$calendar","modifiers":0,"value":"NULL","doc":{"description":"Calendar to use for formatting or parsing. The default value is NULL, which corresponds to IntlDateFormatter::GREGORIAN. This can either be one of the IntlDateFormatter calendar constants or an IntlCalendar. Any IntlCalendar object passed will be clone; it will not be changed by the IntlDateFormatter. This will determine the calendar type used (gregorian, islamic, persian, etc.) and, if NULL is given for the timezone parameter, also the timezone used.","type":"mixed"}},{"kind":128,"name":"$pattern","modifiers":0,"value":"\"\"","doc":{"description":"Optional pattern to use when formatting or parsing. Possible patterns are documented at » http://userguide.icu-project.org/formatparse/datetime.","type":"string"}}],"doc":{"description":"Create a date formatter.","type":"IntlDateFormatter"}},{"kind":64,"name":"array_map","modifiers":0,"children":[{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"Callback function to run for each element in each array.","type":"callable"}},{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"An array to run through the callback function.","type":"array"}}],"doc":{"description":"array_map() returns an array containing all the elements of array1 after applying the callback function to each one. The number of parameters that the callback function accepts should match the number of arrays passed to the array_map()","type":"array"}},{"kind":64,"name":"com_message_pump","modifiers":0,"children":[{"kind":128,"name":"$timeoutms","modifiers":0,"value":"0","doc":{"description":"The timeout, in milliseconds. If you do not specify a value for timeoutms, then 0 will be assumed. A 0 value means that no waiting will be performed; if there are messages pending they will be dispatched as before; if there are no messages pending, the function will return FALSE immediately without sleeping.","type":"int"}}],"doc":{"description":"This function will sleep for up to timeoutms milliseconds, or until a message arrives in the queue.","type":"bool"}},{"kind":64,"name":"mysql_fetch_field","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"value":"0","doc":{"description":"The numerical field offset. If the field offset is not specified, the next field that was not yet retrieved by this function is retrieved. The field_offset starts at 0.","type":"int"}}],"doc":{"type":"object"}},{"kind":64,"name":"session_cache_limiter","modifiers":0,"children":[{"kind":128,"name":"$cache_limiter","modifiers":0,"doc":{"description":"If cache_limiter is specified, the name of the current cache limiter is changed to the new value. Possible values Value Headers sent public Expires: (sometime in the future, according session.cache_expire) Cache-Control: public, max-age=(sometime in the future, according to session.cache_expire) Last-Modified: (the timestamp of when the session was last saved) private_no_expire Cache-Control: private, max-age=(session.cache_expire in the future), pre-check=(session.cache_expire in the future) Last-Modified: (the timestamp of when the session was last saved) private Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: private, max-age=(session.cache_expire in the future), pre-check=(session.cache_expire in the future) Last-Modified: (the timestamp of when the session was last saved) nocache Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache","type":"string"}}],"doc":{"description":"session_cache_limiter() returns the name of the current cache limiter.","type":"string"}},{"kind":64,"name":"zlib_get_coding_type","modifiers":0,"children":[],"doc":{"description":"Returns the coding type used for output compression.","type":"string"}},{"kind":64,"name":"msql_field_flags","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 1.","type":"int"}}],"doc":{"description":"msql_field_flags() returns the field flags of the specified field.","type":"string"}},{"kind":64,"name":"xmlwriter_start_attribute","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The attribute name.","type":"string"}}],"doc":{"description":"Starts an attribute.","type":"bool"}},{"kind":64,"name":"gmp_neg","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Returns the negative value of a number.","type":"GMP"}},{"kind":64,"name":"mb_strtolower","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being lowercased.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Returns str with all alphabetic characters converted to lowercase.","type":"string"}},{"kind":64,"name":"intlcal_get_keyword_values_for_locale","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The locale keyword for which relevant values are to be queried. Only 'calendar' is supported.","type":"string"}},{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale onto which the keyword/value pair are to be appended.","type":"string"}},{"kind":128,"name":"$commonlyUsed","modifiers":0,"doc":{"description":"Whether to show only the values commonly used for the specified locale.","type":"boolean"}}],"doc":{"description":"For a given locale key, get the set of values for that key that would result in a different behavior. For now, only the 'calendar' keyword is supported.","type":"Iterator"}},{"kind":64,"name":"ldap_error","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}}],"doc":{"description":"Returns the string error message explaining the error generated by the last LDAP command for the given link_identifier. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.","type":"string"}},{"kind":64,"name":"empty","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"Variable to be checked Note: Prior to PHP 5.5, empty() only supports variables; anything else will result in a parse error. In other words, the following will not work: empty(trim($name)). Instead, use trim($name) == false. No warning is generated if the variable does not exist. That means empty() is essentially the concise equivalent to !isset($var) || $var == false.","type":"mixed"}}],"doc":{"description":"Determine whether a variable is considered to be empty. A variable is considered empty if it does not exist or if its value equals FALSE. empty() does not generate a warning if the variable does not exist.","type":"bool"}},{"kind":64,"name":"ibase_wait_event","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$event_name1","modifiers":0,"doc":{"description":"The event name.","type":"string"}},{"kind":128,"name":"$event_name2","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"This function suspends execution of the script until one of the specified events is posted by the database. The name of the event that was posted is returned. This function accepts up to 15 event arguments.","type":"string"}},{"kind":64,"name":"xml_set_object","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to use inside the object.","type":"resource"}},{"kind":128,"name":"$object","modifiers":1024,"doc":{"description":"The object where to use the XML parser.","type":"object"}}],"doc":{"description":"This function allows to use parser inside object. All callback functions could be set with xml_set_element_handler() etc and assumed to be methods of object.","type":"bool"}},{"kind":64,"name":"mhash_count","modifiers":0,"children":[],"doc":{"description":"Gets the highest available hash ID.","type":"int"}},{"kind":64,"name":"intlcal_get_time_zone","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}}],"doc":{"description":"Returns the IntlTimeZone object associated with this calendar.","type":"IntlTimeZone"}},{"kind":64,"name":"http_response_code","modifiers":0,"children":[{"kind":128,"name":"$response_code","modifiers":0,"doc":{"description":"The optional response_code will set the response code.","type":"int"}}],"doc":{"description":"Gets or sets the HTTP response status code.","type":"mixed"}},{"kind":64,"name":"openssl_spki_export","modifiers":0,"children":[{"kind":128,"name":"$spkac","modifiers":1024,"doc":{"description":"Expects a valid signed public key and challenge","type":"string"}}],"doc":{"description":"Exports PEM formatted public key from encoded signed public key and challenge","type":"string"}},{"kind":64,"name":"mysqli_errno","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"Returns the last error code for the most recent MySQLi function call that can succeed or fail.","type":"int"}},{"kind":64,"name":"locale_get_display_script","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to return a display script for","type":"string"}},{"kind":128,"name":"$in_locale","modifiers":0,"doc":{"description":"Optional format locale to use to display the script name","type":"string"}}],"doc":{"description":"Returns an appropriately localized display name for script of the input locale. If is NULL then the default locale is used.","type":"string"}},{"kind":64,"name":"pg_parameter_status","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"Looks up a current parameter setting of the server.","type":"string"}},{"kind":64,"name":"xml_set_default_handler","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to set up default handler function.","type":"resource"}},{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser. The function named by handler must accept two parameters: handler ( resource $parser , string $data ) parser The first parameter, parser, is a reference to the XML parser calling the handler. data The second parameter, data, contains the character data.This may be the XML declaration, document type declaration, entities or other data for which no other handler exists. If a handler function is set to an empty string, or FALSE, the handler in question is disabled. Note: Instead of a function name, an array containing an object reference and a method name can also be supplied.","type":"callable"}}],"doc":{"description":"Sets the default handler function for the XML parser parser.","type":"bool"}},{"kind":64,"name":"shm_detach","modifiers":0,"children":[{"kind":128,"name":"$shm_identifier","modifiers":0,"doc":{"description":"A shared memory resource handle as returned by shm_attach()","type":"resource"}}],"doc":{"description":"shm_detach() disconnects from the shared memory given by the shm_identifier created by shm_attach(). Remember, that shared memory still exist in the Unix system and the data is still present.","type":"bool"}},{"kind":64,"name":"imagewbmp","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$to","modifiers":0,"doc":{"description":"The path or an open stream resource (which is automatically being closed after this function returns) to save the file to. If not set or NULL, the raw image stream will be outputted directly.","type":"mixed"}},{"kind":128,"name":"$foreground","modifiers":0,"doc":{"description":"You can set the foreground color with this parameter by setting an identifier obtained from imagecolorallocate(). The default foreground color is black.","type":"int"}}],"doc":{"description":"imagewbmp() outputs or save a WBMP version of the given image.","type":"bool"}},{"kind":64,"name":"get_magic_quotes_gpc","modifiers":0,"children":[],"doc":{"description":"Returns the current configuration setting of magic_quotes_gpc","type":"bool"}},{"kind":64,"name":"array_walk_recursive","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"Typically, callback takes on two parameters. The array parameter's value being the first, and the key/index second. Note: If callback needs to be working with the actual values of the array, specify the first parameter of callback as a reference. Then, any changes made to those elements will be made in the original array itself.","type":"callable"}},{"kind":128,"name":"$userdata","modifiers":0,"value":"NULL","doc":{"description":"If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback.","type":"mixed"}}],"doc":{"description":"Applies the user-defined callback function to each element of the array. This function will recurse into deeper arrays.","type":"bool"}},{"kind":64,"name":"mssql_data_seek","modifiers":0,"description":"","children":[{"kind":128,"name":"$result_identifier","modifiers":0,"doc":{"description":"The result resource that is being evaluated.","type":"resource"}},{"kind":128,"name":"$row_number","modifiers":0,"doc":{"description":"The desired row number of the new result pointer.","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"mysql_client_encoding","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"variant_pow","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Returns the result of left to the power of right.","type":"mixed"}},{"kind":64,"name":"openssl_x509_export_to_file","modifiers":0,"children":[{"kind":128,"name":"$x509","modifiers":0,"doc":{"description":"See Key/Certificate parameters for a list of valid values.","type":"mixed"}},{"kind":128,"name":"$outfilename","modifiers":0,"doc":{"description":"Path to the output file.","type":"string"}},{"kind":128,"name":"$notext","modifiers":0,"value":"TRUE","doc":{"description":"The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. The default value of notext is TRUE.","type":"bool"}}],"doc":{"description":"openssl_x509_export_to_file() stores x509 into a file named by outfilename in a PEM encoded format.","type":"bool"}},{"kind":64,"name":"mb_strripos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string from which to get the position of the last occurrence of needle","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to find in haystack","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"The position in haystack to start searching","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"Character encoding name to use. If it is omitted, internal character encoding is used.","type":"string"}}],"doc":{"description":"mb_strripos() performs multi-byte safe strripos() operation based on number of characters. needle position is counted from the beginning of haystack. First character's position is 0. Second character position is 1. Unlike mb_strrpos(), mb_strripos() is case-insensitive.","type":"int"}},{"kind":64,"name":"oci_field_type_raw","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Can be the field's index (1-based) or name.","type":"mixed"}}],"doc":{"description":"Returns Oracle's raw \"SQLT\" data type of the field.","type":"int"}},{"kind":64,"name":"imagegrabwindow","modifiers":0,"children":[{"kind":128,"name":"$window_handle","modifiers":0,"doc":{"description":"The HWND window ID.","type":"int"}},{"kind":128,"name":"$client_area","modifiers":0,"value":"0","doc":{"description":"Include the client area of the application window.","type":"int"}}],"doc":{"description":"Grabs a window or its client area using a windows handle (HWND property in COM instance)","type":"resource"}},{"kind":64,"name":"cal_from_jd","modifiers":0,"children":[{"kind":128,"name":"$jd","modifiers":0,"doc":{"description":"Julian day as integer","type":"int"}},{"kind":128,"name":"$calendar","modifiers":0,"doc":{"description":"Calendar to convert to","type":"int"}}],"doc":{"description":"cal_from_jd() converts the Julian day given in jd into a date of the specified calendar. Supported calendar values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.","type":"array"}},{"kind":64,"name":"ibase_set_event_handler","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$event_handler","modifiers":0,"doc":{"description":"The callback is called with the event name and the link resource as arguments whenever one of the specified events is posted by the database. The callback must return FALSE if the event handler should be canceled. Any other return value is ignored. This function accepts up to 15 event arguments.","type":"callable"}},{"kind":128,"name":"$event_name1","modifiers":0,"doc":{"description":"An event name.","type":"string"}},{"kind":128,"name":"$event_name2","modifiers":0,"doc":{"description":"At most 15 events allowed.","type":"string"}}],"doc":{"description":"This function registers a PHP user function as event handler for the specified events.","type":"resource"}},{"kind":64,"name":"socket_sendto","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created using socket_create().","type":"resource"}},{"kind":128,"name":"$buf","modifiers":0,"doc":{"description":"The sent data will be taken from buffer buf.","type":"string"}},{"kind":128,"name":"$len","modifiers":0,"doc":{"description":"len bytes from buf will be sent.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator. Possible values for flags MSG_OOB Send OOB (out-of-band) data. MSG_EOR Indicate a record mark. The sent data completes the record. MSG_EOF Close the sender side of the socket and include an appropriate notification of this at the end of the sent data. The sent data completes the transaction. MSG_DONTROUTE Bypass routing, use direct interface.","type":"int"}},{"kind":128,"name":"$addr","modifiers":0,"doc":{"description":"IP address of the remote host.","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"value":"0","doc":{"description":"port is the remote port number at which the data will be sent.","type":"int"}}],"doc":{"description":"The function socket_sendto() sends len bytes from buf through the socket socket to the port at the address addr.","type":"int"}},{"kind":64,"name":"pg_version","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_version() returns an array with the client, protocol and server version. Protocol and server versions are only available if PHP was compiled with PostgreSQL 7.4 or later.","type":"array"}},{"kind":64,"name":"openssl_pkey_export","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$out","modifiers":1024,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$passphrase","modifiers":0,"doc":{"description":"The key is optionally protected by passphrase.","type":"string"}},{"kind":128,"name":"$configargs","modifiers":0,"doc":{"description":"configargs can be used to fine-tune the export process by specifying and/or overriding options for the openssl configuration file. See openssl_csr_new() for more information about configargs.","type":"array"}}],"doc":{"description":"openssl_pkey_export() exports key as a PEM encoded string and stores it into out (which is passed by reference).","type":"bool"}},{"kind":64,"name":"xmlwriter_start_pi","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$target","modifiers":0,"doc":{"description":"The target of the processing instruction.","type":"string"}}],"doc":{"description":"Starts a processing instruction tag.","type":"bool"}},{"kind":64,"name":"pspell_new","modifiers":0,"children":[{"kind":128,"name":"$language","modifiers":0,"doc":{"description":"The language parameter is the language code which consists of the two letter ISO 639 language code and an optional two letter ISO 3166 country code after a dash or underscore.","type":"string"}},{"kind":128,"name":"$spelling","modifiers":0,"doc":{"description":"The spelling parameter is the requested spelling for languages with more than one spelling such as English. Known values are 'american', 'british', and 'canadian'.","type":"string"}},{"kind":128,"name":"$jargon","modifiers":0,"doc":{"description":"The jargon parameter contains extra information to distinguish two different words lists that have the same language and spelling parameters.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding parameter is the encoding that words are expected to be in. Valid values are 'utf-8', 'iso8859-*', 'koi8-r', 'viscii', 'cp1252', 'machine unsigned 16', 'machine unsigned 32'. This parameter is largely untested, so be careful when using.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"value":"0","doc":{"description":"The mode parameter is the mode in which spellchecker will work. There are several modes available: PSPELL_FAST - Fast mode (least number of suggestions) PSPELL_NORMAL - Normal mode (more suggestions) PSPELL_BAD_SPELLERS - Slow mode (a lot of suggestions) PSPELL_RUN_TOGETHER - Consider run-together words as legal compounds. That is, \"thecat\" will be a legal compound, although there should be a space between the two words. Changing this setting only affects the results returned by pspell_check(); pspell_suggest() will still return suggestions. Mode is a bitmask constructed from different constants listed above. However, PSPELL_FAST, PSPELL_NORMAL and PSPELL_BAD_SPELLERS are mutually exclusive, so you should select only one of them.","type":"int"}}],"doc":{"description":"pspell_new() opens up a new dictionary and returns the dictionary link identifier for use in other pspell functions.","type":"int"}},{"kind":64,"name":"php_ini_loaded_file","modifiers":0,"children":[],"doc":{"description":"Check if a php.ini file is loaded, and retrieve its path.","type":"string"}},{"kind":64,"name":"exp","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"Returns e raised to the power of arg.","type":"float"}},{"kind":64,"name":"ctype_xdigit","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The tested string.","type":"string"}}],"doc":{"description":"Checks if all of the characters in the provided string, text, are hexadecimal 'digits'.","type":"bool"}},{"kind":64,"name":"mysqli_field_seek","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}},{"kind":128,"name":"$fieldnr","modifiers":0,"doc":{"description":"The field number. This value must be in the range from 0 to number of fields - 1.","type":"int"}}],"doc":{"description":"Sets the field cursor to the given offset. The next call to mysqli_fetch_field() will retrieve the field definition of the column associated with that offset.","type":"bool"}},{"kind":64,"name":"create_function","modifiers":0,"description":"","children":[{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"The function arguments.","type":"string"}},{"kind":128,"name":"$code","modifiers":0,"doc":{"description":"The function code.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"imap_binary","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The 8bit string","type":"string"}}],"doc":{"description":"Convert an 8bit string to a base64 string according to » RFC2045, Section 6.8.","type":"string"}},{"kind":64,"name":"mysql_field_len","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.","type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"socket_sendmsg","modifiers":0,"description":"","children":[{"kind":128,"name":"$socket","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$message","modifiers":0,"description":"","doc":{"type":"array"}},{"kind":128,"name":"$flags","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"imagecolorset","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$index","modifiers":0,"doc":{"description":"An index in the palette.","type":"int"}},{"kind":128,"name":"$red","modifiers":0,"doc":{"description":"Value of red component.","type":"int"}},{"kind":128,"name":"$green","modifiers":0,"doc":{"description":"Value of green component.","type":"int"}},{"kind":128,"name":"$blue","modifiers":0,"doc":{"description":"Value of blue component.","type":"int"}},{"kind":128,"name":"$alpha","modifiers":0,"value":"0","doc":{"description":"Value of alpha component.","type":"int"}}],"doc":{"description":"This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill.","type":"void"}},{"kind":64,"name":"imagepsslantfont","modifiers":0,"description":"","children":[{"kind":128,"name":"$font_index","modifiers":0,"doc":{"description":"A font resource, returned by imagepsloadfont().","type":"resource"}},{"kind":128,"name":"$slant","modifiers":0,"doc":{"description":"Slant level.","type":"float"}}],"doc":{"type":"bool"}},{"kind":64,"name":"ldap_get_option","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"The parameter option can be one of: Option Type LDAP_OPT_DEREF integer LDAP_OPT_SIZELIMIT integer LDAP_OPT_TIMELIMIT integer LDAP_OPT_NETWORK_TIMEOUT integer LDAP_OPT_PROTOCOL_VERSION integer LDAP_OPT_ERROR_NUMBER integer LDAP_OPT_REFERRALS bool LDAP_OPT_RESTART bool LDAP_OPT_HOST_NAME string LDAP_OPT_ERROR_STRING string LDAP_OPT_MATCHED_DN string LDAP_OPT_SERVER_CONTROLS array LDAP_OPT_CLIENT_CONTROLS array LDAP_OPT_X_KEEPALIVE_IDLE int   LDAP_OPT_X_KEEPALIVE_PROBES int   LDAP_OPT_X_KEEPALIVE_INTERVAL int   LDAP_OPT_X_TLS_CACERTDIR string   LDAP_OPT_X_TLS_CACERTFILE string   LDAP_OPT_X_TLS_CERTFILE string   LDAP_OPT_X_TLS_CIPHER_SUITE string   LDAP_OPT_X_TLS_CRLCHECK integer   LDAP_OPT_X_TLS_CRLFILE string   LDAP_OPT_X_TLS_DHFILE string   LDAP_OPT_X_TLS_KEYILE string   LDAP_OPT_X_TLS_PACKAGE string   LDAP_OPT_X_TLS_PROTOCOL_MIN integer   LDAP_OPT_X_TLS_RANDOM_FILE string   LDAP_OPT_X_TLS_REQUIRE_CERT integer  ","type":"int"}},{"kind":128,"name":"$retval","modifiers":1024,"doc":{"description":"This will be set to the option value.","type":"mixed"}}],"doc":{"description":"Sets retval to the value of the specified option.","type":"bool"}},{"kind":64,"name":"is_array","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable being evaluated.","type":"mixed"}}],"doc":{"description":"Finds whether the given variable is an array.","type":"bool"}},{"kind":64,"name":"xml_parser_set_option","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to set an option in.","type":"resource"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"Which option to set. See below. The following options are available: XML parser options Option constant Data type Description XML_OPTION_CASE_FOLDING integer Controls whether case-folding is enabled for this XML parser. Enabled by default. XML_OPTION_SKIP_TAGSTART integer Specify how many characters should be skipped in the beginning of a tag name. XML_OPTION_SKIP_WHITE integer Whether to skip values consisting of whitespace characters. XML_OPTION_TARGET_ENCODING string Sets which target encoding to use in this XML parser.By default, it is set to the same as the source encoding used by xml_parser_create(). Supported target encodings are ISO-8859-1, US-ASCII and UTF-8.","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The option's new value.","type":"mixed"}}],"doc":{"description":"Sets an option in an XML parser.","type":"bool"}},{"kind":64,"name":"gmp_fact","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"The factorial number. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"mixed"}}],"doc":{"description":"Calculates factorial (a!) of a.","type":"GMP"}},{"kind":64,"name":"decbin","modifiers":0,"children":[{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"Decimal value to convert Range of inputs on 32-bit machines positive number negative number return value 0   0 1   1 2   10 ... normal progression ... 2147483646   1111111111111111111111111111110 2147483647 (largest signed integer)   1111111111111111111111111111111 (31 1's) 2147483648 -2147483648 10000000000000000000000000000000 ... normal progression ... 4294967294 -2 11111111111111111111111111111110 4294967295 (largest unsigned integer) -1 11111111111111111111111111111111 (32 1's) Range of inputs on 64-bit machines positive number negative number return value 0   0 1   1 2   10 ... normal progression ... 9223372036854775806   111111111111111111111111111111111111111111111111111111111111110 9223372036854775807 (largest signed integer)   111111111111111111111111111111111111111111111111111111111111111 (63 1's)   -9223372036854775808 1000000000000000000000000000000000000000000000000000000000000000 ... normal progression ...   -2 1111111111111111111111111111111111111111111111111111111111111110   -1 1111111111111111111111111111111111111111111111111111111111111111 (64 1's)","type":"int"}}],"doc":{"description":"Returns a string containing a binary representation of the given number argument.","type":"string"}},{"kind":64,"name":"exif_read_data","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The name of the image file being read. This cannot be an URL.","type":"string"}},{"kind":128,"name":"$sections","modifiers":0,"value":"NULL","doc":{"description":"Is a comma separated list of sections that need to be present in file to produce a result array. If none of the requested sections could be found the return value is FALSE. FILE FileName, FileSize, FileDateTime, SectionsFound COMPUTED html, Width, Height, IsColor, and more if available. Height and Width are computed the same way getimagesize() does so their values must not be part of any header returned. Also, html is a height/width text string to be used inside normal HTML. ANY_TAG Any information that has a Tag e.g. IFD0, EXIF, ... IFD0 All tagged data of IFD0. In normal imagefiles this contains image size and so forth. THUMBNAIL A file is supposed to contain a thumbnail if it has a second IFD. All tagged information about the embedded thumbnail is stored in this section. COMMENT Comment headers of JPEG images. EXIF The EXIF section is a sub section of IFD0. It contains more detailed information about an image. Most of these entries are digital camera related.","type":"string"}},{"kind":128,"name":"$arrays","modifiers":0,"value":"false","doc":{"description":"Specifies whether or not each section becomes an array. The sections COMPUTED, THUMBNAIL, and COMMENT always become arrays as they may contain values whose names conflict with other sections.","type":"bool"}},{"kind":128,"name":"$thumbnail","modifiers":0,"value":"false","doc":{"description":"When set to TRUE the thumbnail itself is read. Otherwise, only the tagged data is read.","type":"bool"}}],"doc":{"description":"exif_read_data() reads the EXIF headers from a JPEG or TIFF image file. This way you can read meta data generated by digital cameras.","type":"array"}},{"kind":64,"name":"base64_decode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The encoded data.","type":"string"}},{"kind":128,"name":"$strict","modifiers":0,"value":"false","doc":{"description":"If the strict parameter is set to TRUE then the base64_decode() function will return FALSE if the input contains character from outside the base64 alphabet. Otherwise invalid characters will be silently discarded.","type":"bool"}}],"doc":{"description":"Decodes a base64 encoded data.","type":"string"}},{"kind":64,"name":"file","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file. TipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"The optional parameter flags can be one, or more, of the following constants: FILE_USE_INCLUDE_PATH Search for the file in the include_path. FILE_IGNORE_NEW_LINES Do not add newline at the end of each array element FILE_SKIP_EMPTY_LINES Skip empty lines","type":"int"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"A context resource created with the stream_context_create() function. Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams.","type":"resource"}}],"doc":{"description":"Reads an entire file into an array.","type":"array"}},{"kind":64,"name":"ibase_maintain_db","modifiers":0,"description":"","children":[{"kind":128,"name":"$service_handle","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$db","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$action","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$argument","modifiers":0,"description":"","value":"0","doc":{"type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"ibase_param_info","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"An InterBase prepared query handle.","type":"resource"}},{"kind":128,"name":"$param_number","modifiers":0,"doc":{"description":"Parameter offset.","type":"int"}}],"doc":{"description":"Returns an array with information about a parameter after a query has been prepared.","type":"array"}},{"kind":64,"name":"mb_ereg_replace_callback","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The regular expression pattern. Multibyte characters may be used in pattern.","type":"string"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"A callback that will be called and passed an array of matched elements in the subject string. The callback should return the replacement string. You'll often need the callback function for a mb_ereg_replace_callback() in just one place. In this case you can use an anonymous function to declare the callback within the call to mb_ereg_replace_callback(). By doing it this way you have all information for the call in one place and do not clutter the function namespace with a callback function's name not used anywhere else.","type":"callable"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string being checked.","type":"string"}},{"kind":128,"name":"$option","modifiers":0,"value":"\"msr\"","doc":{"description":"Matching condition can be set by option parameter. If i is specified for this parameter, the case will be ignored. If x is specified, white space will be ignored. If m is specified, match will be executed in multiline mode and line break will be included in '.'. If p is specified, match will be executed in POSIX mode, line break will be considered as normal character. Note that e cannot be used for mb_ereg_replace_callback().","type":"string"}}],"doc":{"description":"Scans string for matches to pattern, then replaces the matched text with the output of callback function.","type":"string"}},{"kind":64,"name":"spl_autoload","modifiers":0,"children":[{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"The lowercased name of the class (and namespace) being instantiated.","type":"string"}},{"kind":128,"name":"$file_extensions","modifiers":0,"value":"spl_autoload_extensions()","doc":{"description":"By default it checks all include paths to contain filenames built up by the lowercase class name appended by the filename extensions .inc and .php.","type":"string"}}],"doc":{"description":"This function is intended to be used as a default implementation for __autoload(). If nothing else is specified and spl_autoload_register() is called without any parameters then this function will be used for any later call to __autoload().","type":"void"}},{"kind":64,"name":"mcrypt_list_algorithms","modifiers":0,"description":"","children":[{"kind":128,"name":"$lib_dir","modifiers":0,"value":"ini_get(\"mcrypt.algorithms_dir\")","doc":{"description":"Specifies the directory where all algorithms are located. If not specified, the value of the mcrypt.algorithms_dir php.ini directive is used.","type":"string"}}],"doc":{"type":"array"}},{"kind":64,"name":"array_key_exists","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"Value to check.","type":"mixed"}},{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"An array with keys to check.","type":"array"}}],"doc":{"description":"array_key_exists() returns TRUE if the given key is set in the array. key can be any value possible for an array index.","type":"bool"}},{"kind":64,"name":"atanh","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg.","type":"float"}},{"kind":64,"name":"bind_textdomain_codeset","modifiers":0,"children":[{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"The domain","type":"string"}},{"kind":128,"name":"$codeset","modifiers":0,"doc":{"description":"The code set","type":"string"}}],"doc":{"description":"With bind_textdomain_codeset(), you can set in which encoding will be messages from domain returned by gettext() and similar functions.","type":"string"}},{"kind":64,"name":"enchant_broker_free","modifiers":0,"children":[{"kind":128,"name":"$broker","modifiers":0,"doc":{"description":"Broker resource","type":"resource"}}],"doc":{"description":"Free a broker resource with all its dictionaries.","type":"bool"}},{"kind":64,"name":"hypot","modifiers":0,"children":[{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"Length of first side","type":"float"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"Length of second side","type":"float"}}],"doc":{"description":"hypot() returns the length of the hypotenuse of a right-angle triangle with sides of length x and y, or the distance of the point (x, y) from the origin. This is equivalent to sqrt(x*x + y*y).","type":"float"}},{"kind":64,"name":"intlcal_get","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar>"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Gets the value for a specific field.","type":"int"}},{"kind":64,"name":"pcntl_wifsignaled","modifiers":0,"children":[{"kind":128,"name":"$status","modifiers":0,"doc":{"description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().","type":"int"}}],"doc":{"description":"Checks whether the child process exited because of a signal which was not caught.","type":"bool"}},{"kind":64,"name":"intlcal_is_set","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Returns whether a field is set (as opposed to clear). Set fields take priority over unset fields and their default values when the date/time is being calculated. Fields set later take priority over fields set earlier.","type":"bool"}},{"kind":64,"name":"ob_tidyhandler","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The buffer.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The buffer mode.","type":"int"}}],"doc":{"description":"Callback function for ob_start() to repair the buffer.","type":"string"}},{"kind":64,"name":"rewind","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer must be valid, and must point to a file successfully opened by fopen().","type":"resource"}}],"doc":{"description":"Sets the file position indicator for handle to the beginning of the file stream.","type":"bool"}},{"kind":64,"name":"pg_lo_read_all","modifiers":0,"children":[{"kind":128,"name":"$large_object","modifiers":0,"doc":{"description":"PostgreSQL large object (LOB) resource, returned by pg_lo_open().","type":"resource"}}],"doc":{"description":"pg_lo_read_all() reads a large object and passes it straight through to the browser after sending all pending headers. Mainly intended for sending binary data like images or sound.","type":"int"}},{"kind":64,"name":"tan","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process in radians","type":"float"}}],"doc":{"description":"tan() returns the tangent of the arg parameter. The arg parameter is in radians.","type":"float"}},{"kind":64,"name":"snmp3_get","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The hostname of the SNMP agent (server).","type":"string"}},{"kind":128,"name":"$sec_name","modifiers":0,"doc":{"description":"the security name, usually some kind of username","type":"string"}},{"kind":128,"name":"$sec_level","modifiers":0,"doc":{"description":"the security level (noAuthNoPriv|authNoPriv|authPriv)","type":"string"}},{"kind":128,"name":"$auth_protocol","modifiers":0,"doc":{"description":"the authentication protocol (MD5 or SHA)","type":"string"}},{"kind":128,"name":"$auth_passphrase","modifiers":0,"doc":{"description":"the authentication pass phrase","type":"string"}},{"kind":128,"name":"$priv_protocol","modifiers":0,"doc":{"description":"the privacy protocol (DES or AES)","type":"string"}},{"kind":128,"name":"$priv_passphrase","modifiers":0,"doc":{"description":"the privacy pass phrase","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object id.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"string"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"string"}}],"doc":{"description":"The snmp3_get() function is used to read the value of an SNMP object specified by the object_id.","type":"string"}},{"kind":64,"name":"ftp_mdtm","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$remote_file","modifiers":0,"doc":{"description":"The file from which to extract the last modification time.","type":"string"}}],"doc":{"description":"ftp_mdtm() gets the last modified time for a remote file.","type":"int"}},{"kind":64,"name":"assert_options","modifiers":0,"children":[{"kind":128,"name":"$what","modifiers":0,"doc":{"description":"Assert Options Option INI Setting Default value Description ASSERT_ACTIVE assert.active 1 enable assert() evaluation ASSERT_WARNING assert.warning 1 issue a PHP warning for each failed assertion ASSERT_BAIL assert.bail 0 terminate execution on failed assertions ASSERT_QUIET_EVAL assert.quiet_eval 0 disable error_reporting during assertion expression evaluation ASSERT_CALLBACK assert.callback (NULL) Callback to call on failed assertions","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"An optional new value for the option.","type":"mixed"}}],"doc":{"description":"Set the various assert() control options or just query their current settings.","type":"mixed"}},{"kind":64,"name":"expm1","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"expm1() returns the equivalent to 'exp(arg) - 1' computed in a way that is accurate even if the value of arg is near zero, a case where 'exp (arg) - 1' would be inaccurate due to subtraction of two numbers that are nearly equal.","type":"float"}},{"kind":64,"name":"cyrus_unbind","modifiers":0,"description":"","children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"The connection handle.","type":"resource"}},{"kind":128,"name":"$trigger_name","modifiers":0,"doc":{"description":"The trigger name.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"syslog","modifiers":0,"children":[{"kind":128,"name":"$priority","modifiers":0,"doc":{"description":"priority is a combination of the facility and the level. Possible values are: syslog() Priorities (in descending order) Constant Description LOG_EMERG system is unusable LOG_ALERT action must be taken immediately LOG_CRIT critical conditions LOG_ERR error conditions LOG_WARNING warning conditions LOG_NOTICE normal, but significant, condition LOG_INFO informational message LOG_DEBUG debug-level message","type":"int"}},{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"The message to send, except that the two characters %m will be replaced by the error message string (strerror) corresponding to the present value of errno.","type":"string"}}],"doc":{"description":"syslog() generates a log message that will be distributed by the system logger.","type":"bool"}},{"kind":64,"name":"unregister_tick_function","modifiers":0,"description":"","children":[{"kind":128,"name":"$function_name","modifiers":0,"doc":{"description":"The function name, as a string.","type":"string"}}],"doc":{"type":"void"}},{"kind":64,"name":"stream_context_create","modifiers":0,"children":[{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value. Refer to context options for a list of available wrappers and options. Default to an empty array.","type":"array"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"Must be an associative array in the format $arr['parameter'] = $value. Refer to context parameters for a listing of standard stream parameters.","type":"array"}}],"doc":{"description":"Creates and returns a stream context with any options supplied in options preset.","type":"resource"}},{"kind":64,"name":"imagecreate","modifiers":0,"children":[{"kind":128,"name":"$width","modifiers":0,"doc":{"description":"The image width.","type":"int"}},{"kind":128,"name":"$height","modifiers":0,"doc":{"description":"The image height.","type":"int"}}],"doc":{"description":"imagecreate() returns an image identifier representing a blank image of specified size.","type":"resource"}},{"kind":64,"name":"ob_get_status","modifiers":0,"children":[{"kind":128,"name":"$full_status","modifiers":0,"value":"FALSE","doc":{"description":"TRUE to return all active output buffer levels. If FALSE or not set, only the top level output buffer is returned.","type":"bool"}}],"doc":{"description":"ob_get_status() returns status information on either the top level output buffer or all active output buffer levels if full_status is set to TRUE.","type":"array"}},{"kind":64,"name":"array_shift","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}}],"doc":{"description":"array_shift() shifts the first value of the array off and returns it, shortening the array by one element and moving everything down. All numerical array keys will be modified to start counting from zero while literal keys won't be touched.","type":"mixed"}},{"kind":64,"name":"ftp_nlist","modifiers":0,"description":"","children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"The directory to be listed. This parameter can also include arguments, eg. ftp_nlist($conn_id, \"-la /your/dir\"); Note that this parameter isn't escaped so there may be some issues with filenames containing spaces and other characters.","type":"string"}}],"doc":{"type":"array"}},{"kind":64,"name":"strcoll","modifiers":0,"children":[{"kind":128,"name":"$str1","modifiers":0,"doc":{"description":"The first string.","type":"string"}},{"kind":128,"name":"$str2","modifiers":0,"doc":{"description":"The second string.","type":"string"}}],"doc":{"description":"Note that this comparison is case sensitive, and unlike strcmp() this function is not binary safe.","type":"int"}},{"kind":64,"name":"similar_text","modifiers":0,"children":[{"kind":128,"name":"$first","modifiers":0,"doc":{"description":"The first string.","type":"string"}},{"kind":128,"name":"$second","modifiers":0,"doc":{"description":"The second string.","type":"string"}},{"kind":128,"name":"$percent","modifiers":1024,"doc":{"description":"By passing a reference as third argument, similar_text() will calculate the similarity in percent for you.","type":"float"}}],"doc":{"description":"This calculates the similarity between two strings as described in Programming Classics: Implementing the World's Best Algorithms by Oliver (ISBN 0-131-00413-1). Note that this implementation does not use a stack as in Oliver's pseudo code, but recursive calls which may or may not speed up the whole process. Note also that the complexity of this algorithm is O(N**3) where N is the length of the longest string.","type":"int"}},{"kind":64,"name":"getimagesize","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"This parameter specifies the file you wish to retrieve information about. It can reference a local file or (configuration permitting) a remote file using one of the supported streams.","type":"string"}},{"kind":128,"name":"$imageinfo","modifiers":1024,"doc":{"description":"This optional parameter allows you to extract some extended information from the image file. Currently, this will return the different JPG APP markers as an associative array. Some programs use these APP markers to embed text information in images. A very common one is to embed » IPTC information in the APP13 marker. You can use the iptcparse() function to parse the binary APP13 marker into something readable.","type":"array"}}],"doc":{"description":"The getimagesize() function will determine the size of any supported given image file and return the dimensions along with the file type and a height/width text string to be used inside a normal HTML IMG tag and the correspondent HTTP content type.","type":"array"}},{"kind":64,"name":"imap_mime_header_decode","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The MIME text","type":"string"}}],"doc":{"description":"Decodes MIME message header extensions that are non ASCII text (see » RFC2047).","type":"array"}},{"kind":64,"name":"filter_list","modifiers":0,"description":"","children":[],"doc":{"type":"array"}},{"kind":64,"name":"locale_get_keywords","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the keywords from","type":"string"}}],"doc":{"description":"Gets the keywords for the input locale.","type":"array"}},{"kind":64,"name":"mysqli_rollback","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"A bitmask of MYSQLI_TRANS_COR_* constants.","type":"int"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"If provided then ROLLBACK/*name*/ is executed.","type":"string"}}],"doc":{"description":"Rollbacks the current transaction for the database.","type":"bool"}},{"kind":64,"name":"posix_getpgid","modifiers":0,"children":[{"kind":128,"name":"$pid","modifiers":0,"doc":{"description":"The process id.","type":"int"}}],"doc":{"description":"Returns the process group identifier of the process pid or FALSE on failure.","type":"int"}},{"kind":64,"name":"pcntl_sigtimedwait","modifiers":0,"children":[{"kind":128,"name":"$set","modifiers":0,"doc":{"description":"Array of signals to wait for.","type":"array"}},{"kind":128,"name":"$siginfo","modifiers":1024,"doc":{"description":"The siginfo is set to an array containing informations about the signal. See pcntl_sigwaitinfo().","type":"array"}},{"kind":128,"name":"$seconds","modifiers":0,"value":"0","doc":{"description":"Timeout in seconds.","type":"int"}},{"kind":128,"name":"$nanoseconds","modifiers":0,"value":"0","doc":{"description":"Timeout in nanoseconds.","type":"int"}}],"doc":{"description":"The pcntl_sigtimedwait() function operates in exactly the same way as pcntl_sigwaitinfo() except that it takes two additional parameters, seconds and nanoseconds, which enable an upper bound to be placed on the time for which the script is suspended.","type":"int"}},{"kind":64,"name":"fbsql_error","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Returns the error message from previous FrontBase operation.","type":"string"}},{"kind":64,"name":"curl_pause","modifiers":0,"description":"","children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}},{"kind":128,"name":"$bitmask","modifiers":0,"doc":{"description":"One of CURLPAUSE_* constants.","type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"session_status","modifiers":0,"children":[],"doc":{"description":"session_status() is used to return the current session status.","type":"int"}},{"kind":64,"name":"mkdir","modifiers":0,"children":[{"kind":128,"name":"$pathname","modifiers":0,"doc":{"description":"The directory path.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"value":"0777","doc":{"description":"The mode is 0777 by default, which means the widest possible access. For more information on modes, read the details on the chmod() page. Note: mode is ignored on Windows. Note that you probably want to specify the mode as an octal number, which means it should have a leading zero. The mode is also modified by the current umask, which you can change using umask().","type":"int"}},{"kind":128,"name":"$recursive","modifiers":0,"value":"false","doc":{"description":"Allows the creation of nested directories specified in the pathname.","type":"bool"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams.","type":"resource"}}],"doc":{"description":"Attempts to create the directory specified by pathname.","type":"bool"}},{"kind":64,"name":"ibase_blob_add","modifiers":0,"children":[{"kind":128,"name":"$blob_handle","modifiers":0,"doc":{"description":"A blob handle opened with ibase_blob_create().","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to be added.","type":"string"}}],"doc":{"description":"ibase_blob_add() adds data into a blob created with ibase_blob_create().","type":"void"}},{"kind":64,"name":"jdtounix","modifiers":0,"children":[{"kind":128,"name":"$jday","modifiers":0,"doc":{"description":"A julian day number between 2440588 and 2465342.","type":"int"}}],"doc":{"description":"This function will return a Unix timestamp corresponding to the Julian Day given in jday or FALSE if jday is not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588 <= jday <= 2465342 ). The time returned is localtime (and not GMT).","type":"int"}},{"kind":64,"name":"fbsql_autocommit","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}},{"kind":128,"name":"$OnOff","modifiers":0,"doc":{"description":"If this optional parameter is given the auto commit status will be changed. With OnOff set to TRUE each statement will be committed automatically, if no errors was found. With OnOff set to FALSE the user must commit or rollback the transaction using either fbsql_commit() or fbsql_rollback().","type":"bool"}}],"doc":{"description":"Returns the current autocommit status.","type":"bool"}},{"kind":64,"name":"ezmlm_hash","modifiers":0,"description":"","children":[{"kind":128,"name":"$addr","modifiers":0,"doc":{"description":"The email address that's being hashed.","type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"xml_get_error_code","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to get error code from.","type":"resource"}}],"doc":{"description":"Gets the XML parser error code.","type":"int"}},{"kind":64,"name":"pg_lo_export","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}},{"kind":128,"name":"$pathname","modifiers":0,"doc":{"description":"The full path and file name of the file in which to write the large object on the client filesystem.","type":"string"}}],"doc":{"description":"pg_lo_export() takes a large object in a PostgreSQL database and saves its contents to a file on the local filesystem.","type":"bool"}},{"kind":64,"name":"socket_getsockname","modifiers":0,"description":"","children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create() or socket_accept().","type":"resource"}},{"kind":128,"name":"$addr","modifiers":1024,"doc":{"description":"If the given socket is of type AF_INET or AF_INET6, socket_getsockname() will return the local IP address in appropriate notation (e.g. 127.0.0.1 or fe80::1) in the address parameter and, if the optional port parameter is present, also the associated port. If the given socket is of type AF_UNIX, socket_getsockname() will return the Unix filesystem path (e.g. /var/run/daemon.sock) in the address parameter.","type":"string"}},{"kind":128,"name":"$port","modifiers":1024,"doc":{"description":"If provided, this will hold the associated port.","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"openssl_x509_free","modifiers":0,"children":[{"kind":128,"name":"$x509cert","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"openssl_x509_free() frees the certificate associated with the specified x509cert resource from memory.","type":"void"}},{"kind":64,"name":"mcrypt_get_block_size","modifiers":0,"description":"","children":[{"kind":128,"name":"$cipher","modifiers":0,"doc":{"description":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".","type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"mb_decode_numericentity","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being decoded.","type":"string"}},{"kind":128,"name":"$convmap","modifiers":0,"doc":{"description":"convmap is an array that specifies the code area to convert.","type":"array"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"Convert numeric string reference of string str in a specified block to character.","type":"string"}},{"kind":64,"name":"xmlwriter_start_comment","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Starts a comment.","type":"bool"}},{"kind":64,"name":"setrawcookie","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$expire","modifiers":0,"description":"","value":"0","doc":{"type":"int"}},{"kind":128,"name":"$path","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$domain","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$secure","modifiers":0,"description":"","value":"false","doc":{"type":"bool"}},{"kind":128,"name":"$httponly","modifiers":0,"description":"","value":"false","doc":{"type":"bool"}}],"doc":{"description":"setrawcookie() is exactly the same as setcookie() except that the cookie value will not be automatically urlencoded when sent to the browser.","type":"bool"}},{"kind":64,"name":"imagestring","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$font","modifiers":0,"doc":{"description":"Can be 1, 2, 3, 4, 5 for built-in fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your own font identifiers registered with imageloadfont().","type":"int"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"x-coordinate of the upper left corner.","type":"int"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"y-coordinate of the upper left corner.","type":"int"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string to be written.","type":"string"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"Draws a string at the given coordinates.","type":"bool"}},{"kind":64,"name":"mcrypt_ecb","modifiers":0,"description":"","children":[{"kind":128,"name":"$cipher","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$key","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$data","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$iv","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"imagepsfreefont","modifiers":0,"description":"","children":[{"kind":128,"name":"$font_index","modifiers":0,"doc":{"description":"A font resource, returned by imagepsloadfont().","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"natcasesort","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}}],"doc":{"description":"natcasesort() is a case insensitive version of natsort().","type":"bool"}},{"kind":64,"name":"imap_delete","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msg_number","modifiers":0,"doc":{"description":"The message number","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"You can set the FT_UID which tells the function to treat the msg_number argument as an UID.","type":"int"}}],"doc":{"description":"Marks messages listed in msg_number for deletion. Messages marked for deletion will stay in the mailbox until either imap_expunge() is called or imap_close() is called with the optional parameter CL_EXPUNGE.","type":"bool"}},{"kind":64,"name":"imap_renamemailbox","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$old_mbox","modifiers":0,"doc":{"description":"The old mailbox name, see imap_open() for more information","type":"string"}},{"kind":128,"name":"$new_mbox","modifiers":0,"doc":{"description":"The new mailbox name, see imap_open() for more information","type":"string"}}],"doc":{"description":"This function renames on old mailbox to new mailbox (see imap_open() for the format of mbox names).","type":"bool"}},{"kind":64,"name":"snmp_set_enum_print","modifiers":0,"children":[{"kind":128,"name":"$enum_print","modifiers":0,"doc":{"description":"As the value is interpreted as boolean by the Net-SNMP library, it can only be \"0\" or \"1\".","type":"int"}}],"doc":{"description":"This function toggles if snmpwalk/snmpget etc. should automatically lookup enum values in the MIB and return them together with their human readable string.","type":"bool"}},{"kind":64,"name":"imap_unsubscribe","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information","type":"string"}}],"doc":{"description":"Unsubscribe from the specified mailbox.","type":"bool"}},{"kind":64,"name":"imagefilledrectangle","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$x1","modifiers":0,"doc":{"description":"x-coordinate for point 1.","type":"int"}},{"kind":128,"name":"$y1","modifiers":0,"doc":{"description":"y-coordinate for point 1.","type":"int"}},{"kind":128,"name":"$x2","modifiers":0,"doc":{"description":"x-coordinate for point 2.","type":"int"}},{"kind":128,"name":"$y2","modifiers":0,"doc":{"description":"y-coordinate for point 2.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"The fill color. A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"Creates a rectangle filled with color in the given image starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image.","type":"bool"}},{"kind":64,"name":"mb_convert_encoding","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being encoded.","type":"string"}},{"kind":128,"name":"$to_encoding","modifiers":0,"doc":{"description":"The type of encoding that str is being converted to.","type":"string"}},{"kind":128,"name":"$from_encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"Is specified by character code names before conversion. It is either an array, or a comma separated enumerated list. If from_encoding is not specified, the internal encoding will be used. See supported encodings.","type":"mixed"}}],"doc":{"description":"Converts the character encoding of string str to to_encoding from optionally from_encoding.","type":"string"}},{"kind":64,"name":"posix_ttyname","modifiers":0,"children":[{"kind":128,"name":"$fd","modifiers":0,"doc":{"description":"The file descriptor, which is expected to be either a file resource or an integer. An integer will be assumed to be a file descriptor that can be passed directly to the underlying system call. In almost all cases, you will want to provide a file resource.","type":"mixed"}}],"doc":{"description":"Returns a string for the absolute path to the current terminal device that is open on the file descriptor fd.","type":"string"}},{"kind":64,"name":"gmp_abs","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Get the absolute value of a number.","type":"GMP"}},{"kind":64,"name":"urldecode","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to be decoded.","type":"string"}}],"doc":{"description":"Decodes any %## encoding in the given string. Plus symbols ('+') are decoded to a space character.","type":"string"}},{"kind":64,"name":"mysqli_fetch_field_direct","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}},{"kind":128,"name":"$fieldnr","modifiers":0,"doc":{"description":"The field number. This value must be in the range from 0 to number of fields - 1.","type":"int"}}],"doc":{"description":"Returns an object which contains field definition information from the specified result set.","type":"object"}},{"kind":64,"name":"pg_copy_to","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"Name of the table from which to copy the data into rows.","type":"string"}},{"kind":128,"name":"$delimiter","modifiers":0,"doc":{"description":"The token that separates values for each field in each element of rows. Default is TAB.","type":"string"}},{"kind":128,"name":"$null_as","modifiers":0,"doc":{"description":"How SQL NULL values are represented in the rows. Default is \\N (\"\\\\N\").","type":"string"}}],"doc":{"description":"pg_copy_to() copies a table to an array. It issues COPY TO SQL command internally to retrieve records.","type":"array"}},{"kind":64,"name":"intdiv","modifiers":0,"children":[{"kind":128,"name":"$dividend","modifiers":0,"doc":{"description":"Number to be divided.","type":"int"}},{"kind":128,"name":"$divisor","modifiers":0,"doc":{"description":"Number which divides the dividend.","type":"int"}}],"doc":{"description":"Returns the integer quotient of the division of dividend by divisor.","type":"int"}},{"kind":64,"name":"convert_uuencode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to be encoded.","type":"string"}}],"doc":{"description":"convert_uuencode() encodes a string using the uuencode algorithm.","type":"string"}},{"kind":64,"name":"ftp_fget","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"An open file pointer in which we store the data.","type":"resource"}},{"kind":128,"name":"$remote_file","modifiers":0,"doc":{"description":"The remote file path.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY.","type":"int"}},{"kind":128,"name":"$resumepos","modifiers":0,"value":"0","doc":{"description":"The position in the remote file to start downloading from.","type":"int"}}],"doc":{"description":"ftp_fget() retrieves remote_file from the FTP server, and writes it to the given file pointer.","type":"bool"}},{"kind":64,"name":"array_values","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":0,"doc":{"description":"The array.","type":"array"}}],"doc":{"description":"array_values() returns all the values from the array and indexes the array numerically.","type":"array"}},{"kind":64,"name":"imagecreatefromgd","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the GD file.","type":"string"}}],"doc":{"description":"Create a new image from GD file or URL.","type":"resource"}},{"kind":64,"name":"ibase_drop_db","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"NULL","doc":{"description":"An InterBase link identifier. If omitted, the last opened link is assumed.","type":"resource"}}],"doc":{"description":"This functions drops a database that was opened by either ibase_connect() or ibase_pconnect(). The database is closed and deleted from the server.","type":"bool"}},{"kind":64,"name":"fbsql_list_tables","modifiers":0,"children":[{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The database name.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Returns a result pointer describing the database.","type":"resource"}},{"kind":64,"name":"mysqli_stmt_execute","modifiers":0,"children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Procedural style only: A statement identifier returned by mysqli_stmt_init().","type":"mysqli_stmt"}}],"doc":{"description":"Executes a query that has been previously prepared using the mysqli_prepare() function. When executed any parameter markers which exist will automatically be replaced with the appropriate data.","type":"bool"}},{"kind":64,"name":"iconv_mime_decode","modifiers":0,"children":[{"kind":128,"name":"$encoded_header","modifiers":0,"doc":{"description":"The encoded header, as a string.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"value":"0","doc":{"description":"mode determines the behaviour in the event iconv_mime_decode() encounters a malformed MIME header field. You can specify any combination of the following bitmasks. Bitmasks acceptable to iconv_mime_decode() Value Constant Description 1 ICONV_MIME_DECODE_STRICT If set, the given header is decoded in full conformance with the standards defined in » RFC2047. This option is disabled by default because there are a lot of broken mail user agents that don't follow the specification and don't produce correct MIME headers. 2 ICONV_MIME_DECODE_CONTINUE_ON_ERROR If set, iconv_mime_decode_headers() attempts to ignore any grammatical errors and continue to process a given header.","type":"int"}},{"kind":128,"name":"$charset","modifiers":0,"value":"ini_get(\"iconv.internal_encoding\")","doc":{"description":"The optional charset parameter specifies the character set to represent the result by. If omitted, iconv.internal_encoding will be used.","type":"string"}}],"doc":{"description":"Decodes a MIME header field.","type":"string"}},{"kind":64,"name":"tidy_get_error_buffer","modifiers":0,"children":[{"kind":128,"name":"$tidy","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Returns warnings and errors which occurred parsing the specified document.","type":"string"}},{"kind":64,"name":"posix_getpwnam","modifiers":0,"children":[{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"An alphanumeric username.","type":"string"}}],"doc":{"description":"Returns an array of information about the given user.","type":"array"}},{"kind":64,"name":"libxml_get_last_error","modifiers":0,"children":[],"doc":{"description":"Retrieve last error from libxml.","type":"LibXMLError"}},{"kind":64,"name":"ibase_affected_rows","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A transaction context. If link_identifier is a connection resource, its default transaction is used.","type":"resource"}}],"doc":{"description":"This function returns the number of rows that were affected by the previous query (INSERT, UPDATE or DELETE) that was executed from within the specified transaction context.","type":"int"}},{"kind":64,"name":"mssql_num_fields","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"pg_insert","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"Name of the table into which to insert rows. The table table_name must at least have as many columns as assoc_array has elements.","type":"string"}},{"kind":128,"name":"$assoc_array","modifiers":0,"doc":{"description":"An array whose keys are field names in the table table_name, and whose values are the values of those fields that are to be inserted.","type":"array"}},{"kind":128,"name":"$options","modifiers":0,"value":"PGSQL_DML_EXEC","doc":{"description":"Any number of PGSQL_CONV_OPTS, PGSQL_DML_NO_CONV, PGSQL_DML_ESCAPE, PGSQL_DML_EXEC, PGSQL_DML_ASYNC or PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the options then query string is returned. When PGSQL_DML_NO_CONV or PGSQL_DML_ESCAPE is set, it does not call pg_convert() internally.","type":"int"}}],"doc":{"description":"pg_insert() inserts the values of assoc_array into the table specified by table_name. If options is specified, pg_convert() is applied to assoc_array with the specified options.","type":"mixed"}},{"kind":64,"name":"mssql_fetch_row","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mssql_query().","type":"resource"}}],"doc":{"type":"array"}},{"kind":64,"name":"xmlwriter_write_attribute","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name of the attribute.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value of the attribute.","type":"string"}}],"doc":{"description":"Writes a full attribute.","type":"bool"}},{"kind":64,"name":"uniqid","modifiers":0,"children":[{"kind":128,"name":"$prefix","modifiers":0,"value":"\"\"","doc":{"description":"Can be useful, for instance, if you generate identifiers simultaneously on several hosts that might happen to generate the identifier at the same microsecond. With an empty prefix, the returned string will be 13 characters long. If more_entropy is TRUE, it will be 23 characters.","type":"string"}},{"kind":128,"name":"$more_entropy","modifiers":0,"value":"false","doc":{"description":"If set to TRUE, uniqid() will add additional entropy (using the combined linear congruential generator) at the end of the return value, which increases the likelihood that the result will be unique.","type":"bool"}}],"doc":{"description":"Gets a prefixed unique identifier based on the current time in microseconds.","type":"string"}},{"kind":64,"name":"getprotobyname","modifiers":0,"children":[{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The protocol name.","type":"string"}}],"doc":{"description":"getprotobyname() returns the protocol number associated with the protocol name as per /etc/protocols.","type":"int"}},{"kind":64,"name":"prev","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}}],"doc":{"description":"Rewind the internal array pointer.","type":"mixed"}},{"kind":64,"name":"curl_errno","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}}],"doc":{"description":"Returns the error number for the last cURL operation.","type":"int"}},{"kind":64,"name":"substr_compare","modifiers":0,"children":[{"kind":128,"name":"$main_str","modifiers":0,"doc":{"description":"The main string being compared.","type":"string"}},{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The secondary string being compared.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The start position for the comparison. If negative, it starts counting from the end of the string.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The length of the comparison. The default value is the largest of the length of the str compared to the length of main_str less the offset.","type":"int"}},{"kind":128,"name":"$case_insensitivity","modifiers":0,"value":"false","doc":{"description":"If case_insensitivity is TRUE, comparison is case insensitive.","type":"bool"}}],"doc":{"description":"substr_compare() compares main_str from position offset with str up to length characters.","type":"int"}},{"kind":64,"name":"stream_socket_recvfrom","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"The remote socket.","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The number of bytes to receive from the socket.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"value":"0","doc":{"description":"The value of flags can be any combination of the following: Possible values for flags STREAM_OOB Process OOB (out-of-band) data. STREAM_PEEK Retrieve data from the socket, but do not consume the buffer. Subsequent calls to fread() or stream_socket_recvfrom() will see the same data.","type":"int"}},{"kind":128,"name":"$address","modifiers":1024,"doc":{"description":"If address is provided it will be populated with the address of the remote socket.","type":"string"}}],"doc":{"description":"stream_socket_recvfrom() accepts data from a remote socket up to length bytes.","type":"string"}},{"kind":64,"name":"mysql_close","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"session_reset","modifiers":0,"children":[],"doc":{"description":"session_reset() reinitializes a session with original values stored in session storage. This function requires an active session and discards changes in $_SESSION.","type":"void"}},{"kind":64,"name":"str_word_count","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string","type":"string"}},{"kind":128,"name":"$format","modifiers":0,"value":"0","doc":{"description":"Specify the return value of this function. The current supported values are: 0 - returns the number of words found 1 - returns an array containing all the words found inside the string 2 - returns an associative array, where the key is the numeric position of the word inside the string and the value is the actual word itself","type":"int"}},{"kind":128,"name":"$charlist","modifiers":0,"doc":{"description":"A list of additional characters which will be considered as 'word'","type":"string"}}],"doc":{"description":"Counts the number of words inside string. If the optional format is not specified, then the return value will be an integer representing the number of words found. In the event the format is specified, the return value will be an array, content of which is dependent on the format. The possible value for the format and the resultant outputs are listed below.","type":"mixed"}},{"kind":64,"name":"wddx_serialize_vars","modifiers":0,"children":[{"kind":128,"name":"$var_name","modifiers":0,"doc":{"description":"Can be either a string naming a variable or an array containing strings naming the variables or another array, etc.","type":"mixed"}}],"doc":{"description":"Creates a WDDX packet with a structure that contains the serialized representation of the passed variables.","type":"string"}},{"kind":64,"name":"stream_set_timeout","modifiers":0,"children":[{"kind":128,"name":"$stream","modifiers":0,"doc":{"description":"The target stream.","type":"resource"}},{"kind":128,"name":"$seconds","modifiers":0,"doc":{"description":"The seconds part of the timeout to be set.","type":"int"}},{"kind":128,"name":"$microseconds","modifiers":0,"value":"0","doc":{"description":"The microseconds part of the timeout to be set.","type":"int"}}],"doc":{"description":"Sets the timeout value on stream, expressed in the sum of seconds and microseconds.","type":"bool"}},{"kind":64,"name":"variant_cmp","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}},{"kind":128,"name":"$lcid","modifiers":0,"doc":{"description":"A valid Locale Identifier to use when comparing strings (this affects string collation).","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"flags can be one or more of the following values OR'd together, and affects string comparisons: Variant Comparision Flags value meaning NORM_IGNORECASE Compare case insensitively NORM_IGNORENONSPACE Ignore nonspacing characters NORM_IGNORESYMBOLS Ignore symbols NORM_IGNOREWIDTH Ignore string width NORM_IGNOREKANATYPE Ignore Kana type NORM_IGNOREKASHIDA Ignore Arabic kashida characters","type":"int"}}],"doc":{"description":"Compares left with right.","type":"int"}},{"kind":64,"name":"imagecreatefromjpeg","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the JPEG image.","type":"string"}}],"doc":{"description":"imagecreatefromjpeg() returns an image identifier representing the image obtained from the given filename.","type":"resource"}},{"kind":64,"name":"openssl_random_pseudo_bytes","modifiers":0,"children":[{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The length of the desired string of bytes. Must be a positive integer. PHP will try to cast this parameter to a non-null integer to use it.","type":"int"}},{"kind":128,"name":"$crypto_strong","modifiers":1024,"doc":{"description":"If passed into the function, this will hold a boolean value that determines if the algorithm used was \"cryptographically strong\", e.g., safe for usage with GPG, passwords, etc. TRUE if it did, otherwise FALSE","type":"bool"}}],"doc":{"description":"Generates a string of pseudo-random bytes, with the number of bytes determined by the length parameter.","type":"string"}},{"kind":64,"name":"gmp_mul","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"A number that will be multiplied by b. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"A number that will be multiplied by a. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Multiplies a by b and returns the result.","type":"GMP"}},{"kind":64,"name":"ftok","modifiers":0,"children":[{"kind":128,"name":"$pathname","modifiers":0,"doc":{"description":"Path to an accessible file.","type":"string"}},{"kind":128,"name":"$proj","modifiers":0,"doc":{"description":"Project identifier. This must be a one character string.","type":"string"}}],"doc":{"description":"The function converts the pathname of an existing accessible file and a project identifier into an integer for use with for example shmop_open() and other System V IPC keys.","type":"int"}},{"kind":64,"name":"mysqli_commit","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"A bitmask of MYSQLI_TRANS_COR_* constants.","type":"int"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"If provided then COMMIT/*name*/ is executed.","type":"string"}}],"doc":{"description":"Commits the current transaction for the database connection.","type":"bool"}},{"kind":64,"name":"oci_field_size","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Can be the field's index (1-based) or name.","type":"mixed"}}],"doc":{"description":"Returns the size of a field.","type":"int"}},{"kind":64,"name":"xml_get_current_byte_index","modifiers":0,"children":[{"kind":128,"name":"$parser","modifiers":0,"doc":{"description":"A reference to the XML parser to get byte index from.","type":"resource"}}],"doc":{"description":"Gets the current byte index of the given XML parser.","type":"int"}},{"kind":64,"name":"gmp_cmp","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Compares two numbers.","type":"int"}},{"kind":64,"name":"mysql_info","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"jdtofrench","modifiers":0,"children":[{"kind":128,"name":"$juliandaycount","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Converts a Julian Day Count to the French Republican Calendar.","type":"string"}},{"kind":64,"name":"ftp_nb_put","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$remote_file","modifiers":0,"doc":{"description":"The remote file path.","type":"string"}},{"kind":128,"name":"$local_file","modifiers":0,"doc":{"description":"The local file path.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY.","type":"int"}},{"kind":128,"name":"$startpos","modifiers":0,"value":"0","doc":{"description":"The position in the remote file to start uploading to.","type":"int"}}],"doc":{"description":"ftp_nb_put() stores a local file on the FTP server.","type":"int"}},{"kind":64,"name":"imap_qprint","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"A quoted-printable string","type":"string"}}],"doc":{"description":"Convert a quoted-printable string to an 8 bit string according to » RFC2045, section 6.7.","type":"string"}},{"kind":64,"name":"is_file","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Tells whether the given file is a regular file.","type":"bool"}},{"kind":64,"name":"session_set_cookie_params","modifiers":0,"children":[{"kind":128,"name":"$lifetime","modifiers":0,"doc":{"description":"Lifetime of the session cookie, defined in seconds.","type":"int"}},{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"Path on the domain where the cookie will work. Use a single slash ('/') for all paths on the domain.","type":"string"}},{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"Cookie domain, for example 'www.php.net'. To make cookies visible on all subdomains then the domain must be prefixed with a dot like '.php.net'.","type":"string"}},{"kind":128,"name":"$secure","modifiers":0,"value":"false","doc":{"description":"If TRUE cookie will only be sent over secure connections.","type":"bool"}},{"kind":128,"name":"$httponly","modifiers":0,"value":"false","doc":{"description":"If set to TRUE then PHP will attempt to send the httponly flag when setting the session cookie.","type":"bool"}}],"doc":{"description":"Set cookie parameters defined in the php.ini file. The effect of this function only lasts for the duration of the script. Thus, you need to call session_set_cookie_params() for every request and before session_start() is called.","type":"void"}},{"kind":64,"name":"gc_disable","modifiers":0,"children":[],"doc":{"description":"Deactivates the circular reference collector, setting zend.enable_gc to 0.","type":"void"}},{"kind":64,"name":"resourcebundle_count","modifiers":0,"children":[{"kind":128,"name":"$r","modifiers":0,"doc":{"description":"ResourceBundle object.","type":"ResourceBundle"}}],"doc":{"description":"Get the number of elements in the bundle.","type":"int"}},{"kind":64,"name":"fbsql_clob_size","modifiers":0,"children":[{"kind":128,"name":"$clob_handle","modifiers":0,"doc":{"description":"A CLOB handle, returned by fbsql_create_clob().","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Returns the size of the given CLOB.","type":"int"}},{"kind":64,"name":"snmprealwalk","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The hostname of the SNMP agent (server).","type":"string"}},{"kind":128,"name":"$community","modifiers":0,"doc":{"description":"The read community.","type":"string"}},{"kind":128,"name":"$object_id","modifiers":0,"doc":{"description":"The SNMP object id which precedes the wanted one.","type":"string"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"1000000","doc":{"description":"The number of microseconds until the first timeout.","type":"int"}},{"kind":128,"name":"$retries","modifiers":0,"value":"5","doc":{"description":"The number of times to retry if timeouts occur.","type":"int"}}],"doc":{"description":"The snmprealwalk() function is used to traverse over a number of SNMP objects starting from object_id and return not only their values but also their object ids.","type":"array"}},{"kind":64,"name":"mysql_get_server_info","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"ibase_free_query","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"A query prepared with ibase_prepare().","type":"resource"}}],"doc":{"description":"Frees a prepared query.","type":"bool"}},{"kind":64,"name":"addcslashes","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to be escaped.","type":"string"}},{"kind":128,"name":"$charlist","modifiers":0,"doc":{"description":"A list of characters to be escaped. If charlist contains characters \\n, \\r etc., they are converted in C-like style, while other non-alphanumeric characters with ASCII codes lower than 32 and higher than 126 converted to octal representation. When you define a sequence of characters in the charlist argument make sure that you know what characters come between the characters that you set as the start and end of the range. <?phpecho addcslashes('foo[ ]', 'A..z');// output:  \\f\\o\\o\\[ \\]// All upper and lower-case letters will be escaped// ... but so will the [\\]^_`?> Also, if the first character in a range has a higher ASCII value than the second character in the range, no range will be constructed. Only the start, end and period characters will be escaped. Use the ord() function to find the ASCII value for a character. <?phpecho addcslashes(\"zoo['.']\", 'z..A');// output:  \\zoo['\\.']?> Be careful if you choose to escape characters 0, a, b, f, n, r, t and v. They will be converted to \\0, \\a, \\b, \\f, \\n, \\r, \\t and \\v, all of which are predefined escape sequences in C. Many of these sequences are also defined in other C-derived languages, including PHP, meaning that you may not get the desired result if you use the output of addcslashes() to generate code in those languages with these characters defined in charlist.","type":"string"}}],"doc":{"description":"Returns a string with backslashes before characters that are listed in charlist parameter.","type":"string"}},{"kind":64,"name":"is_bool","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable being evaluated.","type":"mixed"}}],"doc":{"description":"Finds whether the given variable is a boolean.","type":"bool"}},{"kind":64,"name":"odbc_tableprivileges","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$qualifier","modifiers":0,"doc":{"description":"The qualifier.","type":"string"}},{"kind":128,"name":"$owner","modifiers":0,"doc":{"description":"The owner. Accepts the following search patterns: ('%' to match zero or more characters and '_' to match a single character)","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name. Accepts the following search patterns: ('%' to match zero or more characters and '_' to match a single character)","type":"string"}}],"doc":{"description":"Lists tables in the requested range and the privileges associated with each table.","type":"resource"}},{"kind":64,"name":"imap_utf8","modifiers":0,"children":[{"kind":128,"name":"$mime_encoded_text","modifiers":0,"doc":{"description":"A MIME encoded string. MIME encoding method and the UTF-8 specification are described in » RFC2047 and » RFC2044 respectively.","type":"string"}}],"doc":{"description":"Converts the given mime_encoded_text to UTF-8.","type":"string"}},{"kind":64,"name":"odbc_exec","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$query_string","modifiers":0,"doc":{"description":"The SQL statement.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"doc":{"description":"This parameter is currently not used.","type":"int"}}],"doc":{"description":"Sends an SQL statement to the database server.","type":"resource"}},{"kind":64,"name":"mysqli_connect_error","modifiers":0,"children":[],"doc":{"description":"Returns the last error message string from the last call to mysqli_connect().","type":"string"}},{"kind":64,"name":"ibase_errcode","modifiers":0,"children":[],"doc":{"description":"Returns the error code that resulted from the most recent InterBase function call.","type":"int"}},{"kind":64,"name":"intlcal_from_date_time","modifiers":0,"children":[{"kind":128,"name":"$dateTime","modifiers":0,"doc":{"description":"A DateTime object or a string that can be passed to DateTime::__construct().","type":"mixed"}}],"doc":{"description":"Creates an IntlCalendar object either from a DateTime object or from a string from which a DateTime object can be built.","type":"IntlCalendar"}},{"kind":64,"name":"set_time_limit","modifiers":0,"children":[{"kind":128,"name":"$seconds","modifiers":0,"doc":{"description":"The maximum execution time, in seconds. If set to zero, no time limit is imposed.","type":"int"}}],"doc":{"description":"Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the max_execution_time value defined in the php.ini.","type":"bool"}},{"kind":64,"name":"array_uintersect","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The first array.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"The second array.","type":"array"}}],"doc":{"description":"Computes the intersection of arrays, compares data by a callback function.","type":"array"}},{"kind":64,"name":"mssql_execute","modifiers":0,"description":"","children":[{"kind":128,"name":"$stmt","modifiers":0,"doc":{"description":"Statement handle obtained with mssql_init().","type":"resource"}},{"kind":128,"name":"$skip_results","modifiers":0,"value":"false","doc":{"description":"Whenever to skip the results or not.","type":"bool"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"curl_getinfo","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}},{"kind":128,"name":"$opt","modifiers":0,"doc":{"description":"This may be one of the following constants: CURLINFO_EFFECTIVE_URL - Last effective URL CURLINFO_HTTP_CODE - Last received HTTP code CURLINFO_FILETIME - Remote time of the retrieved document, with the CURLOPT_FILETIME enabled; if -1 is returned the time of the document is unknown CURLINFO_TOTAL_TIME - Total transaction time in seconds for last transfer CURLINFO_NAMELOOKUP_TIME - Time in seconds until name resolving was complete CURLINFO_CONNECT_TIME - Time in seconds it took to establish the connection CURLINFO_PRETRANSFER_TIME - Time in seconds from start until just before file transfer begins CURLINFO_STARTTRANSFER_TIME - Time in seconds until the first byte is about to be transferred CURLINFO_REDIRECT_COUNT - Number of redirects, with the CURLOPT_FOLLOWLOCATION option enabled CURLINFO_REDIRECT_TIME - Time in seconds of all redirection steps before final transaction was started, with the CURLOPT_FOLLOWLOCATION option enabled CURLINFO_REDIRECT_URL - With the CURLOPT_FOLLOWLOCATION option disabled: redirect URL found in the last transaction, that should be requested manually next. With the CURLOPT_FOLLOWLOCATION option enabled: this is empty. The redirect URL in this case is available in CURLINFO_EFFECTIVE_URL CURLINFO_PRIMARY_IP - IP address of the most recent connection CURLINFO_PRIMARY_PORT - Destination port of the most recent connection CURLINFO_LOCAL_IP - Local (source) IP address of the most recent connection CURLINFO_LOCAL_PORT - Local (source) port of the most recent connection CURLINFO_SIZE_UPLOAD - Total number of bytes uploaded CURLINFO_SIZE_DOWNLOAD - Total number of bytes downloaded CURLINFO_SPEED_DOWNLOAD - Average download speed CURLINFO_SPEED_UPLOAD - Average upload speed CURLINFO_HEADER_SIZE - Total size of all headers received CURLINFO_HEADER_OUT - The request string sent. For this to work, add the CURLINFO_HEADER_OUT option to the handle by calling curl_setopt() CURLINFO_REQUEST_SIZE - Total size of issued requests, currently only for HTTP requests CURLINFO_SSL_VERIFYRESULT - Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER CURLINFO_CONTENT_LENGTH_DOWNLOAD - Content length of download, read from Content-Length: field CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of upload CURLINFO_CONTENT_TYPE - Content-Type: of the requested document. NULL indicates server did not send valid Content-Type: header CURLINFO_PRIVATE - Private data associated with this cURL handle, previously set with the CURLOPT_PRIVATE option of curl_setopt() CURLINFO_RESPONSE_CODE - The last response code CURLINFO_HTTP_CONNECTCODE - The CONNECT response code CURLINFO_HTTPAUTH_AVAIL - Bitmask indicating the authentication method(s) available according to the previous response CURLINFO_PROXYAUTH_AVAIL - Bitmask indicating the proxy authentication method(s) available according to the previous response CURLINFO_OS_ERRNO - Errno from a connect failure. The number is OS and system specific. CURLINFO_NUM_CONNECTS - Number of connections curl had to create to achieve the previous transfer CURLINFO_SSL_ENGINES - OpenSSL crypto-engines supported CURLINFO_COOKIELIST - All known cookies CURLINFO_FTP_ENTRY_PATH - Entry path in FTP server CURLINFO_APPCONNECT_TIME - Time in seconds it took from the start until the SSL/SSH connect/handshake to the remote host was completed CURLINFO_CERTINFO - TLS certificate chain CURLINFO_CONDITION_UNMET - Info on unmet time conditional CURLINFO_RTSP_CLIENT_CSEQ - Next RTSP client CSeq CURLINFO_RTSP_CSEQ_RECV - Recently received CSeq CURLINFO_RTSP_SERVER_CSEQ - Next RTSP server CSeq CURLINFO_RTSP_SESSION_ID - RTSP session ID","type":"int"}}],"doc":{"description":"Gets information about the last transfer.","type":"mixed"}},{"kind":64,"name":"intlcal_get_minimum","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Gets the global minimum for a field, in this specific calendar. This value is smaller or equal to that returned by IntlCalendar::getActualMinimum(), which is in its turn smaller or equal to that returned by IntlCalendar::getGreatestMinimum(). For the Gregorian calendar, these three functions always return the same value (for each field).","type":"int"}},{"kind":64,"name":"ldap_control_paged_result","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$pagesize","modifiers":0,"doc":{"description":"The number of entries by page.","type":"int"}},{"kind":128,"name":"$iscritical","modifiers":0,"value":"false","doc":{"description":"Indicates whether the pagination is critical or not. If true and if the server doesn't support pagination, the search will return no result.","type":"bool"}},{"kind":128,"name":"$cookie","modifiers":0,"value":"\"\"","doc":{"description":"An opaque structure sent by the server (ldap_control_paged_result_response()).","type":"string"}}],"doc":{"description":"Enable LDAP pagination by sending the pagination control (page size, cookie...).","type":"bool"}},{"kind":64,"name":"pg_field_num","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$field_name","modifiers":0,"doc":{"description":"The name of the field.","type":"string"}}],"doc":{"description":"pg_field_num() will return the number of the field number that corresponds to the field_name in the given PostgreSQL result resource.","type":"int"}},{"kind":64,"name":"fbsql_create_clob","modifiers":0,"children":[{"kind":128,"name":"$clob_data","modifiers":0,"doc":{"description":"The CLOB data.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Creates a CLOB from the given data.","type":"string"}},{"kind":64,"name":"http_build_query","modifiers":0,"children":[{"kind":128,"name":"$query_data","modifiers":0,"doc":{"description":"May be an array or object containing properties. If query_data is an array, it may be a simple one-dimensional structure, or an array of arrays (which in turn may contain other arrays). If query_data is an object, then only public properties will be incorporated into the result.","type":"mixed"}},{"kind":128,"name":"$numeric_prefix","modifiers":0,"doc":{"description":"If numeric indices are used in the base array and this parameter is provided, it will be prepended to the numeric index for elements in the base array only. This is meant to allow for legal variable names when the data is decoded by PHP or another CGI application later on.","type":"string"}},{"kind":128,"name":"$arg_separator","modifiers":0,"doc":{"description":"arg_separator.output is used to separate arguments but may be overridden by specifying this parameter.","type":"string"}},{"kind":128,"name":"$enc_type","modifiers":0,"value":"PHP_QUERY_RFC1738","doc":{"description":"By default, PHP_QUERY_RFC1738. If enc_type is PHP_QUERY_RFC1738, then encoding is performed per » RFC 1738 and the application/x-www-form-urlencoded media type, which implies that spaces are encoded as plus (+) signs. If enc_type is PHP_QUERY_RFC3986, then encoding is performed according to » RFC 3986, and spaces will be percent encoded (%20).","type":"int"}}],"doc":{"description":"Generates a URL-encoded query string from the associative (or indexed) array provided.","type":"string"}},{"kind":64,"name":"imagesetthickness","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$thickness","modifiers":0,"doc":{"description":"Thickness, in pixels.","type":"int"}}],"doc":{"description":"imagesetthickness() sets the thickness of the lines drawn when drawing rectangles, polygons, arcs etc. to thickness pixels.","type":"bool"}},{"kind":64,"name":"odbc_setoption","modifiers":0,"children":[{"kind":128,"name":"$id","modifiers":0,"doc":{"description":"Is a connection id or result id on which to change the settings. For SQLSetConnectOption(), this is a connection id. For SQLSetStmtOption(), this is a result id.","type":"resource"}},{"kind":128,"name":"$function","modifiers":0,"doc":{"description":"Is the ODBC function to use. The value should be 1 for SQLSetConnectOption() and 2 for SQLSetStmtOption().","type":"int"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"The option to set.","type":"int"}},{"kind":128,"name":"$param","modifiers":0,"doc":{"description":"The value for the given option.","type":"int"}}],"doc":{"description":"This function allows fiddling with the ODBC options for a particular connection or query result. It was written to help find work around to problems in quirky ODBC drivers. You should probably only use this function if you are an ODBC programmer and understand the effects the various options will have. You will certainly need a good ODBC reference to explain all the different options and values that can be used. Different driver versions support different options.","type":"bool"}},{"kind":64,"name":"array_merge_recursive","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"Initial array to merge.","type":"array"}}],"doc":{"description":"array_merge_recursive() merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.","type":"array"}},{"kind":64,"name":"ibase_blob_create","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"An InterBase link identifier. If omitted, the last opened link is assumed.","type":"resource"}}],"doc":{"description":"ibase_blob_create() creates a new BLOB for filling with data.","type":"resource"}},{"kind":64,"name":"imagecropauto","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$mode","modifiers":0,"value":"-1","doc":{"description":"One of the following constants: IMG_CROP_DEFAULT Attempts to use IMG_CROP_TRANSPARENT and if it fails it falls back to IMG_CROP_SIDES. IMG_CROP_TRANSPARENT Crops out a transparent background. IMG_CROP_BLACK Crops out a black background. IMG_CROP_WHITE Crops out a white background. IMG_CROP_SIDES Uses the 4 corners of the image to attempt to detect the background to crop. IMG_CROP_THRESHOLD Crops an image using the given threshold and color.","type":"int"}},{"kind":128,"name":"$threshold","modifiers":0,"value":".5","doc":{"description":"Specifies the tolerance in percent to be used while comparing the image color and the color to crop. The method used to calculate the color difference is based on the color distance in the RGB(a) cube. Used only in IMG_CROP_THRESHOLD mode.","type":"float"}},{"kind":128,"name":"$color","modifiers":0,"value":"-1","doc":{"description":"Either an RGB color value or a palette index. Used only in IMG_CROP_THRESHOLD mode.","type":"int"}}],"doc":{"description":"Automatically crops an image according to the given mode.","type":"resource"}},{"kind":64,"name":"mysqli_debug","modifiers":0,"children":[{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"A string representing the debugging operation to perform","type":"string"}}],"doc":{"description":"Performs debugging operations using the Fred Fish debugging library.","type":"bool"}},{"kind":64,"name":"mb_parse_str","modifiers":0,"children":[{"kind":128,"name":"$encoded_string","modifiers":0,"doc":{"description":"The URL encoded data.","type":"string"}},{"kind":128,"name":"$result","modifiers":1024,"doc":{"description":"An array containing decoded and character encoded converted values.","type":"array"}}],"doc":{"description":"Parses GET/POST/COOKIE data and sets global variables. Since PHP does not provide raw POST/COOKIE data, it can only be used for GET data for now. It parses URL encoded data, detects encoding, converts coding to internal encoding and set values to the result array or global variables.","type":"bool"}},{"kind":64,"name":"posix_setgid","modifiers":0,"children":[{"kind":128,"name":"$gid","modifiers":0,"doc":{"description":"The group id.","type":"int"}}],"doc":{"description":"Set the real group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function. The appropriate order of function calls is posix_setgid() first, posix_setuid() last.","type":"bool"}},{"kind":64,"name":"timezone_name_get","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The DateTimeZone for which to get a name.","type":"DateTimeZone"}}],"doc":{"description":"Returns the name of the timezone.","type":"string"}},{"kind":64,"name":"msql_fetch_row","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}}],"doc":{"description":"msql_fetch_row() fetches one row of data from the result associated with the specified query identifier. The row is returned as an array. Each result column is stored in an array offset, starting at offset 0.","type":"array"}},{"kind":64,"name":"openssl_x509_read","modifiers":0,"children":[{"kind":128,"name":"$x509certdata","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"openssl_x509_read() parses the certificate supplied by x509certdata and returns a resource identifier for it.","type":"resource"}},{"kind":64,"name":"stat","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Gathers the statistics of the file named by filename. If filename is a symbolic link, statistics are from the file itself, not the symlink.","type":"array"}},{"kind":64,"name":"openssl_csr_export","modifiers":0,"children":[{"kind":128,"name":"$csr","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$out","modifiers":1024,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$notext","modifiers":0,"value":"true","doc":{"description":"The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. The default value of notext is TRUE.","type":"bool"}}],"doc":{"description":"openssl_csr_export() takes the Certificate Signing Request represented by csr and stores it as ascii-armoured text into out, which is passed by reference.","type":"bool"}},{"kind":64,"name":"mhash_get_block_size","modifiers":0,"children":[{"kind":128,"name":"$hash","modifiers":0,"doc":{"description":"The hash ID. One of the MHASH_hashname constants.","type":"int"}}],"doc":{"description":"Gets the size of a block of the specified hash.","type":"int"}},{"kind":64,"name":"gmp_popcount","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Get the population count.","type":"int"}},{"kind":64,"name":"readlink","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"The symbolic link path.","type":"string"}}],"doc":{"description":"readlink() does the same as the readlink C function.","type":"string"}},{"kind":64,"name":"is_subclass_of","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"A class name or an object instance. No error is generated if the class does not exist.","type":"mixed"}},{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"The class name","type":"string"}},{"kind":128,"name":"$allow_string","modifiers":0,"value":"TRUE","doc":{"description":"If this parameter set to false, string class name as object is not allowed. This also prevents from calling autoloader if the class doesn't exist.","type":"bool"}}],"doc":{"description":"Checks if the given object has the class class_name as one of its parents or implements it.","type":"bool"}},{"kind":64,"name":"ldap_set_option","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"The parameter option can be one of: Option Type Available since LDAP_OPT_DEREF integer   LDAP_OPT_SIZELIMIT integer   LDAP_OPT_TIMELIMIT integer   LDAP_OPT_NETWORK_TIMEOUT integer PHP 5.3.0 LDAP_OPT_PROTOCOL_VERSION integer   LDAP_OPT_ERROR_NUMBER integer   LDAP_OPT_REFERRALS bool   LDAP_OPT_RESTART bool   LDAP_OPT_HOST_NAME string   LDAP_OPT_ERROR_STRING string   LDAP_OPT_DIAGNOSTIC_MESSAGE string   LDAP_OPT_MATCHED_DN string   LDAP_OPT_SERVER_CONTROLS array   LDAP_OPT_CLIENT_CONTROLS array   LDAP_OPT_X_KEEPALIVE_IDLE int   LDAP_OPT_X_KEEPALIVE_PROBES int   LDAP_OPT_X_KEEPALIVE_INTERVAL int   LDAP_OPT_X_TLS_CACERTDIR string   LDAP_OPT_X_TLS_CACERTFILE string   LDAP_OPT_X_TLS_CERTFILE string   LDAP_OPT_X_TLS_CIPHER_SUITE string   LDAP_OPT_X_TLS_CRLCHECK integer   LDAP_OPT_X_TLS_CRLFILE string   LDAP_OPT_X_TLS_DHFILE string   LDAP_OPT_X_TLS_KEYILE string   LDAP_OPT_X_TLS_PROTOCOL_MIN integer   LDAP_OPT_X_TLS_RANDOM_FILE string   LDAP_OPT_X_TLS_REQUIRE_CERT integer PHP 7.1.0 LDAP_OPT_SERVER_CONTROLS and LDAP_OPT_CLIENT_CONTROLS require a list of controls, this means that the value must be an array of controls. A control consists of an oid identifying the control, an optional value, and an optional flag for criticality. In PHP a control is given by an array containing an element with the key oid and string value, and two optional elements. The optional elements are key value with string value and key iscritical with boolean value. iscritical defaults to FALSE if not supplied. See » draft-ietf-ldapext-ldap-c-api-xx.txt for details. See also the second example below.","type":"int"}},{"kind":128,"name":"$newval","modifiers":0,"doc":{"description":"The new value for the specified option.","type":"mixed"}}],"doc":{"description":"Sets the value of the specified option to be newval.","type":"bool"}},{"kind":64,"name":"fbsql_fetch_array","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}},{"kind":128,"name":"$result_type","modifiers":0,"doc":{"description":"A constant and can take the following values: FBSQL_ASSOC, FBSQL_NUM, or FBSQL_BOTH. When using FBSQL_BOTH, in addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.","type":"int"}}],"doc":{"description":"fbsql_fetch_array() is a combination of fbsql_fetch_row() and fbsql_fetch_assoc().","type":"array"}},{"kind":64,"name":"gmp_rootrem","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$nth","modifiers":0,"doc":{"description":"The positive root to take of a.","type":"int"}}],"doc":{"description":"Takes the nth root of a and returns the integer component and remainder of the result.","type":"array"}},{"kind":64,"name":"openssl_verify","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The string of data used to generate the signature previously","type":"string"}},{"kind":128,"name":"$signature","modifiers":0,"doc":{"description":"A raw binary string, generated by openssl_sign() or similar means","type":"string"}},{"kind":128,"name":"$pub_key_id","modifiers":0,"doc":{"description":"resource - a key, returned by openssl_get_publickey() string - a PEM formatted key, example, \"-----BEGIN PUBLIC KEY----- MIIBCgK...\"","type":"mixed"}},{"kind":128,"name":"$signature_alg","modifiers":0,"value":"OPENSSL_ALGO_SHA1","doc":{"description":"int - one of these Signature Algorithms. string - a valid string returned by openssl_get_md_methods() example, \"sha1WithRSAEncryption\" or \"sha512\".","type":"mixed"}}],"doc":{"description":"openssl_verify() verifies that the signature is correct for the specified data using the public key associated with pub_key_id. This must be the public key corresponding to the private key used for signing.","type":"int"}},{"kind":64,"name":"gzeof","modifiers":0,"children":[{"kind":128,"name":"$zp","modifiers":0,"doc":{"description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().","type":"resource"}}],"doc":{"description":"Tests the given GZ file pointer for EOF.","type":"int"}},{"kind":64,"name":"gmp_strval","modifiers":0,"children":[{"kind":128,"name":"$gmpnumber","modifiers":0,"doc":{"description":"The GMP number that will be converted to a string. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$base","modifiers":0,"value":"10","doc":{"description":"The base of the returned number. The default base is 10. Allowed values for the base are from 2 to 62 and -2 to -36.","type":"int"}}],"doc":{"description":"Convert GMP number to string representation in base base. The default base is 10.","type":"string"}},{"kind":64,"name":"xmlwriter_start_element_ns","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The namespace prefix.","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The element name.","type":"string"}},{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}}],"doc":{"description":"Starts a namespaced element.","type":"bool"}},{"kind":64,"name":"socket_recvmsg","modifiers":0,"description":"","children":[{"kind":128,"name":"$socket","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$message","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"fbsql_read_blob","modifiers":0,"children":[{"kind":128,"name":"$blob_handle","modifiers":0,"doc":{"description":"A BLOB handle, returned by fbsql_create_blob().","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Reads BLOB data from the database.","type":"string"}},{"kind":64,"name":"variant_not","modifiers":0,"children":[{"kind":128,"name":"$variant","modifiers":0,"doc":{"description":"The variant.","type":"mixed"}}],"doc":{"description":"Performs bitwise not negation on variant and returns the result.","type":"mixed"}},{"kind":64,"name":"msql_list_fields","modifiers":0,"children":[{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The name of the database.","type":"string"}},{"kind":128,"name":"$tablename","modifiers":0,"doc":{"description":"The name of the table.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"The mSQL connection. If not specified, the last link opened by msql_connect() is assumed. If no such link is found, the function will try to establish a link as if msql_connect() was called, and use it.","type":"resource"}}],"doc":{"description":"msql_list_fields() returns information about the given table.","type":"resource"}},{"kind":64,"name":"natsort","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}}],"doc":{"description":"This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a \"natural ordering\". An example of the difference between this algorithm and the regular computer string sorting algorithms (used in sort()) can be seen in the example below.","type":"bool"}},{"kind":64,"name":"xmlwriter_end_dtd_attlist","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Ends the current DTD attribute list.","type":"bool"}},{"kind":64,"name":"imageresolution","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$res_x","modifiers":0,"doc":{"description":"The horizontal resolution in DPI.","type":"int"}},{"kind":128,"name":"$res_y","modifiers":0,"doc":{"description":"The vertical resolution in DPI.","type":"int"}}],"doc":{"description":"imageresolution() allows to set and get the resolution of an image in DPI (dots per inch). If none of the optional parameters is given, the current resolution is returned as indexed array. If only res_x is given, the horizontal and vertical resolution are set to this value. If both optional parameters are given, the horizontal and vertical resolution are set to these values, respectively.","type":"mixed"}},{"kind":64,"name":"gmp_random","modifiers":0,"description":"","children":[{"kind":128,"name":"$limiter","modifiers":0,"value":"20","doc":{"description":"The limiter. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"int"}}],"doc":{"type":"GMP"}},{"kind":64,"name":"wddx_packet_start","modifiers":0,"children":[{"kind":128,"name":"$comment","modifiers":0,"doc":{"description":"An optional comment string.","type":"string"}}],"doc":{"description":"Start a new WDDX packet for incremental addition of variables. It automatically creates a structure definition inside the packet to contain the variables.","type":"resource"}},{"kind":64,"name":"xmlwriter_write_comment","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The contents of the comment.","type":"string"}}],"doc":{"description":"Writes a full comment.","type":"bool"}},{"kind":64,"name":"pcntl_alarm","modifiers":0,"children":[{"kind":128,"name":"$seconds","modifiers":0,"doc":{"description":"The number of seconds to wait. If seconds is zero, no new alarm is created.","type":"int"}}],"doc":{"description":"Creates a timer that will send a SIGALRM signal to the process after the given number of seconds. Any call to pcntl_alarm() will cancel any previously set alarm.","type":"int"}},{"kind":64,"name":"gzuncompress","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data compressed by gzcompress().","type":"string"}},{"kind":128,"name":"$length","modifiers":0,"value":"0","doc":{"description":"The maximum length of data to decode.","type":"int"}}],"doc":{"description":"This function uncompress a compressed string.","type":"string"}},{"kind":64,"name":"password_hash","modifiers":0,"children":[{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The user's password. Caution Using the PASSWORD_BCRYPT as the algorithm, will result in the password parameter being truncated to a maximum length of 72 characters.","type":"string"}},{"kind":128,"name":"$algo","modifiers":0,"doc":{"description":"A password algorithm constant denoting the algorithm to use when hashing the password.","type":"integer"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"An associative array containing options. See the password algorithm constants for documentation on the supported options for each algorithm. If omitted, a random salt will be created and the default cost will be used.","type":"array"}}],"doc":{"description":"password_hash() creates a new password hash using a strong one-way hashing algorithm. password_hash() is compatible with crypt(). Therefore, password hashes created by crypt() can be used with password_hash().","type":"string"}},{"kind":64,"name":"array","modifiers":0,"children":[],"doc":{"description":"Creates an array. Read the section on the array type for more information on what an array is.","type":"array"}},{"kind":64,"name":"convert_uudecode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The uuencoded data.","type":"string"}}],"doc":{"description":"convert_uudecode() decodes a uuencoded string.","type":"string"}},{"kind":64,"name":"xmlrpc_server_register_introspection_callback","modifiers":0,"description":"","children":[{"kind":128,"name":"$server","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$function","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"nl2br","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$is_xhtml","modifiers":0,"value":"true","doc":{"description":"Whether to use XHTML compatible line breaks or not.","type":"bool"}}],"doc":{"description":"Returns string with <br /> or <br> inserted before all newlines (\\r\\n, \\n\\r, \\n and \\r).","type":"string"}},{"kind":64,"name":"preg_replace_callback","modifiers":0,"children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The pattern to search for. It can be either a string or an array with strings.","type":"mixed"}},{"kind":128,"name":"$callback","modifiers":0,"doc":{"description":"A callback that will be called and passed an array of matched elements in the subject string. The callback should return the replacement string. This is the callback signature: string handler ( array $matches ) You'll often need the callback function for a preg_replace_callback() in just one place. In this case you can use an anonymous function to declare the callback within the call to preg_replace_callback(). By doing it this way you have all information for the call in one place and do not clutter the function namespace with a callback function's name not used anywhere else. Example #1 preg_replace_callback() and anonymous function <?php/* a unix-style command line filter to convert uppercase * letters at the beginning of paragraphs to lowercase */$fp = fopen(\"php://stdin\", \"r\") or die(\"can't read stdin\");while (!feof($fp)) {    $line = fgets($fp);    $line = preg_replace_callback(        '|<p>\\s*\\w|',        function ($matches) {            return strtolower($matches[0]);        },        $line    );    echo $line;}fclose($fp);?>","type":"callable"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The string or an array with strings to search and replace.","type":"mixed"}},{"kind":128,"name":"$limit","modifiers":0,"value":"-1","doc":{"description":"The maximum possible replacements for each pattern in each subject string. Defaults to -1 (no limit).","type":"int"}},{"kind":128,"name":"$count","modifiers":1024,"doc":{"description":"If specified, this variable will be filled with the number of replacements done.","type":"int"}}],"doc":{"description":"The behavior of this function is almost identical to preg_replace(), except for the fact that instead of replacement parameter, one should specify a callback.","type":"mixed"}},{"kind":64,"name":"is_int","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable being evaluated.","type":"mixed"}}],"doc":{"description":"Finds whether the type of the given variable is integer.","type":"bool"}},{"kind":64,"name":"unserialize","modifiers":0,"description":"","children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The serialized string. If the variable being unserialized is an object, after successfully reconstructing the object PHP will automatically attempt to call the __wakeup() member function (if it exists). Note: unserialize_callback_func directive It's possible to set a callback-function which will be called, if an undefined class should be instantiated during unserializing. (to prevent getting an incomplete object \"__PHP_Incomplete_Class\".) Use your php.ini, ini_set() or .htaccess to define 'unserialize_callback_func'. Everytime an undefined class should be instantiated, it'll be called. To disable this feature just empty this setting.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"doc":{"description":"Any options to be provided to unserialize(), as an associative array. Valid options Name Type Description allowed_classes mixed Either an array of class names which should be accepted, FALSE to accept no classes, or TRUE to accept all classes. If this option is defined and unserialize() encounters an object of a class that isn't to be accepted, then the object will be instantiated as __PHP_Incomplete_Class instead. Omitting this option is the same as defining it as TRUE: PHP will attempt to instantiate objects of any class.","type":"array"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"imagecolorallocate","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$red","modifiers":0,"doc":{"description":"Value of red component.","type":"int"}},{"kind":128,"name":"$green","modifiers":0,"doc":{"description":"Value of green component.","type":"int"}},{"kind":128,"name":"$blue","modifiers":0,"doc":{"description":"Value of blue component.","type":"int"}}],"doc":{"description":"Returns a color identifier representing the color composed of the given RGB components.","type":"int"}},{"kind":64,"name":"intlcal_get_skipped_wall_time_option","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}}],"doc":{"description":"Gets the current strategy for dealing with wall times that are skipped whenever the clock is forwarded during dailight saving time start transitions. The default value is IntlCalendar::WALLTIME_LAST.","type":"int"}},{"kind":64,"name":"filter_var_array","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"An array with string keys containing the data to filter.","type":"array"}},{"kind":128,"name":"$definition","modifiers":0,"doc":{"description":"An array defining the arguments. A valid key is a string containing a variable name and a valid value is either a filter type, or an array optionally specifying the filter, flags and options. If the value is an array, valid keys are filter which specifies the filter type, flags which specifies any flags that apply to the filter, and options which specifies any options that apply to the filter. See the example below for a better understanding. This parameter can be also an integer holding a filter constant. Then all values in the input array are filtered by this filter.","type":"mixed"}},{"kind":128,"name":"$add_empty","modifiers":0,"value":"true","doc":{"description":"Add missing keys as NULL to the return value.","type":"bool"}}],"doc":{"description":"This function is useful for retrieving many values without repetitively calling filter_var().","type":"mixed"}},{"kind":64,"name":"openssl_pkey_free","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"Resource holding the key.","type":"resource"}}],"doc":{"description":"This function frees a private key created by openssl_pkey_new().","type":"void"}},{"kind":64,"name":"stream_socket_accept","modifiers":0,"children":[{"kind":128,"name":"$server_socket","modifiers":0,"doc":{"description":"The server socket to accept a connection from.","type":"resource"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"ini_get(\"default_socket_timeout\")","doc":{"description":"Override the default socket accept timeout. Time should be given in seconds.","type":"float"}},{"kind":128,"name":"$peername","modifiers":1024,"doc":{"description":"Will be set to the name (address) of the client which connected, if included and available from the selected transport. Note: Can also be determined later using stream_socket_get_name().","type":"string"}}],"doc":{"description":"Accept a connection on a socket previously created by stream_socket_server().","type":"resource"}},{"kind":64,"name":"each","modifiers":0,"description":"","children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}}],"doc":{"type":"array"}},{"kind":64,"name":"apache_response_headers","modifiers":0,"children":[],"doc":{"description":"Fetch all HTTP response headers.","type":"array"}},{"kind":64,"name":"pspell_config_repl","modifiers":0,"children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$file","modifiers":0,"doc":{"description":"The file should be writable by whoever PHP runs as (e.g. nobody).","type":"string"}}],"doc":{"description":"Set a file that contains replacement pairs.","type":"bool"}},{"kind":64,"name":"soundex","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"description":"Calculates the soundex key of str.","type":"string"}},{"kind":64,"name":"idn_to_ascii","modifiers":0,"children":[{"kind":128,"name":"$domain","modifiers":0,"doc":{"description":"The domain to convert, which must be UTF-8 encoded.","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Conversion options - combination of IDNA_* constants (except IDNA_ERROR_* constants).","type":"int"}},{"kind":128,"name":"$variant","modifiers":0,"value":"INTL_IDNA_VARIANT_2003","doc":{"description":"Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or INTL_IDNA_VARIANT_UTS46 for UTS #46.","type":"int"}},{"kind":128,"name":"$idna_info","modifiers":1024,"doc":{"description":"This parameter can be used only if INTL_IDNA_VARIANT_UTS46 was used for variant. In that case, it will be filled with an array with the keys 'result', the possibly illegal result of the transformation, 'isTransitionalDifferent', a boolean indicating whether the usage of the transitional mechanisms of UTS #46 either has or would have changed the result and 'errors', which is an int representing a bitset of the error constants IDNA_ERROR_*.","type":"array"}}],"doc":{"description":"This function converts a Unicode domain name to an IDNA ASCII-compatible format.","type":"string"}},{"kind":64,"name":"datefmt_format","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The date formatter resource.","type":"IntlDateFormatter"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"Value to format. This may be a DateTime object, an IntlCalendar object, a numeric type representing a (possibly fractional) number of seconds since epoch or an array in the format output by localtime(). If a DateTime or an IntlCalendar object is passed, its timezone is not considered. The object will be formatted using the formaterʼs configured timezone. If one wants to use the timezone of the object to be formatted, IntlDateFormatter::setTimeZone() must be called before with the objectʼs timezone. Alternatively, the static function IntlDateFormatter::formatObject() may be used instead.","type":"mixed"}}],"doc":{"description":"Formats the time value as a string.","type":"string"}},{"kind":64,"name":"ibase_blob_echo","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An InterBase link identifier. If omitted, the last opened link is assumed.","type":"resource"}},{"kind":128,"name":"$blob_id","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"This function opens a BLOB for reading and sends its contents directly to standard output (the browser, in most cases).","type":"bool"}},{"kind":64,"name":"pcntl_get_last_error","modifiers":0,"description":"","children":[],"doc":{"type":"int"}},{"kind":64,"name":"imap_mail","modifiers":0,"children":[{"kind":128,"name":"$to","modifiers":0,"doc":{"description":"The receiver","type":"string"}},{"kind":128,"name":"$subject","modifiers":0,"doc":{"description":"The mail subject","type":"string"}},{"kind":128,"name":"$message","modifiers":0,"doc":{"description":"The mail body, see imap_mail_compose()","type":"string"}},{"kind":128,"name":"$additional_headers","modifiers":0,"value":"NULL","doc":{"description":"As string with additional headers to be set on the mail","type":"string"}},{"kind":128,"name":"$cc","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}},{"kind":128,"name":"$bcc","modifiers":0,"value":"NULL","doc":{"description":"The receivers specified in bcc will get the mail, but are excluded from the headers.","type":"string"}},{"kind":128,"name":"$rpath","modifiers":0,"value":"NULL","doc":{"description":"Use this parameter to specify return path upon mail delivery failure. This is useful when using PHP as a mail client for multiple users.","type":"string"}}],"doc":{"description":"This function allows sending of emails with correct handling of Cc and Bcc receivers.","type":"bool"}},{"kind":64,"name":"proc_close","modifiers":0,"children":[{"kind":128,"name":"$process","modifiers":0,"doc":{"description":"The proc_open() resource that will be closed.","type":"resource"}}],"doc":{"description":"proc_close() is similar to pclose() except that it only works on processes opened by proc_open(). proc_close() waits for the process to terminate, and returns its exit code. If you have open pipes to that process, you should fclose() them prior to calling this function in order to avoid a deadlock - the child process may not be able to exit while the pipes are open.","type":"int"}},{"kind":64,"name":"ldap_unbind","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}}],"doc":{"description":"Unbinds from the LDAP directory.","type":"bool"}},{"kind":64,"name":"dba_key_split","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The key in string representation.","type":"mixed"}}],"doc":{"description":"dba_key_split() splits a key (string representation) into an array representation.","type":"mixed"}},{"kind":64,"name":"openssl_get_md_methods","modifiers":0,"children":[{"kind":128,"name":"$aliases","modifiers":0,"value":"false","doc":{"description":"Set to TRUE if digest aliases should be included within the returned array.","type":"bool"}}],"doc":{"description":"Gets a list of available digest methods.","type":"array"}},{"kind":64,"name":"mysqli_dump_debug_info","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}}],"doc":{"description":"This function is designed to be executed by an user with the SUPER privilege and is used to dump debugging information into the log for the MySQL Server relating to the connection.","type":"bool"}},{"kind":64,"name":"set_include_path","modifiers":0,"children":[{"kind":128,"name":"$new_include_path","modifiers":0,"doc":{"description":"The new value for the include_path","type":"string"}}],"doc":{"description":"Sets the include_path configuration option for the duration of the script.","type":"string"}},{"kind":64,"name":"socket_get_option","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create() or socket_accept().","type":"resource"}},{"kind":128,"name":"$level","modifiers":0,"doc":{"description":"The level parameter specifies the protocol level at which the option resides. For example, to retrieve options at the socket level, a level parameter of SOL_SOCKET would be used. Other levels, such as TCP, can be used by specifying the protocol number of that level. Protocol numbers can be found by using the getprotobyname() function.","type":"int"}},{"kind":128,"name":"$optname","modifiers":0,"doc":{"description":"Available Socket Options Option Description Type SO_DEBUG Reports whether debugging information is being recorded. int SO_BROADCAST Reports whether transmission of broadcast messages is supported. int SO_REUSEADDR Reports whether local addresses can be reused. int SO_KEEPALIVE Reports whether connections are kept active with periodic transmission of messages. If the connected socket fails to respond to these messages, the connection is broken and processes writing to that socket are notified with a SIGPIPE signal. int SO_LINGER Reports whether the socket lingers on socket_close() if data is present. By default, when the socket is closed, it attempts to send all unsent data. In the case of a connection-oriented socket, socket_close() will wait for its peer to acknowledge the data. If l_onoff is non-zero and l_linger is zero, all the unsent data will be discarded and RST (reset) is sent to the peer in the case of a connection-oriented socket. On the other hand, if l_onoff is non-zero and l_linger is non-zero, socket_close() will block until all the data is sent or the time specified in l_linger elapses. If the socket is non-blocking, socket_close() will fail and return an error. array. The array will contain two keys: l_onoff and l_linger. SO_OOBINLINE Reports whether the socket leaves out-of-band data inline. int SO_SNDBUF Reports the size of the send buffer. int SO_RCVBUF Reports the size of the receive buffer. int SO_ERROR Reports information about error status and clears it. int (cannot be set by socket_set_option()) SO_TYPE Reports the socket type (e.g. SOCK_STREAM). int (cannot be set by socket_set_option()) SO_DONTROUTE Reports whether outgoing messages bypass the standard routing facilities. int SO_RCVLOWAT Reports the minimum number of bytes to process for socket input operations. int SO_RCVTIMEO Reports the timeout value for input operations. array. The array will contain two keys: sec which is the seconds part on the timeout value and usec which is the microsecond part of the timeout value. SO_SNDTIMEO Reports the timeout value specifying the amount of time that an output function blocks because flow control prevents data from being sent. array. The array will contain two keys: sec which is the seconds part on the timeout value and usec which is the microsecond part of the timeout value. SO_SNDLOWAT Reports the minimum number of bytes to process for socket output operations. int TCP_NODELAY Reports whether the Nagle TCP algorithm is disabled. int MCAST_JOIN_GROUP Joins a multicast group. (added in PHP 5.4) array with keys \"group\", specifying a string with an IPv4 or IPv6 multicast address and \"interface\", specifying either an interface number (type int) or a string with the interface name, like \"eth0\". 0 can be specified to indicate the interface should be selected using routing rules. (can only be used in socket_set_option()) MCAST_LEAVE_GROUP Leaves a multicast group. (added in PHP 5.4) array. See MCAST_JOIN_GROUP for more information. (can only be used in socket_set_option()) MCAST_BLOCK_SOURCE Blocks packets arriving from a specific source to a specific multicast group, which must have been previously joined. (added in PHP 5.4) array with the same keys as MCAST_JOIN_GROUP, plus one extra key, source, which maps to a string specifying an IPv4 or IPv6 address of the source to be blocked. (can only be used in socket_set_option()) MCAST_UNBLOCK_SOURCE Unblocks (start receiving again) packets arriving from a specific source address to a specific multicast group, which must have been previously joined. (added in PHP 5.4) array with the same format as MCAST_BLOCK_SOURCE. (can only be used in socket_set_option()) MCAST_JOIN_SOURCE_GROUP Receive packets destined to a specific multicast group whose source address matches a specific value. (added in PHP 5.4) array with the same format as MCAST_BLOCK_SOURCE. (can only be used in socket_set_option()) MCAST_LEAVE_SOURCE_GROUP Stop receiving packets destined to a specific multicast group whose soure address matches a specific value. (added in PHP 5.4) array with the same format as MCAST_BLOCK_SOURCE. (can only be used in socket_set_option()) IP_MULTICAST_IF The outgoing interface for IPv4 multicast packets. (added in PHP 5.4) Either int specifying the interface number or a string with an interface name, like eth0. The value 0 can be used to indicate the routing table is to used in the interface selection. The function socket_get_option() returns an interface index. Note that, unlike the C API, this option does NOT take an IP address. This eliminates the interface difference between IP_MULTICAST_IF and IPV6_MULTICAST_IF. IPV6_MULTICAST_IF The outgoing interface for IPv6 multicast packets. (added in PHP 5.4) The same as IP_MULTICAST_IF. IP_MULTICAST_LOOP The multicast loopback policy for IPv4 packets, which determines whether multicast packets sent by this socket also reach receivers in the same host that have joined the same multicast group on the outgoing interface used by this socket. This is the case by default. (added in PHP 5.4) int (either 0 or 1). For socket_set_option() any value will be accepted and will be converted to a boolean following the usual PHP rules. IPV6_MULTICAST_LOOP Analogous to IP_MULTICAST_LOOP, but for IPv6. (added in PHP 5.4) int. See IP_MULTICAST_LOOP. IP_MULTICAST_TTL The time-to-live of outgoing IPv4 multicast packets. This should be a value between 0 (don't leave the interface) and 255. The default value is 1 (only the local network is reached). (added in PHP 5.4) int between 0 and 255. IPV6_MULTICAST_HOPS Analogous to IP_MULTICAST_TTL, but for IPv6 packets. The value -1 is also accepted, meaning the route default should be used. (added in PHP 5.4) int between -1 and 255.","type":"int"}}],"doc":{"description":"The socket_get_option() function retrieves the value for the option specified by the optname parameter for the specified socket.","type":"mixed"}},{"kind":64,"name":"imap_set_quota","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$quota_root","modifiers":0,"doc":{"description":"The mailbox to have a quota set. This should follow the IMAP standard format for a mailbox: user.name.","type":"string"}},{"kind":128,"name":"$quota_limit","modifiers":0,"doc":{"description":"The maximum size (in KB) for the quota_root","type":"int"}}],"doc":{"description":"Sets an upper limit quota on a per mailbox basis.","type":"bool"}},{"kind":64,"name":"fopen","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"If filename is of the form \"scheme://...\", it is assumed to be a URL and PHP will search for a protocol handler (also known as a wrapper) for that scheme. If no wrappers for that protocol are registered, PHP will emit a notice to help you track potential problems in your script and then continue as though filename specifies a regular file. If PHP has decided that filename specifies a local file, then it will try to open a stream on that file. The file must be accessible to PHP, so you need to ensure that the file access permissions allow this access. If you have enabled safe mode or open_basedir further restrictions may apply. If PHP has decided that filename specifies a registered protocol, and that protocol is registered as a network URL, PHP will check to make sure that allow_url_fopen is enabled. If it is switched off, PHP will emit a warning and the fopen call will fail. Note: The list of supported protocols can be found in Supported Protocols and Wrappers. Some protocols (also referred to as wrappers) support context and/or php.ini options. Refer to the specific page for the protocol in use for a list of options which can be set. (e.g. php.ini value user_agent used by the http wrapper). On the Windows platform, be careful to escape any backslashes used in the path to the file, or use forward slashes. <?php$handle = fopen(\"c:\\\\folder\\\\resource.txt\", \"r\");?>","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The mode parameter specifies the type of access you require to the stream. It may be any of the following: A list of possible modes for fopen() using mode mode Description 'r' Open for reading only; place the file pointer at the beginning of the file. 'r+' Open for reading and writing; place the file pointer at the beginning of the file. 'w' Open for writing only; place the file pointer at the beginning of the file and truncate the file to zero length. If the file does not exist, attempt to create it. 'w+' Open for reading and writing; place the file pointer at the beginning of the file and truncate the file to zero length. If the file does not exist, attempt to create it. 'a' Open for writing only; place the file pointer at the end of the file. If the file does not exist, attempt to create it. In this mode, fseek() has no effect, writes are always appended. 'a+' Open for reading and writing; place the file pointer at the end of the file. If the file does not exist, attempt to create it. In this mode, fseek() only affects the reading position, writes are always appended. 'x' Create and open for writing only; place the file pointer at the beginning of the file. If the file already exists, the fopen() call will fail by returning FALSE and generating an error of level E_WARNING. If the file does not exist, attempt to create it. This is equivalent to specifying O_EXCL|O_CREAT flags for the underlying open(2) system call. 'x+' Create and open for reading and writing; otherwise it has the same behavior as 'x'. 'c' Open the file for writing only. If the file does not exist, it is created. If it exists, it is neither truncated (as opposed to 'w'), nor the call to this function fails (as is the case with 'x'). The file pointer is positioned on the beginning of the file. This may be useful if it's desired to get an advisory lock (see flock()) before attempting to modify the file, as using 'w' could truncate the file before the lock was obtained (if truncation is desired, ftruncate() can be used after the lock is requested). 'c+' Open the file for reading and writing; otherwise it has the same behavior as 'c'. 'e' Set close-on-exec flag on the opened file descriptor. Only available in PHP compiled on POSIX.1-2008 conform systems. Note: Different operating system families have different line-ending conventions. When you write a text file and want to insert a line break, you need to use the correct line-ending character(s) for your operating system. Unix based systems use \\n as the line ending character, Windows based systems use \\r\\n as the line ending characters and Macintosh based systems use \\r as the line ending character. If you use the wrong line ending characters when writing your files, you might find that other applications that open those files will \"look funny\". Windows offers a text-mode translation flag ('t') which will transparently translate \\n to \\r\\n when working with the file. In contrast, you can also use 'b' to force binary mode, which will not translate your data. To use these flags, specify either 'b' or 't' as the last character of the mode parameter. The default translation mode depends on the SAPI and version of PHP that you are using, so you are encouraged to always specify the appropriate flag for portability reasons. You should use the 't' mode if you are working with plain-text files and you use \\n to delimit your line endings in your script, but expect your files to be readable with applications such as notepad. You should use the 'b' in all other cases. If you do not specify the 'b' flag when working with binary files, you may experience strange problems with your data, including broken image files and strange problems with \\r\\n characters. Note: For portability, it is strongly recommended that you always use the 'b' flag when opening files with fopen(). Note: Again, for portability, it is also strongly recommended that you re-write code that uses or relies upon the 't' mode so that it uses the correct line endings and 'b' mode instead.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"false","doc":{"description":"The optional third use_include_path parameter can be set to '1' or TRUE if you want to search for the file in the include_path, too.","type":"bool"}},{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams.","type":"resource"}}],"doc":{"description":"fopen() binds a named resource, specified by filename, to a stream.","type":"resource"}},{"kind":64,"name":"gmp_random_seed","modifiers":0,"description":"","children":[{"kind":128,"name":"$seed","modifiers":0,"doc":{"description":"The seed to be set for the gmp_random(), gmp_random_bits(), and gmp_random_range() functions. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"mixed"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"xmlwriter_end_document","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Ends the current document.","type":"bool"}},{"kind":64,"name":"mcrypt_decrypt","modifiers":0,"description":"","children":[{"kind":128,"name":"$cipher","modifiers":0,"doc":{"description":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string.","type":"string"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The key with which the data was encrypted. If the provided key size is not supported by the cipher, the function will emit a warning and return FALSE","type":"string"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data that will be decrypted with the given cipher and mode. If the size of the data is not n * blocksize, the data will be padded with '\\0'.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".","type":"string"}},{"kind":128,"name":"$iv","modifiers":0,"doc":{"description":"Used for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If the provided IV size is not supported by the chaining mode or no IV was provided, but the chaining mode requires one, the function will emit a warning and return FALSE.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"mcrypt_get_iv_size","modifiers":0,"description":"","children":[{"kind":128,"name":"$cipher","modifiers":0,"doc":{"description":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\". The IV is ignored in ECB mode as this mode does not require it. You will need to have the same IV (think: starting point) both at encryption and decryption stages, otherwise your encryption will fail.","type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"libxml_set_streams_context","modifiers":0,"children":[{"kind":128,"name":"$streams_context","modifiers":0,"doc":{"description":"The stream context resource (created with stream_context_create())","type":"resource"}}],"doc":{"description":"Sets the streams context for the next libxml document load or write.","type":"void"}},{"kind":64,"name":"tidy_getopt","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"You will find a list with each configuration option and their types at: » http://tidy.sourceforge.net/docs/quickref.html.","type":"string"}}],"doc":{"description":"Returns the value of the specified option for the specified tidy object.","type":"mixed"}},{"kind":64,"name":"pg_num_rows","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}}],"doc":{"description":"pg_num_rows() will return the number of rows in a PostgreSQL result resource.","type":"int"}},{"kind":64,"name":"lchgrp","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the symlink.","type":"string"}},{"kind":128,"name":"$group","modifiers":0,"doc":{"description":"The group specified by name or number.","type":"mixed"}}],"doc":{"description":"Attempts to change the group of the symlink filename to group.","type":"bool"}},{"kind":64,"name":"msql_field_len","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 1.","type":"int"}}],"doc":{"description":"msql_field_len() returns the length of the specified field.","type":"int"}},{"kind":64,"name":"grapheme_strpos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string to look in. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to look for. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"The optional $offset parameter allows you to specify where in $haystack to start searching as an offset in grapheme units (not bytes or characters). If the offset is negative, it is treated relative to the end of the string. The position returned is still relative to the beginning of haystack regardless of the value of $offset.","type":"int"}}],"doc":{"description":"Find position (in grapheme units) of first occurrence of a string","type":"int"}},{"kind":64,"name":"posix_geteuid","modifiers":0,"children":[],"doc":{"description":"Return the numeric effective user ID of the current process. See also posix_getpwuid() for information on how to convert this into a useable username.","type":"int"}},{"kind":64,"name":"ctype_upper","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The tested string.","type":"string"}}],"doc":{"description":"Checks if all of the characters in the provided string, text, are uppercase characters.","type":"bool"}},{"kind":64,"name":"transliterator_list_ids","modifiers":0,"children":[],"doc":{"description":"Returns an array with the registered transliterator IDs.","type":"array"}},{"kind":64,"name":"m_setssl_cafile","modifiers":0,"description":"","children":[{"kind":128,"name":"$conn","modifiers":0,"doc":{"description":"An MCVE_CONN resource returned by m_initengine().","type":"resource"}},{"kind":128,"name":"$cafile","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"pow","modifiers":0,"children":[{"kind":128,"name":"$base","modifiers":0,"doc":{"description":"The base to use","type":"number"}},{"kind":128,"name":"$exp","modifiers":0,"doc":{"description":"The exponent","type":"number"}}],"doc":{"description":"Returns base raised to the power of exp.","type":"number"}},{"kind":64,"name":"ldap_bind","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$bind_rdn","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}},{"kind":128,"name":"$bind_password","modifiers":0,"description":"","value":"NULL","doc":{"type":"string"}}],"doc":{"description":"Binds to the LDAP directory with specified RDN and password.","type":"bool"}},{"kind":64,"name":"enchant_dict_store_replacement","modifiers":0,"children":[{"kind":128,"name":"$dict","modifiers":0,"doc":{"description":"Dictionary resource","type":"resource"}},{"kind":128,"name":"$mis","modifiers":0,"doc":{"description":"The work to fix","type":"string"}},{"kind":128,"name":"$cor","modifiers":0,"doc":{"description":"The correct word","type":"string"}}],"doc":{"description":"Add a correction for 'mis' using 'cor'. Notes that you replaced @mis with @cor, so it's possibly more likely that future occurrences of @mis will be replaced with @cor. So it might bump @cor up in the suggestion list.","type":"void"}},{"kind":64,"name":"asort","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$sort_flags","modifiers":0,"value":"SORT_REGULAR","doc":{"description":"You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().","type":"int"}}],"doc":{"description":"This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.","type":"bool"}},{"kind":64,"name":"strncmp","modifiers":0,"children":[{"kind":128,"name":"$str1","modifiers":0,"doc":{"description":"The first string.","type":"string"}},{"kind":128,"name":"$str2","modifiers":0,"doc":{"description":"The second string.","type":"string"}},{"kind":128,"name":"$len","modifiers":0,"doc":{"description":"Number of characters to use in the comparison.","type":"int"}}],"doc":{"description":"This function is similar to strcmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.","type":"int"}},{"kind":64,"name":"ftp_connect","modifiers":0,"children":[{"kind":128,"name":"$host","modifiers":0,"doc":{"description":"The FTP server address. This parameter shouldn't have any trailing slashes and shouldn't be prefixed with ftp://.","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"value":"21","doc":{"description":"This parameter specifies an alternate port to connect to. If it is omitted or set to zero, then the default FTP port, 21, will be used.","type":"int"}},{"kind":128,"name":"$timeout","modifiers":0,"value":"90","doc":{"description":"This parameter specifies the timeout for all subsequent network operations. If omitted, the default value is 90 seconds. The timeout can be changed and queried at any time with ftp_set_option() and ftp_get_option().","type":"int"}}],"doc":{"description":"ftp_connect() opens an FTP connection to the specified host.","type":"resource"}},{"kind":64,"name":"mssql_get_last_message","modifiers":0,"description":"","children":[],"doc":{"type":"string"}},{"kind":64,"name":"imageaffine","modifiers":0,"description":"","children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$affine","modifiers":0,"doc":{"description":"Array with keys 0 to 5.","type":"array"}},{"kind":128,"name":"$clip","modifiers":0,"doc":{"description":"Array with keys \"x\", \"y\", \"width\" and \"height\".","type":"array"}}],"doc":{"type":"resource"}},{"kind":64,"name":"posix_getgrgid","modifiers":0,"children":[{"kind":128,"name":"$gid","modifiers":0,"doc":{"description":"The group id.","type":"int"}}],"doc":{"description":"Gets information about a group provided its id.","type":"array"}},{"kind":64,"name":"ibase_trans","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An InterBase link identifier. If omitted, the last opened link is assumed.","type":"resource"}},{"kind":128,"name":"$trans_args","modifiers":0,"doc":{"description":"trans_args can be a combination of IBASE_READ, IBASE_WRITE, IBASE_COMMITTED, IBASE_CONSISTENCY, IBASE_CONCURRENCY, IBASE_REC_VERSION, IBASE_REC_NO_VERSION, IBASE_WAIT and IBASE_NOWAIT.","type":"int"}}],"doc":{"description":"Begins a transaction.","type":"resource"}},{"kind":64,"name":"zend_thread_id","modifiers":0,"children":[],"doc":{"description":"This function returns a unique identifier for the current thread.","type":"int"}},{"kind":64,"name":"mb_ereg","modifiers":0,"description":"","children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The search pattern.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The search string.","type":"string"}},{"kind":128,"name":"$regs","modifiers":1024,"doc":{"description":"If matches are found for parenthesized substrings of pattern and the function is called with the third argument regs, the matches will be stored in the elements of the array regs. If no matches are found, regs is set to an empty array. $regs[1] will contain the substring which starts at the first left parenthesis; $regs[2] will contain the substring starting at the second, and so on. $regs[0] will contain a copy of the complete string matched.","type":"array"}}],"doc":{"type":"int"}},{"kind":64,"name":"mysql_select_db","modifiers":0,"description":"","children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The name of the database that is to be selected.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"readline_clear_history","modifiers":0,"children":[],"doc":{"description":"This function clears the entire command line history.","type":"bool"}},{"kind":64,"name":"gmp_gcdext","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$b","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Calculates g, s, and t, such that a*s + b*t = g = gcd(a,b), where gcd is the greatest common divisor. Returns an array with respective elements g, s and t.","type":"array"}},{"kind":64,"name":"imap_getsubscribed","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$ref","modifiers":0,"doc":{"description":"ref should normally be just the server specification as described in imap_open()","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. '*' means to return all mailboxes. If you pass pattern as '*', you will get a list of the entire mailbox hierarchy. '%' means to return the current level only. '%' as the pattern parameter will return only the top level mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox in the ~/mail directory, but none in subfolders of that directory.","type":"string"}}],"doc":{"description":"Gets information about the subscribed mailboxes.","type":"array"}},{"kind":64,"name":"mssql_free_result","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being freed. This result comes from a call to mssql_query().","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"explode","modifiers":0,"children":[{"kind":128,"name":"$delimiter","modifiers":0,"doc":{"description":"The boundary string.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$limit","modifiers":0,"value":"PHP_INT_MAX","doc":{"description":"If limit is set and positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string. If the limit parameter is negative, all components except the last -limit are returned. If the limit parameter is zero, then this is treated as 1.","type":"int"}}],"doc":{"description":"Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.","type":"array"}},{"kind":64,"name":"curl_multi_add_handle","modifiers":0,"children":[{"kind":128,"name":"$mh","modifiers":0,"doc":{"description":"A cURL multi handle returned by curl_multi_init().","type":"resource"}},{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}}],"doc":{"description":"Adds the ch handle to the multi handle mh","type":"int"}},{"kind":64,"name":"image2wbmp","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the saved file. If not given, the raw image stream will be output directly.","type":"string"}},{"kind":128,"name":"$threshold","modifiers":0,"doc":{"description":"Threshold value, between 0 and 255 (inclusive).","type":"int"}}],"doc":{"description":"image2wbmp() outputs or save a WBMP version of the given image.","type":"bool"}},{"kind":64,"name":"mysql_tablename","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result pointer resource that's returned from mysql_list_tables().","type":"resource"}},{"kind":128,"name":"$i","modifiers":0,"doc":{"description":"The integer index (row/table number)","type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"fbsql_stop_db","modifiers":0,"children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The database name.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Stops a database on local or remote server.","type":"bool"}},{"kind":64,"name":"imap_base64","modifiers":0,"children":[{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"The encoded text","type":"string"}}],"doc":{"description":"Decodes the given BASE-64 encoded text.","type":"string"}},{"kind":64,"name":"unixtojd","modifiers":0,"children":[{"kind":128,"name":"$timestamp","modifiers":0,"value":"time()","doc":{"description":"A unix timestamp to convert.","type":"int"}}],"doc":{"description":"Return the Julian Day for a Unix timestamp (seconds since 1.1.1970), or for the current day if no timestamp is given.","type":"int"}},{"kind":64,"name":"mb_stripos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string from which to get the position of the first occurrence of needle","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to find in haystack","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"The position in haystack to start searching. A negative offset counts from the end of the string.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"Character encoding name to use. If it is omitted, internal character encoding is used.","type":"string"}}],"doc":{"description":"mb_stripos() returns the numeric position of the first occurrence of needle in the haystack string. Unlike mb_strpos(), mb_stripos() is case-insensitive. If needle is not found, it returns FALSE.","type":"int"}},{"kind":64,"name":"imap_check","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}}],"doc":{"description":"Checks information about the current mailbox.","type":"object"}},{"kind":64,"name":"stream_get_meta_data","modifiers":0,"children":[{"kind":128,"name":"$stream","modifiers":0,"doc":{"description":"The stream can be any stream created by fopen(), fsockopen() and pfsockopen().","type":"resource"}}],"doc":{"description":"Returns information about an existing stream.","type":"array"}},{"kind":64,"name":"mb_ereg_search_setpos","modifiers":0,"description":"","children":[{"kind":128,"name":"$position","modifiers":0,"doc":{"description":"The position to set. If it is negative, it counts from the end of the string.","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"odbc_field_scale","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier.","type":"resource"}},{"kind":128,"name":"$field_number","modifiers":0,"doc":{"description":"The field number. Field numbering starts at 1.","type":"int"}}],"doc":{"description":"Gets the scale of the field referenced by number in the given result identifier.","type":"int"}},{"kind":64,"name":"pg_fetch_all","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}}],"doc":{"description":"pg_fetch_all() returns an array that contains all rows (records) in the result resource.","type":"array"}},{"kind":64,"name":"msgfmt_get_error_message","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The message formatter","type":"MessageFormatter"}}],"doc":{"description":"Get the error text from the last operation.","type":"string"}},{"kind":64,"name":"range","modifiers":0,"children":[{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"First value of the sequence.","type":"mixed"}},{"kind":128,"name":"$end","modifiers":0,"doc":{"description":"The sequence is ended upon reaching the end value.","type":"mixed"}},{"kind":128,"name":"$step","modifiers":0,"value":"1","doc":{"description":"If a step value is given, it will be used as the increment between elements in the sequence. step should be given as a positive number. If not specified, step will default to 1.","type":"number"}}],"doc":{"description":"Create an array containing a range of elements.","type":"array"}},{"kind":64,"name":"imap_listscan","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$ref","modifiers":0,"doc":{"description":"ref should normally be just the server specification as described in imap_open()","type":"string"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Specifies where in the mailbox hierarchy to start searching.There are two special characters you can pass as part of the pattern: '*' and '%'. '*' means to return all mailboxes. If you pass pattern as '*', you will get a list of the entire mailbox hierarchy. '%' means to return the current level only. '%' as the pattern parameter will return only the top level mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox in the ~/mail directory, but none in subfolders of that directory.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The searched string","type":"string"}}],"doc":{"description":"Returns an array containing the names of the mailboxes that have content in the text of the mailbox.","type":"array"}},{"kind":64,"name":"mysql_field_seek","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"gmp_legendre","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$p","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number. Should be odd and must be positive.","type":"GMP"}}],"doc":{"description":"Compute the »  Legendre symbol of a and p. p should be odd and must be positive.","type":"int"}},{"kind":64,"name":"getprotobynumber","modifiers":0,"children":[{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"The protocol number.","type":"int"}}],"doc":{"description":"getprotobynumber() returns the protocol name associated with protocol number as per /etc/protocols.","type":"string"}},{"kind":64,"name":"strtotime","modifiers":0,"description":"","children":[{"kind":128,"name":"$time","modifiers":0,"doc":{"description":"A date/time string. Valid formats are explained in Date and Time Formats.","type":"string"}},{"kind":128,"name":"$now","modifiers":0,"value":"time()","doc":{"description":"The timestamp which is used as a base for the calculation of relative dates.","type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"tidy_get_html_ver","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Returns the detected HTML version for the specified tidy object.","type":"int"}},{"kind":64,"name":"dba_insert","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The key of the entry to be inserted. If this key already exist in the database, this function will fail. Use dba_replace() if you need to replace an existent key.","type":"string"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value to be inserted.","type":"string"}},{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The database handler, returned by dba_open() or dba_popen().","type":"resource"}}],"doc":{"description":"dba_insert() inserts the entry described with key and value into the database.","type":"bool"}},{"kind":64,"name":"metaphone","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string.","type":"string"}},{"kind":128,"name":"$phonemes","modifiers":0,"value":"0","doc":{"description":"This parameter restricts the returned metaphone key to phonemes characters in length. The default value of 0 means no restriction.","type":"int"}}],"doc":{"description":"Calculates the metaphone key of str.","type":"string"}},{"kind":64,"name":"pspell_add_to_session","modifiers":0,"description":"","children":[{"kind":128,"name":"$dictionary_link","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$word","modifiers":0,"doc":{"description":"The added word.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"msql_create_db","modifiers":0,"children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The name of the mSQL database.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"The mSQL connection. If not specified, the last link opened by msql_connect() is assumed. If no such link is found, the function will try to establish a link as if msql_connect() was called, and use it.","type":"resource"}}],"doc":{"description":"msql_create_db() attempts to create a new database on the mSQL server.","type":"bool"}},{"kind":64,"name":"imap_close","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$flag","modifiers":0,"value":"0","doc":{"description":"If set to CL_EXPUNGE, the function will silently expunge the mailbox before closing, removing all messages marked for deletion. You can achieve the same thing by using imap_expunge()","type":"int"}}],"doc":{"description":"Closes the imap stream.","type":"bool"}},{"kind":64,"name":"header","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The header string. There are two special-case header calls. The first is a header that starts with the string \"HTTP/\" (case is not significant), which will be used to figure out the HTTP status code to send. For example, if you have configured Apache to use a PHP script to handle requests for missing files (using the ErrorDocument directive), you may want to make sure that your script generates the proper status code. <?phpheader(\"HTTP/1.0 404 Not Found\");?> The second special case is the \"Location:\" header. Not only does it send this header back to the browser, but it also returns a REDIRECT (302) status code to the browser unless the 201 or a 3xx status code has already been set. <?phpheader(\"Location: http://www.example.com/\"); /* Redirect browser *//* Make sure that code below does not get executed when we redirect. */exit;?>","type":"string"}},{"kind":128,"name":"$replace","modifiers":0,"value":"true","doc":{"description":"The optional replace parameter indicates whether the header should replace a previous similar header, or add a second header of the same type. By default it will replace, but if you pass in FALSE as the second argument you can force multiple headers of the same type. For example: <?phpheader('WWW-Authenticate: Negotiate');header('WWW-Authenticate: NTLM', false);?>","type":"bool"}},{"kind":128,"name":"$http_response_code","modifiers":0,"doc":{"description":"Forces the HTTP response code to the specified value. Note that this parameter only has an effect if the string is not empty.","type":"int"}}],"doc":{"description":"header() is used to send a raw HTTP header. See the » HTTP/1.1 specification for more information on HTTP headers.","type":"void"}},{"kind":64,"name":"fbsql_start_db","modifiers":0,"children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The database name.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}},{"kind":128,"name":"$database_options","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Start a database on local or remote server.","type":"bool"}},{"kind":64,"name":"imagearc","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$cx","modifiers":0,"doc":{"description":"x-coordinate of the center.","type":"int"}},{"kind":128,"name":"$cy","modifiers":0,"doc":{"description":"y-coordinate of the center.","type":"int"}},{"kind":128,"name":"$width","modifiers":0,"doc":{"description":"The arc width.","type":"int"}},{"kind":128,"name":"$height","modifiers":0,"doc":{"description":"The arc height.","type":"int"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"The arc start angle, in degrees.","type":"int"}},{"kind":128,"name":"$end","modifiers":0,"doc":{"description":"The arc end angle, in degrees. 0° is located at the three-o'clock position, and the arc is drawn clockwise.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"imagearc() draws an arc of circle centered at the given coordinates.","type":"bool"}},{"kind":64,"name":"gzdecode","modifiers":0,"children":[{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data to decode, encoded by gzencode().","type":"string"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The maximum length of data to decode.","type":"int"}}],"doc":{"description":"This function returns a decoded version of the input data.","type":"string"}},{"kind":64,"name":"mcrypt_module_is_block_algorithm_mode","modifiers":0,"description":"","children":[{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"The mode to check.","type":"string"}},{"kind":128,"name":"$lib_dir","modifiers":0,"doc":{"description":"The optional lib_dir parameter can contain the location where the algorithm module is on the system.","type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"deflate_init","modifiers":0,"children":[{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"One of the ZLIB_ENCODING_* constants.","type":"int"}},{"kind":128,"name":"$options","modifiers":0,"value":"array()","doc":{"description":"An associative array which may contain the following elements: level The compression level in range -1..9; defaults to -1. memory The compression memory level in range 1..9; defaults to 8. window The zlib window size (logarithmic) in range 8..15; defaults to 15. strategy One of ZLIB_FILTERED, ZLIB_HUFFMAN_ONLY, ZLIB_RLE, ZLIB_FIXED or ZLIB_DEFAULT_STRATEGY (the default). dictionary A string or an array of strings of the preset dictionary (default: no preset dictionary).","type":"array"}}],"doc":{"description":"Initializes an incremental deflate context using the specified encoding.","type":"resource"}},{"kind":64,"name":"disk_free_space","modifiers":0,"children":[{"kind":128,"name":"$directory","modifiers":0,"doc":{"description":"A directory of the filesystem or disk partition. Note: Given a file name instead of a directory, the behaviour of the function is unspecified and may differ between operating systems and PHP versions.","type":"string"}}],"doc":{"description":"Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition.","type":"float"}},{"kind":64,"name":"xmlwriter_start_attribute_ns","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"The namespace prefix.","type":"string"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The attribute name.","type":"string"}},{"kind":128,"name":"$uri","modifiers":0,"doc":{"description":"The namespace URI.","type":"string"}}],"doc":{"description":"Starts a namespaced attribute.","type":"bool"}},{"kind":64,"name":"m_transkeyval","modifiers":0,"description":"","children":[{"kind":128,"name":"$conn","modifiers":0,"doc":{"description":"An MCVE_CONN resource returned by m_initengine().","type":"resource"}},{"kind":128,"name":"$identifier","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$key","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"int"}},{"kind":64,"name":"oci_define_by_name","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI8 statement identifier created by oci_parse() and executed by oci_execute(), or a REF CURSOR statement identifier.","type":"resource"}},{"kind":128,"name":"$column_name","modifiers":0,"doc":{"description":"The column name used in the query. Use uppercase for Oracle's default, non-case sensitive column names. Use the exact column name case for case-sensitive column names.","type":"string"}},{"kind":128,"name":"$variable","modifiers":1024,"doc":{"description":"The PHP variable that will contain the returned column value.","type":"mixed"}},{"kind":128,"name":"$type","modifiers":0,"value":"SQLT_CHR","doc":{"description":"The data type to be returned. Generally not needed. Note that Oracle-style data conversions are not performed. For example, SQLT_INT will be ignored and the returned data type will still be SQLT_CHR. You can optionally use oci_new_descriptor() to allocate LOB/ROWID/BFILE descriptors.","type":"int"}}],"doc":{"description":"Associates a PHP variable with a column for query fetches using oci_fetch().","type":"bool"}},{"kind":64,"name":"pg_field_name","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$field_number","modifiers":0,"doc":{"description":"Field number, starting from 0.","type":"int"}}],"doc":{"description":"pg_field_name() returns the name of the field occupying the given field_number in the given PostgreSQL result resource. Field numbering starts from 0.","type":"string"}},{"kind":64,"name":"ldap_modify","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The distinguished name of an LDAP entity.","type":"string"}},{"kind":128,"name":"$entry","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"description":"Modify the existing entries in the LDAP directory. The structure of the entry is same as in ldap_add().","type":"bool"}},{"kind":64,"name":"tidy_access_count","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"tidy_access_count() returns the number of accessibility warnings found for the specified document.","type":"int"}},{"kind":64,"name":"pcntl_exec","modifiers":0,"children":[{"kind":128,"name":"$path","modifiers":0,"doc":{"description":"path must be the path to a binary executable or a script with a valid path pointing to an executable in the shebang ( #!/usr/local/bin/perl for example) as the first line. See your system's man execve(2) page for additional information.","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"doc":{"description":"args is an array of argument strings passed to the program.","type":"array"}},{"kind":128,"name":"$envs","modifiers":0,"doc":{"description":"envs is an array of strings which are passed as environment to the program. The array is in the format of name => value, the key being the name of the environmental variable and the value being the value of that variable.","type":"array"}}],"doc":{"description":"Executes the program with the given arguments.","type":"bool"}},{"kind":64,"name":"socket_listen","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create().","type":"resource"}},{"kind":128,"name":"$backlog","modifiers":0,"value":"0","doc":{"description":"A maximum of backlog incoming connections will be queued for processing. If a connection request arrives with the queue full the client may receive an error with an indication of ECONNREFUSED, or, if the underlying protocol supports retransmission, the request may be ignored so that retries may succeed. Note: The maximum number passed to the backlog parameter highly depends on the underlying platform. On Linux, it is silently truncated to SOMAXCONN. On win32, if passed SOMAXCONN, the underlying service provider responsible for the socket will set the backlog to a maximum reasonable value. There is no standard provision to find out the actual backlog value on this platform.","type":"int"}}],"doc":{"description":"After the socket socket has been created using socket_create() and bound to a name with socket_bind(), it may be told to listen for incoming connections on socket.","type":"bool"}},{"kind":64,"name":"session_destroy","modifiers":0,"description":"","children":[],"doc":{"type":"bool"}},{"kind":64,"name":"fbsql_hostname","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}},{"kind":128,"name":"$host_name","modifiers":0,"doc":{"description":"If provided, this will be the new connection host name.","type":"string"}}],"doc":{"description":"Gets or sets the host name used with a connection.","type":"string"}},{"kind":64,"name":"chown","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}},{"kind":128,"name":"$user","modifiers":0,"doc":{"description":"A user name or number.","type":"mixed"}}],"doc":{"description":"Attempts to change the owner of the file filename to user user. Only the superuser may change the owner of a file.","type":"bool"}},{"kind":64,"name":"hash_algos","modifiers":0,"description":"","children":[],"doc":{"type":"array"}},{"kind":64,"name":"gmdate","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The format of the outputted date string. See the formatting options for the date() function.","type":"string"}},{"kind":128,"name":"$timestamp","modifiers":0,"value":"time()","doc":{"description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().","type":"int"}}],"doc":{"description":"Identical to the date() function except that the time returned is Greenwich Mean Time (GMT).","type":"string"}},{"kind":64,"name":"posix_setpgid","modifiers":0,"children":[{"kind":128,"name":"$pid","modifiers":0,"doc":{"description":"The process id.","type":"int"}},{"kind":128,"name":"$pgid","modifiers":0,"doc":{"description":"The process group id.","type":"int"}}],"doc":{"description":"Let the process pid join the process group pgid.","type":"bool"}},{"kind":64,"name":"decoct","modifiers":0,"children":[{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"Decimal value to convert","type":"int"}}],"doc":{"description":"Returns a string containing an octal representation of the given number argument. The largest number that can be converted depends on the platform in use. For 32-bit platforms this is usually 4294967295 in decimal resulting in 37777777777. For 64-bit platforms this is usually 9223372036854775807 in decimal resulting in 777777777777777777777.","type":"string"}},{"kind":64,"name":"posix_getgid","modifiers":0,"children":[],"doc":{"description":"Return the numeric real group ID of the current process.","type":"int"}},{"kind":64,"name":"crypt","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to be hashed. Caution Using the CRYPT_BLOWFISH algorithm, will result in the str parameter being truncated to a maximum length of 72 characters.","type":"string"}},{"kind":128,"name":"$salt","modifiers":0,"doc":{"description":"An optional salt string to base the hashing on. If not provided, the behaviour is defined by the algorithm implementation and can lead to unexpected results.","type":"string"}}],"doc":{"description":"crypt() will return a hashed string using the standard Unix DES-based algorithm or alternative algorithms that may be available on the system.","type":"string"}},{"kind":64,"name":"array_intersect_assoc","modifiers":0,"description":"","children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The array with master values to check.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"An array to compare values against.","type":"array"}}],"doc":{"type":"array"}},{"kind":64,"name":"time","modifiers":0,"children":[],"doc":{"description":"Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).","type":"int"}},{"kind":64,"name":"ftp_systype","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}}],"doc":{"description":"Returns the system type identifier of the remote FTP server.","type":"string"}},{"kind":64,"name":"pg_connect_poll","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"pg_connect_poll() polls the status of a PostgreSQL connection created by calling pg_connect() with the PGSQL_CONNECT_ASYNC option.","type":"int"}},{"kind":64,"name":"ip2long","modifiers":0,"children":[{"kind":128,"name":"$ip_address","modifiers":0,"doc":{"description":"A standard format address.","type":"string"}}],"doc":{"description":"The function ip2long() generates an long integer representation of IPv4 Internet network address from its Internet standard format (dotted string) representation.","type":"int"}},{"kind":64,"name":"imagefttext","modifiers":0,"description":"","children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$size","modifiers":0,"doc":{"description":"The font size to use in points.","type":"float"}},{"kind":128,"name":"$angle","modifiers":0,"doc":{"description":"The angle in degrees, with 0 degrees being left-to-right reading text. Higher values represent a counter-clockwise rotation. For example, a value of 90 would result in bottom-to-top reading text.","type":"float"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"The coordinates given by x and y will define the basepoint of the first character (roughly the lower-left corner of the character). This is different from the imagestring(), where x and y define the upper-left corner of the first character. For example, \"top left\" is 0, 0.","type":"int"}},{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"The y-ordinate. This sets the position of the fonts baseline, not the very bottom of the character.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"The index of the desired color for the text, see imagecolorexact().","type":"int"}},{"kind":128,"name":"$fontfile","modifiers":0,"doc":{"description":"The path to the TrueType font you wish to use. Depending on which version of the GD library PHP is using, when fontfile does not begin with a leading / then .ttf will be appended to the filename and the library will attempt to search for that filename along a library-defined font path. When using versions of the GD library lower than 2.0.18, a space character, rather than a semicolon, was used as the 'path separator' for different font files. Unintentional use of this feature will result in the warning message: Warning: Could not find/open font. For these affected versions, the only solution is moving the font to a path which does not contain spaces. In many cases where a font resides in the same directory as the script using it the following trick will alleviate any include problems. <?php// Set the enviroment variable for GDputenv('GDFONTPATH=' . realpath('.'));// Name the font to be used (note the lack of the .ttf extension)$font = 'SomeFont';?>","type":"string"}},{"kind":128,"name":"$text","modifiers":0,"doc":{"description":"Text to be inserted into image.","type":"string"}},{"kind":128,"name":"$extrainfo","modifiers":0,"doc":{"description":"Possible array indexes for extrainfo Key Type Meaning linespacing float Defines drawing linespacing","type":"array"}}],"doc":{"type":"array"}},{"kind":64,"name":"mysql_real_escape_string","modifiers":0,"description":"","children":[{"kind":128,"name":"$unescaped_string","modifiers":0,"doc":{"description":"The string that is to be escaped.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"fileinode","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Gets the file inode.","type":"int"}},{"kind":64,"name":"rad2deg","modifiers":0,"children":[{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"A radian value","type":"float"}}],"doc":{"description":"This function converts number from radian to degrees.","type":"float"}},{"kind":64,"name":"msgfmt_get_error_code","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"The message formatter","type":"MessageFormatter"}}],"doc":{"description":"Get the error code from last operation.","type":"int"}},{"kind":64,"name":"xmlrpc_server_call_method","modifiers":0,"description":"","children":[{"kind":128,"name":"$server","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$xml","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$user_data","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$output_options","modifiers":0,"description":"","doc":{"type":"array"}}],"doc":{"type":"string"}},{"kind":64,"name":"mysqli_prepare","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The query, as a string. Note: You should not add a terminating semicolon or \\g to the statement. This parameter can include one or more parameter markers in the SQL statement by embedding question mark (?) characters at the appropriate positions. Note: The markers are legal only in certain places in SQL statements. For example, they are allowed in the VALUES() list of an INSERT statement (to specify column values for a row), or in a comparison with a column in a WHERE clause to specify a comparison value. However, they are not allowed for identifiers (such as table or column names), in the select list that names the columns to be returned by a SELECT statement, or to specify both operands of a binary operator such as the = equal sign. The latter restriction is necessary because it would be impossible to determine the parameter type. It's not allowed to compare marker with NULL by ? IS NULL too. In general, parameters are legal only in Data Manipulation Language (DML) statements, and not in Data Definition Language (DDL) statements.","type":"string"}}],"doc":{"description":"Prepares the SQL query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement.","type":"mysqli_stmt"}},{"kind":64,"name":"mysql_error","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"locale_accept_from_http","modifiers":0,"children":[{"kind":128,"name":"$header","modifiers":0,"doc":{"description":"The string containing the \"Accept-Language\" header according to format in RFC 2616.","type":"string"}}],"doc":{"description":"Tries to find locale that can satisfy the language list that is requested by the HTTP \"Accept-Language\" header.","type":"string"}},{"kind":64,"name":"strtr","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being translated.","type":"string"}},{"kind":128,"name":"$replace_pairs","modifiers":0,"doc":{"description":"The replace_pairs parameter may be used instead of to and from, in which case it's an array in the form array('from' => 'to', ...).","type":"array"}}],"doc":{"description":"If given three arguments, this function returns a copy of str where all occurrences of each (single-byte) character in from have been translated to the corresponding character in to, i.e., every occurrence of $from[$n] has been replaced with $to[$n], where $n is a valid offset in both arguments.","type":"string"}},{"kind":64,"name":"microtime","modifiers":0,"children":[{"kind":128,"name":"$get_as_float","modifiers":0,"value":"false","doc":{"description":"If used and set to TRUE, microtime() will return a float instead of a string, as described in the return values section below.","type":"bool"}}],"doc":{"description":"microtime() returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call.","type":"mixed"}},{"kind":64,"name":"session_create_id","modifiers":0,"children":[{"kind":128,"name":"$prefix","modifiers":0,"doc":{"description":"If prefix is specified, new session id is prefixed by prefix. Not all characters are allowed within the session id. Characters in the range a-z A-Z 0-9 , (comma) and - (minus) are allowed.","type":"string"}}],"doc":{"description":"session_create_id() is used to create new session id for the current session. It returns collision free session id.","type":"string"}},{"kind":64,"name":"sybase_set_message_handler","modifiers":0,"description":"","children":[{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"The handler expects five arguments in the following order: message number, severity, state, line number and description. The first four are integers. The last is a string. If the function returns FALSE, PHP generates an ordinary error message.","type":"callable"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"If the link identifier isn't specified, the last opened link is assumed.","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"jdtojewish","modifiers":0,"children":[{"kind":128,"name":"$juliandaycount","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$hebrew","modifiers":0,"value":"false","doc":{"description":"If the hebrew parameter is set to TRUE, the fl parameter is used for Hebrew, string based, output format.","type":"bool"}},{"kind":128,"name":"$fl","modifiers":0,"value":"0","doc":{"description":"The available formats are: CAL_JEWISH_ADD_ALAFIM_GERESH, CAL_JEWISH_ADD_ALAFIM, CAL_JEWISH_ADD_GERESHAYIM.","type":"int"}}],"doc":{"description":"Converts a Julian Day Count to the Jewish Calendar.","type":"string"}},{"kind":64,"name":"pcntl_wexitstatus","modifiers":0,"children":[{"kind":128,"name":"$status","modifiers":0,"doc":{"description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().","type":"int"}}],"doc":{"description":"Returns the return code of a terminated child. This function is only useful if pcntl_wifexited() returned TRUE.","type":"int"}},{"kind":64,"name":"fgets","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"Reading ends when length - 1 bytes have been read, or a newline (which is included in the return value), or an EOF (whichever comes first). If no length is specified, it will keep reading from the stream until it reaches the end of the line. Note: Until PHP 4.3.0, omitting it would assume 1024 as the line length. If the majority of the lines in the file are all larger than 8KB, it is more resource efficient for your script to specify the maximum line length.","type":"int"}}],"doc":{"description":"Gets a line from file pointer.","type":"string"}},{"kind":64,"name":"array_unshift","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The input array.","type":"array"}},{"kind":128,"name":"$value1","modifiers":0,"doc":{"description":"First value to prepend.","type":"mixed"}}],"doc":{"description":"array_unshift() prepends passed elements to the front of the array. Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modified to start counting from zero while literal keys won't be changed.","type":"int"}},{"kind":64,"name":"pcntl_wstopsig","modifiers":0,"children":[{"kind":128,"name":"$status","modifiers":0,"doc":{"description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().","type":"int"}}],"doc":{"description":"Returns the number of the signal which caused the child to stop. This function is only useful if pcntl_wifstopped() returned TRUE.","type":"int"}},{"kind":64,"name":"posix_getpwuid","modifiers":0,"children":[{"kind":128,"name":"$uid","modifiers":0,"doc":{"description":"The user identifier.","type":"int"}}],"doc":{"description":"Returns an array of information about the user referenced by the given user ID.","type":"array"}},{"kind":64,"name":"intlcal_get_available_locales","modifiers":0,"children":[],"doc":{"description":"Gives the list of locales for which calendars are installed. As of ICU 51, this is the list of all installed ICU locales.","type":"array"}},{"kind":64,"name":"pg_fetch_row","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$row","modifiers":0,"doc":{"description":"Row number in result to fetch. Rows are numbered from 0 upwards. If omitted or NULL, the next row is fetched.","type":"int"}}],"doc":{"description":"pg_fetch_row() fetches one row of data from the result associated with the specified result resource.","type":"array"}},{"kind":64,"name":"mysql_fetch_lengths","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}}],"doc":{"type":"array"}},{"kind":64,"name":"call_user_method_array","modifiers":0,"description":"","children":[{"kind":128,"name":"$method_name","modifiers":0,"doc":{"description":"The method name being called.","type":"string"}},{"kind":128,"name":"$obj","modifiers":1024,"doc":{"description":"The object that method_name is being called on.","type":"object"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"An array of parameters.","type":"array"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"is_uploaded_file","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The filename being checked.","type":"string"}}],"doc":{"description":"Returns TRUE if the file named by filename was uploaded via HTTP POST. This is useful to help ensure that a malicious user hasn't tried to trick the script into working on files upon which it should not be working--for instance, /etc/passwd.","type":"bool"}},{"kind":64,"name":"iconv","modifiers":0,"children":[{"kind":128,"name":"$in_charset","modifiers":0,"doc":{"description":"The input charset.","type":"string"}},{"kind":128,"name":"$out_charset","modifiers":0,"doc":{"description":"The output charset. If you append the string //TRANSLIT to out_charset transliteration is activated. This means that when a character can't be represented in the target charset, it can be approximated through one or several similarly looking characters. If you append the string //IGNORE, characters that cannot be represented in the target charset are silently discarded. Otherwise, E_NOTICE is generated and the function will return FALSE. Caution If and how //TRANSLIT works exactly depends on the system's iconv() implementation (cf. ICONV_IMPL). Some implementations are known to ignore //TRANSLIT, so the conversion is likely to fail for characters which are illegal for the out_charset.","type":"string"}},{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string to be converted.","type":"string"}}],"doc":{"description":"Performs a character set conversion on the string str from in_charset to out_charset.","type":"string"}},{"kind":64,"name":"imap_headers","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}}],"doc":{"description":"Returns headers for all messages in a mailbox.","type":"array"}},{"kind":64,"name":"odbc_fetch_row","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier.","type":"resource"}},{"kind":128,"name":"$row_number","modifiers":0,"doc":{"description":"If row_number is not specified, odbc_fetch_row() will try to fetch the next row in the result set. Calls to odbc_fetch_row() with and without row_number can be mixed. To step through the result more than once, you can call odbc_fetch_row() with row_number 1, and then continue doing odbc_fetch_row() without row_number to review the result. If a driver doesn't support fetching rows by number, the row_number parameter is ignored.","type":"int"}}],"doc":{"description":"Fetches a row of the data that was returned by odbc_do() or odbc_exec(). After odbc_fetch_row() is called, the fields of that row can be accessed with odbc_result().","type":"bool"}},{"kind":64,"name":"socket_read","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"doc":{"description":"A valid socket resource created with socket_create() or socket_accept().","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The maximum number of bytes read is specified by the length parameter. Otherwise you can use \\r, \\n, or \\0 to end reading (depending on the type parameter, see below).","type":"int"}},{"kind":128,"name":"$type","modifiers":0,"value":"PHP_BINARY_READ","doc":{"description":"Optional type parameter is a named constant: PHP_BINARY_READ (Default) - use the system recv() function. Safe for reading binary data. PHP_NORMAL_READ - reading stops at \\n or \\r.","type":"int"}}],"doc":{"description":"The function socket_read() reads from the socket resource socket created by the socket_create() or socket_accept() functions.","type":"string"}},{"kind":64,"name":"ibase_blob_close","modifiers":0,"children":[{"kind":128,"name":"$blob_handle","modifiers":0,"doc":{"description":"A BLOB handle opened with ibase_blob_create() or ibase_blob_open().","type":"resource"}}],"doc":{"description":"This function closes a BLOB that has either been opened for reading by ibase_blob_open() or has been opened for writing by ibase_blob_create().","type":"mixed"}},{"kind":64,"name":"cyrus_authenticate","modifiers":0,"description":"","children":[{"kind":128,"name":"$connection","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$mechlist","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$service","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$user","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$minssf","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$maxssf","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$authname","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$password","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"void"}},{"kind":64,"name":"socket_import_stream","modifiers":0,"children":[{"kind":128,"name":"$stream","modifiers":0,"doc":{"description":"The stream resource to import.","type":"resource"}}],"doc":{"description":"Imports a stream that encapsulates a socket into a socket extension resource.","type":"resource"}},{"kind":64,"name":"imap_get_quotaroot","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$quota_root","modifiers":0,"doc":{"description":"quota_root should normally be in the form of which mailbox (i.e. INBOX).","type":"string"}}],"doc":{"description":"Retrieve the quota settings per user. The limit value represents the total amount of space allowed for this user's total mailbox usage. The usage value represents the user's current total mailbox capacity.","type":"array"}},{"kind":64,"name":"sybase_num_fields","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"htmlspecialchars","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string being converted.","type":"string"}},{"kind":128,"name":"$flags","modifiers":0,"value":"ENT_COMPAT","doc":{"description":"A bitmask of one or more of the following flags, which specify how to handle quotes, invalid code unit sequences and the used document type. The default is ENT_COMPAT | ENT_HTML401. Available flags constants Constant Name Description ENT_COMPAT Will convert double-quotes and leave single-quotes alone. ENT_QUOTES Will convert both double and single quotes. ENT_NOQUOTES Will leave both double and single quotes unconverted. ENT_IGNORE Silently discard invalid code unit sequences instead of returning an empty string. Using this flag is discouraged as it » may have security implications. ENT_SUBSTITUTE Replace invalid code unit sequences with a Unicode Replacement Character U+FFFD (UTF-8) or &#xFFFD; (otherwise) instead of returning an empty string. ENT_DISALLOWED Replace invalid code points for the given document type with a Unicode Replacement Character U+FFFD (UTF-8) or &#xFFFD; (otherwise) instead of leaving them as is. This may be useful, for instance, to ensure the well-formedness of XML documents with embedded external content. ENT_HTML401 Handle code as HTML 4.01. ENT_XML1 Handle code as XML 1. ENT_XHTML Handle code as XHTML. ENT_HTML5 Handle code as HTML 5.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"ini_get(\"default_charset\")","doc":{"description":"An optional argument defining the encoding used when converting characters. If omitted, the default value of the encoding varies depending on the PHP version in use. In PHP 5.6 and later, the default_charset configuration option is used as the default value. PHP 5.4 and 5.5 will use UTF-8 as the default. Earlier versions of PHP use ISO-8859-1. Although this argument is technically optional, you are highly encouraged to specify the correct value for your code if you are using PHP 5.5 or earlier, or if your default_charset configuration option may be set incorrectly for the given input. For the purposes of this function, the encodings ISO-8859-1, ISO-8859-15, UTF-8, cp866, cp1251, cp1252, and KOI8-R are effectively equivalent, provided the string itself is valid for the encoding, as the characters affected by htmlspecialchars() occupy the same positions in all of these encodings. The following character sets are supported: Supported charsets Charset Aliases Description ISO-8859-1 ISO8859-1 Western European, Latin-1. ISO-8859-5 ISO8859-5 Little used cyrillic charset (Latin/Cyrillic). ISO-8859-15 ISO8859-15 Western European, Latin-9. Adds the Euro sign, French and Finnish letters missing in Latin-1 (ISO-8859-1). UTF-8   ASCII compatible multi-byte 8-bit Unicode. cp866 ibm866, 866 DOS-specific Cyrillic charset. cp1251 Windows-1251, win-1251, 1251 Windows-specific Cyrillic charset. cp1252 Windows-1252, 1252 Windows specific charset for Western European. KOI8-R koi8-ru, koi8r Russian. BIG5 950 Traditional Chinese, mainly used in Taiwan. GB2312 936 Simplified Chinese, national standard character set. BIG5-HKSCS   Big5 with Hong Kong extensions, Traditional Chinese. Shift_JIS SJIS, SJIS-win, cp932, 932 Japanese EUC-JP EUCJP, eucJP-win Japanese MacRoman   Charset that was used by Mac OS. ''   An empty string activates detection from script encoding (Zend multibyte), default_charset and current locale (see nl_langinfo() and setlocale()), in this order. Not recommended. Note: Any other character sets are not recognized. The default encoding will be used instead and a warning will be emitted.","type":"string"}},{"kind":128,"name":"$double_encode","modifiers":0,"value":"true","doc":{"description":"When double_encode is turned off PHP will not encode existing html entities, the default is to convert everything.","type":"bool"}}],"doc":{"description":"Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with these conversions made. If you require all input substrings that have associated named entities to be translated, use htmlentities() instead.","type":"string"}},{"kind":64,"name":"pg_prepare","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The parameterized SQL statement. Must contain only a single statement. (multiple statements separated by semi-colons are not allowed.) If any parameters are used, they are referred to as $1, $2, etc.","type":"string"}}],"doc":{"description":"pg_prepare() creates a prepared statement for later execution with pg_execute() or pg_send_execute(). This feature allows commands that will be used repeatedly to be parsed and planned just once, rather than each time they are executed. pg_prepare() is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions.","type":"resource"}},{"kind":64,"name":"bzflush","modifiers":0,"children":[{"kind":128,"name":"$bz","modifiers":0,"doc":{"description":"The file pointer. It must be valid and must point to a file successfully opened by bzopen().","type":"resource"}}],"doc":{"description":"Forces a write of all buffered bzip2 data for the file pointer bz.","type":"bool"}},{"kind":64,"name":"stream_wrapper_restore","modifiers":0,"children":[{"kind":128,"name":"$protocol","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"description":"Restores a built-in wrapper previously unregistered with stream_wrapper_unregister().","type":"bool"}},{"kind":64,"name":"pg_fetch_result","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"A string representing the name of the field (column) to fetch, otherwise an int representing the field number to fetch. Fields are numbered from 0 upwards.","type":"mixed"}}],"doc":{"description":"pg_fetch_result() returns the value of a particular row and field (column) in a PostgreSQL result resource.","type":"string"}},{"kind":64,"name":"is_string","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The variable being evaluated.","type":"mixed"}}],"doc":{"description":"Finds whether the type given variable is string.","type":"bool"}},{"kind":64,"name":"php_strip_whitespace","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the PHP file.","type":"string"}}],"doc":{"description":"Returns the PHP source code in filename with PHP comments and whitespace removed. This may be useful for determining the amount of actual code in your scripts compared with the amount of comments. This is similar to using php -w from the commandline.","type":"string"}},{"kind":64,"name":"fbsql_errno","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Returns the numerical value of the error message from previous FrontBase operation.","type":"int"}},{"kind":64,"name":"mb_check_encoding","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"value":"NULL","doc":{"description":"The byte stream to check. If it is omitted, this function checks all the input from the beginning of the request.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The expected encoding.","type":"string"}}],"doc":{"description":"Checks if the specified byte stream is valid for the specified encoding. It is useful to prevent so-called \"Invalid Encoding Attack\".","type":"bool"}},{"kind":64,"name":"__autoload","modifiers":0,"description":"","children":[{"kind":128,"name":"$class","modifiers":0,"doc":{"description":"Name of the class to load","type":"string"}}],"doc":{"type":"void"}},{"kind":64,"name":"session_id","modifiers":0,"children":[{"kind":128,"name":"$id","modifiers":0,"doc":{"description":"If id is specified, it will replace the current session id. session_id() needs to be called before session_start() for that purpose. Depending on the session handler, not all characters are allowed within the session id. For example, the file session handler only allows characters in the range a-z A-Z 0-9 , (comma) and - (minus)! Note: When using session cookies, specifying an id for session_id() will always send a new cookie when session_start() is called, regardless if the current session id is identical to the one being set.","type":"string"}}],"doc":{"description":"session_id() is used to get or set the session id for the current session.","type":"string"}},{"kind":64,"name":"hash_update_stream","modifiers":0,"description":"","children":[{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"Hashing context returned by hash_init().","type":"resource"}},{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"Open file handle as returned by any stream creation function.","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"value":"-1","doc":{"description":"Maximum number of characters to copy from handle into the hashing context.","type":"int"}}],"doc":{"type":"int"}},{"kind":64,"name":"ldap_free_result","modifiers":0,"children":[{"kind":128,"name":"$result_identifier","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Frees up the memory allocated internally to store the result. All result memory will be automatically freed when the script terminates.","type":"bool"}},{"kind":64,"name":"oci_num_rows","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"A valid OCI statement identifier.","type":"resource"}}],"doc":{"description":"Gets the number of rows affected during statement execution.","type":"int"}},{"kind":64,"name":"mysql_fetch_object","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}},{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"The name of the class to instantiate, set the properties of and return. If not specified, a stdClass object is returned.","type":"string"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"An optional array of parameters to pass to the constructor for class_name objects.","type":"array"}}],"doc":{"type":"object"}},{"kind":64,"name":"oci_new_descriptor","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"An Oracle connection identifier, returned by oci_connect() or oci_pconnect().","type":"resource"}},{"kind":128,"name":"$type","modifiers":0,"value":"OCI_DTYPE_LOB","doc":{"description":"Valid values for type are: OCI_DTYPE_FILE, OCI_DTYPE_LOB and OCI_DTYPE_ROWID.","type":"int"}}],"doc":{"description":"Allocates resources to hold descriptor or LOB locator.","type":"OCI-Lob"}},{"kind":64,"name":"tidy_get_body","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Returns a tidyNode object starting from the <body> tag of the tidy parse tree.","type":"tidyNode"}},{"kind":64,"name":"hash_hmac_file","modifiers":0,"description":"","children":[{"kind":128,"name":"$algo","modifiers":0,"doc":{"description":"Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..) See hash_algos() for a list of supported algorithms.","type":"string"}},{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"URL describing location of file to be hashed; Supports fopen wrappers.","type":"string"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"Shared secret key used for generating the HMAC variant of the message digest.","type":"string"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"false","doc":{"description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.","type":"bool"}}],"doc":{"type":"string"}},{"kind":64,"name":"pg_copy_from","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"Name of the table into which to copy the rows.","type":"string"}},{"kind":128,"name":"$rows","modifiers":0,"doc":{"description":"An array of data to be copied into table_name. Each value in rows becomes a row in table_name. Each value in rows should be a delimited string of the values to insert into each field. Values should be linefeed terminated.","type":"array"}},{"kind":128,"name":"$delimiter","modifiers":0,"doc":{"description":"The token that separates values for each field in each element of rows. Default is TAB.","type":"string"}},{"kind":128,"name":"$null_as","modifiers":0,"doc":{"description":"How SQL NULL values are represented in the rows. Default is \\N (\"\\\\N\").","type":"string"}}],"doc":{"description":"pg_copy_from() inserts records into a table from rows. It issues a COPY FROM SQL command internally to insert records.","type":"bool"}},{"kind":64,"name":"openssl_x509_fingerprint","modifiers":0,"children":[{"kind":128,"name":"$x509","modifiers":0,"doc":{"description":"See Key/Certificate parameters for a list of valid values.","type":"mixed"}},{"kind":128,"name":"$hash_algorithm","modifiers":0,"value":"\"sha1\"","doc":{"description":"The hash algorithm to use, e.g. \"md5\" or \"sha1\"","type":"string"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"FALSE","doc":{"description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.","type":"bool"}}],"doc":{"description":"openssl_x509_fingerprint() returns the digest of x509 as a string.","type":"bool"}},{"kind":64,"name":"imagedashedline","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$x1","modifiers":0,"doc":{"description":"Upper left x coordinate.","type":"int"}},{"kind":128,"name":"$y1","modifiers":0,"doc":{"description":"Upper left y coordinate 0, 0 is the top left corner of the image.","type":"int"}},{"kind":128,"name":"$x2","modifiers":0,"doc":{"description":"Bottom right x coordinate.","type":"int"}},{"kind":128,"name":"$y2","modifiers":0,"doc":{"description":"Bottom right y coordinate.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"The fill color. A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"This function is deprecated. Use combination of imagesetstyle() and imageline() instead.","type":"bool"}},{"kind":64,"name":"variant_date_to_timestamp","modifiers":0,"children":[{"kind":128,"name":"$variant","modifiers":0,"doc":{"description":"The variant.","type":"variant"}}],"doc":{"description":"Converts variant from a VT_DATE (or similar) value into a Unix timestamp. This allows easier interopability between the Unix-ish parts of PHP and COM.","type":"int"}},{"kind":64,"name":"max","modifiers":0,"children":[{"kind":128,"name":"$value1","modifiers":0,"doc":{"description":"Any comparable value.","type":"mixed"}},{"kind":128,"name":"$value2","modifiers":0,"doc":{"description":"Any comparable value.","type":"mixed"}}],"doc":{"description":"If the first and only parameter is an array, max() returns the highest value in that array. If at least two parameters are provided, max() returns the biggest of these values.","type":"mixed"}},{"kind":64,"name":"ibase_free_event_handler","modifiers":0,"children":[{"kind":128,"name":"$event","modifiers":0,"doc":{"description":"An event resource, created by ibase_set_event_handler().","type":"resource"}}],"doc":{"description":"This function causes the registered event handler specified by event to be cancelled. The callback function will no longer be called for the events it was registered to handle.","type":"bool"}},{"kind":64,"name":"mysql_insert_id","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"value":"NULL","doc":{"description":"The MySQL connection. If the link identifier is not specified, the last link opened by mysql_connect() is assumed. If no such link is found, it will try to create one as if mysql_connect() had been called with no arguments. If no connection is found or established, an E_WARNING level error is generated.","type":"resource"}}],"doc":{"type":"int"}},{"kind":64,"name":"pg_query_params","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"An array of parameter values to substitute for the $1, $2, etc. placeholders in the original prepared query string. The number of elements in the array must match the number of placeholders. Values intended for bytea fields are not supported as parameters. Use pg_escape_bytea() instead, or use the large object functions.","type":"array"}}],"doc":{"description":"Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.","type":"resource"}},{"kind":64,"name":"imap_uid","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msg_number","modifiers":0,"doc":{"description":"The message number.","type":"int"}}],"doc":{"description":"This function returns the UID for the given message sequence number. An UID is a unique identifier that will not change over time while a message sequence number may change whenever the content of the mailbox changes.","type":"int"}},{"kind":64,"name":"boolval","modifiers":0,"children":[{"kind":128,"name":"$var","modifiers":0,"doc":{"description":"The scalar value being converted to a boolean.","type":"mixed"}}],"doc":{"description":"Returns the boolean value of var.","type":"boolean"}},{"kind":64,"name":"odbc_errormsg","modifiers":0,"description":"","children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}}],"doc":{"type":"string"}},{"kind":64,"name":"xml_parser_create_ns","modifiers":0,"children":[{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The input encoding is automatically detected, so that the encoding parameter specifies only the output encoding. In PHP 5.0.0 and 5.0.1, the default output charset is ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported encodings are ISO-8859-1, UTF-8 and US-ASCII.","type":"string"}},{"kind":128,"name":"$separator","modifiers":0,"value":"\":\"","doc":{"description":"With a namespace aware parser tag parameters passed to the various handler functions will consist of namespace and tag name separated by the string specified in separator.","type":"string"}}],"doc":{"description":"xml_parser_create_ns() creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions.","type":"resource"}},{"kind":64,"name":"mysql_fetch_array","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}},{"kind":128,"name":"$result_type","modifiers":0,"value":"MYSQL_BOTH","doc":{"description":"The type of array that is to be fetched. It's a constant and can take the following values: MYSQL_ASSOC, MYSQL_NUM, and MYSQL_BOTH.","type":"int"}}],"doc":{"type":"array"}},{"kind":64,"name":"hebrevc","modifiers":0,"children":[{"kind":128,"name":"$hebrew_text","modifiers":0,"doc":{"description":"A Hebrew input string.","type":"string"}},{"kind":128,"name":"$max_chars_per_line","modifiers":0,"value":"0","doc":{"description":"This optional parameter indicates maximum number of characters per line that will be returned.","type":"int"}}],"doc":{"description":"This function is similar to hebrev() with the difference that it converts newlines (\\n) to \"<br>\\n\".","type":"string"}},{"kind":64,"name":"pg_dbname","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_dbname() returns the name of the database that the given PostgreSQL connection resource.","type":"string"}},{"kind":64,"name":"odbc_field_num","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier.","type":"resource"}},{"kind":128,"name":"$field_name","modifiers":0,"doc":{"description":"The field name.","type":"string"}}],"doc":{"description":"Gets the number of the column slot that corresponds to the named field in the given result identifier.","type":"int"}},{"kind":64,"name":"getlastmod","modifiers":0,"children":[],"doc":{"description":"Gets the time of the last modification of the main script of execution.","type":"int"}},{"kind":32,"name":"getParent","modifiers":1,"children":[],"doc":{"description":"Shall return the parent Control","type":"UI\\Control"}},{"kind":64,"name":"shmop_size","modifiers":0,"children":[{"kind":128,"name":"$shmid","modifiers":0,"doc":{"description":"The shared memory block identifier created by shmop_open()","type":"resource"}}],"doc":{"description":"shmop_size() is used to get the size, in bytes of the shared memory block.","type":"int"}},{"kind":64,"name":"phpcredits","modifiers":0,"children":[{"kind":128,"name":"$flag","modifiers":0,"value":"CREDITS_ALL","doc":{"description":"To generate a custom credits page, you may want to use the flag parameter. Pre-defined phpcredits() flags name description CREDITS_ALL All the credits, equivalent to using: CREDITS_DOCS + CREDITS_GENERAL + CREDITS_GROUP + CREDITS_MODULES + CREDITS_FULLPAGE. It generates a complete stand-alone HTML page with the appropriate tags. CREDITS_DOCS The credits for the documentation team CREDITS_FULLPAGE Usually used in combination with the other flags. Indicates that a complete stand-alone HTML page needs to be printed including the information indicated by the other flags. CREDITS_GENERAL General credits: Language design and concept, PHP authors and SAPI module. CREDITS_GROUP A list of the core developers CREDITS_MODULES A list of the extension modules for PHP, and their authors CREDITS_SAPI A list of the server API modules for PHP, and their authors","type":"int"}}],"doc":{"description":"This function prints out the credits listing the PHP developers, modules, etc. It generates the appropriate HTML codes to insert the information in a page.","type":"bool"}},{"kind":64,"name":"pg_set_error_verbosity","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"value":"],","doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"Determines the verbosity of messages returned by pg_last_error() and pg_result_error().","type":"int"}},{"kind":64,"name":"mysql_free_result","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"get_meta_tags","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The path to the HTML file, as a string. This can be a local file or an URL. Example #1 What get_meta_tags() parses <meta name=\"author\" content=\"name\"> <meta name=\"keywords\" content=\"php documentation\"> <meta name=\"DESCRIPTION\" content=\"a php manual\"> <meta name=\"geo.position\" content=\"49.33;-86.59\"> </head> <!-- parsing stops here --> (pay attention to line endings - PHP uses a native function to parse the input, so a Mac file won't work on Unix).","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"false","doc":{"description":"Setting use_include_path to TRUE will result in PHP trying to open the file along the standard include path as per the include_path directive. This is used for local files, not URLs.","type":"bool"}}],"doc":{"description":"Opens filename and parses it line by line for <meta> tags in the file. The parsing stops at </head>.","type":"array"}},{"kind":64,"name":"ldap_read","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$base_dn","modifiers":0,"doc":{"description":"The base DN for the directory.","type":"string"}},{"kind":128,"name":"$filter","modifiers":0,"doc":{"description":"An empty filter is not allowed. If you want to retrieve absolutely all information for this entry, use a filter of objectClass=*. If you know which entry types are used on the directory server, you might use an appropriate filter such as objectClass=inetOrgPerson.","type":"string"}},{"kind":128,"name":"$attributes","modifiers":0,"doc":{"description":"An array of the required attributes, e.g. array(\"mail\", \"sn\", \"cn\"). Note that the \"dn\" is always returned irrespective of which attributes types are requested. Using this parameter is much more efficient than the default action (which is to return all attributes and their associated values). The use of this parameter should therefore be considered good practice.","type":"array"}},{"kind":128,"name":"$attrsonly","modifiers":0,"doc":{"description":"Should be set to 1 if only attribute types are wanted. If set to 0 both attributes types and attribute values are fetched which is the default behaviour.","type":"int"}},{"kind":128,"name":"$sizelimit","modifiers":0,"doc":{"description":"Enables you to limit the count of entries fetched. Setting this to 0 means no limit. Note: This parameter can NOT override server-side preset sizelimit. You can set it lower though. Some directory server hosts will be configured to return no more than a preset number of entries. If this occurs, the server will indicate that it has only returned a partial results set. This also occurs if you use this parameter to limit the count of fetched entries.","type":"int"}},{"kind":128,"name":"$timelimit","modifiers":0,"doc":{"description":"Sets the number of seconds how long is spend on the search. Setting this to 0 means no limit. Note: This parameter can NOT override server-side preset timelimit. You can set it lower though.","type":"int"}},{"kind":128,"name":"$deref","modifiers":0,"doc":{"description":"Specifies how aliases should be handled during the search. It can be one of the following: LDAP_DEREF_NEVER - (default) aliases are never dereferenced. LDAP_DEREF_SEARCHING - aliases should be dereferenced during the search but not when locating the base object of the search. LDAP_DEREF_FINDING - aliases should be dereferenced when locating the base object but not during the search. LDAP_DEREF_ALWAYS - aliases should be dereferenced always.","type":"int"}}],"doc":{"description":"Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the directory.","type":"resource"}},{"kind":64,"name":"rawurldecode","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The URL to be decoded.","type":"string"}}],"doc":{"description":"Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters.","type":"string"}},{"kind":64,"name":"ibase_rollback","modifiers":0,"children":[{"kind":128,"name":"$link_or_trans_identifier","modifiers":0,"value":"NULL","doc":{"description":"If called without an argument, this function rolls back the default transaction of the default link. If the argument is a connection identifier, the default transaction of the corresponding connection will be rolled back. If the argument is a transaction identifier, the corresponding transaction will be rolled back.","type":"resource"}}],"doc":{"description":"Rolls back a transaction.","type":"bool"}},{"kind":64,"name":"mb_internal_encoding","modifiers":0,"children":[{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"encoding is the character encoding name used for the HTTP input character encoding conversion, HTTP output character encoding conversion, and the default character encoding for string functions defined by the mbstring module. You should notice that the internal encoding is totally different from the one for multibyte regex.","type":"string"}}],"doc":{"description":"Set/Get the internal character encoding","type":"mixed"}},{"kind":64,"name":"oci_cancel","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"doc":{"description":"An OCI statement.","type":"resource"}}],"doc":{"description":"Invalidates a cursor, freeing all associated resources and cancels the ability to read from it.","type":"bool"}},{"kind":64,"name":"pg_send_query_params","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The parameterized SQL statement. Must contain only a single statement. (multiple statements separated by semi-colons are not allowed.) If any parameters are used, they are referred to as $1, $2, etc.","type":"string"}},{"kind":128,"name":"$params","modifiers":0,"doc":{"description":"An array of parameter values to substitute for the $1, $2, etc. placeholders in the original prepared query string. The number of elements in the array must match the number of placeholders.","type":"array"}}],"doc":{"description":"Submits a command and separate parameters to the server without waiting for the result(s).","type":"bool"}},{"kind":64,"name":"posix_setrlimit","modifiers":0,"children":[{"kind":128,"name":"$resource","modifiers":0,"doc":{"description":"The resource limit constant corresponding to the limit that is being set.","type":"int"}},{"kind":128,"name":"$softlimit","modifiers":0,"doc":{"description":"The soft limit, in whatever unit the resource limit requires, or POSIX_RLIMIT_INFINITY.","type":"int"}},{"kind":128,"name":"$hardlimit","modifiers":0,"doc":{"description":"The hard limit, in whatever unit the resource limit requires, or POSIX_RLIMIT_INFINITY.","type":"int"}}],"doc":{"description":"posix_setrlimit() sets the soft and hard limits for a given system resource.","type":"bool"}},{"kind":64,"name":"variant_add","modifiers":0,"children":[{"kind":128,"name":"$left","modifiers":0,"doc":{"description":"The left operand.","type":"mixed"}},{"kind":128,"name":"$right","modifiers":0,"doc":{"description":"The right operand.","type":"mixed"}}],"doc":{"description":"Adds left to right using the following rules (taken from the MSDN library), which correspond to those of Visual Basic:","type":"mixed"}},{"kind":64,"name":"enchant_dict_quick_check","modifiers":0,"children":[{"kind":128,"name":"$dict","modifiers":0,"doc":{"description":"Dictionary resource","type":"resource"}},{"kind":128,"name":"$word","modifiers":0,"doc":{"description":"The word to check","type":"string"}},{"kind":128,"name":"$suggestions","modifiers":1024,"doc":{"description":"If the word is not correctly spelled, this variable will contain an array of suggestions.","type":"array"}}],"doc":{"description":"If the word is correctly spelled return TRUE, otherwise return FALSE, if suggestions variable is provided, fill it with spelling alternatives.","type":"bool"}},{"kind":64,"name":"openssl_csr_get_public_key","modifiers":0,"description":"","children":[{"kind":128,"name":"$csr","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$use_shortnames","modifiers":0,"description":"","value":"true","doc":{"type":"bool"}}],"doc":{"type":"resource"}},{"kind":64,"name":"session_encode","modifiers":0,"children":[],"doc":{"description":"session_encode() returns a serialized string of the contents of the current session data stored in the $_SESSION superglobal.","type":"string"}},{"kind":64,"name":"ldap_control_paged_result_response","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$cookie","modifiers":1024,"doc":{"description":"An opaque structure sent by the server.","type":"string"}},{"kind":128,"name":"$estimated","modifiers":1024,"doc":{"description":"The estimated number of entries to retrieve.","type":"int"}}],"doc":{"description":"Retrieve the pagination information send by the server.","type":"bool"}},{"kind":64,"name":"zip_open","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The file name of the ZIP archive to open.","type":"string"}}],"doc":{"description":"Opens a new zip archive for reading.","type":"resource"}},{"kind":64,"name":"array_search","modifiers":0,"children":[{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The searched value. Note: If needle is a string, the comparison is done in a case-sensitive manner.","type":"mixed"}},{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The array.","type":"array"}},{"kind":128,"name":"$strict","modifiers":0,"value":"false","doc":{"description":"If the third parameter strict is set to TRUE then the array_search() function will search for identical elements in the haystack. This means it will also perform a strict type comparison of the needle in the haystack, and objects must be the same instance.","type":"bool"}}],"doc":{"description":"Searches haystack for needle.","type":"mixed"}},{"kind":64,"name":"shuffle","modifiers":0,"children":[{"kind":128,"name":"$array","modifiers":1024,"doc":{"description":"The array.","type":"array"}}],"doc":{"description":"This function shuffles (randomizes the order of the elements in) an array. It uses a pseudo random number generator that is not suitable for cryptographic purposes.","type":"bool"}},{"kind":64,"name":"fseek","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"A file system pointer resource that is typically created using fopen().","type":"resource"}},{"kind":128,"name":"$offset","modifiers":0,"doc":{"description":"The offset. To move to a position before the end-of-file, you need to pass a negative value in offset and set whence to SEEK_END.","type":"int"}},{"kind":128,"name":"$whence","modifiers":0,"value":"SEEK_SET","doc":{"description":"whence values are: SEEK_SET - Set position equal to offset bytes. SEEK_CUR - Set position to current location plus offset. SEEK_END - Set position to end-of-file plus offset.","type":"int"}}],"doc":{"description":"Sets the file position indicator for the file referenced by handle. The new position, measured in bytes from the beginning of the file, is obtained by adding offset to the position specified by whence.","type":"int"}},{"kind":64,"name":"openssl_pkey_export_to_file","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$outfilename","modifiers":0,"doc":{"description":"Path to the output file.","type":"string"}},{"kind":128,"name":"$passphrase","modifiers":0,"doc":{"description":"The key can be optionally protected by a passphrase.","type":"string"}},{"kind":128,"name":"$configargs","modifiers":0,"doc":{"description":"configargs can be used to fine-tune the export process by specifying and/or overriding options for the openssl configuration file. See openssl_csr_new() for more information about configargs.","type":"array"}}],"doc":{"description":"openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded) rendition of key into the file named by outfilename.","type":"bool"}},{"kind":64,"name":"ftp_site","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}},{"kind":128,"name":"$command","modifiers":0,"doc":{"description":"The SITE command. Note that this parameter isn't escaped so there may be some issues with filenames containing spaces and other characters.","type":"string"}}],"doc":{"description":"ftp_site() sends the given SITE command to the FTP server.","type":"bool"}},{"kind":64,"name":"ibase_db_info","modifiers":0,"description":"","children":[{"kind":128,"name":"$service_handle","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$db","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$action","modifiers":0,"description":"","doc":{"type":"int"}},{"kind":128,"name":"$argument","modifiers":0,"description":"","value":"0","doc":{"type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"xmlrpc_encode","modifiers":0,"description":"","children":[{"kind":128,"name":"$value","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"type":"string"}},{"kind":64,"name":"imagepalettecopy","modifiers":0,"children":[{"kind":128,"name":"$destination","modifiers":0,"doc":{"description":"The destination image resource.","type":"resource"}},{"kind":128,"name":"$source","modifiers":0,"doc":{"description":"The source image resource.","type":"resource"}}],"doc":{"description":"imagepalettecopy() copies the palette from the source image to the destination image.","type":"void"}},{"kind":64,"name":"closelog","modifiers":0,"children":[],"doc":{"description":"closelog() closes the descriptor being used to write to the system logger. The use of closelog() is optional.","type":"bool"}},{"kind":64,"name":"ibase_pconnect","modifiers":0,"children":[{"kind":128,"name":"$database","modifiers":0,"doc":{"description":"The database argument has to be a valid path to database file on the server it resides on. If the server is not local, it must be prefixed with either 'hostname:' (TCP/IP), '//hostname/' (NetBEUI) or 'hostname@' (IPX/SPX), depending on the connection protocol used.","type":"string"}},{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The user name. Can be set with the ibase.default_user php.ini directive.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password for username. Can be set with the ibase.default_password php.ini directive.","type":"string"}},{"kind":128,"name":"$charset","modifiers":0,"doc":{"description":"charset is the default character set for a database.","type":"string"}},{"kind":128,"name":"$buffers","modifiers":0,"doc":{"description":"buffers is the number of database buffers to allocate for the server-side cache. If 0 or omitted, server chooses its own default.","type":"int"}},{"kind":128,"name":"$dialect","modifiers":0,"doc":{"description":"dialect selects the default SQL dialect for any statement executed within a connection, and it defaults to the highest one supported by client libraries. Functional only with InterBase 6 and up.","type":"int"}},{"kind":128,"name":"$role","modifiers":0,"doc":{"description":"Functional only with InterBase 5 and up.","type":"string"}},{"kind":128,"name":"$sync","modifiers":0,"description":"","doc":{"type":"int"}}],"doc":{"description":"Opens a persistent connection to an InterBase database.","type":"resource"}},{"kind":64,"name":"stream_supports_lock","modifiers":0,"children":[{"kind":128,"name":"$stream","modifiers":0,"doc":{"description":"The stream to check.","type":"resource"}}],"doc":{"description":"Tells whether the stream supports locking through flock().","type":"bool"}},{"kind":64,"name":"mssql_close","modifiers":0,"description":"","children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A MS SQL link identifier, returned by mssql_connect(). This function will not close persistent links generated by mssql_pconnect().","type":"resource"}}],"doc":{"type":"bool"}},{"kind":64,"name":"inflate_add","modifiers":0,"children":[{"kind":128,"name":"$context","modifiers":0,"doc":{"description":"A context created with inflate_init().","type":"resource"}},{"kind":128,"name":"$encoded_data","modifiers":0,"doc":{"description":"A chunk of compressed data.","type":"string"}},{"kind":128,"name":"$flush_mode","modifiers":0,"value":"ZLIB_SYNC_FLUSH","doc":{"description":"One of ZLIB_BLOCK, ZLIB_NO_FLUSH, ZLIB_PARTIAL_FLUSH, ZLIB_SYNC_FLUSH (default), ZLIB_FULL_FLUSH, ZLIB_FINISH. Normally you will want to set ZLIB_NO_FLUSH to maximize compression, and ZLIB_FINISH to terminate with the last chunk of data. See the » zlib manual for a detailed description of these constants.","type":"int"}}],"doc":{"description":"Incrementally inflates encoded data in the specified context.","type":"string"}},{"kind":64,"name":"apache_lookup_uri","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"The filename (URI) that's being requested.","type":"string"}}],"doc":{"description":"This performs a partial request for a URI. It goes just far enough to obtain all the important information about the given resource.","type":"object"}},{"kind":64,"name":"imagecolorresolvealpha","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$red","modifiers":0,"doc":{"description":"Value of red component.","type":"int"}},{"kind":128,"name":"$green","modifiers":0,"doc":{"description":"Value of green component.","type":"int"}},{"kind":128,"name":"$blue","modifiers":0,"doc":{"description":"Value of blue component.","type":"int"}},{"kind":128,"name":"$alpha","modifiers":0,"doc":{"description":"A value between 0 and 127. 0 indicates completely opaque while 127 indicates completely transparent.","type":"int"}}],"doc":{"description":"This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.","type":"int"}},{"kind":64,"name":"posix_getegid","modifiers":0,"children":[],"doc":{"description":"Return the numeric effective group ID of the current process.","type":"int"}},{"kind":64,"name":"sybase_fetch_array","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"array"}},{"kind":64,"name":"array_replace","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The array in which elements are replaced.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"The array from which elements will be extracted.","type":"array"}}],"doc":{"description":"array_replace() replaces the values of array1 with values having the same keys in each of the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later arrays overwriting the previous values.","type":"array"}},{"kind":64,"name":"xmlwriter_start_dtd_element","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$qualifiedName","modifiers":0,"doc":{"description":"The qualified name of the document type to create.","type":"string"}}],"doc":{"description":"Starts a DTD element.","type":"bool"}},{"kind":64,"name":"sybase_fetch_assoc","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"type":"array"}},{"kind":64,"name":"intlcal_clear","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$field","modifiers":0,"value":"NULL","doc":{"description":"One of the IntlCalendar date/time field constants. These are integer values between 0 and IntlCalendar::FIELD_COUNT.","type":"int"}}],"doc":{"description":"Clears either all of the fields or a specific field. A cleared field is marked as unset, giving it the lowest priority against overlapping fields or even default values when calculating the time. Additionally, its value is set to 0, though given the fieldʼs low priority, its value may have been internally set to another value by the time the field has finished been queried.","type":"bool"}},{"kind":64,"name":"bcdiv","modifiers":0,"children":[{"kind":128,"name":"$left_operand","modifiers":0,"doc":{"description":"The left operand, as a string.","type":"string"}},{"kind":128,"name":"$right_operand","modifiers":0,"doc":{"description":"The right operand, as a string.","type":"string"}},{"kind":128,"name":"$scale","modifiers":0,"value":"0","doc":{"description":"This optional parameter is used to set the number of digits after the decimal place in the result. If omitted, it will default to the scale set globally with the bcscale() function, or fallback to 0 if this has not been set.","type":"int"}}],"doc":{"description":"Divides the left_operand by the right_operand.","type":"string"}},{"kind":64,"name":"gzgetss","modifiers":0,"children":[{"kind":128,"name":"$zp","modifiers":0,"doc":{"description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"The length of data to get.","type":"int"}},{"kind":128,"name":"$allowable_tags","modifiers":0,"doc":{"description":"You can use this optional parameter to specify tags which should not be stripped.","type":"string"}}],"doc":{"description":"Identical to gzgets(), except that gzgetss() attempts to strip any HTML and PHP tags from the text it reads.","type":"string"}},{"kind":64,"name":"numfmt_set_pattern","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}},{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"Pattern in syntax described in » ICU DecimalFormat documentation.","type":"string"}}],"doc":{"description":"Set the pattern used by the formatter. Can not be used on a rule-based formatter.","type":"bool"}},{"kind":64,"name":"substr","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string. Must be one character or longer.","type":"string"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"If start is non-negative, the returned string will start at the start'th position in string, counting from zero. For instance, in the string 'abcdef', the character at position 0 is 'a', the character at position 2 is 'c', and so forth. If start is negative, the returned string will start at the start'th character from the end of string. If string is less than start characters long, FALSE will be returned. Example #1 Using a negative start <?php$rest = substr(\"abcdef\", -1);    // returns \"f\"$rest = substr(\"abcdef\", -2);    // returns \"ef\"$rest = substr(\"abcdef\", -3, 1); // returns \"d\"?>","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"doc":{"description":"If length is given and is positive, the string returned will contain at most length characters beginning from start (depending on the length of string). If length is given and is negative, then that many characters will be omitted from the end of string (after the start position has been calculated when a start is negative). If start denotes the position of this truncation or beyond, FALSE will be returned. If length is given and is 0, FALSE or NULL, an empty string will be returned. If length is omitted, the substring starting from start until the end of the string will be returned. Example #2 Using a negative length <?php$rest = substr(\"abcdef\", 0, -1);  // returns \"abcde\"$rest = substr(\"abcdef\", 2, -1);  // returns \"cde\"$rest = substr(\"abcdef\", 4, -4);  // returns false$rest = substr(\"abcdef\", -3, -1); // returns \"de\"?>","type":"int"}}],"doc":{"description":"Returns the portion of string specified by the start and length parameters.","type":"string"}},{"kind":64,"name":"snmp_set_valueretrieval","modifiers":0,"description":"","children":[{"kind":128,"name":"$method","modifiers":0,"value":"SNMP_VALUE_LIBRARY","doc":{"description":"types SNMP_VALUE_LIBRARY The return values will be as returned by the Net-SNMP library. SNMP_VALUE_PLAIN The return values will be the plain value without the SNMP type hint. SNMP_VALUE_OBJECT The return values will be objects with the properties \"value\" and \"type\", where the latter is one of the SNMP_OCTET_STR, SNMP_COUNTER etc. constants. The way \"value\" is returned is based on which one of constants SNMP_VALUE_LIBRARY, SNMP_VALUE_PLAIN is set.","type":"int"}}],"doc":{"type":"bool"}},{"kind":64,"name":"ini_get","modifiers":0,"children":[{"kind":128,"name":"$varname","modifiers":0,"doc":{"description":"The configuration option name.","type":"string"}}],"doc":{"description":"Returns the value of the configuration option on success.","type":"string"}},{"kind":64,"name":"date_timezone_set","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"Procedural style only: A DateTime object returned by date_create(). The function modifies this object.","type":"DateTime"}},{"kind":128,"name":"$timezone","modifiers":0,"doc":{"description":"A DateTimeZone object representing the desired time zone.","type":"DateTimeZone"}}],"doc":{"description":"Sets a new timezone for a DateTime object.","type":"DateTime"}},{"kind":64,"name":"idate","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The following characters are recognized in the format parameter string format character Description B Swatch Beat/Internet Time d Day of the month h Hour (12 hour format) H Hour (24 hour format) i Minutes I (uppercase i) returns 1 if DST is activated, 0 otherwise L (uppercase l) returns 1 for leap year, 0 otherwise m Month number s Seconds t Days in current month U Seconds since the Unix Epoch - January 1 1970 00:00:00 UTC - this is the same as time() w Day of the week (0 on Sunday) W ISO-8601 week number of year, weeks starting on Monday y Year (1 or 2 digits - check note below) Y Year (4 digits) z Day of the year Z Timezone offset in seconds","type":"string"}},{"kind":128,"name":"$timestamp","modifiers":0,"value":"time()","doc":{"description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time().","type":"int"}}],"doc":{"description":"Returns a number formatted according to the given format string using the given integer timestamp or the current local time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time().","type":"int"}},{"kind":64,"name":"gmp_sqrt","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Calculates square root of a.","type":"GMP"}},{"kind":64,"name":"iconv_strlen","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string.","type":"string"}},{"kind":128,"name":"$charset","modifiers":0,"value":"ini_get(\"iconv.internal_encoding\")","doc":{"description":"If charset parameter is omitted, str is assumed to be encoded in iconv.internal_encoding.","type":"string"}}],"doc":{"description":"In contrast to strlen(), iconv_strlen() counts the occurrences of characters in the given byte sequence str on the basis of the specified character set, the result of which is not necessarily identical to the length of the string in byte.","type":"int"}},{"kind":64,"name":"numfmt_get_error_code","modifiers":0,"children":[{"kind":128,"name":"$fmt","modifiers":0,"doc":{"description":"NumberFormatter object.","type":"NumberFormatter"}}],"doc":{"description":"Get error code from the last function performed by the formatter.","type":"int"}},{"kind":64,"name":"readdir","modifiers":0,"children":[{"kind":128,"name":"$dir_handle","modifiers":0,"doc":{"description":"The directory handle resource previously opened with opendir(). If the directory handle is not specified, the last link opened by opendir() is assumed.","type":"resource"}}],"doc":{"description":"Returns the name of the next entry in the directory. The entries are returned in the order in which they are stored by the filesystem.","type":"string"}},{"kind":64,"name":"ereg_replace","modifiers":0,"description":"","children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"A POSIX extended regular expression.","type":"string"}},{"kind":128,"name":"$replacement","modifiers":0,"doc":{"description":"If pattern contains parenthesized substrings, replacement may contain substrings of the form \\digit, which will be replaced by the text matching the digit'th parenthesized substring; \\0 will produce the entire contents of string. Up to nine substrings may be used. Parentheses may be nested, in which case they are counted by the opening parenthesis.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"oci_error","modifiers":0,"children":[{"kind":128,"name":"$resource","modifiers":0,"doc":{"description":"For most errors, resource is the resource handle that was passed to the failing function call. For connection errors with oci_connect(), oci_new_connect() or oci_pconnect() do not pass resource.","type":"resource"}}],"doc":{"description":"Returns the last error found.","type":"array"}},{"kind":64,"name":"spl_autoload_call","modifiers":0,"children":[{"kind":128,"name":"$class_name","modifiers":0,"doc":{"description":"The class name being searched.","type":"string"}}],"doc":{"description":"This function can be used to manually search for a class or interface using the registered __autoload functions.","type":"void"}},{"kind":64,"name":"sybase_get_last_message","modifiers":0,"description":"","children":[],"doc":{"type":"string"}},{"kind":64,"name":"mb_strcut","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The string being cut.","type":"string"}},{"kind":128,"name":"$start","modifiers":0,"doc":{"description":"If start is non-negative, the returned string will start at the start'th byte position in str, counting from zero. For instance, in the string 'abcdef', the byte at position 0 is 'a', the byte at position 2 is 'c', and so forth. If start is negative, the returned string will start at the start'th byte from the end of str.","type":"int"}},{"kind":128,"name":"$length","modifiers":0,"value":"NULL","doc":{"description":"Length in bytes. If omitted or NULL is passed, extract all bytes to the end of the string.","type":"int"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"mb_internal_encoding()","doc":{"description":"The encoding parameter is the character encoding. If it is omitted, the internal character encoding value will be used.","type":"string"}}],"doc":{"description":"mb_strcut() extracts a substring from a string similarly to mb_substr(), but operates on bytes instead of characters. If the cut position happens to be between two bytes of a multi-byte character, the cut is performed starting from the first byte of that character. This is also the difference to the substr() function, which would simply cut the string between the bytes and thus result in a malformed byte sequence.","type":"string"}},{"kind":64,"name":"ibase_errmsg","modifiers":0,"description":"","children":[],"doc":{"type":"string"}},{"kind":64,"name":"dba_fetch","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The key the data is specified by. Note: When working with inifiles this function accepts arrays as keys where index 0 is the group and index 1 is the value name. See: dba_key_split().","type":"string"}},{"kind":128,"name":"$skip","modifiers":0,"doc":{"description":"The number of key-value pairs to ignore when using cdb databases. This value is ignored for all other databases which do not support multiple keys with the same name.","type":"int"}},{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The database handler, returned by dba_open() or dba_popen().","type":"resource"}}],"doc":{"description":"dba_fetch() fetches the data specified by key from the database specified with handle.","type":"string"}},{"kind":64,"name":"highlight_string","modifiers":0,"description":"","children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The PHP code to be highlighted. This should include the opening tag.","type":"string"}},{"kind":128,"name":"$return","modifiers":0,"value":"false","doc":{"description":"Set this parameter to TRUE to make this function return the highlighted code.","type":"bool"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"ibase_num_params","modifiers":0,"children":[{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The prepared query handle.","type":"resource"}}],"doc":{"description":"This function returns the number of parameters in the prepared query specified by query. This is the number of binding arguments that must be present when calling ibase_execute().","type":"int"}},{"kind":64,"name":"shm_get_var","modifiers":0,"children":[{"kind":128,"name":"$shm_identifier","modifiers":0,"doc":{"description":"Shared memory segment, obtained from shm_attach().","type":"resource"}},{"kind":128,"name":"$variable_key","modifiers":0,"doc":{"description":"The variable key.","type":"int"}}],"doc":{"description":"shm_get_var() returns the variable with a given variable_key, in the given shared memory segment. The variable is still present in the shared memory.","type":"mixed"}},{"kind":64,"name":"ibase_fetch_assoc","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result handle.","type":"resource"}},{"kind":128,"name":"$fetch_flag","modifiers":0,"value":"0","doc":{"description":"fetch_flag is a combination of the constants IBASE_TEXT and IBASE_UNIXTIME ORed together. Passing IBASE_TEXT will cause this function to return BLOB contents instead of BLOB ids. Passing IBASE_UNIXTIME will cause this function to return date/time values as Unix timestamps instead of as formatted strings.","type":"int"}}],"doc":{"description":"Fetch a result row from a query as an associative array.","type":"array"}},{"kind":64,"name":"oci_result","modifiers":0,"children":[{"kind":128,"name":"$statement","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$field","modifiers":0,"doc":{"description":"Can be either use the column number (1-based) or the column name. The case of the column name must be the case that Oracle meta data describes the column as, which is uppercase for columns created case insensitively.","type":"mixed"}}],"doc":{"description":"Returns the data from field in the current row, fetched by oci_fetch().","type":"mixed"}},{"kind":64,"name":"acos","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"Returns the arc cosine of arg in radians. acos() is the complementary function of cos(), which means that a==cos(acos(a)) for every value of a that is within acos()' range.","type":"float"}},{"kind":64,"name":"escapeshellcmd","modifiers":0,"children":[{"kind":128,"name":"$command","modifiers":0,"doc":{"description":"The command that will be escaped.","type":"string"}}],"doc":{"description":"escapeshellcmd() escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands. This function should be used to make sure that any data coming from user input is escaped before this data is passed to the exec() or system() functions, or to the backtick operator.","type":"string"}},{"kind":64,"name":"imap_undelete","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$msg_number","modifiers":0,"doc":{"description":"The message number","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"description":"","value":"0","doc":{"type":"int"}}],"doc":{"description":"Removes the deletion flag for a specified message, which is set by imap_delete() or imap_mail_move().","type":"bool"}},{"kind":64,"name":"imap_deletemailbox","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information","type":"string"}}],"doc":{"description":"Deletes the specified mailbox.","type":"bool"}},{"kind":64,"name":"zip_read","modifiers":0,"children":[{"kind":128,"name":"$zip","modifiers":0,"doc":{"description":"A ZIP file previously opened with zip_open().","type":"resource"}}],"doc":{"description":"Reads the next entry in a zip file archive.","type":"resource"}},{"kind":64,"name":"imagecrop","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$rect","modifiers":0,"doc":{"description":"The cropping rectangle as array with keys x, y, width and height.","type":"array"}}],"doc":{"description":"Crops an image to the given rectangular area and returns the resulting image. The given image is not modified.","type":"resource"}},{"kind":64,"name":"imap_rfc822_parse_headers","modifiers":0,"children":[{"kind":128,"name":"$headers","modifiers":0,"doc":{"description":"The parsed headers data","type":"string"}},{"kind":128,"name":"$defaulthost","modifiers":0,"value":"\"UNKNOWN\"","doc":{"description":"The default host name","type":"string"}}],"doc":{"description":"Gets an object of various header elements, similar to imap_header().","type":"object"}},{"kind":64,"name":"transliterator_get_error_code","modifiers":0,"children":[],"doc":{"description":"Gets the last error code for this transliterator.","type":"int"}},{"kind":64,"name":"ldap_set_rebind_proc","modifiers":0,"description":"","children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$callback","modifiers":0,"description":"","doc":{"type":"callable"}}],"doc":{"type":"bool"}},{"kind":64,"name":"msql_drop_db","modifiers":0,"children":[{"kind":128,"name":"$database_name","modifiers":0,"doc":{"description":"The name of the database.","type":"string"}},{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"The mSQL connection. If not specified, the last link opened by msql_connect() is assumed. If no such link is found, the function will try to establish a link as if msql_connect() was called, and use it.","type":"resource"}}],"doc":{"description":"msql_drop_db() attempts to drop (remove) a database from the mSQL server.","type":"bool"}},{"kind":64,"name":"odbc_foreignkeys","modifiers":0,"children":[{"kind":128,"name":"$connection_id","modifiers":0,"doc":{"description":"The ODBC connection identifier, see odbc_connect() for details.","type":"resource"}},{"kind":128,"name":"$pk_qualifier","modifiers":0,"doc":{"description":"The primary key qualifier.","type":"string"}},{"kind":128,"name":"$pk_owner","modifiers":0,"doc":{"description":"The primary key owner.","type":"string"}},{"kind":128,"name":"$pk_table","modifiers":0,"doc":{"description":"The primary key table.","type":"string"}},{"kind":128,"name":"$fk_qualifier","modifiers":0,"doc":{"description":"The foreign key qualifier.","type":"string"}},{"kind":128,"name":"$fk_owner","modifiers":0,"doc":{"description":"The foreign key owner.","type":"string"}},{"kind":128,"name":"$fk_table","modifiers":0,"doc":{"description":"The foreign key table.","type":"string"}}],"doc":{"description":"Retrieves a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table","type":"resource"}},{"kind":64,"name":"xmlrpc_get_type","modifiers":0,"description":"","children":[{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"PHP value","type":"mixed"}}],"doc":{"type":"string"}},{"kind":64,"name":"compact","modifiers":0,"children":[{"kind":128,"name":"$varname1","modifiers":0,"doc":{"description":"compact() takes a variable number of parameters. Each parameter can be either a string containing the name of the variable, or an array of variable names. The array can contain other arrays of variable names inside it; compact() handles it recursively.","type":"mixed"}}],"doc":{"description":"Creates an array containing variables and their values.","type":"array"}},{"kind":64,"name":"posix_setuid","modifiers":0,"children":[{"kind":128,"name":"$uid","modifiers":0,"doc":{"description":"The user id.","type":"int"}}],"doc":{"description":"Set the real user ID of the current process. This is a privileged function that needs appropriate privileges (usually root) on the system to be able to perform this function.","type":"bool"}},{"kind":64,"name":"ibase_commit","modifiers":0,"children":[{"kind":128,"name":"$link_or_trans_identifier","modifiers":0,"value":"NULL","doc":{"description":"If called without an argument, this function commits the default transaction of the default link. If the argument is a connection identifier, the default transaction of the corresponding connection will be committed. If the argument is a transaction identifier, the corresponding transaction will be committed.","type":"resource"}}],"doc":{"description":"Commits a transaction.","type":"bool"}},{"kind":64,"name":"stripos","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string to search in.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"Note that the needle may be a string of one or more characters. If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.","type":"string"}},{"kind":128,"name":"$offset","modifiers":0,"value":"0","doc":{"description":"If specified, search will start this number of characters counted from the beginning of the string. If the offset is negative, the search will start this number of characters counted from the end of the string.","type":"int"}}],"doc":{"description":"Find the numeric position of the first occurrence of needle in the haystack string.","type":"mixed"}},{"kind":64,"name":"fbsql_num_rows","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"A result identifier returned by fbsql_query() or fbsql_db_query().","type":"resource"}}],"doc":{"description":"Gets the number of rows in the given result set.","type":"int"}},{"kind":64,"name":"pg_field_type","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$field_number","modifiers":0,"doc":{"description":"Field number, starting from 0.","type":"int"}}],"doc":{"description":"pg_field_type() returns a string containing the base type name of the given field_number in the given PostgreSQL result resource.","type":"string"}},{"kind":64,"name":"ldap_delete","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$dn","modifiers":0,"doc":{"description":"The distinguished name of an LDAP entity.","type":"string"}}],"doc":{"description":"Deletes a particular entry in LDAP directory.","type":"bool"}},{"kind":64,"name":"spl_classes","modifiers":0,"children":[],"doc":{"description":"This function returns an array with the current available SPL classes.","type":"array"}},{"kind":64,"name":"imageopenpolygon","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$points","modifiers":0,"doc":{"description":"An array containing the polygon's vertices, e.g.: points[0] = x0 points[1] = y0 points[2] = x1 points[3] = y1","type":"array"}},{"kind":128,"name":"$num_points","modifiers":0,"doc":{"description":"Total number of points (vertices).","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"imageopenpolygon() draws an open polygon on the given image. Contrary to imagepolygon(), no line is drawn between the last and the first point.","type":"bool"}},{"kind":64,"name":"imagecreatetruecolor","modifiers":0,"children":[{"kind":128,"name":"$width","modifiers":0,"doc":{"description":"Image width.","type":"int"}},{"kind":128,"name":"$height","modifiers":0,"doc":{"description":"Image height.","type":"int"}}],"doc":{"description":"imagecreatetruecolor() returns an image identifier representing a black image of the specified size.","type":"resource"}},{"kind":64,"name":"mysqli_options","modifiers":0,"children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$option","modifiers":0,"doc":{"description":"The option that you want to set. It can be one of the following values: Valid options Name Description MYSQLI_OPT_CONNECT_TIMEOUT connection timeout in seconds (supported on Windows with TCP/IP since PHP 5.3.1) MYSQLI_OPT_LOCAL_INFILE enable/disable use of LOAD LOCAL INFILE MYSQLI_INIT_COMMAND command to execute after when connecting to MySQL server MYSQLI_READ_DEFAULT_FILE Read options from named option file instead of my.cnf MYSQLI_READ_DEFAULT_GROUP Read options from the named group from my.cnf or the file specified with MYSQL_READ_DEFAULT_FILE. MYSQLI_SERVER_PUBLIC_KEY RSA public key file used with the SHA-256 based authentication. MYSQLI_OPT_NET_CMD_BUFFER_SIZE The size of the internal command/network buffer. Only valid for mysqlnd. MYSQLI_OPT_NET_READ_BUFFER_SIZE Maximum read chunk size in bytes when reading the body of a MySQL command packet. Only valid for mysqlnd. MYSQLI_OPT_INT_AND_FLOAT_NATIVE Convert integer and float columns back to PHP numbers. Only valid for mysqlnd. MYSQLI_OPT_SSL_VERIFY_SERVER_CERT","type":"int"}},{"kind":128,"name":"$value","modifiers":0,"doc":{"description":"The value for the option.","type":"mixed"}}],"doc":{"description":"Used to set extra connect options and affect behavior for a connection.","type":"bool"}},{"kind":64,"name":"gzrewind","modifiers":0,"children":[{"kind":128,"name":"$zp","modifiers":0,"doc":{"description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen().","type":"resource"}}],"doc":{"description":"Sets the file position indicator of the given gz-file pointer to the beginning of the file stream.","type":"bool"}},{"kind":64,"name":"tidy_get_head","modifiers":0,"children":[{"kind":128,"name":"$object","modifiers":0,"doc":{"description":"The Tidy object.","type":"tidy"}}],"doc":{"description":"Returns a tidyNode object starting from the <head> tag of the tidy parse tree.","type":"tidyNode"}},{"kind":64,"name":"pg_result_error","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}}],"doc":{"description":"pg_result_error() returns any error message associated with the result resource. Therefore, the user has a better chance of getting the correct error message than with pg_last_error().","type":"string"}},{"kind":64,"name":"image_type_to_mime_type","modifiers":0,"children":[{"kind":128,"name":"$imagetype","modifiers":0,"doc":{"description":"One of the IMAGETYPE_XXX constants.","type":"int"}}],"doc":{"description":"The image_type_to_mime_type() function will determine the Mime-Type for an IMAGETYPE constant.","type":"string"}},{"kind":64,"name":"variant_abs","modifiers":0,"children":[{"kind":128,"name":"$val","modifiers":0,"doc":{"description":"The variant.","type":"mixed"}}],"doc":{"description":"Returns the absolute value of a variant.","type":"mixed"}},{"kind":64,"name":"mysql_field_table","modifiers":0,"description":"","children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to mysql_query().","type":"resource"}},{"kind":128,"name":"$field_offset","modifiers":0,"doc":{"description":"The numerical field offset. The field_offset starts at 0. If field_offset does not exist, an error of level E_WARNING is also issued.","type":"int"}}],"doc":{"type":"string"}},{"kind":64,"name":"pg_delete","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"Name of the table from which to delete rows.","type":"string"}},{"kind":128,"name":"$assoc_array","modifiers":0,"doc":{"description":"An array whose keys are field names in the table table_name, and whose values are the values of those fields that are to be deleted.","type":"array"}},{"kind":128,"name":"$options","modifiers":0,"value":"PGSQL_DML_EXEC","doc":{"description":"Any number of PGSQL_CONV_FORCE_NULL, PGSQL_DML_NO_CONV, PGSQL_DML_ESCAPE, PGSQL_DML_EXEC, PGSQL_DML_ASYNC or PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the options then query string is returned. When PGSQL_DML_NO_CONV or PGSQL_DML_ESCAPE is set, it does not call pg_convert() internally.","type":"int"}}],"doc":{"description":"pg_delete() deletes records from a table specified by the keys and values in assoc_array. If options is specified, pg_convert() is applied to assoc_array with the specified options.","type":"mixed"}},{"kind":64,"name":"locale_get_script","modifiers":0,"children":[{"kind":128,"name":"$locale","modifiers":0,"doc":{"description":"The locale to extract the script code from","type":"string"}}],"doc":{"description":"Gets the script for the input locale.","type":"string"}},{"kind":64,"name":"array_udiff_uassoc","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"The first array.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"The second array.","type":"array"}},{"kind":128,"name":"$key_compare_func","modifiers":0,"doc":{"description":"The comparison of keys (indices) is done also by the callback function key_compare_func. This behaviour is unlike what array_udiff_assoc() does, since the latter compares the indices by using an internal function.","type":"callable"}}],"doc":{"description":"Computes the difference of arrays with additional index check, compares data and indexes by a callback function.","type":"array"}},{"kind":64,"name":"openssl_csr_get_subject","modifiers":0,"description":"","children":[{"kind":128,"name":"$csr","modifiers":0,"description":"","doc":{"type":"mixed"}},{"kind":128,"name":"$use_shortnames","modifiers":0,"description":"","value":"true","doc":{"type":"bool"}}],"doc":{"type":"array"}},{"kind":64,"name":"getservbyport","modifiers":0,"children":[{"kind":128,"name":"$port","modifiers":0,"doc":{"description":"The port number.","type":"int"}},{"kind":128,"name":"$protocol","modifiers":0,"doc":{"description":"protocol is either \"tcp\" or \"udp\" (in lowercase).","type":"string"}}],"doc":{"description":"getservbyport() returns the Internet service associated with port for the specified protocol as per /etc/services.","type":"string"}},{"kind":64,"name":"sscanf","modifiers":0,"children":[{"kind":128,"name":"$str","modifiers":0,"doc":{"description":"The input string being parsed.","type":"string"}},{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The interpreted format for str, which is described in the documentation for sprintf() with following differences: Function is not locale-aware. F, g, G and b are not supported. D stands for decimal number. i stands for integer with base detection. n stands for number of characters processed so far.","type":"string"}},{"kind":128,"name":"$...","modifiers":1024,"doc":{"description":"Optionally pass in variables by reference that will contain the parsed values.","type":"mixed"}}],"doc":{"description":"The function sscanf() is the input analog of printf(). sscanf() reads from the string str and interprets it according to the specified format, which is described in the documentation for sprintf().","type":"mixed"}},{"kind":64,"name":"odbc_cursor","modifiers":0,"children":[{"kind":128,"name":"$result_id","modifiers":0,"doc":{"description":"The result identifier.","type":"resource"}}],"doc":{"description":"Gets the cursorname for the given result_id.","type":"string"}},{"kind":64,"name":"curl_exec","modifiers":0,"children":[{"kind":128,"name":"$ch","modifiers":0,"doc":{"description":"A cURL handle returned by curl_init().","type":"resource"}}],"doc":{"description":"Execute the given cURL session.","type":"mixed"}},{"kind":64,"name":"pg_send_prepare","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}},{"kind":128,"name":"$stmtname","modifiers":0,"doc":{"description":"The name to give the prepared statement. Must be unique per-connection. If \"\" is specified, then an unnamed statement is created, overwriting any previously defined unnamed statement.","type":"string"}},{"kind":128,"name":"$query","modifiers":0,"doc":{"description":"The parameterized SQL statement. Must contain only a single statement. (multiple statements separated by semi-colons are not allowed.) If any parameters are used, they are referred to as $1, $2, etc.","type":"string"}}],"doc":{"description":"Sends a request to create a prepared statement with the given parameters, without waiting for completion.","type":"bool"}},{"kind":64,"name":"get_declared_classes","modifiers":0,"children":[],"doc":{"description":"Gets the declared classes.","type":"array"}},{"kind":64,"name":"gmp_divexact","modifiers":0,"children":[{"kind":128,"name":"$n","modifiers":0,"doc":{"description":"The number being divided. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}},{"kind":128,"name":"$d","modifiers":0,"doc":{"description":"The number that a is being divided by. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Divides n by d, using fast \"exact division\" algorithm. This function produces correct results only when it is known in advance that d divides n.","type":"GMP"}},{"kind":64,"name":"mcrypt_encrypt","modifiers":0,"description":"","children":[{"kind":128,"name":"$cipher","modifiers":0,"doc":{"description":"One of the MCRYPT_ciphername constants, or the name of the algorithm as string.","type":"string"}},{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"The key with which the data will be encrypted. If the provided key size is not supported by the cipher, the function will emit a warning and return FALSE","type":"string"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"The data that will be encrypted with the given cipher and mode. If the size of the data is not n * blocksize, the data will be padded with '\\0'. The returned crypttext can be larger than the size of the data that was given by data.","type":"string"}},{"kind":128,"name":"$mode","modifiers":0,"doc":{"description":"One of the MCRYPT_MODE_modename constants, or one of the following strings: \"ecb\", \"cbc\", \"cfb\", \"ofb\", \"nofb\" or \"stream\".","type":"string"}},{"kind":128,"name":"$iv","modifiers":0,"doc":{"description":"Used for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If the provided IV size is not supported by the chaining mode or no IV was provided, but the chaining mode requires one, the function will emit a warning and return FALSE.","type":"string"}}],"doc":{"type":"string"}},{"kind":64,"name":"strtoupper","modifiers":0,"children":[{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The input string.","type":"string"}}],"doc":{"description":"Returns string with all alphabetic characters converted to uppercase.","type":"string"}},{"kind":64,"name":"enchant_dict_add_to_session","modifiers":0,"children":[{"kind":128,"name":"$dict","modifiers":0,"doc":{"description":"Dictionary resource","type":"resource"}},{"kind":128,"name":"$word","modifiers":0,"doc":{"description":"The word to add","type":"string"}}],"doc":{"description":"Add a word to the given dictionary. It will be added only for the active spell-checking session.","type":"void"}},{"kind":64,"name":"feof","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose()).","type":"resource"}}],"doc":{"description":"Tests for end-of-file on a file pointer.","type":"bool"}},{"kind":64,"name":"fbsql_insert_id","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}}],"doc":{"description":"Gets the id generated from the previous INSERT operation which created a DEFAULT UNIQUE value.","type":"int"}},{"kind":64,"name":"spl_autoload_register","modifiers":0,"children":[{"kind":128,"name":"$autoload_function","modifiers":0,"doc":{"description":"The autoload function being registered. If no parameter is provided, then the default implementation of spl_autoload() will be registered.","type":"callable"}},{"kind":128,"name":"$throw","modifiers":0,"value":"true","doc":{"description":"This parameter specifies whether spl_autoload_register() should throw exceptions when the autoload_function cannot be registered.","type":"bool"}},{"kind":128,"name":"$prepend","modifiers":0,"value":"false","doc":{"description":"If true, spl_autoload_register() will prepend the autoloader on the autoload queue instead of appending it.","type":"bool"}}],"doc":{"description":"Register a function with the spl provided __autoload queue. If the queue is not yet activated it will be activated.","type":"bool"}},{"kind":64,"name":"gmp_init","modifiers":0,"children":[{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"An integer or a string. The string representation can be decimal, hexadecimal or octal.","type":"mixed"}},{"kind":128,"name":"$base","modifiers":0,"value":"0","doc":{"description":"The base. The base may vary from 2 to 36. If base is 0 (default value), the actual base is determined from the leading characters: if the first two characters are 0x or 0X, hexadecimal is assumed, otherwise if the first character is \"0\", octal is assumed, otherwise decimal is assumed.","type":"int"}}],"doc":{"description":"Creates a GMP number from an integer or string.","type":"GMP"}},{"kind":64,"name":"debug_zval_dump","modifiers":0,"children":[{"kind":128,"name":"$variable","modifiers":0,"doc":{"description":"The variable being evaluated.","type":"mixed"}}],"doc":{"description":"Dumps a string representation of an internal zend value to output.","type":"void"}},{"kind":64,"name":"mb_split","modifiers":0,"description":"","children":[{"kind":128,"name":"$pattern","modifiers":0,"doc":{"description":"The regular expression pattern.","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string being split.","type":"string"}},{"kind":128,"name":"$limit","modifiers":0,"value":"-1","doc":{"description":"If optional parameter limit is specified, it will be split in limit elements as maximum.","type":"int"}}],"doc":{"type":"array"}},{"kind":64,"name":"stream_get_wrappers","modifiers":0,"children":[],"doc":{"description":"Retrieve list of registered streams available on the running system.","type":"array"}},{"kind":64,"name":"ob_start","modifiers":0,"children":[{"kind":128,"name":"$output_callback","modifiers":0,"value":"NULL","doc":{"description":"An optional output_callback function may be specified. This function takes a string as a parameter and should return a string. The function will be called when the output buffer is flushed (sent) or cleaned (with ob_flush(), ob_clean() or similar function) or when the output buffer is flushed to the browser at the end of the request. When output_callback is called, it will receive the contents of the output buffer as its parameter and is expected to return a new output buffer as a result, which will be sent to the browser. If the output_callback is not a callable function, this function will return FALSE. This is the callback signature: string handler ( string $buffer [, int $phase ] ) buffer Contents of the output buffer. phase Bitmask of PHP_OUTPUT_HANDLER_* constants. If output_callback returns FALSE original input is sent to the browser. The output_callback parameter may be bypassed by passing a NULL value. ob_end_clean(), ob_end_flush(), ob_clean(), ob_flush() and ob_start() may not be called from a callback function. If you call them from callback function, the behavior is undefined. If you would like to delete the contents of a buffer, return \"\" (a null string) from callback function. You can't even call functions using the output buffering functions like print_r($expression, true) or highlight_file($filename, true) from a callback function. Note: ob_gzhandler() function exists to facilitate sending gz-encoded data to web browsers that support compressed web pages. ob_gzhandler() determines what type of content encoding the browser will accept and will return its output accordingly.","type":"callable"}},{"kind":128,"name":"$chunk_size","modifiers":0,"value":"0","doc":{"description":"If the optional parameter chunk_size is passed, the buffer will be flushed after any output call which causes the buffer's length to equal or exceed chunk_size. The default value 0 means that the output function will only be called when the output buffer is closed. Prior to PHP 5.4.0, the value 1 was a special case value that set the chunk size to 4096 bytes.","type":"int"}},{"kind":128,"name":"$flags","modifiers":0,"value":"PHP_OUTPUT_HANDLER_STDFLAGS","doc":{"description":"The flags parameter is a bitmask that controls the operations that can be performed on the output buffer. The default is to allow output buffers to be cleaned, flushed and removed, which can be set explicitly via PHP_OUTPUT_HANDLER_CLEANABLE | PHP_OUTPUT_HANDLER_FLUSHABLE | PHP_OUTPUT_HANDLER_REMOVABLE, or PHP_OUTPUT_HANDLER_STDFLAGS as shorthand. Each flag controls access to a set of functions, as described below: Constant Functions PHP_OUTPUT_HANDLER_CLEANABLE ob_clean(), ob_end_clean(), and ob_get_clean(). PHP_OUTPUT_HANDLER_FLUSHABLE ob_end_flush(), ob_flush(), and ob_get_flush(). PHP_OUTPUT_HANDLER_REMOVABLE ob_end_clean(), ob_end_flush(), and ob_get_flush().","type":"int"}}],"doc":{"description":"This function will turn output buffering on. While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer.","type":"bool"}},{"kind":64,"name":"xmlwriter_flush","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$empty","modifiers":0,"value":"true","doc":{"description":"Whether to empty the buffer or not. Default is TRUE.","type":"bool"}}],"doc":{"description":"Flushes the current buffer.","type":"mixed"}},{"kind":64,"name":"ldap_next_attribute","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result_entry_identifier","modifiers":0,"description":"","doc":{"type":"resource"}}],"doc":{"description":"Retrieves the attributes in an entry. The first call to ldap_next_attribute() is made with the result_entry_identifier returned from ldap_first_attribute().","type":"string"}},{"kind":64,"name":"interface_exists","modifiers":0,"children":[{"kind":128,"name":"$interface_name","modifiers":0,"doc":{"description":"The interface name","type":"string"}},{"kind":128,"name":"$autoload","modifiers":0,"value":"true","doc":{"description":"Whether to call __autoload or not by default.","type":"bool"}}],"doc":{"description":"Checks if the given interface has been defined.","type":"bool"}},{"kind":64,"name":"xmlwriter_start_cdata","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}}],"doc":{"description":"Starts a CDATA.","type":"bool"}},{"kind":64,"name":"intltz_get_error_code","modifiers":0,"description":"","children":[],"doc":{"type":"integer"}},{"kind":64,"name":"strrchr","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The string to search in","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"If needle contains more than one character, only the first is used. This behavior is different from that of strstr(). If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.","type":"mixed"}}],"doc":{"description":"This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack.","type":"string"}},{"kind":64,"name":"dba_close","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"The database handler, returned by dba_open() or dba_popen().","type":"resource"}}],"doc":{"description":"dba_close() closes the established database and frees all resources of the specified database handle.","type":"void"}},{"kind":64,"name":"sprintf","modifiers":0,"children":[{"kind":128,"name":"$format","modifiers":0,"doc":{"description":"The format string is composed of zero or more directives: ordinary characters (excluding %) that are copied directly to the result, and conversion specifications, each of which results in fetching its own parameter. This applies to both sprintf() and printf(). Each conversion specification consists of a percent sign (%), followed by one or more of these elements, in order: An optional sign specifier that forces a sign (- or +) to be used on a number. By default, only the - sign is used on a number if it's negative. This specifier forces positive numbers to have the + sign attached as well. An optional padding specifier that says what character will be used for padding the results to the right string size. This may be a space character or a 0 (zero character). The default is to pad with spaces. An alternate padding character can be specified by prefixing it with a single quote ('). See the examples below. An optional alignment specifier that says if the result should be left-justified or right-justified. The default is right-justified; a - character here will make it left-justified. An optional number, a width specifier that says how many characters (minimum) this conversion should result in. An optional precision specifier in the form of a period (.) followed by an optional decimal digit string that says how many decimal digits should be displayed for floating-point numbers. When using this specifier on a string, it acts as a cutoff point, setting a maximum character limit to the string. Additionally, the character to use when padding a number may optionally be specified between the period and the digit. A type specifier that says what type the argument data should be treated as. Possible types: % - a literal percent character. No argument is required. b - the argument is treated as an integer, and presented as a binary number. c - the argument is treated as an integer, and presented as the character with that ASCII value. d - the argument is treated as an integer, and presented as a (signed) decimal number. e - the argument is treated as scientific notation (e.g. 1.2e+2). The precision specifier stands for the number of digits after the decimal point since PHP 5.2.1. In earlier versions, it was taken as number of significant digits (one less). E - like %e but uses uppercase letter (e.g. 1.2E+2). f - the argument is treated as a float, and presented as a floating-point number (locale aware). F - the argument is treated as a float, and presented as a floating-point number (non-locale aware). Available since PHP 5.0.3. g - shorter of %e and %f. G - shorter of %E and %f. o - the argument is treated as an integer, and presented as an octal number. s - the argument is treated as and presented as a string. u - the argument is treated as an integer, and presented as an unsigned decimal number. x - the argument is treated as an integer and presented as a hexadecimal number (with lowercase letters). X - the argument is treated as an integer and presented as a hexadecimal number (with uppercase letters). Variables will be co-erced to a suitable type for the specifier: Type Handling Type Specifiers string s integer d, u, c, o, x, X, b double g, G, e, E, f, F Warning Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results The format string supports argument numbering/swapping. Here is an example: Example #1 Argument swapping <?php$num = 5;$location = 'tree';$format = 'There are %d monkeys in the %s';echo sprintf($format, $num, $location);?> This will output \"There are 5 monkeys in the tree\". But imagine we are creating a format string in a separate file, commonly because we would like to internationalize it and we rewrite it as: Example #2 Argument swapping <?php$format = 'The %s contains %d monkeys';echo sprintf($format, $num, $location);?> We now have a problem. The order of the placeholders in the format string does not match the order of the arguments in the code. We would like to leave the code as is and simply indicate in the format string which arguments the placeholders refer to. We would write the format string like this instead: Example #3 Argument swapping <?php$format = 'The %2$s contains %1$d monkeys';echo sprintf($format, $num, $location);?> An added benefit here is that you can repeat the placeholders without adding more arguments in the code. For example: Example #4 Argument swapping <?php$format = 'The %2$s contains %1$d monkeys.           That\\'s a nice %2$s full of %1$d monkeys.';echo sprintf($format, $num, $location);?> When using argument swapping, the n$ position specifier must come immediately after the percent sign (%), before any other specifiers, as shown in the example below. Example #5 Specifying padding character <?phpecho sprintf(\"%'.9d\\n\", 123);echo sprintf(\"%'.09d\\n\", 123);?> The above example will output: ......123 000000123 Example #6 Position specifier with other specifiers <?php$format = 'The %2$s contains %1$04d monkeys';echo sprintf($format, $num, $location);?> The above example will output: The tree contains 0005 monkeys Note: Attempting to use a position specifier greater than PHP_INT_MAX will result in sprintf() generating warnings. Warning The c type specifier ignores padding and width","type":"string"}},{"kind":128,"name":"$args","modifiers":0,"description":"","doc":{"type":"mixed"}}],"doc":{"description":"Returns a string produced according to the formatting string format.","type":"string"}},{"kind":64,"name":"pg_convert","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}},{"kind":128,"name":"$table_name","modifiers":0,"doc":{"description":"Name of the table against which to convert types.","type":"string"}},{"kind":128,"name":"$assoc_array","modifiers":0,"doc":{"description":"Data to be converted.","type":"array"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"Any number of PGSQL_CONV_IGNORE_DEFAULT, PGSQL_CONV_FORCE_NULL or PGSQL_CONV_IGNORE_NOT_NULL, combined.","type":"int"}}],"doc":{"description":"pg_convert() checks and converts the values in assoc_array into suitable values for use in an SQL statement. Precondition for pg_convert() is the existence of a table table_name which has at least as many columns as assoc_array has elements. The fieldnames in table_name must match the indices in assoc_array and the corresponding datatypes must be compatible. Returns an array with the converted values on success, FALSE otherwise.","type":"array"}},{"kind":64,"name":"pg_connection_reset","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource.","type":"resource"}}],"doc":{"description":"pg_connection_reset() resets the connection. It is useful for error recovery.","type":"bool"}},{"kind":64,"name":"xmlrpc_decode","modifiers":0,"description":"","children":[{"kind":128,"name":"$xml","modifiers":0,"doc":{"description":"XML response returned by XMLRPC method.","type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"value":"\"iso-8859-1\"","doc":{"description":"Input encoding supported by iconv.","type":"string"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"ldap_count_entries","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"An LDAP link identifier, returned by ldap_connect().","type":"resource"}},{"kind":128,"name":"$result_identifier","modifiers":0,"doc":{"description":"The internal LDAP result.","type":"resource"}}],"doc":{"description":"Returns the number of entries stored in the result of previous search operations.","type":"int"}},{"kind":64,"name":"imagesx","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}}],"doc":{"description":"Returns the width of the given image resource.","type":"int"}},{"kind":64,"name":"oci_pconnect","modifiers":0,"children":[{"kind":128,"name":"$username","modifiers":0,"doc":{"description":"The Oracle user name.","type":"string"}},{"kind":128,"name":"$password","modifiers":0,"doc":{"description":"The password for username.","type":"string"}},{"kind":128,"name":"$connection_string","modifiers":0,"doc":{"description":"Contains the Oracle instance to connect to. It can be an » Easy Connect string, or a Connect Name from the tnsnames.ora file, or the name of a local Oracle instance. If not specified, PHP uses environment variables such as TWO_TASK (on Linux) or LOCAL (on Windows) and ORACLE_SID to determine the Oracle instance to connect to. To use the Easy Connect naming method, PHP must be linked with Oracle 10g or greater Client libraries. The Easy Connect string for Oracle 10g is of the form: [//]host_name[:port][/service_name]. From Oracle 11g, the syntax is: [//]host_name[:port][/service_name][:server_type][/instance_name]. Service names can be found by running the Oracle utility lsnrctl status on the database server machine. The tnsnames.ora file can be in the Oracle Net search path, which includes $ORACLE_HOME/network/admin and /etc. Alternatively set TNS_ADMIN so that $TNS_ADMIN/tnsnames.ora is read. Make sure the web daemon has read access to the file.","type":"string"}},{"kind":128,"name":"$character_set","modifiers":0,"doc":{"description":"Determines the character set used by the Oracle Client libraries. The character set does not need to match the character set used by the database. If it doesn't match, Oracle will do its best to convert data to and from the database character set. Depending on the character sets this may not give usable results. Conversion also adds some time overhead. If not specified, the Oracle Client libraries determine a character set from the NLS_LANG environment variable. Passing this parameter can reduce the time taken to connect.","type":"string"}},{"kind":128,"name":"$session_mode","modifiers":0,"doc":{"description":"This parameter is available since version PHP 5 (PECL OCI8 1.1) and accepts the following values: OCI_DEFAULT, OCI_SYSOPER and OCI_SYSDBA. If either OCI_SYSOPER or OCI_SYSDBA were specified, this function will try to establish privileged connection using external credentials. Privileged connections are disabled by default. To enable them you need to set oci8.privileged_connect to On. PHP 5.3 (PECL OCI8 1.3.4) introduced the OCI_CRED_EXT mode value. This tells Oracle to use External or OS authentication, which must be configured in the database. The OCI_CRED_EXT flag can only be used with username of \"/\" and a empty password. oci8.privileged_connect may be On or Off. OCI_CRED_EXT may be combined with the OCI_SYSOPER or OCI_SYSDBA modes. OCI_CRED_EXT is not supported on Windows for security reasons.","type":"int"}}],"doc":{"description":"Creates a persistent connection to an Oracle server and logs on.","type":"resource"}},{"kind":64,"name":"pcntl_signal","modifiers":0,"children":[{"kind":128,"name":"$signo","modifiers":0,"doc":{"description":"The signal number.","type":"int"}},{"kind":128,"name":"$handler","modifiers":0,"doc":{"description":"The signal handler. This may be either a callable, which will be invoked to handle the signal, or either of the two global constants SIG_IGN or SIG_DFL, which will ignore the signal or restore the default signal handler respectively. If a callable is given, it must implement the following signature: void handler ( int $signo , mixed $signinfo ) signo The signal being handled. siginfo If operating systems supports siginfo_t structures, this will be an array of signal information dependent on the signal. Note: Note that when you set a handler to an object method, that object's reference count is increased which makes it persist until you either change the handler to something else, or your script ends.","type":"callable|int"}},{"kind":128,"name":"$restart_syscalls","modifiers":0,"value":"true","doc":{"description":"Specifies whether system call restarting should be used when this signal arrives.","type":"bool"}}],"doc":{"description":"The pcntl_signal() function installs a new signal handler or replaces the current signal handler for the signal indicated by signo.","type":"bool"}},{"kind":64,"name":"array_intersect_uassoc","modifiers":0,"children":[{"kind":128,"name":"$array1","modifiers":0,"doc":{"description":"Initial array for comparison of the arrays.","type":"array"}},{"kind":128,"name":"$array2","modifiers":0,"doc":{"description":"First array to compare keys against.","type":"array"}}],"doc":{"description":"array_intersect_uassoc() returns an array containing all the values of array1 that are present in all the arguments. Note that the keys are used in the comparison unlike in array_intersect().","type":"array"}},{"kind":64,"name":"filter_input_array","modifiers":0,"children":[{"kind":128,"name":"$type","modifiers":0,"doc":{"description":"One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.","type":"int"}},{"kind":128,"name":"$definition","modifiers":0,"doc":{"description":"An array defining the arguments. A valid key is a string containing a variable name and a valid value is either a filter type, or an array optionally specifying the filter, flags and options. If the value is an array, valid keys are filter which specifies the filter type, flags which specifies any flags that apply to the filter, and options which specifies any options that apply to the filter. See the example below for a better understanding. This parameter can be also an integer holding a filter constant. Then all values in the input array are filtered by this filter.","type":"mixed"}},{"kind":128,"name":"$add_empty","modifiers":0,"value":"true","doc":{"description":"Add missing keys as NULL to the return value.","type":"bool"}}],"doc":{"description":"This function is useful for retrieving many values without repetitively calling filter_input().","type":"mixed"}},{"kind":64,"name":"recode_string","modifiers":0,"children":[{"kind":128,"name":"$request","modifiers":0,"doc":{"description":"The desired recode request type","type":"string"}},{"kind":128,"name":"$string","modifiers":0,"doc":{"description":"The string to be recoded","type":"string"}}],"doc":{"description":"Recode the string string according to the recode request request.","type":"string"}},{"kind":64,"name":"session_set_save_handler","modifiers":0,"children":[{"kind":128,"name":"$sessionhandler","modifiers":0,"doc":{"description":"An instance of a class implementing SessionHandlerInterface, such as SessionHandler, to register as the session handler. Since PHP 5.4 only.","type":"SessionHandlerInterface"}},{"kind":128,"name":"$register_shutdown","modifiers":0,"value":"true","doc":{"description":"Register session_write_close() as a register_shutdown_function() function.","type":"bool"}}],"doc":{"description":"session_set_save_handler() sets the user-level session storage functions which are used for storing and retrieving data associated with a session. This is most useful when a storage method other than those supplied by PHP sessions is preferred, e.g. storing the session data in a local database.","type":"bool"}},{"kind":64,"name":"headers_list","modifiers":0,"children":[],"doc":{"description":"headers_list() will return a list of headers to be sent to the browser / client. To determine whether or not these headers have been sent yet, use headers_sent().","type":"array"}},{"kind":64,"name":"mysqli_release_savepoint","modifiers":0,"description":"","children":[{"kind":128,"name":"$link","modifiers":0,"doc":{"description":"Procedural style only: A link identifier returned by mysqli_connect() or mysqli_init()","type":"mysqli"}},{"kind":128,"name":"$name","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"bool"}},{"kind":64,"name":"posix_get_last_error","modifiers":0,"children":[],"doc":{"description":"Retrieve the error number set by the last posix function that failed. The system error message associated with the errno may be checked with posix_strerror().","type":"int"}},{"kind":64,"name":"imagefilledpolygon","modifiers":0,"children":[{"kind":128,"name":"$image","modifiers":0,"doc":{"description":"An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().","type":"resource"}},{"kind":128,"name":"$points","modifiers":0,"doc":{"description":"An array containing the x and y coordinates of the polygons vertices consecutively.","type":"array"}},{"kind":128,"name":"$num_points","modifiers":0,"doc":{"description":"Total number of vertices, which must be at least 3.","type":"int"}},{"kind":128,"name":"$color","modifiers":0,"doc":{"description":"A color identifier created with imagecolorallocate().","type":"int"}}],"doc":{"description":"imagefilledpolygon() creates a filled polygon in the given image.","type":"bool"}},{"kind":64,"name":"filetype","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the file.","type":"string"}}],"doc":{"description":"Returns the type of the given file.","type":"string"}},{"kind":64,"name":"ftp_nb_continue","modifiers":0,"children":[{"kind":128,"name":"$ftp_stream","modifiers":0,"doc":{"description":"The link identifier of the FTP connection.","type":"resource"}}],"doc":{"description":"Continues retrieving/sending a file non-blocking.","type":"int"}},{"kind":64,"name":"xmlrpc_decode_request","modifiers":0,"description":"","children":[{"kind":128,"name":"$xml","modifiers":0,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$method","modifiers":1024,"description":"","doc":{"type":"string"}},{"kind":128,"name":"$encoding","modifiers":0,"description":"","doc":{"type":"string"}}],"doc":{"type":"mixed"}},{"kind":64,"name":"gmp_sqrtrem","modifiers":0,"children":[{"kind":128,"name":"$a","modifiers":0,"doc":{"description":"The number being square rooted. Either a GMP number resource in PHP 5.5 and earlier, a GMP object in PHP 5.6 and later, or a numeric string provided that it is possible to convert the latter to a number.","type":"GMP"}}],"doc":{"description":"Calculate the square root of a number, with remainder.","type":"array"}},{"kind":64,"name":"ibase_name_result","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"An InterBase result set.","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The name to be assigned.","type":"string"}}],"doc":{"description":"This function assigns a name to a result set. This name can be used later in UPDATE|DELETE ... WHERE CURRENT OF name statements.","type":"bool"}},{"kind":64,"name":"pg_fetch_all_columns","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"PostgreSQL query result resource, returned by pg_query(), pg_query_params() or pg_execute() (among others).","type":"resource"}},{"kind":128,"name":"$column","modifiers":0,"value":"0","doc":{"description":"Column number, zero-based, to be retrieved from the result resource. Defaults to the first column if not specified.","type":"int"}}],"doc":{"description":"pg_fetch_all_columns() returns an array that contains all rows (records) in a particular column of the result resource.","type":"array"}},{"kind":64,"name":"openssl_pkey_get_details","modifiers":0,"children":[{"kind":128,"name":"$key","modifiers":0,"doc":{"description":"Resource holding the key.","type":"resource"}}],"doc":{"description":"This function returns the key details (bits, key, type).","type":"array"}},{"kind":64,"name":"grapheme_strstr","modifiers":0,"children":[{"kind":128,"name":"$haystack","modifiers":0,"doc":{"description":"The input string. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$needle","modifiers":0,"doc":{"description":"The string to look for. Must be valid UTF-8.","type":"string"}},{"kind":128,"name":"$before_needle","modifiers":0,"value":"false","doc":{"description":"If TRUE, grapheme_strstr() returns the part of the haystack before the first occurrence of the needle (excluding the needle).","type":"bool"}}],"doc":{"description":"Returns part of haystack string from the first occurrence of needle to the end of haystack (including the needle).","type":"string"}},{"kind":64,"name":"headers_sent","modifiers":0,"children":[{"kind":128,"name":"$file","modifiers":1024,"doc":{"description":"If the optional file and line parameters are set, headers_sent() will put the PHP source file name and line number where output started in the file and line variables.","type":"string"}},{"kind":128,"name":"$line","modifiers":1024,"doc":{"description":"The line number where the output started.","type":"int"}}],"doc":{"description":"Checks if or where headers have been sent.","type":"bool"}},{"kind":64,"name":"pg_options","modifiers":0,"children":[{"kind":128,"name":"$connection","modifiers":0,"doc":{"description":"PostgreSQL database connection resource. When connection is not present, the default connection is used. The default connection is the last connection made by pg_connect() or pg_pconnect().","type":"resource"}}],"doc":{"description":"pg_options() will return a string containing the options specified on the given PostgreSQL connection resource.","type":"string"}},{"kind":64,"name":"fbsql_database_password","modifiers":0,"children":[{"kind":128,"name":"$link_identifier","modifiers":0,"doc":{"description":"A FrontBase link identifier returned by fbsql_connect() or fbsql_pconnect().If optional and not specified, the function will try to find an open link to the FrontBase server and if no such link is found it will try to create one as if fbsql_connect() was called with no arguments.","type":"resource"}},{"kind":128,"name":"$database_password","modifiers":0,"doc":{"description":"The database password, as a string. If given, the function sets the database password for the specified link identifier.","type":"string"}}],"doc":{"description":"Sets and retrieves the database password used by the connection. If a database is protected by a database password, the user must call this function before calling fbsql_select_db().","type":"string"}},{"kind":64,"name":"sqrt","modifiers":0,"children":[{"kind":128,"name":"$arg","modifiers":0,"doc":{"description":"The argument to process","type":"float"}}],"doc":{"description":"Returns the square root of arg.","type":"float"}},{"kind":64,"name":"atan2","modifiers":0,"description":"","children":[{"kind":128,"name":"$y","modifiers":0,"doc":{"description":"Dividend parameter","type":"float"}},{"kind":128,"name":"$x","modifiers":0,"doc":{"description":"Divisor parameter","type":"float"}}],"doc":{"type":"float"}},{"kind":64,"name":"msql_free_result","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"The result resource that is being evaluated. This result comes from a call to msql_query().","type":"resource"}}],"doc":{"description":"msql_free_result() frees the memory associated with query_identifier. When PHP completes a request, this memory is freed automatically, so you only need to call this function when you want to make sure you don't use too much memory while the script is running.","type":"bool"}},{"kind":64,"name":"imap_getacl","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$mailbox","modifiers":0,"doc":{"description":"The mailbox name, see imap_open() for more information","type":"string"}}],"doc":{"description":"Gets the ACL for a given mailbox.","type":"array"}},{"kind":64,"name":"wddx_packet_end","modifiers":0,"children":[{"kind":128,"name":"$packet_id","modifiers":0,"doc":{"description":"A WDDX packet, returned by wddx_packet_start().","type":"resource"}}],"doc":{"description":"Ends and returns the given WDDX packet.","type":"string"}},{"kind":64,"name":"fgetcsv","modifiers":0,"children":[{"kind":128,"name":"$handle","modifiers":0,"doc":{"description":"A valid file pointer to a file successfully opened by fopen(), popen(), or fsockopen().","type":"resource"}},{"kind":128,"name":"$length","modifiers":0,"value":"0","doc":{"description":"Must be greater than the longest line (in characters) to be found in the CSV file (allowing for trailing line-end characters). Otherwise the line is split in chunks of length characters, unless the split would occur inside an enclosure. Omitting this parameter (or setting it to 0 in PHP 5.1.0 and later) the maximum line length is not limited, which is slightly slower.","type":"int"}},{"kind":128,"name":"$delimiter","modifiers":0,"value":"\",\"","doc":{"description":"The optional delimiter parameter sets the field delimiter (one character only).","type":"string"}},{"kind":128,"name":"$enclosure","modifiers":0,"value":"'\"'","doc":{"description":"The optional enclosure parameter sets the field enclosure character (one character only).","type":"string"}},{"kind":128,"name":"$escape","modifiers":0,"value":"\"\\\"","doc":{"description":"The optional escape parameter sets the escape character (one character only).","type":"string"}}],"doc":{"description":"Similar to fgets() except that fgetcsv() parses the line it reads for fields in CSV format and returns an array containing the fields read.","type":"array"}},{"kind":64,"name":"apache_get_modules","modifiers":0,"children":[],"doc":{"description":"Get a list of loaded Apache modules.","type":"array"}},{"kind":64,"name":"normalizer_normalize","modifiers":0,"children":[{"kind":128,"name":"$input","modifiers":0,"doc":{"description":"The input string to normalize","type":"string"}},{"kind":128,"name":"$form","modifiers":0,"value":"Normalizer::FORM_C","doc":{"description":"One of the normalization forms.","type":"int"}}],"doc":{"description":"Normalizes the input provided and returns the normalized string","type":"string"}},{"kind":64,"name":"socket_connect","modifiers":0,"children":[{"kind":128,"name":"$socket","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$address","modifiers":0,"doc":{"description":"The address parameter is either an IPv4 address in dotted-quad notation (e.g. 127.0.0.1) if socket is AF_INET, a valid IPv6 address (e.g. ::1) if IPv6 support is enabled and socket is AF_INET6 or the pathname of a Unix domain socket, if the socket family is AF_UNIX.","type":"string"}},{"kind":128,"name":"$port","modifiers":0,"value":"0","doc":{"description":"The port parameter is only used and is mandatory when connecting to an AF_INET or an AF_INET6 socket, and designates the port on the remote host to which a connection should be made.","type":"int"}}],"doc":{"description":"Initiate a connection to address using the socket resource socket, which must be a valid socket resource created with socket_create().","type":"bool"}},{"kind":64,"name":"hash","modifiers":0,"description":"","children":[{"kind":128,"name":"$algo","modifiers":0,"doc":{"description":"Name of selected hashing algorithm (e.g. \"md5\", \"sha256\", \"haval160,4\", etc..)","type":"string"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"Message to be hashed.","type":"string"}},{"kind":128,"name":"$raw_output","modifiers":0,"value":"false","doc":{"description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.","type":"bool"}}],"doc":{"type":"string"}},{"kind":64,"name":"msg_set_queue","modifiers":0,"children":[{"kind":128,"name":"$queue","modifiers":0,"doc":{"description":"Message queue resource handle","type":"resource"}},{"kind":128,"name":"$data","modifiers":0,"doc":{"description":"You specify the values you require by setting the value of the keys that you require in the data array.","type":"array"}}],"doc":{"description":"msg_set_queue() allows you to change the values of the msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the underlying message queue data structure.","type":"bool"}},{"kind":64,"name":"tidy_parse_file","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"If the filename parameter is given, this function will also read that file and initialize the object with the file, acting like tidy_parse_file().","type":"string"}},{"kind":128,"name":"$config","modifiers":0,"doc":{"description":"The config config can be passed either as an array or as a string. If a string is passed, it is interpreted as the name of the configuration file, otherwise, it is interpreted as the options themselves. For an explanation about each option, see » http://tidy.sourceforge.net/docs/quickref.html.","type":"mixed"}},{"kind":128,"name":"$encoding","modifiers":0,"doc":{"description":"The encoding parameter sets the encoding for input/output documents. The possible values for encoding are: ascii, latin0, latin1, raw, utf8, iso2022, mac, win1252, ibm858, utf16, utf16le, utf16be, big5, and shiftjis.","type":"string"}},{"kind":128,"name":"$use_include_path","modifiers":0,"value":"false","doc":{"description":"Search for the file in the include_path.","type":"bool"}}],"doc":{"description":"Parses the given file.","type":"tidy"}},{"kind":64,"name":"ldap_parse_reference","modifiers":0,"description":"","children":[{"kind":128,"name":"$link","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$entry","modifiers":0,"description":"","doc":{"type":"resource"}},{"kind":128,"name":"$referrals","modifiers":1024,"description":"","doc":{"type":"array"}}],"doc":{"type":"bool"}},{"kind":64,"name":"forward_static_call","modifiers":0,"children":[{"kind":128,"name":"$function","modifiers":0,"doc":{"description":"The function or method to be called. This parameter may be an array, with the name of the class, and the method, or a string, with a function name.","type":"callable"}},{"kind":128,"name":"$parameter","modifiers":0,"doc":{"description":"Zero or more parameters to be passed to the function.","type":"mixed"}}],"doc":{"description":"Calls a user defined function or method given by the function parameter, with the following arguments. This function must be called within a method context, it can't be used outside a class. It uses the late static binding.","type":"mixed"}},{"kind":64,"name":"intlcal_is_equivalent_to","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$other","modifiers":0,"doc":{"description":"The other calendar against which the comparison is to be made.","type":"IntlCalendar"}}],"doc":{"description":"Returns whether this and the given object are equivalent for all purposes except as to the time they have set. The locales do not have to match, as long as no change in behavior results from such mismatch. This includes the timezone, whether the lenient mode is set, the repeated and skipped wall time settings, the days of the week when the weekend starts and ceases and the times where such transitions occur. It may also include other calendar specific settings, such as the Gregorian/Julian transition instant.","type":"bool"}},{"kind":64,"name":"session_gc","modifiers":0,"children":[],"doc":{"description":"session_gc() is used to perform session data GC(garbage collection). PHP does probability based session GC by default.","type":"int"}},{"kind":64,"name":"timezone_identifiers_list","modifiers":0,"children":[{"kind":128,"name":"$what","modifiers":0,"value":"DateTimeZone::ALL","doc":{"description":"One of DateTimeZone class constants.","type":"int"}},{"kind":128,"name":"$country","modifiers":0,"value":"NULL","doc":{"description":"A two-letter ISO 3166-1 compatible country code. Note: This option is only used when what is set to DateTimeZone::PER_COUNTRY.","type":"string"}}],"doc":{"description":"Procedural style","type":"array"}},{"kind":64,"name":"variant_get_type","modifiers":0,"children":[{"kind":128,"name":"$variant","modifiers":0,"doc":{"description":"The variant object.","type":"variant"}}],"doc":{"description":"Returns the type of a variant object.","type":"int"}},{"kind":64,"name":"xmlwriter_write_element","modifiers":0,"children":[{"kind":128,"name":"$xmlwriter","modifiers":0,"doc":{"description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().","type":"resource"}},{"kind":128,"name":"$name","modifiers":0,"doc":{"description":"The element name.","type":"string"}},{"kind":128,"name":"$content","modifiers":0,"doc":{"description":"The element contents.","type":"string"}}],"doc":{"description":"Writes a full element tag.","type":"bool"}},{"kind":64,"name":"octdec","modifiers":0,"children":[{"kind":128,"name":"$octal_string","modifiers":0,"doc":{"description":"The octal string to convert","type":"string"}}],"doc":{"description":"Returns the decimal equivalent of the octal number represented by the octal_string argument.","type":"number"}},{"kind":64,"name":"imagecreatefromwebp","modifiers":0,"children":[{"kind":128,"name":"$filename","modifiers":0,"doc":{"description":"Path to the WebP image.","type":"string"}}],"doc":{"description":"imagecreatefromwebp() returns an image identifier representing the image obtained from the given filename.","type":"resource"}},{"kind":64,"name":"intlcal_equals","modifiers":0,"children":[{"kind":128,"name":"$cal","modifiers":0,"doc":{"description":"The IntlCalendar resource.","type":"IntlCalendar"}},{"kind":128,"name":"$other","modifiers":0,"doc":{"description":"The calendar to compare with the primary object.","type":"IntlCalendar"}}],"doc":{"description":"Returns true if this calendar and the given calendar have the same time. The settings, calendar types and field states do not have to be the same.","type":"bool"}},{"kind":64,"name":"imap_clearflag_full","modifiers":0,"children":[{"kind":128,"name":"$imap_stream","modifiers":0,"doc":{"description":"An IMAP stream returned by imap_open().","type":"resource"}},{"kind":128,"name":"$sequence","modifiers":0,"doc":{"description":"A sequence of message numbers. You can enumerate desired messages with the X,Y syntax, or retrieve all messages within an interval with the X:Y syntax","type":"string"}},{"kind":128,"name":"$flag","modifiers":0,"doc":{"description":"The flags which you can unset are \"\\\\Seen\", \"\\\\Answered\", \"\\\\Flagged\", \"\\\\Deleted\", and \"\\\\Draft\" (as defined by » RFC2060)","type":"string"}},{"kind":128,"name":"$options","modifiers":0,"value":"0","doc":{"description":"options are a bit mask and may contain the single option: ST_UID - The sequence argument contains UIDs instead of sequence numbers","type":"int"}}],"doc":{"description":"This function causes a store to delete the specified flag to the flags set for the messages in the specified sequence.","type":"bool"}},{"kind":64,"name":"abs","modifiers":0,"children":[{"kind":128,"name":"$number","modifiers":0,"doc":{"description":"The numeric value to process","type":"mixed"}}],"doc":{"description":"Returns the absolute value of number.","type":"number"}},{"kind":64,"name":"mysqli_fetch_field","modifiers":0,"children":[{"kind":128,"name":"$result","modifiers":0,"doc":{"description":"Procedural style only: A result set identifier returned by mysqli_query(), mysqli_store_result() or mysqli_use_result().","type":"mysqli_result"}}],"doc":{"description":"Returns the definition of one column of a result set as an object. Call this function repeatedly to retrieve information about all columns in the result set.","type":"object"}},{"kind":64,"name":"posix_getsid","modifiers":0,"children":[{"kind":128,"name":"$pid","modifiers":0,"doc":{"description":"The process identifier. If set to 0, the current process is assumed. If an invalid pid is specified, then FALSE is returned and an error is set which can be checked with posix_get_last_error().","type":"int"}}],"doc":{"description":"Return the session id of the process pid. The session id of a process is the process group id of the session leader.","type":"int"}},{"kind":256,"name":"$GLOBALS","doc":{"description":"An associative array containing references to all variables which are currently defined in the global scope of the script. The variable \"name\"s are the keys of the array."}},{"kind":256,"name":"$_SERVER","doc":{"description":"$_SERVER is an array containing information such as headers, paths, and script locations. The entries in this array are created by the web server. There is no guarantee that every web server will provide any of these; servers may omit some, or provide others not listed here. That said, a large number of these variables are accounted for in the CGI/1.1 specification, so you should be able to expect those."}},{"kind":256,"name":"$_GET","doc":{"description":"An associative array of variables passed to the current script via the URL parameters."}},{"kind":256,"name":"$_POST","doc":{"description":"An associative array of variables passed to the current script via the HTTP POST method."}},{"kind":256,"name":"$_FILES","doc":{"description":"An associative array of items uploaded to the current script via the HTTP POST method."}},{"kind":256,"name":"$_REQUEST","doc":{"description":"An associative array that by default contains the contents of $_GET, $_POST and $_COOKIE."}},{"kind":256,"name":"$_SESSION","doc":{"description":"An associative array containing session variables available to the current script. See the Session functions documentation for more information on how this is used."}},{"kind":256,"name":"$_ENV","doc":{"description":"An associative array of variables passed to the current script via the environment method. \\r\\n\\r\\nThese variables are imported into PHP's global \"name\"space from the environment under which the PHP parser is running. Many are provided by the shell under which PHP is running and different systems are likely running different kinds of shells, a definitive list is impossible. Please see your shell's documentation for a list of defined environment variables. \\r\\n\\r\\nOther environment variables include the CGI variables, placed there regardless of whether PHP is running as a server module or CGI processor."}},{"kind":256,"name":"$_COOKIE","doc":{"description":"An associative array of variables passed to the current script via HTTP Cookies."}},{"kind":256,"name":"$php_errormsg","doc":{"description":"$php_errormsg is a variable containing the text of the last error message generated by PHP. This variable will only be available within the scope in which the error occurred, and only if the track_errors configuration option is turned on (it defaults to off)."}},{"kind":256,"name":"$HTTP_RAW_POST_DATA","doc":{"description":"$HTTP_RAW_POST_DATA contains the raw POST data. See always_populate_raw_post_data"}},{"kind":256,"name":"$http_response_header","doc":{"description":"The $http_response_header array is similar to the get_headers() function. When using the HTTP wrapper, $http_response_header will be populated with the HTTP response headers. $http_response_header will be created in the local scope."}},{"kind":256,"name":"$argc","doc":{"description":"Contains the number of arguments passed to the current script when running from the command line."}},{"kind":256,"name":"$argv","doc":{"description":"Contains an array of all the arguments passed to the script when running from the command line."}},{"kind":256,"name":"$this","doc":{"description":"Refers to the current object"}},{"kind":8,"name":"__CLASS__","doc":{"description":"The class name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the class name as it was declared (case-sensitive). In PHP 4 its value is always lowercased."}},{"kind":8,"name":"__DIR__","doc":{"description":"The directory of the file. If used inside an include, the directory of the included file is returned. This is equivalent to dirname(__FILE__). This directory name does not have a trailing slash unless it is the root directory. (Added in PHP 5.3.0.)"}},{"kind":8,"name":"__FILE__","doc":{"description":"The full path and filename of the file. If used inside an include, the name of the included file is returned. Since PHP 4.0.2, __FILE__ always contains an absolute path with symlinks resolved whereas in older versions it contained relative path under some circumstances."}},{"kind":8,"name":"__FUNCTION__","doc":{"description":"The function name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the function name as it was declared (case-sensitive). In PHP 4 its value is always lowercased."}},{"kind":8,"name":"__LINE__","doc":{"description":"The current line number of the file."}},{"kind":8,"name":"__METHOD__","doc":{"description":"The class method name. (Added in PHP 5.0.0) The method name is returned as it was declared (case-sensitive)."}},{"kind":8,"name":"__NAMESPACE__","doc":{"description":"The name of the current namespace (case-sensitive). This constant is defined in compile-time (Added in PHP 5.3.0)."}},{"kind":8,"name":"M_PI","doc":{"description":"The constant Pi=> 3.14159265358979323846"}},{"kind":8,"name":"M_E","doc":{"description":"The constant e=> 2.7182818284590452354"}},{"kind":8,"name":"M_LOG2E","doc":{"description":"The constant log_2 e=> 1.4426950408889634074"}},{"kind":8,"name":"M_LOG10E","doc":{"description":"The constant log_10 e=> 0.43429448190325182765"}},{"kind":8,"name":"M_LN2","doc":{"description":"The constant log_e 2=> 0.69314718055994530942"}},{"kind":8,"name":"M_LN10","doc":{"description":"The constant log_e 10=> 2.30258509299404568402"}},{"kind":8,"name":"M_PI_2","doc":{"description":"The constant pi/2=> 1.57079632679489661923"}},{"kind":8,"name":"M_PI_4","doc":{"description":"The constant pi/4=> 0.78539816339744830962"}},{"kind":8,"name":"M_1_PI","doc":{"description":"The constant 1/pi=> 0.31830988618379067154"}},{"kind":8,"name":"M_2_PI","doc":{"description":"The constant 2/pi=> 0.63661977236758134308"}},{"kind":8,"name":"M_SQRTPI","doc":{"description":"The constant sqrt(pi)=> 1.77245385090551602729"}},{"kind":8,"name":"M_2_SQRTPI","doc":{"description":"The constant 2/sqrt(pi)=> 1.12837916709551257390"}},{"kind":8,"name":"M_SQRT2","doc":{"description":"The constant sqrt(2)=> 1.41421356237309504880"}},{"kind":8,"name":"M_SQRT3","doc":{"description":"The constant sqrt(3)=> 1.73205080756887729352"}},{"kind":8,"name":"M_SQRT1_2","doc":{"description":"The constant 1/sqrt(2)=> 0.7071067811865475244"}},{"kind":8,"name":"M_LNPI","doc":{"description":"The constant log_e(pi)=> 1.14472988584940017414"}},{"kind":8,"name":"M_EULER","doc":{"description":"Euler constant=> 0.57721566490153286061"}},{"kind":8,"name":"PHP_ROUND_HALF_UP","doc":{"description":"Round halves up = 1"}},{"kind":8,"name":"PHP_ROUND_HALF_DOWN","doc":{"description":"Round halves down = 2"}},{"kind":8,"name":"PHP_ROUND_HALF_EVEN","doc":{"description":"Round halves to even numbers = 3"}},{"kind":8,"name":"PHP_ROUND_HALF_ODD","doc":{"description":"Round halvesto odd numbers = 4"}},{"kind":8,"name":"NAN","doc":{"description":"NAN (as a float): Not A Number"}},{"kind":8,"name":"INF","doc":{"description":"INF (as a float): The infinite"}},{"kind":8,"name":"PASSWORD_BCRYPT","doc":{"description":"PASSWORD_BCRYPT is used to create new password hashes using the CRYPT_BLOWFISH algorithm."}},{"kind":8,"name":"PASSWORD_DEFAULT","doc":{"description":"The default algorithm to use for hashing if no algorithm is provided. This may change in newer PHP releases when newer, stronger hashing algorithms are supported."}}]

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_types_1 = __webpack_require__(3);
const namespacedSymbolMask = 2 | 1 | 4 | 8 | 64;
class SymbolProvider {
    constructor(symbolStore) {
        this.symbolStore = symbolStore;
    }
    provideDocumentSymbols(uri) {
        let symbolTable = this.symbolStore.getSymbolTable(uri);
        let symbols = symbolTable ? symbolTable.symbols : [];
        let symbolInformationList = [];
        let s;
        for (let n = 0, l = symbols.length; n < l; ++n) {
            s = symbols[n];
            if (s.location) {
                symbolInformationList.push(this.toSymbolInformation(s));
            }
        }
        return symbolInformationList;
    }
    provideWorkspaceSymbols(query) {
        let maxItems = 100;
        const matches = this.symbolStore.matchIterator(query, this.workspaceSymbolFilter);
        const symbolInformationList = [];
        for (let s of matches) {
            symbolInformationList.push(this.toSymbolInformation(s));
            if (--maxItems < 1) {
                break;
            }
        }
        return symbolInformationList;
    }
    workspaceSymbolFilter(s) {
        return !(s.modifiers & (512 | 4096 | 4)) && s.location && s.kind !== 128 && (s.kind !== 256 || !s.scope);
    }
    toSymbolInformation(s, uri) {
        let si = {
            kind: vscode_languageserver_types_1.SymbolKind.File,
            name: s.name,
            location: uri ? vscode_languageserver_types_1.Location.create(uri, s.location.range) : this.symbolStore.symbolLocation(s),
            containerName: s.scope
        };
        if ((s.kind & namespacedSymbolMask) > 0) {
            let nsSeparatorPos = s.name.lastIndexOf('\\');
            if (nsSeparatorPos >= 0) {
                si.name = s.name.slice(nsSeparatorPos + 1);
                si.containerName = s.name.slice(0, nsSeparatorPos);
            }
        }
        switch (s.kind) {
            case 1:
                si.kind = vscode_languageserver_types_1.SymbolKind.Class;
                break;
            case 8:
            case 1024:
                si.kind = vscode_languageserver_types_1.SymbolKind.Constant;
                break;
            case 64:
                si.kind = vscode_languageserver_types_1.SymbolKind.Function;
                break;
            case 2:
                si.kind = vscode_languageserver_types_1.SymbolKind.Interface;
                break;
            case 32:
                if (s.name === '__construct') {
                    si.kind = vscode_languageserver_types_1.SymbolKind.Constructor;
                } else {
                    si.kind = vscode_languageserver_types_1.SymbolKind.Method;
                }
                break;
            case 512:
                si.kind = vscode_languageserver_types_1.SymbolKind.Namespace;
                break;
            case 16:
                si.kind = vscode_languageserver_types_1.SymbolKind.Property;
                break;
            case 4:
                si.kind = vscode_languageserver_types_1.SymbolKind.Module;
                break;
            case 256:
            case 128:
                si.kind = vscode_languageserver_types_1.SymbolKind.Variable;
                break;
            default:
                throw new Error(`Invalid argument ${s.kind}`);
        }
        return si;
    }
}
exports.SymbolProvider = SymbolProvider;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const symbol_1 = __webpack_require__(12);
const symbolReader_1 = __webpack_require__(96);
const typeString_1 = __webpack_require__(29);
const parsedDocument_1 = __webpack_require__(18);
const parseTreeTraverser_1 = __webpack_require__(53);
const lsp = __webpack_require__(3);
const util = __webpack_require__(4);
const typeAggregate_1 = __webpack_require__(44);
const useDeclarationHelper_1 = __webpack_require__(99);
const noCompletionResponse = {
    items: [],
    isIncomplete: false
};
function keywordCompletionItems(keywords, text) {
    let kw;
    let items = [];
    for (let n = 0, l = keywords.length; n < l; ++n) {
        kw = keywords[n];
        if (util.ciStringContains(text, kw)) {
            items.push({
                label: kw,
                kind: lsp.CompletionItemKind.Keyword
            });
        }
    }
    return items;
}
function symbolKindToLspSymbolKind(kind) {
    switch (kind) {
        case 1:
        case 4:
            return lsp.CompletionItemKind.Class;
        case 64:
            return lsp.CompletionItemKind.Function;
        case 32:
            return lsp.CompletionItemKind.Method;
        case 8:
        case 1024:
            return lsp.CompletionItemKind.Value;
        case 2:
            return lsp.CompletionItemKind.Interface;
        case 512:
            return lsp.CompletionItemKind.Module;
        case 2048:
            return lsp.CompletionItemKind.Constructor;
        case 16:
            return lsp.CompletionItemKind.Property;
        case 128:
        case 256:
            return lsp.CompletionItemKind.Variable;
        case 4096:
            return lsp.CompletionItemKind.File;
        default:
            return lsp.SymbolKind.String;
    }
}
const defaultCompletionOptions = {
    maxItems: 100,
    addUseDeclaration: true,
    backslashPrefix: true
};
const triggerParameterHintsCommand = {
    title: 'Trigger Parameter Hints',
    command: 'editor.action.triggerParameterHints'
};
class CompletionProvider {
    constructor(symbolStore, documentStore, refStore, config) {
        this.symbolStore = symbolStore;
        this.documentStore = documentStore;
        this.refStore = refStore;
        this._config = config ? config : CompletionProvider._defaultConfig;
        this._strategies = [new ClassTypeDesignatorCompletion(this._config, this.symbolStore), new ScopedAccessCompletion(this._config, this.symbolStore), new ObjectAccessCompletion(this._config, this.symbolStore), new SimpleVariableCompletion(this._config, this.symbolStore), new TypeDeclarationCompletion(this._config, this.symbolStore), new ClassBaseClauseCompletion(this._config, this.symbolStore), new InterfaceClauseCompletion(this._config, this.symbolStore), new TraitUseClauseCompletion(this._config, this.symbolStore), new NamespaceDefinitionCompletion(this._config, this.symbolStore), new NamespaceUseClauseCompletion(this._config, this.symbolStore), new NamespaceUseGroupClauseCompletion(this._config, this.symbolStore), new MethodDeclarationHeaderCompletion(this._config, this.symbolStore), new DeclarationBodyCompletion(this._config), new InstanceOfTypeDesignatorCompletion(this._config, this.symbolStore), new NameCompletion(this._config, this.symbolStore)];
    }
    set config(config) {
        this._config = config;
        for (let n = 0, l = this._strategies.length; n < l; ++n) {
            this._strategies[n].config = config;
        }
    }
    provideCompletions(uri, position) {
        let doc = this.documentStore.find(uri);
        let table = this.symbolStore.getSymbolTable(uri);
        let refTable = this.refStore.getReferenceTable(uri);
        if (!doc || !table || !refTable) {
            return noCompletionResponse;
        }
        let traverser = new parseTreeTraverser_1.ParseTreeTraverser(doc, table, refTable);
        traverser.position(position);
        let t = traverser.node;
        if (!t || t.tokenType === 81) {
            return noCompletionResponse;
        }
        let offset = doc.offsetAtPosition(position);
        let word = doc.wordAtOffset(offset);
        let strategy = null;
        for (let n = 0, l = this._strategies.length; n < l; ++n) {
            if (this._strategies[n].canSuggest(traverser.clone())) {
                strategy = this._strategies[n];
                break;
            }
        }
        return strategy ? strategy.completions(traverser, word, doc.lineSubstring(offset)) : noCompletionResponse;
    }
}
CompletionProvider._defaultConfig = defaultCompletionOptions;
exports.CompletionProvider = CompletionProvider;
class AbstractNameCompletion {
    constructor(config, symbolStore) {
        this.config = config;
        this.symbolStore = symbolStore;
    }
    canSuggest(traverser) {
        if (parsedDocument_1.ParsedDocument.isToken(traverser.node, [147])) {
            traverser.prevToken();
        }
        return true;
    }
    completions(traverser, word, lineSubstring) {
        let items = [];
        let namePhrase = traverser.clone().ancestor(this._isNamePhrase);
        let nameResolver = traverser.nameResolver;
        if (!word || !namePhrase) {
            return noCompletionResponse;
        }
        let pred = this._symbolFilter;
        let addUseDeclarationEnabled = this.config.addUseDeclaration;
        let fqnOffset = 0;
        let isUnqualified = false;
        const useDeclarationHelper = new useDeclarationHelper_1.UseDeclarationHelper(traverser.document, traverser.symbolTable, traverser.range.start);
        const importMap = {};
        let qualifiedNameRule;
        if (namePhrase.phraseType === 144 || namePhrase.phraseType === 84 || word.indexOf('\\') > -1) {
            if (namePhrase.phraseType === 144) {
                word = nameResolver.resolveRelative(word.slice(10));
            } else if (namePhrase.phraseType === 141) {
                qualifiedNameRule = nameResolver.matchImportedSymbol(word.slice(0, word.indexOf('\\')), 1);
                word = nameResolver.resolveNotFullyQualified(word);
            }
            addUseDeclarationEnabled = false;
            fqnOffset = word.lastIndexOf('\\') + 1;
        } else {
            isUnqualified = true;
            const sf = pred;
            const isGlobalNs = nameResolver.namespaceName.length > 0;
            pred = x => {
                return sf(x) && (isGlobalNs || x.kind !== 512) && (x.kind === 512 || util.ciStringContains(word, symbol_1.PhpSymbol.notFqn(x.name)));
            };
            Array.prototype.push.apply(items, keywordCompletionItems(this._getKeywords(traverser.clone()), word));
            const imports = this._importedSymbols(nameResolver.rules, this._symbolFilter, word);
            let imported;
            for (let n = 0; n < imports.length; ++n) {
                imported = imports[n];
                if (imported.associated && imported.associated.length) {
                    importMap[imported.associated[0].name] = imported;
                }
                items.push(this._toCompletionItem(imports[n], useDeclarationHelper, nameResolver.namespaceName, isUnqualified, fqnOffset, qualifiedNameRule));
            }
        }
        const uniqueSymbols = new symbol_1.UniqueSymbolSet();
        const iterator = this.symbolStore.matchIterator(word, pred);
        let limit = this.config.maxItems;
        let isIncomplete = false;
        for (let s of iterator) {
            if (importMap[s.name] || uniqueSymbols.has(s)) {
                continue;
            }
            uniqueSymbols.add(s);
            items.push(this._toCompletionItem(s, useDeclarationHelper, nameResolver.namespaceName, isUnqualified, fqnOffset, qualifiedNameRule));
            if (items.length >= limit) {
                isIncomplete = true;
                break;
            }
        }
        return {
            items: items,
            isIncomplete: isIncomplete
        };
    }
    _useSymbolToUseDeclaration(s) {
        const fqn = s.associated[0].name;
        let decl = `use ${fqn}`;
        const slashPos = fqn.lastIndexOf('\\') + 1;
        if (fqn.slice(-s.name.length) !== s.name) {
            decl += ` as ${s.name}`;
        }
        return decl;
    }
    _importedSymbols(rules, pred, text) {
        let filteredRules = [];
        let r;
        for (let n = 0, l = rules.length; n < l; ++n) {
            r = rules[n];
            if (r.associated && r.associated.length > 0 && util.ciStringContains(text, r.name)) {
                filteredRules.push(r);
            }
        }
        let s;
        let merged;
        let imported = [];
        for (let n = 0, l = filteredRules.length; n < l; ++n) {
            r = filteredRules[n];
            s = this.symbolStore.find(r.associated[0].name, pred).shift();
            if (s) {
                merged = symbol_1.PhpSymbol.clone(s);
                merged.associated = r.associated;
                merged.modifiers |= 4096;
                merged.name = r.name;
                imported.push(merged);
            } else {
                merged = symbol_1.PhpSymbol.clone(r);
                merged.kind = 512;
                imported.push(merged);
            }
        }
        return imported;
    }
    _toCompletionItem(s, useDeclarationHelper, namespaceName, isUnqualified, fqnOffset, qualifiedNameRule) {
        const item = {
            kind: symbolKindToLspSymbolKind(s.kind),
            label: undefined
        };
        if (s.doc && s.doc.description) {
            item.documentation = s.doc.description;
        }
        const symbolNamespace = symbol_1.PhpSymbol.namespace(s.name);
        if (!isUnqualified) {
            item.label = s.name.slice(fqnOffset);
            if (qualifiedNameRule) {
                item.detail = this._useSymbolToUseDeclaration(qualifiedNameRule);
            }
        } else if ((s.modifiers & 4096) > 0) {
            item.detail = this._useSymbolToUseDeclaration(s);
            item.label = symbol_1.PhpSymbol.notFqn(s.name);
        } else if (s.kind === 512 || !namespaceName && !symbolNamespace || s.kind === 8 && this._isMagicConstant(s.name)) {
            item.label = s.name;
        } else if (namespaceName === symbolNamespace) {
            item.detail = `namespace ${namespaceName}`;
            item.label = symbol_1.PhpSymbol.notFqn(s.name);
        } else if (namespaceName && !symbolNamespace) {
            item.label = s.name;
            if (s.kind !== 8 && s.kind !== 64 || this.config.backslashPrefix) {
                item.insertText = '\\' + s.name;
            }
        } else if (this.config.addUseDeclaration && !useDeclarationHelper.findUseSymbolByName(s.name)) {
            item.label = symbol_1.PhpSymbol.notFqn(s.name);
            item.detail = `use ${s.name}`;
            item.additionalTextEdits = [useDeclarationHelper.insertDeclarationTextEdit(s)];
        } else {
            item.insertText = '\\' + s.name;
            item.detail = s.name;
        }
        if (s.kind === 64) {
            if (!item.insertText) {
                item.insertText = item.label;
            }
            item.detail = s.name + symbol_1.PhpSymbol.signatureString(s);
            if (symbol_1.PhpSymbol.hasParameters(s)) {
                item.insertText += '($0)';
                item.insertTextFormat = lsp.InsertTextFormat.Snippet;
                item.command = triggerParameterHintsCommand;
            } else {
                item.insertText += '()';
            }
        } else if (s.kind === 8) {
            if (s.value) {
                item.detail = `${s.name} = ${s.value}`;
            }
        } else {}
        return item;
    }
    _isMagicConstant(text) {
        switch (text) {
            case '__DIR__':
            case '__FILE__':
            case '__CLASS__':
            case '__LINE__':
            case '__FUNCTION__':
            case '__TRAIT__':
            case '__METHOD__':
            case '__NAMESPACE__':
                return true;
            default:
                return false;
        }
    }
    _isNamePhrase(node) {
        switch (node.phraseType) {
            case 141:
            case 84:
            case 144:
                return true;
            default:
                return false;
        }
    }
    _mergeSymbols(matches, imports) {
        let merged = imports.slice(0);
        let map = {};
        let imported;
        let s;
        for (let n = 0, l = imports.length; n < l; ++n) {
            imported = imports[n];
            if (imported.associated && imported.associated.length) {
                map[imported.associated[0].name] = imported;
            }
        }
        for (let n = 0, l = matches.length; n < l; ++n) {
            s = matches[n];
            imported = map[s.name];
            if (!imported) {
                merged.push(s);
            }
        }
        return merged;
    }
}
class InstanceOfTypeDesignatorCompletion extends AbstractNameCompletion {
    canSuggest(traverser) {
        super.canSuggest(traverser);
        return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [121]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [84, 141, 144]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [101]);
    }
    _symbolFilter(s) {
        return (s.kind & (1 | 2 | 512)) > 0 && !(s.modifiers & 512);
    }
    _getKeywords(traverser) {
        return [];
    }
}
class ClassTypeDesignatorCompletion extends AbstractNameCompletion {
    canSuggest(traverser) {
        super.canSuggest(traverser);
        return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [121]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [84, 141, 144]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [34]);
    }
    _symbolFilter(s) {
        return (s.kind & (1 | 512)) > 0 && !(s.modifiers & (512 | 16));
    }
    _getKeywords(traverser) {
        if (traverser.ancestor(this._isQualifiedName)) {
            return ClassTypeDesignatorCompletion._keywords;
        }
        return [];
    }
    _toCompletionItem(s, useDeclarationHelper, namespaceName, isUnqualified, fqnOffset, qualifiedNameRule) {
        let item = super._toCompletionItem(s, useDeclarationHelper, namespaceName, isUnqualified, fqnOffset, qualifiedNameRule);
        let aggregate = new typeAggregate_1.TypeAggregate(this.symbolStore, s);
        let constructor = aggregate.firstMember(this._isConstructor);
        if (item.kind !== lsp.CompletionItemKind.Module) {
            item.kind = lsp.CompletionItemKind.Constructor;
        }
        if (constructor && symbol_1.PhpSymbol.hasParameters(constructor)) {
            if (!item.insertText) {
                item.insertText = item.label;
            }
            item.insertText += '($0)';
            item.insertTextFormat = lsp.InsertTextFormat.Snippet;
            item.command = triggerParameterHintsCommand;
        }
        return item;
    }
    _isConstructor(s) {
        return s.kind === 2048 || s.kind === 32 && s.name.toLowerCase() === '__construct';
    }
    _isQualifiedName(node) {
        return node.phraseType === 141;
    }
}
ClassTypeDesignatorCompletion._keywords = ['class', 'static', 'namespace'];
class SimpleVariableCompletion {
    constructor(config, symbolStore) {
        this.config = config;
        this.symbolStore = symbolStore;
    }
    canSuggest(traverser) {
        return parsedDocument_1.ParsedDocument.isToken(traverser.node, [90, 84]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [156]);
    }
    completions(traverser, word, lineSubstring) {
        if (!word) {
            return noCompletionResponse;
        }
        let scope = traverser.scope;
        let symbolMask = 256 | 128;
        let varSymbols = symbol_1.PhpSymbol.filterChildren(scope, x => {
            return (x.kind & symbolMask) > 0 && x.name.indexOf(word) === 0;
        });
        Array.prototype.push.apply(varSymbols, this.symbolStore.match(word, this._isBuiltInGlobalVar));
        let limit = Math.min(varSymbols.length, this.config.maxItems);
        let isIncomplete = varSymbols.length > this.config.maxItems;
        let items = [];
        let refScope = traverser.refTable.scopeAtPosition(scope.location.range.start);
        let varTable = this._varTypeMap(refScope);
        for (let n = 0; n < limit; ++n) {
            items.push(this._toVariableCompletionItem(varSymbols[n], varTable));
        }
        return {
            items: items,
            isIncomplete: isIncomplete
        };
    }
    _toVariableCompletionItem(s, varTable) {
        let item = {
            label: s.name,
            kind: lsp.CompletionItemKind.Variable,
            detail: varTable[s.name] || ''
        };
        if (s.doc && s.doc.description) {
            item.documentation = s.doc.description;
        }
        return item;
    }
    _varTypeMap(s) {
        let map = {};
        if (!s || !s.children) {
            return {};
        }
        let ref;
        for (let n = 0, l = s.children.length; n < l; ++n) {
            ref = s.children[n];
            if (ref.kind === 256 || ref.kind === 128) {
                map[ref.name] = typeString_1.TypeString.merge(map[ref.name], ref.type);
            }
        }
        return map;
    }
    _isBuiltInGlobalVar(s) {
        return s.kind === 256 && !s.location;
    }
}
class NameCompletion extends AbstractNameCompletion {
    canSuggest(traverser) {
        super.canSuggest(traverser);
        return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [121]) && traverser.ancestor(this._isNamePhrase) !== undefined;
    }
    completions(traverser, word, lineSubstring) {
        if (lineSubstring.slice(-3) === '<?p' || lineSubstring.slice(-4) === '<?ph' || lineSubstring.slice(-5) === '<?php') {
            return NameCompletion._openTagCompletion;
        }
        if (lineSubstring.match(NameCompletion._extendsOrImplementsRegexRegex)) {
            return lsp.CompletionList.create([{ kind: lsp.CompletionItemKind.Keyword, label: 'extends' }, { kind: lsp.CompletionItemKind.Keyword, label: 'implements' }]);
        }
        if (lineSubstring.match(NameCompletion._implementsRegex)) {
            return lsp.CompletionList.create([{ kind: lsp.CompletionItemKind.Keyword, label: 'implements' }]);
        }
        return super.completions(traverser, word, lineSubstring);
    }
    _getKeywords(traverser) {
        let kw = [];
        Array.prototype.push.apply(kw, NameCompletion._expressionKeywords);
        Array.prototype.push.apply(kw, NameCompletion._statementKeywords);
        return kw;
    }
    _symbolFilter(s) {
        return (s.kind & (1 | 64 | 8 | 512)) > 0 && !(s.modifiers & 512);
    }
}
NameCompletion._statementKeywords = ['__halt_compiler', 'abstract', 'break', 'case', 'catch', 'class', 'const', 'continue', 'declare', 'default', 'die', 'do', 'echo', 'else', 'elseif', 'enddeclare', 'endfor', 'endforeach', 'endif', 'endswitch', 'endwhile', 'final', 'finally', 'for', 'foreach', 'function', 'global', 'goto', 'if', 'interface', 'list', 'namespace', 'return', 'static', 'switch', 'throw', 'trait', 'try', 'unset', 'use', 'while'];
NameCompletion._expressionKeywords = ['array', 'clone', 'empty', 'eval', 'exit', 'function', 'include', 'include_once', 'isset', 'new', 'parent', 'print', 'require', 'require_once', 'static', 'yield', 'as', 'self'];
NameCompletion._openTagCompletion = {
    isIncomplete: false,
    items: [{
        kind: lsp.CompletionItemKind.Keyword,
        label: '<?php',
        insertText: 'php'
    }]
};
NameCompletion._extendsOrImplementsRegexRegex = /\b(?:class|interface)\s+[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*\s+[a-z]+$/;
NameCompletion._implementsRegex = /\bclass\s+[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*(?:\s+extends\s+[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*)?\s+[a-z]+$/;
class MemberAccessCompletion {
    constructor(config, symbolStore) {
        this.config = config;
        this.symbolStore = symbolStore;
    }
    completions(traverser, word) {
        let scopedAccessExpr = traverser.ancestor(this._isMemberAccessExpr);
        let scopePhrase = traverser.nthChild(0);
        let type = this._resolveType(traverser);
        let typeNames = typeString_1.TypeString.atomicClassArray(type);
        if (!typeNames.length) {
            return noCompletionResponse;
        }
        let nameResolver = traverser.nameResolver;
        let classAggregateType = typeAggregate_1.TypeAggregate.create(this.symbolStore, nameResolver.className);
        let typeName;
        let fn;
        let typeAggregate;
        let symbols = [];
        for (let n = 0, l = typeNames.length; n < l; ++n) {
            typeName = typeNames[n];
            if (classAggregateType && classAggregateType.name.toLowerCase() === typeName.toLowerCase()) {
                typeAggregate = classAggregateType;
            } else {
                typeAggregate = typeAggregate_1.TypeAggregate.create(this.symbolStore, typeName);
            }
            if (!typeAggregate) {
                continue;
            }
            fn = this._createMemberPredicate(typeName, word, classAggregateType);
            Array.prototype.push.apply(symbols, typeAggregate.members(2, fn));
        }
        symbols = Array.from(new Set(symbols));
        let isIncomplete = symbols.length > this.config.maxItems;
        let limit = Math.min(symbols.length, this.config.maxItems);
        let items = [];
        for (let n = 0; n < limit; ++n) {
            items.push(this._toCompletionItem(symbols[n]));
        }
        return {
            isIncomplete: isIncomplete,
            items: items
        };
    }
    _resolveType(traverser) {
        let node;
        let arrayDereference = 0;
        let ref;
        while (true) {
            node = traverser.node;
            switch (node.phraseType) {
                case 84:
                case 144:
                case 141:
                case 156:
                case 145:
                    ref = traverser.reference;
                    break;
                case 112:
                case 136:
                case 150:
                case 152:
                case 24:
                    if (traverser.child(this._isMemberName)) {
                        ref = traverser.reference;
                    }
                    break;
                case 56:
                    if (traverser.child(parsedDocument_1.ParsedDocument.isPhrase)) {
                        continue;
                    }
                    break;
                case 128:
                    if (traverser.child(this._isClassTypeDesignator) && traverser.child(parsedDocument_1.ParsedDocument.isNamePhrase)) {
                        ref = traverser.reference;
                    }
                    break;
                case 155:
                case 16:
                    if (traverser.nthChild(0)) {
                        continue;
                    }
                    break;
                case 85:
                    if (traverser.nthChild(0)) {
                        ref = traverser.reference;
                    }
                    break;
                case 160:
                    if (traverser.nthChild(0)) {
                        arrayDereference++;
                        continue;
                    }
                    break;
                default:
                    break;
            }
            break;
        }
        if (!ref) {
            return '';
        }
        let type = this.symbolStore.referenceToTypeString(ref);
        while (arrayDereference--) {
            type = typeString_1.TypeString.arrayDereference(type);
        }
        return type;
    }
    _isMemberAccessExpr(node) {
        switch (node.phraseType) {
            case 150:
            case 65:
            case 24:
            case 152:
            case 136:
            case 112:
                return true;
            default:
                return false;
        }
    }
    _toCompletionItem(s) {
        switch (s.kind) {
            case 1024:
                return this.toClassConstantCompletionItem(s);
            case 32:
                return this.toMethodCompletionItem(s);
            case 16:
                return this.toPropertyCompletionItem(s);
            default:
                throw Error('Invalid Argument');
        }
    }
    toMethodCompletionItem(s) {
        let item = {
            kind: lsp.CompletionItemKind.Method,
            label: s.name,
            detail: s.name + symbol_1.PhpSymbol.signatureString(s)
        };
        if (s.doc && s.doc.description) {
            item.documentation = s.doc.description;
        }
        if (s.name.slice(0, 2) === '__') {
            item.sortText = 'zzz';
        } else {
            item.sortText = item.label;
        }
        if (symbol_1.PhpSymbol.hasParameters(s)) {
            item.insertText = s.name + '($0)';
            item.insertTextFormat = lsp.InsertTextFormat.Snippet;
            item.command = triggerParameterHintsCommand;
        } else {
            item.insertText = s.name + '()';
        }
        return item;
    }
    toClassConstantCompletionItem(s) {
        let item = {
            kind: lsp.CompletionItemKind.Value,
            label: s.name
        };
        if (s.doc && s.doc.description) {
            item.documentation = s.doc.description;
        }
        if (s.value) {
            item.detail = `${s.name} = ${s.value}`;
        }
        return item;
    }
    toPropertyCompletionItem(s) {
        let item = {
            kind: lsp.CompletionItemKind.Property,
            label: (s.modifiers & 32) > 0 ? s.name : s.name.slice(1),
            detail: symbol_1.PhpSymbol.type(s)
        };
        if (s.doc && s.doc.description) {
            item.documentation = s.doc.description;
        }
        return item;
    }
    _isMemberName(node) {
        return node.phraseType === 111 || node.phraseType === 151;
    }
    _isClassTypeDesignator(node) {
        return node.phraseType === 34;
    }
}
class ScopedAccessCompletion extends MemberAccessCompletion {
    canSuggest(traverser) {
        const scopedAccessPhrases = [150, 65, 24, 152];
        if (parsedDocument_1.ParsedDocument.isToken(traverser.node, [133])) {
            return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), scopedAccessPhrases);
        }
        if (parsedDocument_1.ParsedDocument.isToken(traverser.node, [84])) {
            return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [151]);
        }
        if (parsedDocument_1.ParsedDocument.isToken(traverser.node, [90])) {
            return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [156]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [151]);
        }
        return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [95]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [151]);
    }
    _createMemberPredicate(scopeName, word, classContext) {
        if (classContext && scopeName.toLowerCase() === classContext.name.toLowerCase()) {
            return x => {
                return (x.modifiers & 32) > 0 && util.ciStringContains(word, x.name);
            };
        } else if (classContext && classContext.isBaseClass(scopeName)) {
            return x => {
                return !(x.modifiers & 4) && util.ciStringContains(word, x.name);
            };
        } else if (classContext && classContext.isAssociated(scopeName)) {
            return x => {
                return (x.modifiers & 32) > 0 && !(x.modifiers & 4) && util.ciStringContains(word, x.name);
            };
        } else {
            const mask = 32 | 1;
            return x => {
                return (x.modifiers & mask) === mask && util.ciStringContains(word, x.name);
            };
        }
    }
}
class ObjectAccessCompletion extends MemberAccessCompletion {
    canSuggest(traverser) {
        if (parsedDocument_1.ParsedDocument.isToken(traverser.node, [115])) {
            return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [136, 112]);
        }
        return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [111]);
    }
    _createMemberPredicate(scopeName, word, classContext) {
        if (classContext && scopeName.toLowerCase() === classContext.name.toLowerCase()) {
            return x => {
                return util.ciStringContains(word, x.name);
            };
        } else if (classContext && classContext.isAssociated(scopeName)) {
            const mask = 4;
            return x => {
                return !(x.modifiers & mask) && util.ciStringContains(word, x.name);
            };
        } else {
            const mask = 2 | 4;
            return x => {
                return !(x.modifiers & mask) && util.ciStringContains(word, x.name);
            };
        }
    }
}
class TypeDeclarationCompletion extends AbstractNameCompletion {
    canSuggest(traverser) {
        super.canSuggest(traverser);
        return parsedDocument_1.ParsedDocument.isToken(traverser.node, [83, 147, 3, 6]) && traverser.ancestor(this._isTypeDeclaration) !== undefined;
    }
    _getKeywords(traverser) {
        return TypeDeclarationCompletion._keywords;
    }
    _symbolFilter(s) {
        return (s.kind & (1 | 2 | 512)) > 0;
    }
    _isTypeDeclaration(node) {
        return node.phraseType === 173;
    }
}
TypeDeclarationCompletion._keywords = ['self', 'array', 'callable', 'bool', 'float', 'int', 'string'];
class ClassBaseClauseCompletion extends AbstractNameCompletion {
    canSuggest(traverser) {
        super.canSuggest(traverser);
        return traverser.ancestor(this._isClassBaseClause) !== undefined;
    }
    _getKeywords(traverser) {
        return [];
    }
    _symbolFilter(s) {
        return (s.kind & (1 | 512)) > 0 && !(s.modifiers & 8);
    }
    _isClassBaseClause(node) {
        return node.phraseType === 23;
    }
}
class InterfaceClauseCompletion extends AbstractNameCompletion {
    canSuggest(traverser) {
        super.canSuggest(traverser);
        return traverser.ancestor(this._isInterfaceClause) !== undefined;
    }
    _getKeywords(traverser) {
        return [];
    }
    _symbolFilter(s) {
        return s.kind === 2 || s.kind === 512;
    }
    _isInterfaceClause(node) {
        return node.phraseType === 31 || node.phraseType === 102;
    }
}
class TraitUseClauseCompletion extends AbstractNameCompletion {
    canSuggest(traverser) {
        super.canSuggest(traverser);
        return traverser.ancestor(this._isNamePhrase) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [142]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [170]);
    }
    _getKeywords(traverser) {
        return [];
    }
    _symbolFilter(s) {
        return s.kind === 4 || s.kind === 512;
    }
}
class NamespaceDefinitionCompletion {
    constructor(config, symbolStore) {
        this.config = config;
        this.symbolStore = symbolStore;
    }
    canSuggest(traverser) {
        if (parsedDocument_1.ParsedDocument.isToken(traverser.node, [147])) {
            traverser.prevToken();
        }
        return traverser.ancestor(this._isNamespaceDefinition) !== undefined;
    }
    completions(traverser, word) {
        const items = [];
        const uniqueSymbols = new symbol_1.UniqueSymbolSet();
        const matches = this.symbolStore.matchIterator(word, this._symbolFilter);
        let isIncomplete = false;
        let n = this.config.maxItems;
        const fqnOffset = word.lastIndexOf('\\') + 1;
        for (let s of matches) {
            if (uniqueSymbols.has(s)) {
                continue;
            }
            uniqueSymbols.add(s);
            items.push({
                label: s.name.slice(fqnOffset),
                kind: lsp.CompletionItemKind.Module
            });
            --n;
            if (n < 1) {
                isIncomplete = true;
                break;
            }
        }
        return {
            items: items,
            isIncomplete: isIncomplete
        };
    }
    _toNamespaceCompletionItem(s) {
        return {
            label: s.name,
            kind: lsp.CompletionItemKind.Module
        };
    }
    _symbolFilter(s) {
        return s.kind === 512;
    }
    _isNamespaceDefinition(node) {
        return node.phraseType === 120;
    }
}
class NamespaceUseClauseCompletion {
    constructor(config, symbolStore) {
        this.config = config;
        this.symbolStore = symbolStore;
    }
    canSuggest(traverser) {
        if (parsedDocument_1.ParsedDocument.isToken(traverser.node, [147])) {
            traverser.prevToken();
        }
        return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [121]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [124, 122]);
    }
    completions(traverser, word) {
        let items = [];
        let namespaceUseDecl = traverser.ancestor(this._isNamespaceUseDeclaration);
        if (!word) {
            return noCompletionResponse;
        }
        const kindMask = this._modifierToSymbolKind(traverser.child(this._isModifier));
        const pred = x => {
            return (x.kind & kindMask) > 0 && !(x.modifiers & 4096);
        };
        const matches = this.symbolStore.matchIterator(word, pred);
        const uniqueSymbols = new symbol_1.UniqueSymbolSet();
        let n = this.config.maxItems;
        let isIncomplete = false;
        const fqnOffset = word.lastIndexOf('\\') + 1;
        const lcWord = word.toLowerCase();
        for (let s of matches) {
            if (uniqueSymbols.has(s)) {
                continue;
            }
            uniqueSymbols.add(s);
            items.push(this._toCompletionItem(s, lcWord, fqnOffset));
            if (--n < 1) {
                isIncomplete = true;
                break;
            }
        }
        return {
            isIncomplete: isIncomplete,
            items: items
        };
    }
    _toCompletionItem(s, lcWord, fqnOffset) {
        const didMatchOnFqn = s.name.slice(0, lcWord.length).toLowerCase() === lcWord;
        let item = {
            kind: symbolKindToLspSymbolKind(s.kind),
            label: didMatchOnFqn ? s.name.slice(fqnOffset) : symbol_1.PhpSymbol.notFqn(s.name)
        };
        if (s.kind !== 512 && !didMatchOnFqn) {
            item.detail = s.name;
            item.insertText = s.name;
        }
        if (s.doc && s.doc.description) {
            item.documentation = s.doc.description;
        }
        return item;
    }
    _isNamespaceUseDeclaration(node) {
        return node.phraseType === 124;
    }
    _isNamespaceUseClause(node) {
        return node.phraseType === 122;
    }
    _modifierToSymbolKind(token) {
        const defaultKindMask = 1 | 2 | 4 | 512;
        if (!token) {
            return defaultKindMask;
        }
        switch (token.tokenType) {
            case 35:
                return 64 | 512;
            case 12:
                return 8 | 512;
            default:
                return defaultKindMask;
        }
    }
    _isModifier(node) {
        switch (node.tokenType) {
            case 9:
            case 35:
            case 12:
                return true;
            default:
                return false;
        }
    }
}
class NamespaceUseGroupClauseCompletion {
    constructor(config, symbolStore) {
        this.config = config;
        this.symbolStore = symbolStore;
    }
    canSuggest(traverser) {
        if (parsedDocument_1.ParsedDocument.isToken(traverser.node, [147])) {
            traverser.prevToken();
        }
        return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [121]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [125]);
    }
    completions(traverser, word) {
        let items = [];
        if (!word) {
            return noCompletionResponse;
        }
        let nsUseGroupClause = traverser.ancestor(this._isNamespaceUseGroupClause);
        let nsUseGroupClauseModifier = traverser.child(this._isModifier);
        let nsUseDecl = traverser.ancestor(this._isNamespaceUseDeclaration);
        let nsUseDeclModifier = traverser.child(this._isModifier);
        let kindMask = this._modifierToSymbolKind(nsUseGroupClauseModifier || nsUseDeclModifier);
        let prefix = '';
        if (nsUseDeclModifier) {
            traverser.parent();
        }
        if (traverser.child(this._isNamespaceName)) {
            prefix = traverser.text;
        }
        word = prefix + '\\' + word;
        let pred = x => {
            return (x.kind & kindMask) > 0 && !(x.modifiers & 4096);
        };
        let matches = this.symbolStore.matchIterator(word, pred);
        let uniqueSymbols = new symbol_1.UniqueSymbolSet();
        let isIncomplete = false;
        let n = this.config.maxItems;
        const fqnOffset = word.lastIndexOf('\\') + 1;
        for (let s of matches) {
            if (uniqueSymbols.has(s)) {
                continue;
            }
            uniqueSymbols.add(s);
            items.push(this._toCompletionItem(s, fqnOffset));
            if (--n < 1) {
                isIncomplete = true;
                break;
            }
        }
        return {
            isIncomplete: isIncomplete,
            items: items
        };
    }
    _toCompletionItem(s, fqnOffset) {
        let item = {
            kind: symbolKindToLspSymbolKind(s.kind),
            label: s.name.slice(fqnOffset)
        };
        if (s.doc && s.doc.description) {
            item.documentation = s.doc.description;
        }
        return item;
    }
    _isNamespaceUseGroupClause(node) {
        return node.phraseType === 125;
    }
    _isNamespaceUseDeclaration(node) {
        return node.phraseType === 124;
    }
    _isModifier(node) {
        switch (node.tokenType) {
            case 9:
            case 35:
            case 12:
                return true;
            default:
                return false;
        }
    }
    _isNamespaceName(node) {
        return node.phraseType === 121;
    }
    _modifierToSymbolKind(modifier) {
        const defaultKindMask = 1 | 2 | 4 | 512;
        if (!modifier) {
            return defaultKindMask;
        }
        switch (modifier.tokenType) {
            case 35:
                return 64 | 512;
            case 12:
                return 8 | 512;
            default:
                return defaultKindMask;
        }
    }
}
class DeclarationBodyCompletion {
    constructor(config) {
        this.config = config;
    }
    canSuggest(traverser) {
        return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), DeclarationBodyCompletion._phraseTypes) || parsedDocument_1.ParsedDocument.isPhrase(traverser.node, [60]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), DeclarationBodyCompletion._phraseTypes);
    }
    completions(traverser, word) {
        return {
            items: keywordCompletionItems(DeclarationBodyCompletion._keywords, word)
        };
    }
}
DeclarationBodyCompletion._phraseTypes = [29, 104, 166, 61];
DeclarationBodyCompletion._keywords = ['var', 'public', 'private', 'protected', 'final', 'function', 'abstract', 'use'];
class MethodDeclarationHeaderCompletion {
    constructor(config, symbolStore) {
        this.config = config;
        this.symbolStore = symbolStore;
    }
    canSuggest(traverser) {
        let nameResolver = traverser.nameResolver;
        let thisSymbol = nameResolver.class;
        return parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [95]) && parsedDocument_1.ParsedDocument.isPhrase(traverser.parent(), [115]) && thisSymbol !== undefined;
    }
    completions(traverser, word) {
        let memberDecl = traverser.ancestor(this._isMethodDeclarationHeader);
        let modifiers = symbolReader_1.SymbolReader.modifierListToSymbolModifier(traverser.child(this._isMemberModifierList));
        if (modifiers & (4 | 16)) {
            return noCompletionResponse;
        }
        modifiers &= 1 | 2;
        let nameResolver = traverser.nameResolver;
        let classSymbol = nameResolver.class;
        let existingMethods = symbol_1.PhpSymbol.filterChildren(classSymbol, this._isMethod);
        let existingMethodNames = new Set(existingMethods.map(this._toName));
        let fn = x => {
            return x.kind === 32 && (!modifiers || (x.modifiers & modifiers) > 0) && !(x.modifiers & (8 | 4)) && !existingMethodNames.has(x.name.toLowerCase()) && util.ciStringContains(word, x.name);
        };
        const aggregate = new typeAggregate_1.TypeAggregate(this.symbolStore, classSymbol, true);
        const matches = aggregate.members(2, fn);
        let isIncomplete = matches.length > this.config.maxItems;
        const limit = Math.min(this.config.maxItems, matches.length);
        const items = [];
        let s;
        for (let n = 0; n < limit; ++n) {
            s = matches[n];
            if (s.name && s.name[0] === '_') {
                existingMethodNames.add(s.name);
            }
            items.push(this._toCompletionItem(s));
        }
        Array.prototype.push.apply(items, this._magicMethodCompletionItems(word, existingMethodNames));
        return {
            isIncomplete: isIncomplete,
            items: items
        };
    }
    _magicMethodCompletionItems(word, excludeSet) {
        let name;
        const items = [];
        const keys = Object.keys(MethodDeclarationHeaderCompletion.MAGIC_METHODS);
        for (let n = 0; n < keys.length; ++n) {
            name = keys[n];
            if (!util.ciStringContains(word, name) || excludeSet.has(name)) {
                continue;
            }
            items.push({
                kind: lsp.CompletionItemKind.Method,
                label: name,
                insertText: MethodDeclarationHeaderCompletion.MAGIC_METHODS[name],
                insertTextFormat: lsp.InsertTextFormat.Snippet
            });
        }
        return items;
    }
    _toCompletionItem(s) {
        let params = symbol_1.PhpSymbol.filterChildren(s, this._isParameter);
        let paramStrings = [];
        for (let n = 0, l = params.length; n < l; ++n) {
            paramStrings.push(this._parameterToString(params[n]));
        }
        let paramString = paramStrings.join(', ');
        let escapedParamString = snippetEscape(paramString);
        let insertText = `${s.name}(${escapedParamString})${snippetEscape(this._returnType(s))}\n{\n\t$0\n\\}`;
        let item = {
            kind: lsp.CompletionItemKind.Method,
            label: s.name,
            insertText: insertText,
            insertTextFormat: lsp.InsertTextFormat.Snippet,
            detail: `${s.scope}::${s.name}`
        };
        if (s.doc && s.doc.description) {
            item.documentation = s.doc.description;
        }
        return item;
    }
    _returnType(s) {
        if (s.type) {
            return `: ${s.type}`;
        } else {
            return '';
        }
    }
    _parameterToString(s) {
        let parts = [];
        if (s.type) {
            let typeName = typeString_1.TypeString.atomicClassArray(s.type).shift();
            if (typeName) {
                typeName = '\\' + typeName;
            } else {
                typeName = s.type;
            }
            parts.push(typeName);
        }
        parts.push(s.name);
        if (s.value) {
            parts.push(`= ${s.value}`);
        }
        return parts.join(' ');
    }
    _isMethodDeclarationHeader(node) {
        return node.phraseType === 115;
    }
    _isMemberModifierList(node) {
        return node.phraseType === 110;
    }
    _isMethod(s) {
        return s.kind === 32;
    }
    _toName(s) {
        return s.name.toLowerCase();
    }
    _isParameter(s) {
        return s.kind === 128;
    }
}
MethodDeclarationHeaderCompletion.MAGIC_METHODS = {
    '__construct': `__construct($1)\n{\n\t$0\n\\}`,
    '__destruct': `__destruct()\n{\n\t$0\n\\}`,
    '__call': `__call(\\$name, \\$arguments)\n{\n\t$0\n\\}`,
    '__callStatic': `__callStatic(\\$name, \\$arguments)\n{\n\t$0\n\\}`,
    '__get': `__get(\\$name)\n{\n\t$0\n\\}`,
    '__set': `__set(\\$name, \\$value)\n{\n\t$0\n\\}`,
    '__isset': `__isset(\\$name)\n{\n\t$0\n\\}`,
    '__unset': `__unset(\\$name)\n{\n\t$0\n\\}`,
    '__sleep': `__sleep()\n{\n\t$0\n\\}`,
    '__wakeup': `__wakeup()\n{\n\t$0\n\\}`,
    '__toString': `__toString()\n{\n\t$0\n\\}`,
    '__invoke': `__invoke($1)\n{\n\t$0\n\\}`,
    '__set_state': `__set_state(\\$properties)\n{\n\t$0\n\\}`,
    '__clone': `__clone()\n{\n\t$0\n\\}`,
    '__debugInfo': `__debugInfo()\n{\n\t$0\n\\}`
};
const snippetEscapeRegex = /[$}\\]/g;
function snippetEscape(text) {
    return text.replace(snippetEscapeRegex, snippetEscapeReplacer);
}
function snippetEscapeReplacer(match, offset, subject) {
    return '\\' + match;
}

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = __webpack_require__(19);
const php7parser_1 = __webpack_require__(94);
const lsp = __webpack_require__(3);
class DiagnosticsProvider {
    constructor() {
        this._onParsedDocumentChanged = args => {
            this._startDiagnostics.trigger(args.parsedDocument.uri);
            let diagnostics = this._diagnose(args.parsedDocument.uri);
            this._publish.trigger({ uri: args.parsedDocument.uri, diagnostics: diagnostics });
        };
        this._debounceWaitTime = 1000;
        this._docs = {};
        this._publish = new types_1.Event();
        this._startDiagnostics = new types_1.Event();
        this._debounceMap = {};
        this._unsubscribeMap = {};
        this.maxItems = 100;
    }
    get startDiagnosticsEvent() {
        return this._startDiagnostics;
    }
    get publishDiagnosticsEvent() {
        return this._publish;
    }
    add(doc) {
        if (this.has(doc.uri)) {
            throw new Error('Duplicate Key');
        }
        this._docs[doc.uri] = doc;
        let dd = this._debounceMap[doc.uri] = new types_1.Debounce(this._onParsedDocumentChanged, this._debounceWaitTime);
        this._unsubscribeMap[doc.uri] = doc.changeEvent.subscribe(x => {
            dd.handle(x);
        });
    }
    remove(uri) {
        if (!this.has(uri)) {
            return;
        }
        this._unsubscribeMap[uri]();
        this._debounceMap[uri].clear();
        delete this._debounceMap[uri];
        delete this._unsubscribeMap[uri];
        delete this._docs[uri];
    }
    has(uri) {
        return this._docs[uri] !== undefined;
    }
    set debounceWait(value) {
        this._debounceWaitTime = value;
        let keys = Object.keys(this._debounceMap);
        for (let n = 0, l = keys.length; n < l; ++n) {
            this._debounceMap[keys[n]].wait = this._debounceWaitTime;
        }
    }
    _diagnose(uri) {
        let diagnostics = [];
        let parseErrorVisitor = new ErrorVisitor();
        let doc = this._docs[uri];
        if (!doc) {
            return [];
        }
        doc.traverse(parseErrorVisitor);
        let parseErrors = parseErrorVisitor.errors;
        for (let n = 0, l = parseErrors.length; n < l; ++n) {
            diagnostics.push(this._parseErrorToDiagnostic(parseErrors[n], doc));
        }
        return diagnostics.slice(0, this._maxItems);
    }
    _parseErrorToDiagnostic(err, doc) {
        return lsp.Diagnostic.create(this._errorRange(err, doc), this._message(err), lsp.DiagnosticSeverity.Error, undefined, 'intelephense');
    }
    _message(err) {
        let msg = `Unexpected ${php7parser_1.tokenTypeToString(err.unexpected.tokenType)}.`;
        if (err.expected) {
            msg += ` Expected ${php7parser_1.tokenTypeToString(err.expected)}.`;
        }
        return msg;
    }
    _errorRange(err, doc) {
        if (!err.children || err.children.length < 1) {
            return doc.tokenRange(err.unexpected);
        }
        let tFirst = err.children[0];
        let tLast = err.children[err.children.length - 1];
        return lsp.Range.create(doc.tokenRange(tFirst).start, doc.tokenRange(tLast).end);
    }
}
exports.DiagnosticsProvider = DiagnosticsProvider;
class ErrorVisitor {
    constructor() {
        this._errors = [];
    }
    get errors() {
        return this._errors;
    }
    preorder(node, spine) {
        if (node.phraseType === 60) {
            this._errors.push(node);
            return false;
        }
        return true;
    }
}

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const symbol_1 = __webpack_require__(12);
const parseTreeTraverser_1 = __webpack_require__(53);
const parsedDocument_1 = __webpack_require__(18);
class SignatureHelpProvider {
    constructor(symbolStore, docStore, refStore) {
        this.symbolStore = symbolStore;
        this.docStore = docStore;
        this.refStore = refStore;
    }
    provideSignatureHelp(uri, position) {
        const doc = this.docStore.find(uri);
        const table = this.symbolStore.getSymbolTable(uri);
        const refTable = this.refStore.getReferenceTable(uri);
        if (!doc || !table || !refTable) {
            return undefined;
        }
        const traverser = new parseTreeTraverser_1.ParseTreeTraverser(doc, table, refTable);
        const token = traverser.position(position);
        const prevToken = parsedDocument_1.ParsedDocument.isToken(token, [121]) ? token : traverser.clone().prevToken(true);
        const argExpList = traverser.ancestor(this._isArgExprList);
        const callableExpr = traverser.ancestor(this._isCallablePhrase);
        if (!token || !prevToken || !argExpList && token.tokenType === 121 || !argExpList && token.tokenType !== 118 && prevToken.tokenType !== 118 || !callableExpr) {
            return undefined;
        }
        let symbol = this._getSymbol(traverser.clone());
        let delimFilterFn = x => {
            return x.tokenType === 93 && x.offset <= token.offset;
        };
        let argNumber = parsedDocument_1.ParsedDocument.filterChildren(argExpList, delimFilterFn).length;
        return symbol ? this._createSignatureHelp(symbol, argNumber) : undefined;
    }
    _createSignatureHelp(fn, argNumber) {
        if (!fn.children) {
            return null;
        }
        let params = fn.children.filter(x => {
            return x.kind === 128;
        });
        if (!params.length || argNumber > params.length - 1) {
            return null;
        }
        let nOptionalParams = params.reduce((carry, value) => {
            return value.value ? carry + 1 : carry;
        }, 0);
        let nRequiredParams = params.length - nOptionalParams;
        let signatures = [];
        if (nRequiredParams > 0) {
            signatures.push(this._signatureInfo(fn, params.slice(0, nRequiredParams)));
        }
        for (let n = 1; n <= nOptionalParams; ++n) {
            signatures.push(this._signatureInfo(fn, params.slice(0, nRequiredParams + n)));
        }
        let activeSig = signatures.findIndex(v => {
            return v.parameters.length > argNumber;
        });
        return {
            activeParameter: argNumber,
            activeSignature: activeSig,
            signatures: signatures
        };
    }
    _signatureInfo(fn, params) {
        let paramInfoArray = this._parameterInfoArray(params);
        let label = fn.name + '(';
        label += paramInfoArray.map(v => {
            return v.label;
        }).join(', ');
        label += ')';
        let returnType = symbol_1.PhpSymbol.type(fn);
        if (returnType) {
            label += ': ' + returnType;
        }
        let info = {
            label: label,
            parameters: paramInfoArray
        };
        if (fn.doc && fn.doc.description) {
            info.documentation = fn.doc.description;
        }
        return info;
    }
    _parameterInfoArray(params) {
        let infos = [];
        for (let n = 0, l = params.length; n < l; ++n) {
            infos.push(this._parameterInfo(params[n]));
        }
        return infos;
    }
    _parameterInfo(s) {
        let labelParts = [];
        let paramType = symbol_1.PhpSymbol.type(s);
        if (paramType) {
            labelParts.push(paramType);
        }
        labelParts.push(s.name);
        if (s.value) {
            labelParts.push('= ' + s.value);
        }
        let info = {
            label: labelParts.join(' ')
        };
        if (s.doc && s.doc.description) {
            info.documentation = s.doc.description;
        }
        return info;
    }
    _getSymbol(traverser) {
        let expr = traverser.node;
        switch (expr.phraseType) {
            case 85:
                if (traverser.child(this._isNamePhrase)) {
                    return this.symbolStore.findSymbolsByReference(traverser.reference).shift();
                }
                return undefined;
            case 112:
                if (traverser.child(this._isMemberName) && traverser.child(this._isNameToken)) {
                    return this.symbolStore.findSymbolsByReference(traverser.reference, 2).shift();
                }
                return undefined;
            case 150:
                if (traverser.child(this._isScopedMemberName) && traverser.child(this._isIdentifier)) {
                    return this.symbolStore.findSymbolsByReference(traverser.reference, 2).shift();
                }
                return undefined;
            case 128:
                if (traverser.child(this._isClassTypeDesignator) && traverser.child(this._isNamePhraseOrRelativeScope)) {
                    return this.symbolStore.findSymbolsByReference(traverser.reference, 1).shift();
                }
                return undefined;
            default:
                throw new Error('Invalid Argument');
        }
    }
    _isCallablePhrase(node) {
        switch (node.phraseType) {
            case 85:
            case 112:
            case 150:
            case 128:
                return true;
            default:
                return false;
        }
    }
    _isNamePhrase(node) {
        switch (node.phraseType) {
            case 84:
            case 144:
            case 141:
                return true;
            default:
                return false;
        }
    }
    _isArgExprList(node) {
        return node.phraseType === 8;
    }
    _isMemberName(node) {
        return node.phraseType === 111;
    }
    _isScopedMemberName(node) {
        return node.phraseType === 151;
    }
    _isNameToken(node) {
        return node.tokenType === 83;
    }
    _isIdentifier(node) {
        return node.phraseType === 95;
    }
    _isClassTypeDesignator(node) {
        return node.phraseType === 34;
    }
    _isNamePhraseOrRelativeScope(node) {
        switch (node.phraseType) {
            case 84:
            case 144:
            case 141:
            case 145:
                return true;
            default:
                return false;
        }
    }
}
exports.SignatureHelpProvider = SignatureHelpProvider;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const reference_1 = __webpack_require__(54);
class DefinitionProvider {
    constructor(symbolStore, documentStore, refStore) {
        this.symbolStore = symbolStore;
        this.documentStore = documentStore;
        this.refStore = refStore;
    }
    provideDefinition(uri, position) {
        let doc = this.documentStore.find(uri);
        let table = this.refStore.getReferenceTable(uri);
        if (!doc || !table) {
            return null;
        }
        let ref = table.referenceAtPosition(position);
        if (!ref) {
            return null;
        }
        let symbols = this.symbolStore.findSymbolsByReference(ref, 1);
        if (ref.kind === 2048 && symbols.length < 1) {
            symbols = this.symbolStore.findSymbolsByReference(reference_1.Reference.create(1, ref.name, ref.location), 1);
        }
        let locations = [];
        let s;
        let loc;
        for (let n = 0; n < symbols.length; ++n) {
            s = symbols[n];
            if (s.location && (loc = this.symbolStore.symbolLocation(s))) {
                locations.push(loc);
            }
        }
        return locations.length === 1 ? locations[0] : locations;
    }
}
exports.DefinitionProvider = DefinitionProvider;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const lsp = __webpack_require__(3);
const parsedDocument_1 = __webpack_require__(18);
class FormatProvider {
    constructor(docStore) {
        this.docStore = docStore;
    }
    provideDocumentFormattingEdits(doc, formatOptions) {
        let parsedDoc = this.docStore.find(doc.uri);
        if (!parsedDoc) {
            return [];
        }
        let visitor = new FormatVisitor(parsedDoc, formatOptions);
        parsedDoc.traverse(visitor);
        let edits = visitor.edits;
        let text = parsedDoc.text;
        if (visitor.firstToken && visitor.firstToken.tokenType === 156 && visitor.OpenTagCount === 1) {
            let closeTagIndex = visitor.last3Tokens.findIndex(this._isCloseTag);
            let endEdit;
            let lastToken = visitor.last3Tokens.length ? visitor.last3Tokens[visitor.last3Tokens.length - 1] : undefined;
            let lastTokenText = parsedDoc.tokenText(lastToken);
            if (closeTagIndex < 0) {
                if (lastToken && lastToken.tokenType === 161 && lastTokenText.search(FormatProvider.blkLinePattern) < 0) {
                    endEdit = lsp.TextEdit.replace(parsedDoc.tokenRange(lastToken), '\n\n');
                } else if (lastToken && lastToken.tokenType !== 161) {
                    endEdit = lsp.TextEdit.insert(parsedDoc.tokenRange(lastToken).end, '\n\n');
                }
            } else if (closeTagIndex > 0 && (lastToken.tokenType === 158 || lastToken.tokenType === 81 && !lastTokenText.trim())) {
                let tokenBeforeClose = visitor.last3Tokens[closeTagIndex - 1];
                let replaceStart;
                if (tokenBeforeClose.tokenType === 161) {
                    replaceStart = parsedDoc.tokenRange(tokenBeforeClose).start;
                } else {
                    replaceStart = parsedDoc.tokenRange(visitor.last3Tokens[closeTagIndex]).start;
                }
                endEdit = lsp.TextEdit.replace({ start: replaceStart, end: parsedDoc.tokenRange(lastToken).end }, '\n\n');
                if (edits.length) {
                    let lastEdit = edits[edits.length - 1];
                    if (lastEdit.range.end.line > endEdit.range.start.line || lastEdit.range.end.line === endEdit.range.start.line && lastEdit.range.end.character > endEdit.range.start.character) {
                        edits.shift();
                    }
                }
            }
            if (endEdit) {
                edits.unshift(endEdit);
            }
        }
        return edits;
    }
    provideDocumentRangeFormattingEdits(doc, range, formatOptions) {
        let parsedDoc = this.docStore.find(doc.uri);
        if (!parsedDoc) {
            return [];
        }
        let visitor = new FormatVisitor(parsedDoc, formatOptions, range);
        parsedDoc.traverse(visitor);
        return visitor.edits;
    }
    _isCloseTag(t) {
        return t.tokenType === 158;
    }
}
FormatProvider.blkLinePattern = /^(\r\n|\r|\n){2}$/;
exports.FormatProvider = FormatProvider;
class FormatVisitor {
    constructor(doc, formatOptions, range) {
        this.doc = doc;
        this.formatOptions = formatOptions;
        this._indentText = '';
        this._startOffset = -1;
        this._endOffset = -1;
        this._active = true;
        this._lastParameterListWasMultiLine = false;
        this.OpenTagCount = 0;
        this._edits = [];
        this._isMultilineCommaDelimitedListStack = [];
        this._indentUnit = formatOptions.insertSpaces ? FormatVisitor.createWhitespace(formatOptions.tabSize, ' ') : '\t';
        if (range) {
            this._startOffset = this.doc.offsetAtPosition(range.start);
            this._endOffset = this.doc.offsetAtPosition(range.end);
            this._active = false;
        }
        this.last3Tokens = [];
        this._decrementOnTheseNodes = [];
    }
    get edits() {
        return this._edits.reverse();
    }
    preorder(node, spine) {
        let parent = spine.length ? spine[spine.length - 1] : { phraseType: 0, children: [] };
        switch (node.phraseType) {
            case 87:
                if (parent.phraseType === 4 || this._lastParameterListWasMultiLine) {
                    this._nextFormatRule = FormatVisitor.singleSpaceBefore;
                    this._lastParameterListWasMultiLine = false;
                } else {
                    this._nextFormatRule = FormatVisitor.newlineIndentBefore;
                }
                return true;
            case 114:
                if (this._lastParameterListWasMultiLine) {
                    this._nextFormatRule = FormatVisitor.singleSpaceBefore;
                    this._lastParameterListWasMultiLine = false;
                } else {
                    this._nextFormatRule = FormatVisitor.newlineIndentBefore;
                }
                return true;
            case 29:
            case 166:
            case 104:
                this._nextFormatRule = FormatVisitor.newlineIndentBefore;
                return true;
            case 130:
            case 8:
            case 36:
            case 11:
            case 142:
                if (this._previousToken && this._previousToken.tokenType === 161 && FormatVisitor.countNewlines(this.doc.tokenText(this._previousToken)) > 0 || this._hasNewlineWhitespaceChild(node)) {
                    this._nextFormatRule = FormatVisitor.newlineIndentBefore;
                    this._isMultilineCommaDelimitedListStack.push(true);
                    this._incrementIndent();
                } else {
                    this._isMultilineCommaDelimitedListStack.push(false);
                    if (node.phraseType !== 142) {
                        this._nextFormatRule = FormatVisitor.noSpaceBefore;
                    }
                }
                return true;
            case 44:
            case 27:
            case 139:
            case 159:
            case 177:
                if (this._previousToken && this._previousToken.tokenType === 161 && FormatVisitor.countNewlines(this.doc.tokenText(this._previousToken)) > 0 || this._hasNewlineWhitespaceChild(node)) {
                    this._isMultilineCommaDelimitedListStack.push(true);
                    this._incrementIndent();
                } else {
                    this._isMultilineCommaDelimitedListStack.push(false);
                }
                this._nextFormatRule = FormatVisitor.singleSpaceOrNewlineIndentBefore;
                return true;
            case 58:
                this._nextFormatRule = FormatVisitor.noSpaceBefore;
                return true;
            case 156:
                if (parent.phraseType === 58) {
                    this._nextFormatRule = FormatVisitor.noSpaceBefore;
                }
                return true;
            case undefined:
                break;
            default:
                if (parent.phraseType === 58) {
                    this._nextFormatRule = FormatVisitor.noSpaceBefore;
                }
                return true;
        }
        let rule = this._nextFormatRule;
        let previous = this._previousToken;
        let previousNonWsToken = this._previousNonWsToken;
        this._previousToken = node;
        if (this._previousToken.tokenType !== 161) {
            this._previousNonWsToken = this._previousToken;
        }
        if (!this.firstToken) {
            this.firstToken = this._previousToken;
        }
        this.last3Tokens.push(this._previousToken);
        if (this.last3Tokens.length > 3) {
            this.last3Tokens.shift();
        }
        if (this._previousToken.tokenType === 156 || this._previousToken.tokenType === 157) {
            this.OpenTagCount++;
        }
        this._nextFormatRule = null;
        if (!this._active && this._startOffset > -1 && parsedDocument_1.ParsedDocument.isOffsetInToken(this._startOffset, node)) {
            this._active = true;
        }
        if (!previous) {
            return false;
        }
        switch (node.tokenType) {
            case 161:
                this._nextFormatRule = rule;
                return false;
            case 159:
                return false;
            case 160:
                rule = FormatVisitor.newlineIndentBefore;
                break;
            case 135:
                if (parent.phraseType === 132) {
                    rule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 129:
                if (parent.phraseType === 131) {
                    rule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 147:
                if (parent.phraseType === 121) {
                    rule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 84:
                if (previousNonWsToken.tokenType === 90) {
                    rule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 88:
            case 93:
            case 81:
            case 80:
            case 131:
            case 128:
                rule = FormatVisitor.noSpaceBefore;
                break;
            case 116:
                if (previousNonWsToken && previousNonWsToken.tokenType === 90) {
                    rule = FormatVisitor.noSpaceBefore;
                } else if (!rule) {
                    rule = FormatVisitor.singleSpaceBefore;
                }
                break;
            case 87:
                if (parent.phraseType === 17 || parent.phraseType === 48) {
                    rule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 156:
            case 157:
                rule = FormatVisitor.noSpaceBefore;
                this._indentText = FormatVisitor.createWhitespace(Math.ceil((this.doc.lineSubstring(node.offset).length - 1) / this._indentUnit.length), this._indentUnit);
                break;
            case 18:
            case 19:
                if (previousNonWsToken && previousNonWsToken.tokenType === 119) {
                    rule = FormatVisitor.singleSpaceBefore;
                }
                break;
            case 83:
                if (parent.phraseType === 136 || previousNonWsToken.tokenType === 147) {
                    rule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 68:
                if (parent.phraseType === 49) {
                    rule = FormatVisitor.singleSpaceBefore;
                }
                break;
            case 8:
                rule = FormatVisitor.singleSpaceBefore;
                break;
            case 115:
            case 133:
                if (previous && previous.tokenType === 161 && FormatVisitor.countNewlines(this.doc.tokenText(previous)) > 0) {
                    let outerExpr = parent;
                    for (let n = spine.length - 2; n >= 0; --n) {
                        if (parsedDocument_1.ParsedDocument.isPhrase(spine[n], FormatVisitor.memberAccessExprTypes)) {
                            outerExpr = spine[n];
                        } else {
                            break;
                        }
                    }
                    if (!this._decrementOnTheseNodes.find(x => {
                        return x === outerExpr;
                    })) {
                        this._decrementOnTheseNodes.push(outerExpr);
                        this._incrementIndent();
                    }
                }
                rule = FormatVisitor.noSpaceOrNewlineIndentBefore;
                break;
            case 118:
                if (this._shouldOpenParenthesisHaveNoSpaceBefore(parent, previousNonWsToken)) {
                    rule = FormatVisitor.noSpaceBefore;
                } else if (!rule) {
                    rule = FormatVisitor.singleSpaceBefore;
                }
                break;
            case 117:
                if (parent.phraseType === 160) {
                    rule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 119:
                this._decrementIndent();
                if (parent.phraseType === 160 || parent.phraseType === 56 || parent.phraseType === 57) {
                    rule = FormatVisitor.noSpaceBefore;
                } else {
                    rule = FormatVisitor.newlineIndentBefore;
                }
                break;
            case 120:
            case 121:
                if (!rule) {
                    rule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 158:
                if (previous.tokenType === 159 && this.doc.tokenText(previous).slice(0, 2) !== '/*') {
                    rule = FormatVisitor.noSpaceBefore;
                } else if (rule !== FormatVisitor.indentOrNewLineIndentBefore) {
                    rule = FormatVisitor.singleSpaceOrNewlineIndentBefore;
                }
                break;
            default:
                break;
        }
        if (!rule) {
            rule = FormatVisitor.singleSpaceOrNewlineIndentPlusOneBefore;
        }
        if (!this._active) {
            return false;
        }
        let edit = rule(previous, this.doc, this._indentText, this._indentUnit);
        if (edit) {
            this._edits.push(edit);
        }
        if (this._isKeyword(node)) {
            let text = this.doc.tokenText(node);
            let lcText = text.toLowerCase();
            if (text !== lcText) {
                this._edits.push(lsp.TextEdit.replace(this.doc.tokenRange(node), lcText));
            }
        } else if (this._isTrueFalseNull(node, spine)) {
            let text = this.doc.tokenText(node);
            let lcText = text.toLowerCase();
            if (text !== lcText) {
                this._edits.push(lsp.TextEdit.replace(this.doc.tokenRange(node), lcText));
            }
        }
        return false;
    }
    postorder(node, spine) {
        let parent = spine[spine.length - 1];
        let decrementOnNode = this._decrementOnTheseNodes.length ? this._decrementOnTheseNodes[this._decrementOnTheseNodes.length - 1] : undefined;
        if (decrementOnNode === node) {
            this._decrementIndent();
            this._decrementOnTheseNodes.pop();
        }
        switch (node.phraseType) {
            case 17:
            case 48:
                this._decrementIndent();
                return;
            case 120:
                this._nextFormatRule = FormatVisitor.doubleNewlineIndentBefore;
                return;
            case 124:
                if (this._isLastNamespaceUseDeclaration(parent, node)) {
                    this._nextFormatRule = FormatVisitor.doubleNewlineIndentBefore;
                }
                return;
            case 130:
            case 8:
            case 36:
            case 142:
            case 11:
                if (this._isMultilineCommaDelimitedListStack.pop()) {
                    this._nextFormatRule = FormatVisitor.newlineIndentBefore;
                    this._decrementIndent();
                    if (node.phraseType === 130) {
                        this._lastParameterListWasMultiLine = true;
                    }
                }
                return;
            case 44:
            case 139:
            case 27:
            case 159:
            case 177:
                if (this._isMultilineCommaDelimitedListStack.pop()) {
                    this._decrementIndent();
                }
                return;
            case 58:
                this._nextFormatRule = FormatVisitor.noSpaceBefore;
                return;
            case 4:
                this._nextFormatRule = null;
                break;
            case undefined:
                break;
            default:
                return;
        }
        switch (node.tokenType) {
            case 159:
                if (this.doc.tokenText(node).slice(0, 2) === '/*') {
                    this._nextFormatRule = FormatVisitor.singleSpaceOrNewlineIndentBefore;
                    if (this._active) {
                        let edit = this._formatDocBlock(node);
                        if (edit) {
                            this._edits.push(edit);
                        }
                    }
                } else {
                    this._nextFormatRule = FormatVisitor.indentOrNewLineIndentBefore;
                }
                break;
            case 160:
                this._nextFormatRule = FormatVisitor.newlineIndentBefore;
                if (!this._active) {
                    break;
                }
                let edit = this._formatDocBlock(node);
                if (edit) {
                    this._edits.push(edit);
                }
                break;
            case 116:
                if (parent.phraseType === 56) {
                    this._nextFormatRule = FormatVisitor.noSpaceBefore;
                } else {
                    this._nextFormatRule = FormatVisitor.newlineIndentBefore;
                }
                this._incrementIndent();
                break;
            case 119:
                if (parent.phraseType !== 57 && parent.phraseType !== 56 && parent.phraseType !== 160) {
                    this._nextFormatRule = FormatVisitor.newlineIndentBefore;
                }
                break;
            case 88:
                if (parent.phraseType === 83) {
                    this._nextFormatRule = FormatVisitor.singleSpaceBefore;
                } else {
                    this._nextFormatRule = FormatVisitor.newlineIndentBefore;
                }
                break;
            case 87:
                if (this._shouldIndentAfterColon(spine[spine.length - 1])) {
                    this._incrementIndent();
                    this._nextFormatRule = FormatVisitor.newlineIndentBefore;
                }
                break;
            case 103:
                if (parent.phraseType !== 14) {
                    this._nextFormatRule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 111:
            case 143:
                if (parent.phraseType === 174) {
                    this._nextFormatRule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 135:
                if (parent.phraseType === 134) {
                    this._nextFormatRule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 129:
                if (parent.phraseType === 133) {
                    this._nextFormatRule = FormatVisitor.noSpaceBefore;
                }
                break;
            case 134:
            case 89:
            case 94:
            case 155:
            case 148:
            case 153:
            case 152:
            case 151:
            case 150:
            case 149:
            case 86:
            case 147:
            case 118:
            case 117:
                this._nextFormatRule = FormatVisitor.noSpaceBefore;
                break;
            case 128:
            case 131:
                this._incrementIndent();
                this._nextFormatRule = FormatVisitor.noSpaceBefore;
                break;
            case 93:
                if (parent.phraseType === 11 || parent.phraseType === 44 || parent.phraseType === 27 || parent.phraseType === 139 || parent.phraseType === 159 || parent.phraseType === 177) {
                    this._nextFormatRule = FormatVisitor.singleSpaceOrNewlineIndentBefore;
                } else if (this._isMultilineCommaDelimitedListStack.length > 0 && this._isMultilineCommaDelimitedListStack[this._isMultilineCommaDelimitedListStack.length - 1]) {
                    this._nextFormatRule = FormatVisitor.newlineIndentBefore;
                }
                break;
            case 115:
            case 133:
                this._nextFormatRule = FormatVisitor.noSpaceBefore;
                break;
            case 156:
                let tagText = this.doc.tokenText(node);
                if (tagText.length > 2) {
                    if (FormatVisitor.countNewlines(tagText) > 0) {
                        this._nextFormatRule = FormatVisitor.indentOrNewLineIndentBefore;
                    } else {
                        this._nextFormatRule = FormatVisitor.noSpaceOrNewlineIndentBefore;
                    }
                    break;
                }
            case 157:
                this._nextFormatRule = FormatVisitor.singleSpaceOrNewlineIndentBefore;
                break;
            default:
                break;
        }
        if (this._active && this._endOffset > -1 && parsedDocument_1.ParsedDocument.isOffsetInToken(this._endOffset, node)) {
            this.haltTraverse = true;
            this._active = false;
        }
    }
    _isTrueFalseNull(node, spine) {
        let parent = spine.length ? spine[spine.length - 1] : undefined;
        let greatGrandParent = spine.length > 2 ? spine[spine.length - 3] : undefined;
        const keywords = ['true', 'false', 'null'];
        return parsedDocument_1.ParsedDocument.isToken(node, [83]) && parsedDocument_1.ParsedDocument.isPhrase(parent, [121]) && parent.children.length === 1 && parsedDocument_1.ParsedDocument.isPhrase(greatGrandParent, [41]) && keywords.indexOf(this.doc.tokenText(node).toLowerCase()) > -1;
    }
    _formatDocBlock(node) {
        let text = this.doc.tokenText(node);
        let formatted = text.replace(FormatVisitor._docBlockRegex, '\n' + this._indentText + ' *');
        return formatted !== text ? lsp.TextEdit.replace(this.doc.tokenRange(node), formatted) : null;
    }
    _incrementIndent() {
        this._indentText += this._indentUnit;
    }
    _decrementIndent() {
        this._indentText = this._indentText.slice(0, -this._indentUnit.length);
    }
    _hasNewlineWhitespaceChild(phrase) {
        for (let n = 0, l = phrase.children.length; n < l; ++n) {
            if (phrase.children[n].tokenType === 161 && FormatVisitor.countNewlines(this.doc.tokenText(phrase.children[n])) > 0) {
                return true;
            }
        }
        return false;
    }
    _isLastNamespaceUseDeclaration(parent, child) {
        let i = parent.children.indexOf(child);
        while (i < parent.children.length) {
            ++i;
            child = parent.children[i];
            if (child.phraseType) {
                return child.phraseType !== 124;
            }
        }
        return true;
    }
    _shouldIndentAfterColon(parent) {
        switch (parent.phraseType) {
            case 17:
            case 48:
                return true;
            default:
                return false;
        }
    }
    _shouldOpenParenthesisHaveNoSpaceBefore(parent, lastNonWsToken) {
        switch (parent.phraseType) {
            case 85:
            case 112:
            case 150:
            case 51:
            case 55:
            case 69:
            case 70:
            case 107:
            case 108:
            case 135:
            case 175:
            case 9:
            case 88:
            case 115:
            case 128:
            case 146:
            case 147:
            case 97:
            case 98:
                return true;
            default:
                if (!lastNonWsToken) {
                    return false;
                }
                break;
        }
        switch (lastNonWsToken.tokenType) {
            case 57:
            case 58:
            case 41:
            case 42:
            case 46:
            case 47:
            case 53:
            case 65:
            case 28:
            case 29:
            case 20:
                return true;
            default:
                return false;
        }
    }
    _hasColonChild(phrase) {
        for (let n = 0, l = phrase.children.length; n < l; ++n) {
            if (phrase.children[n].tokenType === 87) {
                return true;
            }
        }
        return false;
    }
    _isKeyword(t) {
        if (!t) {
            return false;
        }
        switch (t.tokenType) {
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
                return true;
            default:
                return false;
        }
    }
}
FormatVisitor._docBlockRegex = /(?:\r\n|\r|\n)[ \t]*\*/g;
FormatVisitor.memberAccessExprTypes = [112, 136, 150, 24, 152];
(function (FormatVisitor) {
    function singleSpaceBefore(previous, doc, indentText, indentUnit) {
        if (previous.tokenType !== 161) {
            return lsp.TextEdit.insert(doc.positionAtOffset(previous.offset + previous.length), ' ');
        }
        let actualWs = doc.tokenText(previous);
        let expectedWs = ' ';
        if (actualWs === expectedWs) {
            return null;
        }
        return lsp.TextEdit.replace(doc.tokenRange(previous), expectedWs);
    }
    FormatVisitor.singleSpaceBefore = singleSpaceBefore;
    function indentBefore(previous, doc, indentText, indentUnit) {
        if (previous.tokenType !== 161) {
            return indentText ? lsp.TextEdit.insert(doc.positionAtOffset(previous.offset + previous.length), indentText) : null;
        }
        if (!indentText) {
            return lsp.TextEdit.del(doc.tokenRange(previous));
        }
        let actualWs = doc.tokenText(previous);
        if (actualWs === indentText) {
            return null;
        }
        return lsp.TextEdit.replace(doc.tokenRange(previous), indentText);
    }
    FormatVisitor.indentBefore = indentBefore;
    function indentOrNewLineIndentBefore(previous, doc, indentText, indentUnit) {
        if (previous.tokenType !== 161) {
            return indentText ? lsp.TextEdit.insert(doc.positionAtOffset(previous.offset + previous.length), indentText) : null;
        }
        let actualWs = doc.tokenText(previous);
        let nl = countNewlines(actualWs);
        if (nl) {
            let expectedWs = createWhitespace(Math.max(1, nl), '\n') + indentText;
            if (actualWs === expectedWs) {
                return null;
            }
            return lsp.TextEdit.replace(doc.tokenRange(previous), expectedWs);
        }
        if (!indentText) {
            return lsp.TextEdit.del(doc.tokenRange(previous));
        }
        if (actualWs === indentText) {
            return null;
        }
        return lsp.TextEdit.replace(doc.tokenRange(previous), indentText);
    }
    FormatVisitor.indentOrNewLineIndentBefore = indentOrNewLineIndentBefore;
    function newlineIndentBefore(previous, doc, indentText, indentUnit) {
        if (previous.tokenType !== 161) {
            return lsp.TextEdit.insert(doc.positionAtOffset(previous.offset + previous.length), '\n' + indentText);
        }
        let actualWs = doc.tokenText(previous);
        let expectedWs = createWhitespace(Math.max(1, countNewlines(actualWs)), '\n') + indentText;
        if (actualWs === expectedWs) {
            return null;
        }
        return lsp.TextEdit.replace(doc.tokenRange(previous), expectedWs);
    }
    FormatVisitor.newlineIndentBefore = newlineIndentBefore;
    function doubleNewlineIndentBefore(previous, doc, indentText, indentUnit) {
        if (previous.tokenType !== 161) {
            return lsp.TextEdit.insert(doc.positionAtOffset(previous.offset + previous.length), '\n\n' + indentText);
        }
        let actualWs = doc.tokenText(previous);
        let expected = createWhitespace(Math.max(2, countNewlines(actualWs)), '\n') + indentText;
        if (actualWs === expected) {
            return null;
        }
        return lsp.TextEdit.replace(doc.tokenRange(previous), expected);
    }
    FormatVisitor.doubleNewlineIndentBefore = doubleNewlineIndentBefore;
    function noSpaceBefore(previous, doc, indentText, indentUnit) {
        if (previous.tokenType !== 161) {
            return null;
        }
        return lsp.TextEdit.del(doc.tokenRange(previous));
    }
    FormatVisitor.noSpaceBefore = noSpaceBefore;
    function noSpaceOrNewlineIndentPlusOneBefore(previous, doc, indentText, indentUnit) {
        if (previous.tokenType !== 161) {
            return null;
        }
        let actualWs = doc.tokenText(previous);
        let newlineCount = countNewlines(actualWs);
        if (!newlineCount) {
            return lsp.TextEdit.del(doc.tokenRange(previous));
        }
        let expectedWs = createWhitespace(newlineCount, '\n') + indentText + indentUnit;
        if (actualWs === expectedWs) {
            return null;
        }
        return lsp.TextEdit.replace(doc.tokenRange(previous), expectedWs);
    }
    FormatVisitor.noSpaceOrNewlineIndentPlusOneBefore = noSpaceOrNewlineIndentPlusOneBefore;
    function noSpaceOrNewlineIndentBefore(previous, doc, indentText, indentUnit) {
        if (previous.tokenType !== 161) {
            return null;
        }
        let actualWs = doc.tokenText(previous);
        let newlineCount = countNewlines(actualWs);
        if (!newlineCount) {
            return lsp.TextEdit.del(doc.tokenRange(previous));
        }
        let expectedWs = createWhitespace(newlineCount, '\n') + indentText;
        if (actualWs === expectedWs) {
            return null;
        }
        return lsp.TextEdit.replace(doc.tokenRange(previous), expectedWs);
    }
    FormatVisitor.noSpaceOrNewlineIndentBefore = noSpaceOrNewlineIndentBefore;
    function singleSpaceOrNewlineIndentPlusOneBefore(previous, doc, indentText, indentUnit) {
        if (previous.tokenType !== 161) {
            return lsp.TextEdit.insert(doc.positionAtOffset(previous.offset + previous.length), ' ');
        }
        let actualWs = doc.tokenText(previous);
        if (actualWs === ' ') {
            return null;
        }
        let newlineCount = countNewlines(actualWs);
        if (!newlineCount) {
            return lsp.TextEdit.replace(doc.tokenRange(previous), ' ');
        }
        let expectedWs = createWhitespace(newlineCount, '\n') + indentText + indentUnit;
        if (actualWs !== expectedWs) {
            return lsp.TextEdit.replace(doc.tokenRange(previous), expectedWs);
        }
        return null;
    }
    FormatVisitor.singleSpaceOrNewlineIndentPlusOneBefore = singleSpaceOrNewlineIndentPlusOneBefore;
    function singleSpaceOrNewlineIndentBefore(previous, doc, indentText, indentUnit) {
        if (previous.tokenType !== 161) {
            return lsp.TextEdit.insert(doc.positionAtOffset(previous.offset + previous.length), ' ');
        }
        let actualWs = doc.tokenText(previous);
        if (actualWs === ' ') {
            return null;
        }
        let newlineCount = countNewlines(actualWs);
        if (!newlineCount) {
            return lsp.TextEdit.replace(doc.tokenRange(previous), ' ');
        }
        let expectedWs = createWhitespace(newlineCount, '\n') + indentText;
        if (actualWs !== expectedWs) {
            return lsp.TextEdit.replace(doc.tokenRange(previous), expectedWs);
        }
        return null;
    }
    FormatVisitor.singleSpaceOrNewlineIndentBefore = singleSpaceOrNewlineIndentBefore;
    function createWhitespace(n, unit) {
        let text = '';
        while (n > 0) {
            text += unit;
            --n;
        }
        return text;
    }
    FormatVisitor.createWhitespace = createWhitespace;
    function countNewlines(text) {
        let c;
        let count = 0;
        let l = text.length;
        let n = 0;
        while (n < l) {
            c = text[n];
            ++n;
            if (c === '\r') {
                ++count;
                if (n < l && text[n] === '\n') {
                    ++n;
                }
            } else if (c === '\n') {
                ++count;
            }
        }
        return count;
    }
    FormatVisitor.countNewlines = countNewlines;
})(FormatVisitor || (FormatVisitor = {}));

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_types_1 = __webpack_require__(3);
const parseTreeTraverser_1 = __webpack_require__(53);
const symbol_1 = __webpack_require__(12);
const useDeclarationHelper_1 = __webpack_require__(99);
const util = __webpack_require__(4);
class NameTextEditProvider {
    constructor(symbolStore, docStore, refStore) {
        this.symbolStore = symbolStore;
        this.docStore = docStore;
        this.refStore = refStore;
    }
    provideContractFqnTextEdits(uri, position, alias) {
        const kindMask = 1 | 2 | 4 | 64 | 8 | 2048;
        let edits = [];
        let doc = this.docStore.find(uri);
        let table = this.symbolStore.getSymbolTable(uri);
        let refTable = this.refStore.getReferenceTable(uri);
        if (!doc || !table || !refTable || !this._fullyQualifiedNamePhrase(position, doc, table, refTable)) {
            return edits;
        }
        let ref = refTable.referenceAtPosition(position);
        if (!(ref.kind & kindMask)) {
            return edits;
        }
        let helper = new useDeclarationHelper_1.UseDeclarationHelper(doc, table, position);
        let fqnUseSymbol = helper.findUseSymbolByFqn(ref.name);
        let nameUseSymbol = helper.findUseSymbolByName(symbol_1.PhpSymbol.notFqn(ref.name));
        if (!fqnUseSymbol) {
            if (!alias && nameUseSymbol) {
                return edits;
            }
            edits.push(helper.insertDeclarationTextEdit(ref, alias));
        } else if (alias && fqnUseSymbol.name !== alias) {
            edits.push(helper.replaceDeclarationTextEdit(ref, alias));
        }
        let name = alias || symbol_1.PhpSymbol.notFqn(ref.name);
        let lcName = ref.name.toLowerCase();
        let fn = r => {
            return (r.kind & kindMask) > 0 && lcName === r.name.toLowerCase() && (!fqnUseSymbol || util.isInRange(r.location.range.start, fqnUseSymbol.location.range) !== 0 && util.isInRange(r.location.range.end, fqnUseSymbol.location.range) !== 0);
        };
        let references = refTable.references(fn);
        for (let n = 0, l = references.length; n < l; ++n) {
            edits.push(vscode_languageserver_types_1.TextEdit.replace(references[n].location.range, name));
        }
        return edits.reverse();
    }
    _fullyQualifiedNamePhrase(position, doc, table, refTable) {
        let traverser = new parseTreeTraverser_1.ParseTreeTraverser(doc, table, refTable);
        traverser.position(position);
        return traverser.ancestor(this._isFullyQualifiedName);
    }
    _isFullyQualifiedName(node) {
        return node.phraseType === 84;
    }
}
exports.NameTextEditProvider = NameTextEditProvider;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const symbol_1 = __webpack_require__(12);
const nameResolver_1 = __webpack_require__(98);
const lsp = __webpack_require__(3);
const typeString_1 = __webpack_require__(29);
const typeAggregate_1 = __webpack_require__(44);
const util = __webpack_require__(4);
const phpDoc_1 = __webpack_require__(97);
const reference_1 = __webpack_require__(54);
function symbolsToTypeReduceFn(prev, current, index, array) {
    return typeString_1.TypeString.merge(prev, symbol_1.PhpSymbol.type(current));
}
class ReferenceReader {
    constructor(doc, nameResolver, symbolStore) {
        this.doc = doc;
        this.nameResolver = nameResolver;
        this.symbolStore = symbolStore;
        this._symbolFilter = x => {
            const mask = 512 | 1 | 2 | 4 | 32 | 64 | 4096;
            return (x.kind & mask) > 0 && !(x.modifiers & 256);
        };
        this._referenceSymbols = ref => {
            return this.symbolStore.findSymbolsByReference(ref, 2);
        };
        this._transformStack = [];
        this._variableTable = new VariableTable();
        this._classStack = [];
        this._symbolTable = this.symbolStore.getSymbolTable(this.doc.uri);
        this._symbols = this._symbolTable.filter(this._symbolFilter);
        this._scopeStack = [reference_1.Scope.create(lsp.Location.create(this.doc.uri, util.cloneRange(this._symbols.shift().location.range)))];
    }
    get refTable() {
        return new reference_1.ReferenceTable(this.doc.uri, this._scopeStack[0]);
    }
    preorder(node, spine) {
        let parent = spine.length ? spine[spine.length - 1] : null;
        let parentTransform = this._transformStack.length ? this._transformStack[this._transformStack.length - 1] : null;
        switch (node.phraseType) {
            case 60:
                this._transformStack.push(null);
                return false;
            case 120:
                {
                    let s = this._symbols.shift();
                    this._scopeStackPush(reference_1.Scope.create(this.doc.nodeLocation(node)));
                    this.nameResolver.namespace = s;
                    this._transformStack.push(new NamespaceDefinitionTransform());
                }
                break;
            case 30:
                this._transformStack.push(new HeaderTransform(this.nameResolver, 1));
                break;
            case 105:
                this._transformStack.push(new HeaderTransform(this.nameResolver, 2));
                break;
            case 167:
                this._transformStack.push(new HeaderTransform(this.nameResolver, 4));
                break;
            case 88:
                this._transformStack.push(new HeaderTransform(this.nameResolver, 64));
                break;
            case 85:
                if (parentTransform) {
                    this._transformStack.push(new FunctionCallExpressionTransform(this._referenceSymbols));
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 43:
                this._transformStack.push(new HeaderTransform(this.nameResolver, 8));
                break;
            case 26:
                this._transformStack.push(new MemberDeclarationTransform(1024, this._currentClassName()));
                break;
            case 115:
                this._transformStack.push(new MemberDeclarationTransform(32, this._currentClassName()));
                break;
            case 138:
                this._transformStack.push(new PropertyElementTransform(this._currentClassName()));
                break;
            case 129:
                this._transformStack.push(new ParameterDeclarationTransform());
                break;
            case 124:
                this._transformStack.push(new NamespaceUseDeclarationTransform());
                break;
            case 126:
            case 123:
                this._transformStack.push(new NamespaceUseClauseListTransform(node.phraseType));
                break;
            case 122:
            case 125:
                {
                    if (this._symbols.length && (this._symbols[0].modifiers & 4096) > 0) {
                        this.nameResolver.rules.push(this._symbols.shift());
                    }
                    this._transformStack.push(new NamespaceUseClauseTransform(node.phraseType));
                    break;
                }
            case 86:
                this._transformStack.push(null);
                this._functionDeclaration(node);
                break;
            case 113:
                this._transformStack.push(null);
                this._methodDeclaration(node);
                break;
            case 28:
            case 165:
            case 103:
            case 2:
                {
                    let s = this._symbols.shift() || symbol_1.PhpSymbol.create(1, '', this.doc.nodeHashedLocation(node));
                    this._scopeStackPush(reference_1.Scope.create(this.doc.nodeLocation(node)));
                    this.nameResolver.pushClass(s);
                    this._classStack.push(typeAggregate_1.TypeAggregate.create(this.symbolStore, s.name));
                    this._variableTable.pushScope();
                    this._variableTable.setVariable(Variable.create('$this', s.name));
                    this._transformStack.push(null);
                }
                break;
            case 4:
                this._anonymousFunctionCreationExpression(node);
                this._transformStack.push(null);
                break;
            case 96:
            case 161:
                this._transformStack.push(null);
                this._variableTable.pushBranch();
                break;
            case 17:
            case 48:
            case 53:
            case 52:
                this._transformStack.push(null);
                this._variableTable.popBranch();
                this._variableTable.pushBranch();
                break;
            case 155:
            case 16:
                this._transformStack.push(new SimpleAssignmentExpressionTransform(node.phraseType, this._lastVarTypehints));
                break;
            case 100:
                this._transformStack.push(new InstanceOfExpressionTransform());
                break;
            case 78:
                this._transformStack.push(new ForeachStatementTransform());
                break;
            case 76:
                this._transformStack.push(new ForeachCollectionTransform());
                break;
            case 79:
                this._transformStack.push(new ForeachValueTransform());
                break;
            case 20:
                this._transformStack.push(new CatchClauseTransform());
                break;
            case 22:
                this._transformStack.push(new CatchNameListTransform());
                break;
            case 141:
                this._transformStack.push(new QualifiedNameTransform(this._nameSymbolType(parent), this.doc.nodeLocation(node), this.nameResolver));
                break;
            case 84:
                this._transformStack.push(new FullyQualifiedNameTransform(this._nameSymbolType(parent), this.doc.nodeLocation(node)));
                break;
            case 144:
                this._transformStack.push(new RelativeQualifiedNameTransform(this._nameSymbolType(parent), this.doc.nodeLocation(node), this.nameResolver));
                break;
            case 121:
                this._transformStack.push(new NamespaceNameTransform(node, this.doc));
                break;
            case 156:
                this._transformStack.push(new SimpleVariableTransform(this.doc.nodeLocation(node), this._variableTable));
                break;
            case 108:
                this._transformStack.push(new ListIntrinsicTransform());
                break;
            case 11:
                if (parentTransform) {
                    this._transformStack.push(new ArrayInititialiserListTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 10:
                if (parentTransform) {
                    this._transformStack.push(new ArrayElementTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 13:
                if (parentTransform) {
                    this._transformStack.push(new ArrayValueTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 160:
                if (parentTransform) {
                    this._transformStack.push(new SubscriptExpressionTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 150:
                this._transformStack.push(new MemberAccessExpressionTransform(150, 32, this._referenceSymbols));
                break;
            case 152:
                this._transformStack.push(new MemberAccessExpressionTransform(152, 16, this._referenceSymbols));
                break;
            case 24:
                this._transformStack.push(new MemberAccessExpressionTransform(24, 1024, this._referenceSymbols));
                break;
            case 151:
                this._transformStack.push(new ScopedMemberNameTransform(this.doc.nodeLocation(node)));
                break;
            case 95:
                if (parentTransform) {
                    this._transformStack.push(new IdentifierTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 136:
                this._transformStack.push(new MemberAccessExpressionTransform(136, 16, this._referenceSymbols));
                break;
            case 112:
                this._transformStack.push(new MemberAccessExpressionTransform(112, 32, this._referenceSymbols));
                break;
            case 111:
                this._transformStack.push(new MemberNameTransform(this.doc.nodeLocation(node)));
                break;
            case 7:
                this._transformStack.push(new AnonymousFunctionUseVariableTransform());
                break;
            case 128:
                if (parentTransform) {
                    this._transformStack.push(new ObjectCreationExpressionTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 34:
            case 101:
                if (parentTransform) {
                    this._transformStack.push(new TypeDesignatorTransform(node.phraseType));
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 145:
                let context = this._classStack.length ? this._classStack[this._classStack.length - 1] : null;
                let name = context ? context.name : '';
                this._transformStack.push(new RelativeScopeTransform(name, this.doc.nodeLocation(node)));
                break;
            case 40:
                if (parentTransform) {
                    this._transformStack.push(new TernaryExpressionTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 37:
                if (parentTransform) {
                    this._transformStack.push(new CoalesceExpressionTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case 56:
                if (parentTransform) {
                    this._transformStack.push(new EncapsulatedExpressionTransform());
                } else {
                    this._transformStack.push(null);
                }
                break;
            case undefined:
                if (parentTransform && node.tokenType > 1 && node.tokenType < 85) {
                    parentTransform.push(new TokenTransform(node, this.doc));
                    if (parentTransform.phraseType === 20 && node.tokenType === 84) {
                        this._variableTable.setVariable(parentTransform.variable);
                    }
                } else if (node.tokenType === 160) {
                    let phpDoc = phpDoc_1.PhpDocParser.parse(this.doc.tokenText(node));
                    if (phpDoc) {
                        this._lastVarTypehints = phpDoc.varTags;
                        let varTag;
                        for (let n = 0, l = this._lastVarTypehints.length; n < l; ++n) {
                            varTag = this._lastVarTypehints[n];
                            varTag.typeString = typeString_1.TypeString.nameResolve(varTag.typeString, this.nameResolver);
                            this._variableTable.setVariable(Variable.create(varTag.name, varTag.typeString));
                        }
                    }
                } else if (node.tokenType === 116 || node.tokenType === 119 || node.tokenType === 88) {
                    this._lastVarTypehints = undefined;
                }
                break;
            default:
                this._transformStack.push(null);
                break;
        }
        return true;
    }
    postorder(node, spine) {
        if (!node.phraseType) {
            return;
        }
        let transform = this._transformStack.pop();
        let parentTransform = this._transformStack.length ? this._transformStack[this._transformStack.length - 1] : null;
        let scope = this._scopeStack.length ? this._scopeStack[this._scopeStack.length - 1] : null;
        if (parentTransform && transform) {
            parentTransform.push(transform);
        }
        switch (node.phraseType) {
            case 84:
            case 141:
            case 144:
            case 156:
            case 150:
            case 24:
            case 152:
            case 136:
            case 112:
            case 122:
            case 125:
            case 30:
            case 105:
            case 167:
            case 88:
            case 43:
            case 138:
            case 26:
            case 115:
            case 120:
            case 129:
            case 7:
            case 145:
                if (scope && transform) {
                    let ref = transform.reference;
                    if (ref) {
                        scope.children.push(ref);
                    }
                }
                if (node.phraseType === 120) {
                    this._scopeStack.pop();
                }
                break;
            case 155:
            case 16:
                this._variableTable.setVariables(transform.variables);
                break;
            case 100:
                this._variableTable.setVariable(transform.variable);
                break;
            case 79:
                this._variableTable.setVariables(parentTransform.variables);
                break;
            case 96:
            case 161:
                this._variableTable.popBranch();
                this._variableTable.pruneBranches();
                break;
            case 28:
            case 165:
            case 103:
            case 2:
                this.nameResolver.popClass();
                this._classStack.pop();
                this._scopeStack.pop();
                this._variableTable.popScope();
                break;
            case 86:
            case 113:
            case 4:
                this._scopeStack.pop();
                this._variableTable.popScope();
                break;
            default:
                break;
        }
    }
    _currentClassName() {
        let c = this._classStack.length ? this._classStack[this._classStack.length - 1] : undefined;
        return c ? c.name : '';
    }
    _scopeStackPush(scope) {
        if (this._scopeStack.length) {
            this._scopeStack[this._scopeStack.length - 1].children.push(scope);
        }
        this._scopeStack.push(scope);
    }
    _nameSymbolType(parent) {
        if (!parent) {
            return 1;
        }
        switch (parent.phraseType) {
            case 41:
                return 8;
            case 85:
                return 64;
            case 34:
                return 2048;
            default:
                return 1;
        }
    }
    _methodDeclaration(node) {
        let scope = reference_1.Scope.create(this.doc.nodeLocation(node));
        this._scopeStackPush(scope);
        this._variableTable.pushScope(['$this']);
        let type = this._classStack.length ? this._classStack[this._classStack.length - 1] : null;
        let symbol = this._symbols.shift();
        if (type && symbol) {
            let lcName = symbol.name.toLowerCase();
            let fn = x => {
                return x.kind === 32 && lcName === x.name.toLowerCase();
            };
            symbol = type.members(2, fn).shift();
            let children = symbol && symbol.children ? symbol.children : [];
            let param;
            for (let n = 0, l = children.length; n < l; ++n) {
                param = children[n];
                if (param.kind === 128) {
                    this._variableTable.setVariable(Variable.create(param.name, symbol_1.PhpSymbol.type(param)));
                }
            }
        }
    }
    _functionDeclaration(node) {
        let symbol = this._symbols.shift();
        this._scopeStackPush(reference_1.Scope.create(this.doc.nodeLocation(node)));
        this._variableTable.pushScope();
        let children = symbol && symbol.children ? symbol.children : [];
        let param;
        for (let n = 0, l = children.length; n < l; ++n) {
            param = children[n];
            if (param.kind === 128) {
                this._variableTable.setVariable(Variable.create(param.name, symbol_1.PhpSymbol.type(param)));
            }
        }
    }
    _anonymousFunctionCreationExpression(node) {
        let symbol = this._symbols.shift();
        this._scopeStackPush(reference_1.Scope.create(this.doc.nodeLocation(node)));
        let carry = ['$this'];
        let children = symbol && symbol.children ? symbol.children : [];
        let s;
        for (let n = 0, l = children.length; n < l; ++n) {
            s = children[n];
            if (s.kind === 256 && (s.modifiers & 4096) > 0) {
                carry.push(s.name);
            }
        }
        this._variableTable.pushScope(carry);
        for (let n = 0, l = children.length; n < l; ++n) {
            s = children[n];
            if (s.kind === 128) {
                this._variableTable.setVariable(Variable.create(s.name, symbol_1.PhpSymbol.type(s)));
            }
        }
    }
}
exports.ReferenceReader = ReferenceReader;
class TokenTransform {
    constructor(token, doc) {
        this.token = token;
        this.doc = doc;
    }
    get tokenType() {
        return this.token.tokenType;
    }
    get text() {
        return this.doc.tokenText(this.token);
    }
    get location() {
        return this.doc.nodeLocation(this.token);
    }
    get type() {
        switch (this.token.tokenType) {
            case 79:
                return 'float';
            case 78:
            case 80:
                return 'string';
            case 82:
                return 'int';
            case 83:
                {
                    let lcName = this.text.toLowerCase();
                    return lcName === 'true' || lcName === 'false' ? 'bool' : '';
                }
            default:
                return '';
        }
    }
    push(transform) {}
}
class NamespaceNameTransform {
    constructor(node, document) {
        this.node = node;
        this.document = document;
        this.phraseType = 121;
        this._parts = [];
    }
    get location() {
        return this.document.nodeLocation(this.node);
    }
    push(transform) {
        if (transform.tokenType === 83) {
            this._parts.push(transform.text);
        }
    }
    get text() {
        return this._parts.join('\\');
    }
}
class NamespaceUseClauseListTransform {
    constructor(phraseType) {
        this.phraseType = phraseType;
        this.references = [];
    }
    push(transform) {
        if (transform.phraseType === 122 || transform.phraseType === 125) {
            this.references.push(transform.reference);
        }
    }
}
class NamespaceUseDeclarationTransform {
    constructor() {
        this.phraseType = 124;
        this._kind = 1;
        this._prefix = '';
        this.references = [];
    }
    push(transform) {
        if (transform.tokenType === 12) {
            this._kind = 8;
        } else if (transform.tokenType === 35) {
            this._kind = 64;
        } else if (transform.phraseType === 121) {
            this._prefix = transform.text;
        } else if (transform.phraseType === 126) {
            this.references = transform.references;
            let ref;
            let prefix = this._prefix ? this._prefix + '\\' : '';
            for (let n = 0; n < this.references.length; ++n) {
                ref = this.references[n];
                ref.name = prefix + ref.name;
                if (!ref.kind) {
                    ref.kind = this._kind;
                }
            }
        } else if (transform.phraseType === 123) {
            this.references = transform.references;
            let ref;
            for (let n = 0; n < this.references.length; ++n) {
                ref = this.references[n];
                ref.kind = this._kind;
            }
        }
    }
}
class NamespaceUseClauseTransform {
    constructor(phraseType) {
        this.phraseType = phraseType;
        this.reference = reference_1.Reference.create(0, '', null);
    }
    push(transform) {
        if (transform.tokenType === 35) {
            this.reference.kind = 64;
        } else if (transform.tokenType === 12) {
            this.reference.kind = 8;
        } else if (transform.phraseType === 121) {
            this.reference.name = transform.text;
            this.reference.location = transform.location;
        }
    }
}
class CatchClauseTransform {
    constructor() {
        this.phraseType = 20;
        this._varType = '';
        this._varName = '';
    }
    push(transform) {
        if (transform.phraseType === 22) {
            this._varType = transform.type;
        } else if (transform.tokenType === 84) {
            this._varName = transform.text;
        }
    }
    get variable() {
        return this._varName && this._varType ? Variable.create(this._varName, this._varType) : null;
    }
}
class CatchNameListTransform {
    constructor() {
        this.phraseType = 22;
        this.type = '';
    }
    push(transform) {
        let ref = transform.reference;
        if (ref) {
            this.type = typeString_1.TypeString.merge(this.type, ref.name);
        }
    }
}
class AnonymousFunctionUseVariableTransform {
    constructor() {
        this.phraseType = 7;
    }
    push(transform) {
        if (transform.tokenType === 84) {
            this.reference = reference_1.Reference.create(256, transform.text, transform.location);
        }
    }
}
class ForeachStatementTransform {
    constructor() {
        this.phraseType = 78;
        this._type = '';
        this.variables = [];
    }
    push(transform) {
        if (transform.phraseType === 76) {
            this._type = typeString_1.TypeString.arrayDereference(transform.type);
        } else if (transform.phraseType === 79) {
            let vars = transform.variables;
            for (let n = 0; n < vars.length; ++n) {
                this.variables.push(Variable.resolveBaseVariable(vars[n], this._type));
            }
        }
    }
}
var Variable;
(function (Variable) {
    function create(name, type) {
        return {
            name: name,
            arrayDereferenced: 0,
            type: type
        };
    }
    Variable.create = create;
    function resolveBaseVariable(variable, type) {
        let deref = variable.arrayDereferenced;
        if (deref > 0) {
            while (deref-- > 0) {
                type = typeString_1.TypeString.arrayReference(type);
            }
        } else if (deref < 0) {
            while (deref++ < 0) {
                type = typeString_1.TypeString.arrayDereference(type);
            }
        }
        return Variable.create(variable.name, type);
    }
    Variable.resolveBaseVariable = resolveBaseVariable;
})(Variable || (Variable = {}));
class ForeachValueTransform {
    constructor() {
        this.phraseType = 79;
        this.variables = [];
    }
    push(transform) {
        if (transform.phraseType === 156) {
            let ref = transform.reference;
            this.variables = [{ name: ref.name, arrayDereferenced: 0, type: ref.type }];
        } else if (transform.phraseType === 108) {
            this.variables = transform.variables;
        }
    }
}
class ForeachCollectionTransform {
    constructor() {
        this.phraseType = 76;
        this.type = '';
    }
    push(transform) {
        this.type = transform.type || '';
    }
}
class SimpleAssignmentExpressionTransform {
    constructor(phraseType, varTypeOverrides) {
        this.phraseType = phraseType;
        this.varTypeOverrides = varTypeOverrides;
        this.type = '';
        this._pushCount = 0;
        this._variables = [];
    }
    push(transform) {
        ++this._pushCount;
        if (this._pushCount === 1) {
            this._lhs(transform);
        } else if (this._pushCount === 2) {
            this.type = transform.type || '';
        }
    }
    _typeOverride(name, tags) {
        if (!tags) {
            return undefined;
        }
        let t;
        for (let n = 0; n < tags.length; ++n) {
            t = tags[n];
            if (name === t.name) {
                return t.typeString;
            }
        }
        return undefined;
    }
    _lhs(lhs) {
        switch (lhs.phraseType) {
            case 156:
                {
                    let ref = lhs.reference;
                    if (ref) {
                        this._variables.push(Variable.create(ref.name, ref.type));
                    }
                    break;
                }
            case 160:
                {
                    let variable = lhs.variable;
                    if (variable) {
                        this._variables.push(variable);
                    }
                    break;
                }
            case 108:
                this._variables = lhs.variables;
                break;
            default:
                break;
        }
    }
    get variables() {
        let type = this.type;
        let tags = this.varTypeOverrides;
        let typeOverrideFn = this._typeOverride;
        let fn = x => {
            return Variable.resolveBaseVariable(x, typeOverrideFn(x.name, tags) || type);
        };
        return this._variables.map(fn);
    }
}
class ListIntrinsicTransform {
    constructor() {
        this.phraseType = 108;
        this.variables = [];
    }
    push(transform) {
        if (transform.phraseType !== 11) {
            return;
        }
        this.variables = transform.variables;
        for (let n = 0; n < this.variables.length; ++n) {
            this.variables[n].arrayDereferenced--;
        }
    }
}
class ArrayInititialiserListTransform {
    constructor() {
        this.phraseType = 11;
        this.variables = [];
        this._types = [];
    }
    push(transform) {
        if (transform.phraseType === 10) {
            Array.prototype.push.apply(this.variables, transform.variables);
            this._types.push(transform.type);
        }
    }
    get type() {
        let merged;
        let types;
        if (this._types.length < 4) {
            types = this._types;
        } else {
            types = [this._types[0], this._types[Math.floor(this._types.length / 2)], this._types[this._types.length - 1]];
        }
        merged = typeString_1.TypeString.mergeMany(types);
        return typeString_1.TypeString.count(merged) < 3 && merged.indexOf('mixed') < 0 ? merged : 'mixed';
    }
}
class ArrayElementTransform {
    constructor() {
        this.phraseType = 10;
        this.type = '';
        this.variables = [];
    }
    push(transform) {
        if (transform.phraseType === 13) {
            this.variables = transform.variables;
            this.type = transform.type;
        }
    }
}
class ArrayValueTransform {
    constructor() {
        this.phraseType = 13;
        this.type = '';
        this.variables = [];
    }
    push(transform) {
        switch (transform.phraseType) {
            case 156:
                {
                    let ref = transform.reference;
                    this.variables = [{ name: ref.name, arrayDereferenced: 0, type: ref.type || '' }];
                    this.type = ref.type;
                }
                break;
            case 160:
                {
                    let v = transform.variable;
                    if (v) {
                        this.variables = [v];
                    }
                    this.type = transform.type;
                }
                break;
            case 108:
                this.variables = transform.variables;
                break;
            default:
                if (transform.tokenType !== 103) {
                    this.type = transform.type;
                }
                break;
        }
    }
}
class CoalesceExpressionTransform {
    constructor() {
        this.phraseType = 37;
        this.type = '';
    }
    push(transform) {
        this.type = typeString_1.TypeString.merge(this.type, transform.type);
    }
}
class TernaryExpressionTransform {
    constructor() {
        this.phraseType = 40;
        this._transforms = [];
    }
    push(transform) {
        this._transforms.push(transform);
    }
    get type() {
        return this._transforms.slice(-2).reduce((prev, current) => {
            return typeString_1.TypeString.merge(prev, current.type);
        }, '');
    }
}
class SubscriptExpressionTransform {
    constructor() {
        this.phraseType = 160;
        this.type = '';
        this._pushCount = 0;
    }
    push(transform) {
        if (this._pushCount > 0) {
            return;
        }
        ++this._pushCount;
        switch (transform.phraseType) {
            case 156:
                {
                    let ref = transform.reference;
                    if (ref) {
                        this.type = typeString_1.TypeString.arrayDereference(ref.type);
                        this.variable = { name: ref.name, arrayDereferenced: 1, type: this.type };
                    }
                }
                break;
            case 160:
                {
                    let v = transform.variable;
                    this.type = typeString_1.TypeString.arrayDereference(transform.type);
                    if (v) {
                        v.arrayDereferenced++;
                        this.variable = v;
                        this.variable.type = this.type;
                    }
                }
                break;
            case 85:
            case 112:
            case 136:
            case 150:
            case 152:
            case 9:
                this.type = typeString_1.TypeString.arrayDereference(transform.type);
                break;
            default:
                break;
        }
    }
}
class InstanceOfExpressionTransform {
    constructor() {
        this.phraseType = 100;
        this.type = 'bool';
        this._pushCount = 0;
        this._varName = '';
        this._varType = '';
    }
    push(transform) {
        ++this._pushCount;
        if (this._pushCount === 1) {
            if (transform.phraseType === 156) {
                let ref = transform.reference;
                if (ref) {
                    this._varName = ref.name;
                }
            }
        } else if (transform.phraseType === 101) {
            this._varType = transform.type;
        }
    }
    get variable() {
        return this._varName && this._varType ? { name: this._varName, arrayDereferenced: 0, type: this._varType } : null;
    }
}
class FunctionCallExpressionTransform {
    constructor(referenceSymbolDelegate) {
        this.referenceSymbolDelegate = referenceSymbolDelegate;
        this.phraseType = 85;
        this.type = '';
    }
    push(transform) {
        switch (transform.phraseType) {
            case 84:
            case 144:
            case 141:
                {
                    let ref = transform.reference;
                    this.type = this.referenceSymbolDelegate(ref).reduce(symbolsToTypeReduceFn, '');
                    break;
                }
            default:
                break;
        }
    }
}
class RelativeScopeTransform {
    constructor(type, loc) {
        this.type = type;
        this.phraseType = 145;
        this.reference = reference_1.Reference.create(1, type, loc);
        this.reference.altName = 'static';
    }
    push(transform) {}
}
class TypeDesignatorTransform {
    constructor(phraseType) {
        this.phraseType = phraseType;
        this.type = '';
    }
    push(transform) {
        switch (transform.phraseType) {
            case 145:
            case 84:
            case 144:
            case 141:
                this.type = transform.type;
                break;
            default:
                break;
        }
    }
}
class AnonymousClassDeclarationTransform {
    constructor(type) {
        this.type = type;
        this.phraseType = 2;
    }
    push(transform) {}
}
class ObjectCreationExpressionTransform {
    constructor() {
        this.phraseType = 128;
        this.type = '';
    }
    push(transform) {
        if (transform.phraseType === 34 || transform.phraseType === 2) {
            this.type = transform.type;
        }
    }
}
class SimpleVariableTransform {
    constructor(loc, varTable) {
        this.phraseType = 156;
        this._varTable = varTable;
        this.reference = reference_1.Reference.create(256, '', loc);
    }
    push(transform) {
        if (transform.tokenType === 84) {
            this.reference.name = transform.text;
            this.reference.type = this._varTable.getType(this.reference.name);
        }
    }
    get type() {
        return this.reference.type;
    }
}
class FullyQualifiedNameTransform {
    constructor(symbolKind, loc) {
        this.phraseType = 84;
        this.reference = reference_1.Reference.create(symbolKind, '', loc);
    }
    push(transform) {
        if (transform.phraseType === 121) {
            this.reference.name = transform.text;
        }
    }
    get type() {
        return this.reference.name;
    }
}
class QualifiedNameTransform {
    constructor(symbolKind, loc, nameResolver) {
        this.phraseType = 141;
        this.reference = reference_1.Reference.create(symbolKind, '', loc);
        this._nameResolver = nameResolver;
    }
    push(transform) {
        if (transform.phraseType === 121) {
            let name = transform.text;
            let lcName = name.toLowerCase();
            this.reference.name = this._nameResolver.resolveNotFullyQualified(name, this.reference.kind);
            if ((this.reference.kind === 64 || this.reference.kind === 8) && name !== this.reference.name && name.indexOf('\\') < 0 || lcName === 'parent' || lcName === 'self') {
                this.reference.altName = name;
            }
        }
    }
    get type() {
        return this.reference.name;
    }
}
class RelativeQualifiedNameTransform {
    constructor(symbolKind, loc, nameResolver) {
        this.phraseType = 144;
        this.reference = reference_1.Reference.create(symbolKind, '', loc);
        this._nameResolver = nameResolver;
    }
    push(transform) {
        if (transform.phraseType === 121) {
            this.reference.name = this._nameResolver.resolveRelative(transform.text);
        }
    }
    get type() {
        return this.reference.name;
    }
}
class MemberNameTransform {
    constructor(loc) {
        this.phraseType = 111;
        this.reference = reference_1.Reference.create(0, '', loc);
    }
    push(transform) {
        if (transform.tokenType === 83) {
            this.reference.name = transform.text;
        }
    }
}
class ScopedMemberNameTransform {
    constructor(loc) {
        this.phraseType = 151;
        this.reference = reference_1.Reference.create(0, '', loc);
    }
    push(transform) {
        if (transform.tokenType === 84 || transform.phraseType === 95) {
            this.reference.name = transform.text;
        }
    }
}
class IdentifierTransform {
    constructor() {
        this.phraseType = 95;
        this.text = '';
    }
    push(transform) {
        this.text = transform.text;
        this.location = transform.location;
    }
}
class MemberAccessExpressionTransform {
    constructor(phraseType, symbolKind, referenceSymbolDelegate) {
        this.phraseType = phraseType;
        this.symbolKind = symbolKind;
        this.referenceSymbolDelegate = referenceSymbolDelegate;
        this._scope = '';
    }
    push(transform) {
        switch (transform.phraseType) {
            case 151:
            case 111:
                this.reference = transform.reference;
                this.reference.kind = this.symbolKind;
                this.reference.scope = this._scope;
                if (this.symbolKind === 16 && this.reference.name && this.reference.name[0] !== '$') {
                    this.reference.name = '$' + this.reference.name;
                }
                break;
            case 150:
            case 112:
            case 136:
            case 152:
            case 85:
            case 160:
            case 156:
            case 84:
            case 141:
            case 144:
            case 56:
            case 145:
                this._scope = transform.type;
                break;
            default:
                break;
        }
    }
    get type() {
        return this.referenceSymbolDelegate(this.reference).reduce(symbolsToTypeReduceFn, '');
    }
}
class HeaderTransform {
    constructor(nameResolver, kind) {
        this.nameResolver = nameResolver;
        this._kind = kind;
    }
    push(transform) {
        if (transform.tokenType === 83) {
            let name = transform.text;
            let loc = transform.location;
            this.reference = reference_1.Reference.create(this._kind, this.nameResolver.resolveRelative(name), loc);
        }
    }
}
class MemberDeclarationTransform {
    constructor(kind, scope) {
        this._scope = '';
        this._kind = kind;
        this._scope = scope;
    }
    push(transform) {
        if (transform.phraseType === 95) {
            let name = transform.text;
            let loc = transform.location;
            this.reference = reference_1.Reference.create(this._kind, name, loc);
            this.reference.scope = this._scope;
        }
    }
}
class PropertyElementTransform {
    constructor(scope) {
        this._scope = '';
        this._scope = scope;
    }
    push(transform) {
        if (transform.tokenType === 84) {
            let name = transform.text;
            let loc = transform.location;
            this.reference = reference_1.Reference.create(16, name, loc);
            this.reference.scope = this._scope;
        }
    }
}
class NamespaceDefinitionTransform {
    push(transform) {
        if (transform.phraseType === 121) {
            this.reference = reference_1.Reference.create(512, transform.text, transform.location);
        }
    }
}
class ParameterDeclarationTransform {
    push(transform) {
        if (transform.tokenType === 84) {
            this.reference = reference_1.Reference.create(128, transform.text, transform.location);
        }
    }
}
class EncapsulatedExpressionTransform {
    constructor() {
        this.phraseType = 56;
    }
    push(transform) {
        if (transform.phraseType || transform.tokenType >= 71 && transform.tokenType <= 82) {
            this._transform = transform;
        }
    }
    get reference() {
        return this._transform ? this._transform.reference : undefined;
    }
    get type() {
        return this._transform ? this._transform.type : undefined;
    }
}
class VariableTable {
    constructor() {
        this._typeVariableSetStack = [VariableSet.create(1)];
    }
    setVariable(v) {
        if (!v || !v.name || !v.type) {
            return;
        }
        this._typeVariableSetStack[this._typeVariableSetStack.length - 1].variables[v.name] = v;
    }
    setVariables(vars) {
        if (!vars) {
            return;
        }
        for (let n = 0; n < vars.length; ++n) {
            this.setVariable(vars[n]);
        }
    }
    pushScope(carry) {
        let scope = VariableSet.create(1);
        if (carry) {
            let type;
            let name;
            for (let n = 0; n < carry.length; ++n) {
                name = carry[n];
                type = this.getType(name);
                if (type && name) {
                    scope.variables[name] = Variable.create(name, type);
                }
            }
        }
        this._typeVariableSetStack.push(scope);
    }
    popScope() {
        this._typeVariableSetStack.pop();
    }
    pushBranch() {
        let b = VariableSet.create(3);
        this._typeVariableSetStack[this._typeVariableSetStack.length - 1].branches.push(b);
        this._typeVariableSetStack.push(b);
    }
    popBranch() {
        this._typeVariableSetStack.pop();
    }
    pruneBranches() {
        let node = this._typeVariableSetStack[this._typeVariableSetStack.length - 1];
        let branches = node.branches;
        node.branches = [];
        for (let n = 0, l = branches.length; n < l; ++n) {
            this._mergeSets(node, branches[n]);
        }
    }
    getType(varName) {
        let typeSet;
        for (let n = this._typeVariableSetStack.length - 1; n >= 0; --n) {
            typeSet = this._typeVariableSetStack[n];
            if (typeSet.variables[varName]) {
                return typeSet.variables[varName].type;
            }
            if (typeSet.kind === 1) {
                break;
            }
        }
        return '';
    }
    _mergeSets(a, b) {
        let keys = Object.keys(b.variables);
        let v;
        for (let n = 0, l = keys.length; n < l; ++n) {
            v = b.variables[keys[n]];
            if (a.variables[v.name]) {
                a.variables[v.name].type = typeString_1.TypeString.merge(a.variables[v.name].type, v.type);
            } else {
                a.variables[v.name] = v;
            }
        }
    }
}
var VariableSet;
(function (VariableSet) {
    function create(kind) {
        return {
            kind: kind,
            variables: {},
            branches: []
        };
    }
    VariableSet.create = create;
})(VariableSet || (VariableSet = {}));
(function (ReferenceReader) {
    function discoverReferences(doc, symbolStore) {
        let visitor = new ReferenceReader(doc, new nameResolver_1.NameResolver(), symbolStore);
        doc.traverse(visitor);
        return visitor.refTable;
    }
    ReferenceReader.discoverReferences = discoverReferences;
})(ReferenceReader = exports.ReferenceReader || (exports.ReferenceReader = {}));

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const typeAggregate_1 = __webpack_require__(44);
const util = __webpack_require__(4);
class ReferenceProvider {
    constructor(documentStore, symbolStore, refStore) {
        this.documentStore = documentStore;
        this.symbolStore = symbolStore;
        this.refStore = refStore;
        this._provideReferences = (symbol, table) => {
            switch (symbol.kind) {
                case 128:
                case 256:
                    return Promise.resolve(this._variableReferences(symbol, table, this.symbolStore.getSymbolTable(table.uri)));
                case 1:
                case 2:
                case 4:
                case 64:
                case 8:
                    return this.refStore.find(symbol.name);
                case 16:
                    return this._propertyReferences(symbol, table);
                case 1024:
                    return this._classConstantReferences(symbol, table);
                case 32:
                    return this._methodReferences(symbol, table);
                default:
                    return Promise.resolve([]);
            }
        };
    }
    provideReferenceLocations(uri, position, referenceContext) {
        let locations = [];
        let doc = this.documentStore.find(uri);
        let table = this.refStore.getReferenceTable(uri);
        if (!doc || !table) {
            return Promise.resolve(locations);
        }
        let symbols;
        let ref = table.referenceAtPosition(position);
        if (ref) {
            if (ref.kind === 2048) {
                ref = { kind: 1, name: ref.name, location: ref.location };
            }
            symbols = this.symbolStore.findSymbolsByReference(ref, 3);
        } else {
            return Promise.resolve(locations);
        }
        return this.provideReferences(symbols, table, referenceContext.includeDeclaration).then(refs => {
            return refs.map(v => {
                return v.location;
            });
        });
    }
    provideReferences(symbols, table, includeDeclaration) {
        let refs = [];
        symbols = symbols.slice();
        let provideRefsFn = this._provideReferences;
        return new Promise((resolve, reject) => {
            let onResolve = r => {
                Array.prototype.push.apply(refs, r);
                let s = symbols.pop();
                if (s) {
                    provideRefsFn(s, table).then(onResolve);
                } else {
                    resolve(Array.from(new Set(refs)));
                }
            };
            onResolve([]);
        });
    }
    _methodReferences(symbol, table) {
        if ((symbol.modifiers & 4) > 0) {
            let lcScope = symbol.scope ? symbol.scope.toLowerCase() : '';
            let name = symbol.name.toLowerCase();
            let fn = x => {
                return x.kind === 32 && x.name.toLowerCase() === name && x.scope && x.scope.toLowerCase() === lcScope;
            };
            return Promise.resolve(this._symbolRefsInTableScope(symbol, table, fn));
        } else {
            return this.refStore.find(symbol.name, this._createMemberReferenceFilterFn(symbol));
        }
    }
    _classConstantReferences(symbol, table) {
        if ((symbol.modifiers & 4) > 0) {
            let lcScope = symbol.scope ? symbol.scope.toLowerCase() : '';
            let fn = x => {
                return x.kind === 1024 && x.name === symbol.name && x.scope && x.scope.toLowerCase() === lcScope;
            };
            return Promise.resolve(this._symbolRefsInTableScope(symbol, table, fn));
        } else {
            return this.refStore.find(symbol.name, this._createMemberReferenceFilterFn(symbol));
        }
    }
    _propertyReferences(symbol, table) {
        let name = symbol.name;
        if ((symbol.modifiers & 4) > 0) {
            let lcScope = symbol.scope ? symbol.scope.toLowerCase() : '';
            let fn = x => {
                return x.kind === 16 && x.name === name && x.scope && lcScope === x.scope.toLowerCase();
            };
            return Promise.resolve(this._symbolRefsInTableScope(symbol, table, fn));
        } else {
            return this.refStore.find(name, this._createMemberReferenceFilterFn(symbol));
        }
    }
    _createMemberReferenceFilterFn(baseMember) {
        let store = this.symbolStore;
        let lcBaseTypeName = baseMember.scope ? baseMember.scope.toLowerCase() : '';
        let map = {};
        map[lcBaseTypeName] = true;
        let associatedFilterFn = x => {
            return lcBaseTypeName === x.name.toLowerCase();
        };
        return r => {
            if (!(r.kind & (16 | 32 | 1024)) || !r.scope) {
                return false;
            }
            let lcScope = r.scope.toLowerCase();
            if (map[lcScope] !== undefined) {
                return map[lcScope];
            }
            let aggregateType = typeAggregate_1.TypeAggregate.create(store, r.scope);
            if (!aggregateType) {
                return map[lcScope] = false;
            }
            return map[lcScope] = aggregateType.associated(associatedFilterFn).length > 0;
        };
    }
    _variableReferences(symbol, refTable, symbolTable) {
        let symbolTreeTraverser = symbolTable.createTraverser();
        symbolTreeTraverser.find(x => {
            return x === symbol;
        });
        let outerScope = symbolTreeTraverser.parent();
        let useVarFn = s => {
            return s.kind === 256 && (s.modifiers & 4096) > 0 && s.name === symbol.name;
        };
        let isScopeSymbol = x => {
            return x.kind === 64 && (x.modifiers & 512) > 0 && util.find(x.children, useVarFn) !== undefined;
        };
        while (outerScope && isScopeSymbol(outerScope)) {
            outerScope = symbolTreeTraverser.parent();
        }
        if (!outerScope) {
            return [];
        }
        let scopePositions = [];
        let varScopeVisitor = {
            preorder: (node, spine) => {
                if (node === outerScope || isScopeSymbol(node)) {
                    if (node.location) {
                        scopePositions.push(node.location.range.start);
                    }
                    return true;
                }
                return false;
            }
        };
        symbolTreeTraverser.traverse(varScopeVisitor);
        if (!scopePositions.length) {
            return [];
        }
        let refTreeTraverser = refTable.createTraverser();
        let refs = [];
        let refFn = r => {
            return (r.kind === 256 || r.kind === 128) && r.name === symbol.name;
        };
        let isScope = x => {
            return x.kind === undefined && x.location && scopePositions.length && util.positionEquality(x.location.range.start, scopePositions[0]);
        };
        if (!refTreeTraverser.find(isScope)) {
            return [];
        }
        let refVisitor = {
            preorder: (node, spine) => {
                if (isScope(node)) {
                    scopePositions.shift();
                    return true;
                } else if (refFn(node)) {
                    refs.push(node);
                }
                return false;
            }
        };
        refTreeTraverser.traverse(refVisitor);
        return refs;
    }
    _symbolRefsInTableScope(symbol, refTable, filterFn) {
        let traverser = refTable.createTraverser();
        let pos = symbol.location ? symbol.location.range.start : undefined;
        if (!pos) {
            return [];
        }
        let findFn = x => {
            return x.kind === undefined && x.location && x.location.range && util.positionEquality(x.location.range.start, pos);
        };
        if (traverser.find(findFn) && traverser.parent()) {
            return traverser.filter(filterFn);
        }
        return [];
    }
}
exports.ReferenceProvider = ReferenceProvider;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const fs = __webpack_require__(226);
const path = __webpack_require__(0);
const util = __webpack_require__(4);
const logger_1 = __webpack_require__(55);
const jsonstream = __webpack_require__(250);
function createCache(path) {
    let cache;
    if (!path) {
        return new MemoryCache();
    }
    try {
        cache = new FileCache(path);
    } catch (e) {
        logger_1.Log.error('Cache error: ' + e.message);
        cache = new MemoryCache();
    }
    return cache;
}
exports.createCache = createCache;
class MemoryCache {
    constructor() {
        this._map = {};
    }
    read(key) {
        return Promise.resolve(this._map[key]);
    }
    write(key, data) {
        this._map[key] = data;
        return Promise.resolve();
    }
    delete(key) {
        delete this._map[key];
        return Promise.resolve();
    }
    flush() {
        this._map = {};
        return Promise.resolve();
    }
}
exports.MemoryCache = MemoryCache;
function writeFile(filePath, bucket) {
    return new Promise((resolve, reject) => {
        let json;
        try {
            json = JSON.stringify(bucket);
        } catch (e) {
            reject(e.message);
            return;
        }
        fs.writeFile(filePath, json, err => {
            if (err) {
                reject(err.message);
                return;
            }
            resolve();
        });
    });
}
function deleteFile(filePath) {
    return new Promise((resolve, reject) => {
        fs.unlink(filePath, err => {
            if (err && err.code !== 'ENOENT') {
                reject(err.message);
                return;
            }
            resolve();
        });
    });
}
function readFile(filePath) {
    return new Promise((resolve, reject) => {
        fs.readFile(filePath, (err, data) => {
            if (err) {
                if (err.code === 'ENOENT') {
                    resolve(undefined);
                } else {
                    reject(err.message);
                }
                return;
            }
            let bucket;
            try {
                bucket = JSON.parse(data.toString());
            } catch (e) {
                reject(e.message);
            }
            resolve(bucket);
        });
    });
}
function bucketFind(bucket, key) {
    return bucket.find(i => {
        return i[0] === key;
    });
}
function bucketRemove(bucket, key) {
    return bucket.filter(b => {
        return b[0] !== key;
    });
}
class FileCache {
    constructor(path) {
        this.path = path;
        try {
            fs.mkdirpSync(this.path);
        } catch (err) {
            if (err && err.code !== 'EEXIST') {
                throw err;
            }
        }
    }
    read(key) {
        let filePath = this._filePath(key);
        return readFile(filePath).then(b => {
            let item;
            if (b && (item = bucketFind(b, key))) {
                return Promise.resolve(item[1]);
            } else {
                return Promise.resolve(undefined);
            }
        });
    }
    write(key, data) {
        let filePath = this._filePath(key);
        return readFile(filePath).then(b => {
            if (b) {
                b = bucketRemove(b, key);
                b.push([key, data]);
            } else {
                b = [[key, data]];
            }
            return writeFile(filePath, b);
        });
    }
    delete(key) {
        let filePath = this._filePath(key);
        return readFile(filePath).then(b => {
            let item;
            if (b && bucketFind(b, key) && b.length > 1) {
                b = bucketRemove(b, key);
                return writeFile(filePath, b);
            } else if (b) {
                return deleteFile(filePath);
            } else {
                return Promise.resolve();
            }
        });
    }
    flush() {
        return new Promise((resolve, reject) => {
            fs.emptyDir(this.path, err => {
                if (err) {
                    reject(err.message);
                } else {
                    resolve();
                }
            });
        });
    }
    _filePath(key) {
        return path.join(this.path, Math.abs(util.hash32(key)).toString(16));
    }
}
exports.FileCache = FileCache;
function writeArrayToDisk(items, filePath) {
    return new Promise((resolve, reject) => {
        let transformStream = jsonstream.stringify();
        let writeStream = fs.createWriteStream(filePath);
        transformStream.on('error', err => {
            logger_1.Log.error(err.message);
            reject(err.message);
        });
        transformStream.pipe(writeStream);
        writeStream.on('finish', () => {
            resolve();
        }).on('error', err => {
            logger_1.Log.error(err.message);
            reject(err.message);
        });
        for (let n = 0, l = items.length; n < l; ++n) {
            transformStream.write(items[n]);
        }
        transformStream.end();
    });
}
exports.writeArrayToDisk = writeArrayToDisk;
function readArrayFromDisk(filePath) {
    return new Promise((resolve, reject) => {
        let transformStream = jsonstream.parse('*');
        let readStream = fs.createReadStream(filePath);
        let items = [];
        readStream.on('error', err => {
            if (err && err.code !== 'ENOENT') {
                logger_1.Log.error(err.message);
                reject(err.message);
            } else {
                resolve(items);
            }
        });
        readStream.pipe(transformStream).on('data', item => {
            items.push(item);
        }).on('end', () => {
            resolve(items);
        }).on('error', err => {
            logger_1.Log.error(err.message);
            reject(err.message);
        });
    });
}
exports.readArrayFromDisk = readArrayFromDisk;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assign = __webpack_require__(227);

const fs = {};

// Export graceful-fs:
assign(fs, __webpack_require__(100));
// Export extra methods:
assign(fs, __webpack_require__(231));
assign(fs, __webpack_require__(106));
assign(fs, __webpack_require__(5));
assign(fs, __webpack_require__(45));
assign(fs, __webpack_require__(236));
assign(fs, __webpack_require__(240));
assign(fs, __webpack_require__(241));
assign(fs, __webpack_require__(242));
assign(fs, __webpack_require__(243));
assign(fs, __webpack_require__(249));
assign(fs, __webpack_require__(13));

module.exports = fs;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// simple mutable assign

function assign() {
  const args = [].slice.call(arguments).filter(i => i);
  const dest = args.shift();
  args.forEach(src => {
    Object.keys(src).forEach(key => {
      dest[key] = src[key];
    });
  });

  return dest;
}

module.exports = assign;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

var fs = __webpack_require__(101);
var constants = __webpack_require__(229);

var origCwd = process.cwd;
var cwd = null;

var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;

process.cwd = function () {
  if (!cwd) cwd = origCwd.call(process);
  return cwd;
};
try {
  process.cwd();
} catch (er) {}

var chdir = process.chdir;
process.chdir = function (d) {
  cwd = null;
  chdir.call(process, d);
};

module.exports = patch;

function patch(fs) {
  // (re-)implement some things that are known busted or missing.

  // lchmod, broken prior to 0.6.2
  // back-port the fix here.
  if (constants.hasOwnProperty('O_SYMLINK') && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
    patchLchmod(fs);
  }

  // lutimes implementation, or no-op
  if (!fs.lutimes) {
    patchLutimes(fs);
  }

  // https://github.com/isaacs/node-graceful-fs/issues/4
  // Chown should not fail on einval or eperm if non-root.
  // It should not fail on enosys ever, as this just indicates
  // that a fs doesn't support the intended operation.

  fs.chown = chownFix(fs.chown);
  fs.fchown = chownFix(fs.fchown);
  fs.lchown = chownFix(fs.lchown);

  fs.chmod = chmodFix(fs.chmod);
  fs.fchmod = chmodFix(fs.fchmod);
  fs.lchmod = chmodFix(fs.lchmod);

  fs.chownSync = chownFixSync(fs.chownSync);
  fs.fchownSync = chownFixSync(fs.fchownSync);
  fs.lchownSync = chownFixSync(fs.lchownSync);

  fs.chmodSync = chmodFixSync(fs.chmodSync);
  fs.fchmodSync = chmodFixSync(fs.fchmodSync);
  fs.lchmodSync = chmodFixSync(fs.lchmodSync);

  fs.stat = statFix(fs.stat);
  fs.fstat = statFix(fs.fstat);
  fs.lstat = statFix(fs.lstat);

  fs.statSync = statFixSync(fs.statSync);
  fs.fstatSync = statFixSync(fs.fstatSync);
  fs.lstatSync = statFixSync(fs.lstatSync);

  // if lchmod/lchown do not exist, then make them no-ops
  if (!fs.lchmod) {
    fs.lchmod = function (path, mode, cb) {
      if (cb) process.nextTick(cb);
    };
    fs.lchmodSync = function () {};
  }
  if (!fs.lchown) {
    fs.lchown = function (path, uid, gid, cb) {
      if (cb) process.nextTick(cb);
    };
    fs.lchownSync = function () {};
  }

  // on Windows, A/V software can lock the directory, causing this
  // to fail with an EACCES or EPERM if the directory contains newly
  // created files.  Try again on failure, for up to 60 seconds.

  // Set the timeout this long because some Windows Anti-Virus, such as Parity
  // bit9, may lock files for up to a minute, causing npm package install
  // failures. Also, take care to yield the scheduler. Windows scheduling gives
  // CPU to a busy looping process, which can cause the program causing the lock
  // contention to be starved of CPU by node, so the contention doesn't resolve.
  if (platform === "win32") {
    fs.rename = function (fs$rename) {
      return function (from, to, cb) {
        var start = Date.now();
        var backoff = 0;
        fs$rename(from, to, function CB(er) {
          if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 60000) {
            setTimeout(function () {
              fs.stat(to, function (stater, st) {
                if (stater && stater.code === "ENOENT") fs$rename(from, to, CB);else cb(er);
              });
            }, backoff);
            if (backoff < 100) backoff += 10;
            return;
          }
          if (cb) cb(er);
        });
      };
    }(fs.rename);
  }

  // if read() returns EAGAIN, then just try it again.
  fs.read = function (fs$read) {
    return function (fd, buffer, offset, length, position, callback_) {
      var callback;
      if (callback_ && typeof callback_ === 'function') {
        var eagCounter = 0;
        callback = function (er, _, __) {
          if (er && er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter++;
            return fs$read.call(fs, fd, buffer, offset, length, position, callback);
          }
          callback_.apply(this, arguments);
        };
      }
      return fs$read.call(fs, fd, buffer, offset, length, position, callback);
    };
  }(fs.read);

  fs.readSync = function (fs$readSync) {
    return function (fd, buffer, offset, length, position) {
      var eagCounter = 0;
      while (true) {
        try {
          return fs$readSync.call(fs, fd, buffer, offset, length, position);
        } catch (er) {
          if (er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter++;
            continue;
          }
          throw er;
        }
      }
    };
  }(fs.readSync);
}

function patchLchmod(fs) {
  fs.lchmod = function (path, mode, callback) {
    fs.open(path, constants.O_WRONLY | constants.O_SYMLINK, mode, function (err, fd) {
      if (err) {
        if (callback) callback(err);
        return;
      }
      // prefer to return the chmod error, if one occurs,
      // but still try to close, and report closing errors if they occur.
      fs.fchmod(fd, mode, function (err) {
        fs.close(fd, function (err2) {
          if (callback) callback(err || err2);
        });
      });
    });
  };

  fs.lchmodSync = function (path, mode) {
    var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);

    // prefer to return the chmod error, if one occurs,
    // but still try to close, and report closing errors if they occur.
    var threw = true;
    var ret;
    try {
      ret = fs.fchmodSync(fd, mode);
      threw = false;
    } finally {
      if (threw) {
        try {
          fs.closeSync(fd);
        } catch (er) {}
      } else {
        fs.closeSync(fd);
      }
    }
    return ret;
  };
}

function patchLutimes(fs) {
  if (constants.hasOwnProperty("O_SYMLINK")) {
    fs.lutimes = function (path, at, mt, cb) {
      fs.open(path, constants.O_SYMLINK, function (er, fd) {
        if (er) {
          if (cb) cb(er);
          return;
        }
        fs.futimes(fd, at, mt, function (er) {
          fs.close(fd, function (er2) {
            if (cb) cb(er || er2);
          });
        });
      });
    };

    fs.lutimesSync = function (path, at, mt) {
      var fd = fs.openSync(path, constants.O_SYMLINK);
      var ret;
      var threw = true;
      try {
        ret = fs.futimesSync(fd, at, mt);
        threw = false;
      } finally {
        if (threw) {
          try {
            fs.closeSync(fd);
          } catch (er) {}
        } else {
          fs.closeSync(fd);
        }
      }
      return ret;
    };
  } else {
    fs.lutimes = function (_a, _b, _c, cb) {
      if (cb) process.nextTick(cb);
    };
    fs.lutimesSync = function () {};
  }
}

function chmodFix(orig) {
  if (!orig) return orig;
  return function (target, mode, cb) {
    return orig.call(fs, target, mode, function (er) {
      if (chownErOk(er)) er = null;
      if (cb) cb.apply(this, arguments);
    });
  };
}

function chmodFixSync(orig) {
  if (!orig) return orig;
  return function (target, mode) {
    try {
      return orig.call(fs, target, mode);
    } catch (er) {
      if (!chownErOk(er)) throw er;
    }
  };
}

function chownFix(orig) {
  if (!orig) return orig;
  return function (target, uid, gid, cb) {
    return orig.call(fs, target, uid, gid, function (er) {
      if (chownErOk(er)) er = null;
      if (cb) cb.apply(this, arguments);
    });
  };
}

function chownFixSync(orig) {
  if (!orig) return orig;
  return function (target, uid, gid) {
    try {
      return orig.call(fs, target, uid, gid);
    } catch (er) {
      if (!chownErOk(er)) throw er;
    }
  };
}

function statFix(orig) {
  if (!orig) return orig;
  // Older versions of Node erroneously returned signed integers for
  // uid + gid.
  return function (target, cb) {
    return orig.call(fs, target, function (er, stats) {
      if (!stats) return cb.apply(this, arguments);
      if (stats.uid < 0) stats.uid += 0x100000000;
      if (stats.gid < 0) stats.gid += 0x100000000;
      if (cb) cb.apply(this, arguments);
    });
  };
}

function statFixSync(orig) {
  if (!orig) return orig;
  // Older versions of Node erroneously returned signed integers for
  // uid + gid.
  return function (target) {
    var stats = orig.call(fs, target);
    if (stats.uid < 0) stats.uid += 0x100000000;
    if (stats.gid < 0) stats.gid += 0x100000000;
    return stats;
  };
}

// ENOSYS means that the fs doesn't support the op. Just ignore
// that, because it doesn't matter.
//
// if there's no getuid, or if getuid() is something other
// than 0, and the error is EINVAL or EPERM, then just ignore
// it.
//
// This specific case is a silent failure in cp, install, tar,
// and most other unix tools that manage permissions.
//
// When running as root, or if other types of errors are
// encountered, then it's strict.
function chownErOk(er) {
  if (!er) return true;

  if (er.code === "ENOSYS") return true;

  var nonroot = !process.getuid || process.getuid() !== 0;
  if (nonroot) {
    if (er.code === "EINVAL" || er.code === "EPERM") return true;
  }

  return false;
}

/***/ }),
/* 229 */
/***/ (function(module, exports) {

module.exports = require("constants");

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

var Stream = __webpack_require__(9).Stream;

module.exports = legacy;

function legacy(fs) {
  return {
    ReadStream: ReadStream,
    WriteStream: WriteStream
  };

  function ReadStream(path, options) {
    if (!(this instanceof ReadStream)) return new ReadStream(path, options);

    Stream.call(this);

    var self = this;

    this.path = path;
    this.fd = null;
    this.readable = true;
    this.paused = false;

    this.flags = 'r';
    this.mode = 438; /*=0666*/
    this.bufferSize = 64 * 1024;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.encoding) this.setEncoding(this.encoding);

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.end === undefined) {
        this.end = Infinity;
      } else if ('number' !== typeof this.end) {
        throw TypeError('end must be a Number');
      }

      if (this.start > this.end) {
        throw new Error('start must be <= end');
      }

      this.pos = this.start;
    }

    if (this.fd !== null) {
      process.nextTick(function () {
        self._read();
      });
      return;
    }

    fs.open(this.path, this.flags, this.mode, function (err, fd) {
      if (err) {
        self.emit('error', err);
        self.readable = false;
        return;
      }

      self.fd = fd;
      self.emit('open', fd);
      self._read();
    });
  }

  function WriteStream(path, options) {
    if (!(this instanceof WriteStream)) return new WriteStream(path, options);

    Stream.call(this);

    this.path = path;
    this.fd = null;
    this.writable = true;

    this.flags = 'w';
    this.encoding = 'binary';
    this.mode = 438; /*=0666*/
    this.bytesWritten = 0;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.start < 0) {
        throw new Error('start must be >= zero');
      }

      this.pos = this.start;
    }

    this.busy = false;
    this._queue = [];

    if (this.fd === null) {
      this._open = fs.open;
      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
      this.flush();
    }
  }
}

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

const u = __webpack_require__(2).fromCallback;
module.exports = {
  copy: u(__webpack_require__(103))
};

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1);
const path = __webpack_require__(0);
const invalidWin32Path = __webpack_require__(104).invalidWin32Path;

const o777 = parseInt('0777', 8);

function mkdirs(p, opts, callback, made) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  } else if (!opts || typeof opts !== 'object') {
    opts = { mode: opts };
  }

  if (process.platform === 'win32' && invalidWin32Path(p)) {
    const errInval = new Error(p + ' contains invalid WIN32 path characters.');
    errInval.code = 'EINVAL';
    return callback(errInval);
  }

  let mode = opts.mode;
  const xfs = opts.fs || fs;

  if (mode === undefined) {
    mode = o777 & ~process.umask();
  }
  if (!made) made = null;

  callback = callback || function () {};
  p = path.resolve(p);

  xfs.mkdir(p, mode, er => {
    if (!er) {
      made = made || p;
      return callback(null, made);
    }
    switch (er.code) {
      case 'ENOENT':
        if (path.dirname(p) === p) return callback(er);
        mkdirs(path.dirname(p), opts, (er, made) => {
          if (er) callback(er, made);else mkdirs(p, opts, callback, made);
        });
        break;

      // In the case of any other error, just see if there's a dir
      // there already.  If so, then hooray!  If not, then something
      // is borked.
      default:
        xfs.stat(p, (er2, stat) => {
          // if the stat fails, then that's super weird.
          // let the original error be the failure reason.
          if (er2 || !stat.isDirectory()) callback(er, made);else callback(null, made);
        });
        break;
    }
  });
}

module.exports = mkdirs;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1);
const path = __webpack_require__(0);
const invalidWin32Path = __webpack_require__(104).invalidWin32Path;

const o777 = parseInt('0777', 8);

function mkdirsSync(p, opts, made) {
  if (!opts || typeof opts !== 'object') {
    opts = { mode: opts };
  }

  let mode = opts.mode;
  const xfs = opts.fs || fs;

  if (process.platform === 'win32' && invalidWin32Path(p)) {
    const errInval = new Error(p + ' contains invalid WIN32 path characters.');
    errInval.code = 'EINVAL';
    throw errInval;
  }

  if (mode === undefined) {
    mode = o777 & ~process.umask();
  }
  if (!made) made = null;

  p = path.resolve(p);

  try {
    xfs.mkdirSync(p, mode);
    made = made || p;
  } catch (err0) {
    switch (err0.code) {
      case 'ENOENT':
        if (path.dirname(p) === p) throw err0;
        made = mkdirsSync(path.dirname(p), opts, made);
        mkdirsSync(p, opts, made);
        break;

      // In the case of any other error, just see if there's a dir
      // there already.  If so, then hooray!  If not, then something
      // is borked.
      default:
        let stat;
        try {
          stat = xfs.statSync(p);
        } catch (err1) {
          throw err0;
        }
        if (!stat.isDirectory()) throw err0;
        break;
    }
  }

  return made;
}

module.exports = mkdirsSync;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1);
const path = __webpack_require__(0);
const mkdirpSync = __webpack_require__(5).mkdirsSync;
const utimesSync = __webpack_require__(105).utimesMillisSync;

const notExist = Symbol('notExist');
const existsReg = Symbol('existsReg');

function copySync(src, dest, opts) {
  if (typeof opts === 'function') {
    opts = { filter: opts };
  }

  opts = opts || {};
  opts.clobber = 'clobber' in opts ? !!opts.clobber : true; // default to true for now
  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber; // overwrite falls back to clobber

  // Warn about using preserveTimestamps on 32-bit node
  if (opts.preserveTimestamps && process.arch === 'ia32') {
    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
  }

  src = path.resolve(src);
  dest = path.resolve(dest);

  // don't allow src and dest to be the same
  if (src === dest) throw new Error('Source and destination must not be the same.');

  if (opts.filter && !opts.filter(src, dest)) return;

  const destParent = path.dirname(dest);
  if (!fs.existsSync(destParent)) mkdirpSync(destParent);
  return startCopy(src, dest, opts);
}

function startCopy(src, dest, opts) {
  if (opts.filter && !opts.filter(src, dest)) return;
  return getStats(src, dest, opts);
}

function getStats(src, dest, opts) {
  const statSync = opts.dereference ? fs.statSync : fs.lstatSync;
  const st = statSync(src);

  if (st.isDirectory()) return onDir(st, src, dest, opts);else if (st.isFile() || st.isCharacterDevice() || st.isBlockDevice()) return onFile(st, src, dest, opts);else if (st.isSymbolicLink()) return onLink(src, dest, opts);
}

function onFile(srcStat, src, dest, opts) {
  const resolvedPath = checkDest(dest);
  if (resolvedPath === notExist) {
    return copyFile(srcStat, src, dest, opts);
  } else if (resolvedPath === existsReg) {
    return mayCopyFile(srcStat, src, dest, opts);
  } else {
    if (src === resolvedPath) return;
    return mayCopyFile(srcStat, src, dest, opts);
  }
}

function mayCopyFile(srcStat, src, dest, opts) {
  if (opts.overwrite) {
    fs.unlinkSync(dest);
    return copyFile(srcStat, src, dest, opts);
  } else if (opts.errorOnExist) {
    throw new Error(`'${dest}' already exists`);
  }
}

function copyFile(srcStat, src, dest, opts) {
  if (typeof fs.copyFileSync === 'function') {
    fs.copyFileSync(src, dest);
    fs.chmodSync(dest, srcStat.mode);
    if (opts.preserveTimestamps) {
      return utimesSync(dest, srcStat.atime, srcStat.mtime);
    }
    return;
  }
  return copyFileFallback(srcStat, src, dest, opts);
}

function copyFileFallback(srcStat, src, dest, opts) {
  const BUF_LENGTH = 64 * 1024;
  const _buff = __webpack_require__(107)(BUF_LENGTH);

  const fdr = fs.openSync(src, 'r');
  const fdw = fs.openSync(dest, 'w', srcStat.mode);
  let bytesRead = 1;
  let pos = 0;

  while (bytesRead > 0) {
    bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
    fs.writeSync(fdw, _buff, 0, bytesRead);
    pos += bytesRead;
  }

  if (opts.preserveTimestamps) fs.futimesSync(fdw, srcStat.atime, srcStat.mtime);

  fs.closeSync(fdr);
  fs.closeSync(fdw);
}

function onDir(srcStat, src, dest, opts) {
  const resolvedPath = checkDest(dest);
  if (resolvedPath === notExist) {
    if (isSrcSubdir(src, dest)) {
      throw new Error(`Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`);
    }
    return mkDirAndCopy(srcStat, src, dest, opts);
  } else if (resolvedPath === existsReg) {
    if (isSrcSubdir(src, dest)) {
      throw new Error(`Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`);
    }
    return mayCopyDir(src, dest, opts);
  } else {
    if (src === resolvedPath) return;
    return copyDir(src, dest, opts);
  }
}

function mayCopyDir(src, dest, opts) {
  if (!fs.statSync(dest).isDirectory()) {
    throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
  }
  return copyDir(src, dest, opts);
}

function mkDirAndCopy(srcStat, src, dest, opts) {
  fs.mkdirSync(dest, srcStat.mode);
  fs.chmodSync(dest, srcStat.mode);
  return copyDir(src, dest, opts);
}

function copyDir(src, dest, opts) {
  fs.readdirSync(src).forEach(item => {
    startCopy(path.join(src, item), path.join(dest, item), opts);
  });
}

function onLink(src, dest, opts) {
  let resolvedSrcPath = fs.readlinkSync(src);

  if (opts.dereference) {
    resolvedSrcPath = path.resolve(process.cwd(), resolvedSrcPath);
  }

  let resolvedDestPath = checkDest(dest);
  if (resolvedDestPath === notExist || resolvedDestPath === existsReg) {
    // if dest already exists, fs throws error anyway,
    // so no need to guard against it here.
    return fs.symlinkSync(resolvedSrcPath, dest);
  } else {
    if (opts.dereference) {
      resolvedDestPath = path.resolve(process.cwd(), resolvedDestPath);
    }
    if (resolvedDestPath === resolvedSrcPath) return;

    // prevent copy if src is a subdir of dest since unlinking
    // dest in this case would result in removing src contents
    // and therefore a broken symlink would be created.
    if (fs.statSync(dest).isDirectory() && isSrcSubdir(resolvedDestPath, resolvedSrcPath)) {
      throw new Error(`Cannot overwrite '${resolvedDestPath}' with '${resolvedSrcPath}'.`);
    }
    return copyLink(resolvedSrcPath, dest);
  }
}

function copyLink(resolvedSrcPath, dest) {
  fs.unlinkSync(dest);
  return fs.symlinkSync(resolvedSrcPath, dest);
}

// check if dest exists and/or is a symlink
function checkDest(dest) {
  let resolvedPath;
  try {
    resolvedPath = fs.readlinkSync(dest);
  } catch (err) {
    if (err.code === 'ENOENT') return notExist;

    // dest exists and is a regular file or directory, Windows may throw UNKNOWN error
    if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return existsReg;

    throw err;
  }
  return resolvedPath; // dest exists and is a symlink
}

// return true if dest is a subdir of src, otherwise false.
// extract dest base dir and check if that is the same as src basename
function isSrcSubdir(src, dest) {
  const baseDir = dest.split(path.dirname(src) + path.sep)[1];
  if (baseDir) {
    const destBasename = baseDir.split(path.sep)[0];
    if (destBasename) {
      return src !== dest && dest.indexOf(src) > -1 && destBasename === path.basename(src);
    }
    return false;
  }
  return false;
}

module.exports = copySync;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1);
const path = __webpack_require__(0);
const assert = __webpack_require__(102);

const isWindows = process.platform === 'win32';

function defaults(options) {
  const methods = ['unlink', 'chmod', 'stat', 'lstat', 'rmdir', 'readdir'];
  methods.forEach(m => {
    options[m] = options[m] || fs[m];
    m = m + 'Sync';
    options[m] = options[m] || fs[m];
  });

  options.maxBusyTries = options.maxBusyTries || 3;
}

function rimraf(p, options, cb) {
  let busyTries = 0;

  if (typeof options === 'function') {
    cb = options;
    options = {};
  }

  assert(p, 'rimraf: missing path');
  assert.equal(typeof p, 'string', 'rimraf: path should be a string');
  assert.equal(typeof cb, 'function', 'rimraf: callback function required');
  assert(options, 'rimraf: invalid options argument provided');
  assert.equal(typeof options, 'object', 'rimraf: options should be object');

  defaults(options);

  rimraf_(p, options, function CB(er) {
    if (er) {
      if ((er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') && busyTries < options.maxBusyTries) {
        busyTries++;
        let time = busyTries * 100;
        // try again, with the same exact callback as this one.
        return setTimeout(() => rimraf_(p, options, CB), time);
      }

      // already gone
      if (er.code === 'ENOENT') er = null;
    }

    cb(er);
  });
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_(p, options, cb) {
  assert(p);
  assert(options);
  assert(typeof cb === 'function');

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, (er, st) => {
    if (er && er.code === 'ENOENT') {
      return cb(null);
    }

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === 'EPERM' && isWindows) {
      return fixWinEPERM(p, options, er, cb);
    }

    if (st && st.isDirectory()) {
      return rmdir(p, options, er, cb);
    }

    options.unlink(p, er => {
      if (er) {
        if (er.code === 'ENOENT') {
          return cb(null);
        }
        if (er.code === 'EPERM') {
          return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);
        }
        if (er.code === 'EISDIR') {
          return rmdir(p, options, er, cb);
        }
      }
      return cb(er);
    });
  });
}

function fixWinEPERM(p, options, er, cb) {
  assert(p);
  assert(options);
  assert(typeof cb === 'function');
  if (er) {
    assert(er instanceof Error);
  }

  options.chmod(p, 0o666, er2 => {
    if (er2) {
      cb(er2.code === 'ENOENT' ? null : er);
    } else {
      options.stat(p, (er3, stats) => {
        if (er3) {
          cb(er3.code === 'ENOENT' ? null : er);
        } else if (stats.isDirectory()) {
          rmdir(p, options, er, cb);
        } else {
          options.unlink(p, cb);
        }
      });
    }
  });
}

function fixWinEPERMSync(p, options, er) {
  let stats;

  assert(p);
  assert(options);
  if (er) {
    assert(er instanceof Error);
  }

  try {
    options.chmodSync(p, 0o666);
  } catch (er2) {
    if (er2.code === 'ENOENT') {
      return;
    } else {
      throw er;
    }
  }

  try {
    stats = options.statSync(p);
  } catch (er3) {
    if (er3.code === 'ENOENT') {
      return;
    } else {
      throw er;
    }
  }

  if (stats.isDirectory()) {
    rmdirSync(p, options, er);
  } else {
    options.unlinkSync(p);
  }
}

function rmdir(p, options, originalEr, cb) {
  assert(p);
  assert(options);
  if (originalEr) {
    assert(originalEr instanceof Error);
  }
  assert(typeof cb === 'function');

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, er => {
    if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {
      rmkids(p, options, cb);
    } else if (er && er.code === 'ENOTDIR') {
      cb(originalEr);
    } else {
      cb(er);
    }
  });
}

function rmkids(p, options, cb) {
  assert(p);
  assert(options);
  assert(typeof cb === 'function');

  options.readdir(p, (er, files) => {
    if (er) return cb(er);

    let n = files.length;
    let errState;

    if (n === 0) return options.rmdir(p, cb);

    files.forEach(f => {
      rimraf(path.join(p, f), options, er => {
        if (errState) {
          return;
        }
        if (er) return cb(errState = er);
        if (--n === 0) {
          options.rmdir(p, cb);
        }
      });
    });
  });
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync(p, options) {
  let st;

  options = options || {};
  defaults(options);

  assert(p, 'rimraf: missing path');
  assert.equal(typeof p, 'string', 'rimraf: path should be a string');
  assert(options, 'rimraf: missing options');
  assert.equal(typeof options, 'object', 'rimraf: options should be object');

  try {
    st = options.lstatSync(p);
  } catch (er) {
    if (er.code === 'ENOENT') {
      return;
    }

    // Windows can EPERM on stat.  Life is suffering.
    if (er.code === 'EPERM' && isWindows) {
      fixWinEPERMSync(p, options, er);
    }
  }

  try {
    // sunos lets the root user unlink directories, which is... weird.
    if (st && st.isDirectory()) {
      rmdirSync(p, options, null);
    } else {
      options.unlinkSync(p);
    }
  } catch (er) {
    if (er.code === 'ENOENT') {
      return;
    } else if (er.code === 'EPERM') {
      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
    } else if (er.code !== 'EISDIR') {
      throw er;
    }
    rmdirSync(p, options, er);
  }
}

function rmdirSync(p, options, originalEr) {
  assert(p);
  assert(options);
  if (originalEr) {
    assert(originalEr instanceof Error);
  }

  try {
    options.rmdirSync(p);
  } catch (er) {
    if (er.code === 'ENOTDIR') {
      throw originalEr;
    } else if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {
      rmkidsSync(p, options);
    } else if (er.code !== 'ENOENT') {
      throw er;
    }
  }
}

function rmkidsSync(p, options) {
  assert(p);
  assert(options);
  options.readdirSync(p).forEach(f => rimrafSync(path.join(p, f), options));

  // We only end up here once we got ENOTEMPTY at least once, and
  // at this point, we are guaranteed to have removed all the kids.
  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
  // try really hard to delete stuff on windows, because it has a
  // PROFOUNDLY annoying habit of not closing handles promptly when
  // files are deleted, resulting in spurious ENOTEMPTY errors.
  const retries = isWindows ? 100 : 1;
  let i = 0;
  do {
    let threw = true;
    try {
      const ret = options.rmdirSync(p, options);
      threw = false;
      return ret;
    } finally {
      if (++i < retries && threw) continue; // eslint-disable-line
    }
  } while (true);
}

module.exports = rimraf;
rimraf.sync = rimrafSync;

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(2).fromCallback;
const jsonFile = __webpack_require__(56);

jsonFile.outputJson = u(__webpack_require__(238));
jsonFile.outputJsonSync = __webpack_require__(239);
// aliases
jsonFile.outputJSON = jsonFile.outputJson;
jsonFile.outputJSONSync = jsonFile.outputJsonSync;
jsonFile.writeJSON = jsonFile.writeJson;
jsonFile.writeJSONSync = jsonFile.writeJsonSync;
jsonFile.readJSON = jsonFile.readJson;
jsonFile.readJSONSync = jsonFile.readJsonSync;

module.exports = jsonFile;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

var _fs;
try {
  _fs = __webpack_require__(1);
} catch (_) {
  _fs = __webpack_require__(7);
}

function readFile(file, options, callback) {
  if (callback == null) {
    callback = options;
    options = {};
  }

  if (typeof options === 'string') {
    options = { encoding: options };
  }

  options = options || {};
  var fs = options.fs || _fs;

  var shouldThrow = true;
  if ('throws' in options) {
    shouldThrow = options.throws;
  }

  fs.readFile(file, options, function (err, data) {
    if (err) return callback(err);

    data = stripBom(data);

    var obj;
    try {
      obj = JSON.parse(data, options ? options.reviver : null);
    } catch (err2) {
      if (shouldThrow) {
        err2.message = file + ': ' + err2.message;
        return callback(err2);
      } else {
        return callback(null, null);
      }
    }

    callback(null, obj);
  });
}

function readFileSync(file, options) {
  options = options || {};
  if (typeof options === 'string') {
    options = { encoding: options };
  }

  var fs = options.fs || _fs;

  var shouldThrow = true;
  if ('throws' in options) {
    shouldThrow = options.throws;
  }

  try {
    var content = fs.readFileSync(file, options);
    content = stripBom(content);
    return JSON.parse(content, options.reviver);
  } catch (err) {
    if (shouldThrow) {
      err.message = file + ': ' + err.message;
      throw err;
    } else {
      return null;
    }
  }
}

function stringify(obj, options) {
  var spaces;
  var EOL = '\n';
  if (typeof options === 'object' && options !== null) {
    if (options.spaces) {
      spaces = options.spaces;
    }
    if (options.EOL) {
      EOL = options.EOL;
    }
  }

  var str = JSON.stringify(obj, options ? options.replacer : null, spaces);

  return str.replace(/\n/g, EOL) + EOL;
}

function writeFile(file, obj, options, callback) {
  if (callback == null) {
    callback = options;
    options = {};
  }
  options = options || {};
  var fs = options.fs || _fs;

  var str = '';
  try {
    str = stringify(obj, options);
  } catch (err) {
    // Need to return whether a callback was passed or not
    if (callback) callback(err, null);
    return;
  }

  fs.writeFile(file, str, options, callback);
}

function writeFileSync(file, obj, options) {
  options = options || {};
  var fs = options.fs || _fs;

  var str = stringify(obj, options);
  // not sure if fs.writeFileSync returns anything, but just in case
  return fs.writeFileSync(file, str, options);
}

function stripBom(content) {
  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
  if (Buffer.isBuffer(content)) content = content.toString('utf8');
  content = content.replace(/^\uFEFF/, '');
  return content;
}

var jsonfile = {
  readFile: readFile,
  readFileSync: readFileSync,
  writeFile: writeFile,
  writeFileSync: writeFileSync
};

module.exports = jsonfile;

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const path = __webpack_require__(0);
const mkdir = __webpack_require__(5);
const pathExists = __webpack_require__(13).pathExists;
const jsonFile = __webpack_require__(56);

function outputJson(file, data, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  const dir = path.dirname(file);

  pathExists(dir, (err, itDoes) => {
    if (err) return callback(err);
    if (itDoes) return jsonFile.writeJson(file, data, options, callback);

    mkdir.mkdirs(dir, err => {
      if (err) return callback(err);
      jsonFile.writeJson(file, data, options, callback);
    });
  });
}

module.exports = outputJson;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1);
const path = __webpack_require__(0);
const mkdir = __webpack_require__(5);
const jsonFile = __webpack_require__(56);

function outputJsonSync(file, data, options) {
  const dir = path.dirname(file);

  if (!fs.existsSync(dir)) {
    mkdir.mkdirsSync(dir);
  }

  jsonFile.writeJsonSync(file, data, options);
}

module.exports = outputJsonSync;

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// most of this code was written by Andrew Kelley
// licensed under the BSD license: see
// https://github.com/andrewrk/node-mv/blob/master/package.json

// this needs a cleanup

const u = __webpack_require__(2).fromCallback;
const fs = __webpack_require__(1);
const copy = __webpack_require__(103);
const path = __webpack_require__(0);
const remove = __webpack_require__(45).remove;
const mkdirp = __webpack_require__(5).mkdirs;

function move(src, dest, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  const overwrite = options.overwrite || options.clobber || false;

  isSrcSubdir(src, dest, (err, itIs) => {
    if (err) return callback(err);
    if (itIs) return callback(new Error(`Cannot move '${src}' to a subdirectory of itself, '${dest}'.`));
    mkdirp(path.dirname(dest), err => {
      if (err) return callback(err);
      doRename();
    });
  });

  function doRename() {
    if (path.resolve(src) === path.resolve(dest)) {
      fs.access(src, callback);
    } else if (overwrite) {
      fs.rename(src, dest, err => {
        if (!err) return callback();

        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST') {
          remove(dest, err => {
            if (err) return callback(err);
            options.overwrite = false; // just overwriteed it, no need to do it again
            move(src, dest, options, callback);
          });
          return;
        }

        // weird Windows shit
        if (err.code === 'EPERM') {
          setTimeout(() => {
            remove(dest, err => {
              if (err) return callback(err);
              options.overwrite = false;
              move(src, dest, options, callback);
            });
          }, 200);
          return;
        }

        if (err.code !== 'EXDEV') return callback(err);
        moveAcrossDevice(src, dest, overwrite, callback);
      });
    } else {
      fs.link(src, dest, err => {
        if (err) {
          if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {
            return moveAcrossDevice(src, dest, overwrite, callback);
          }
          return callback(err);
        }
        return fs.unlink(src, callback);
      });
    }
  }
}

function moveAcrossDevice(src, dest, overwrite, callback) {
  fs.stat(src, (err, stat) => {
    if (err) return callback(err);

    if (stat.isDirectory()) {
      moveDirAcrossDevice(src, dest, overwrite, callback);
    } else {
      moveFileAcrossDevice(src, dest, overwrite, callback);
    }
  });
}

function moveFileAcrossDevice(src, dest, overwrite, callback) {
  const flags = overwrite ? 'w' : 'wx';
  const ins = fs.createReadStream(src);
  const outs = fs.createWriteStream(dest, { flags });

  ins.on('error', err => {
    ins.destroy();
    outs.destroy();
    outs.removeListener('close', onClose);

    // may want to create a directory but `out` line above
    // creates an empty file for us: See #108
    // don't care about error here
    fs.unlink(dest, () => {
      // note: `err` here is from the input stream errror
      if (err.code === 'EISDIR' || err.code === 'EPERM') {
        moveDirAcrossDevice(src, dest, overwrite, callback);
      } else {
        callback(err);
      }
    });
  });

  outs.on('error', err => {
    ins.destroy();
    outs.destroy();
    outs.removeListener('close', onClose);
    callback(err);
  });

  outs.once('close', onClose);
  ins.pipe(outs);

  function onClose() {
    fs.unlink(src, callback);
  }
}

function moveDirAcrossDevice(src, dest, overwrite, callback) {
  const options = {
    overwrite: false
  };

  if (overwrite) {
    remove(dest, err => {
      if (err) return callback(err);
      startCopy();
    });
  } else {
    startCopy();
  }

  function startCopy() {
    copy(src, dest, options, err => {
      if (err) return callback(err);
      remove(src, callback);
    });
  }
}

// return true if dest is a subdir of src, otherwise false.
// extract dest base dir and check if that is the same as src basename
function isSrcSubdir(src, dest, cb) {
  fs.stat(src, (err, st) => {
    if (err) return cb(err);
    if (st.isDirectory()) {
      const baseDir = dest.split(path.dirname(src) + path.sep)[1];
      if (baseDir) {
        const destBasename = baseDir.split(path.sep)[0];
        if (destBasename) return cb(null, src !== dest && dest.indexOf(src) > -1 && destBasename === path.basename(src));
        return cb(null, false);
      }
      return cb(null, false);
    }
    return cb(null, false);
  });
}

module.exports = {
  move: u(move)
};

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1);
const path = __webpack_require__(0);
const copySync = __webpack_require__(106).copySync;
const removeSync = __webpack_require__(45).removeSync;
const mkdirpSync = __webpack_require__(5).mkdirsSync;
const buffer = __webpack_require__(107);

function moveSync(src, dest, options) {
  options = options || {};
  const overwrite = options.overwrite || options.clobber || false;

  src = path.resolve(src);
  dest = path.resolve(dest);

  if (src === dest) return fs.accessSync(src);

  if (isSrcSubdir(src, dest)) throw new Error(`Cannot move '${src}' into itself '${dest}'.`);

  mkdirpSync(path.dirname(dest));
  tryRenameSync();

  function tryRenameSync() {
    if (overwrite) {
      try {
        return fs.renameSync(src, dest);
      } catch (err) {
        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST' || err.code === 'EPERM') {
          removeSync(dest);
          options.overwrite = false; // just overwriteed it, no need to do it again
          return moveSync(src, dest, options);
        }

        if (err.code !== 'EXDEV') throw err;
        return moveSyncAcrossDevice(src, dest, overwrite);
      }
    } else {
      try {
        fs.linkSync(src, dest);
        return fs.unlinkSync(src);
      } catch (err) {
        if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {
          return moveSyncAcrossDevice(src, dest, overwrite);
        }
        throw err;
      }
    }
  }
}

function moveSyncAcrossDevice(src, dest, overwrite) {
  const stat = fs.statSync(src);

  if (stat.isDirectory()) {
    return moveDirSyncAcrossDevice(src, dest, overwrite);
  } else {
    return moveFileSyncAcrossDevice(src, dest, overwrite);
  }
}

function moveFileSyncAcrossDevice(src, dest, overwrite) {
  const BUF_LENGTH = 64 * 1024;
  const _buff = buffer(BUF_LENGTH);

  const flags = overwrite ? 'w' : 'wx';

  const fdr = fs.openSync(src, 'r');
  const stat = fs.fstatSync(fdr);
  const fdw = fs.openSync(dest, flags, stat.mode);
  let bytesRead = 1;
  let pos = 0;

  while (bytesRead > 0) {
    bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
    fs.writeSync(fdw, _buff, 0, bytesRead);
    pos += bytesRead;
  }

  fs.closeSync(fdr);
  fs.closeSync(fdw);
  return fs.unlinkSync(src);
}

function moveDirSyncAcrossDevice(src, dest, overwrite) {
  const options = {
    overwrite: false
  };

  if (overwrite) {
    removeSync(dest);
    tryCopySync();
  } else {
    tryCopySync();
  }

  function tryCopySync() {
    copySync(src, dest, options);
    return removeSync(src);
  }
}

// return true if dest is a subdir of src, otherwise false.
// extract dest base dir and check if that is the same as src basename
function isSrcSubdir(src, dest) {
  try {
    return fs.statSync(src).isDirectory() && src !== dest && dest.indexOf(src) > -1 && dest.split(path.dirname(src) + path.sep)[1].split(path.sep)[0] === path.basename(src);
  } catch (e) {
    return false;
  }
}

module.exports = {
  moveSync
};

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(2).fromCallback;
const fs = __webpack_require__(7);
const path = __webpack_require__(0);
const mkdir = __webpack_require__(5);
const remove = __webpack_require__(45);

const emptyDir = u(function emptyDir(dir, callback) {
  callback = callback || function () {};
  fs.readdir(dir, (err, items) => {
    if (err) return mkdir.mkdirs(dir, callback);

    items = items.map(item => path.join(dir, item));

    deleteItem();

    function deleteItem() {
      const item = items.pop();
      if (!item) return callback();
      remove.remove(item, err => {
        if (err) return callback(err);
        deleteItem();
      });
    }
  });
});

function emptyDirSync(dir) {
  let items;
  try {
    items = fs.readdirSync(dir);
  } catch (err) {
    return mkdir.mkdirsSync(dir);
  }

  items.forEach(item => {
    item = path.join(dir, item);
    remove.removeSync(item);
  });
}

module.exports = {
  emptyDirSync,
  emptydirSync: emptyDirSync,
  emptyDir,
  emptydir: emptyDir
};

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const file = __webpack_require__(244);
const link = __webpack_require__(245);
const symlink = __webpack_require__(246);

module.exports = {
  // file
  createFile: file.createFile,
  createFileSync: file.createFileSync,
  ensureFile: file.createFile,
  ensureFileSync: file.createFileSync,
  // link
  createLink: link.createLink,
  createLinkSync: link.createLinkSync,
  ensureLink: link.createLink,
  ensureLinkSync: link.createLinkSync,
  // symlink
  createSymlink: symlink.createSymlink,
  createSymlinkSync: symlink.createSymlinkSync,
  ensureSymlink: symlink.createSymlink,
  ensureSymlinkSync: symlink.createSymlinkSync
};

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(2).fromCallback;
const path = __webpack_require__(0);
const fs = __webpack_require__(1);
const mkdir = __webpack_require__(5);
const pathExists = __webpack_require__(13).pathExists;

function createFile(file, callback) {
  function makeFile() {
    fs.writeFile(file, '', err => {
      if (err) return callback(err);
      callback();
    });
  }

  fs.stat(file, (err, stats) => {
    // eslint-disable-line handle-callback-err
    if (!err && stats.isFile()) return callback();
    const dir = path.dirname(file);
    pathExists(dir, (err, dirExists) => {
      if (err) return callback(err);
      if (dirExists) return makeFile();
      mkdir.mkdirs(dir, err => {
        if (err) return callback(err);
        makeFile();
      });
    });
  });
}

function createFileSync(file) {
  let stats;
  try {
    stats = fs.statSync(file);
  } catch (e) {}
  if (stats && stats.isFile()) return;

  const dir = path.dirname(file);
  if (!fs.existsSync(dir)) {
    mkdir.mkdirsSync(dir);
  }

  fs.writeFileSync(file, '');
}

module.exports = {
  createFile: u(createFile),
  createFileSync
};

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(2).fromCallback;
const path = __webpack_require__(0);
const fs = __webpack_require__(1);
const mkdir = __webpack_require__(5);
const pathExists = __webpack_require__(13).pathExists;

function createLink(srcpath, dstpath, callback) {
  function makeLink(srcpath, dstpath) {
    fs.link(srcpath, dstpath, err => {
      if (err) return callback(err);
      callback(null);
    });
  }

  pathExists(dstpath, (err, destinationExists) => {
    if (err) return callback(err);
    if (destinationExists) return callback(null);
    fs.lstat(srcpath, (err, stat) => {
      if (err) {
        err.message = err.message.replace('lstat', 'ensureLink');
        return callback(err);
      }

      const dir = path.dirname(dstpath);
      pathExists(dir, (err, dirExists) => {
        if (err) return callback(err);
        if (dirExists) return makeLink(srcpath, dstpath);
        mkdir.mkdirs(dir, err => {
          if (err) return callback(err);
          makeLink(srcpath, dstpath);
        });
      });
    });
  });
}

function createLinkSync(srcpath, dstpath, callback) {
  const destinationExists = fs.existsSync(dstpath);
  if (destinationExists) return undefined;

  try {
    fs.lstatSync(srcpath);
  } catch (err) {
    err.message = err.message.replace('lstat', 'ensureLink');
    throw err;
  }

  const dir = path.dirname(dstpath);
  const dirExists = fs.existsSync(dir);
  if (dirExists) return fs.linkSync(srcpath, dstpath);
  mkdir.mkdirsSync(dir);

  return fs.linkSync(srcpath, dstpath);
}

module.exports = {
  createLink: u(createLink),
  createLinkSync
};

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(2).fromCallback;
const path = __webpack_require__(0);
const fs = __webpack_require__(1);
const _mkdirs = __webpack_require__(5);
const mkdirs = _mkdirs.mkdirs;
const mkdirsSync = _mkdirs.mkdirsSync;

const _symlinkPaths = __webpack_require__(247);
const symlinkPaths = _symlinkPaths.symlinkPaths;
const symlinkPathsSync = _symlinkPaths.symlinkPathsSync;

const _symlinkType = __webpack_require__(248);
const symlinkType = _symlinkType.symlinkType;
const symlinkTypeSync = _symlinkType.symlinkTypeSync;

const pathExists = __webpack_require__(13).pathExists;

function createSymlink(srcpath, dstpath, type, callback) {
  callback = typeof type === 'function' ? type : callback;
  type = typeof type === 'function' ? false : type;

  pathExists(dstpath, (err, destinationExists) => {
    if (err) return callback(err);
    if (destinationExists) return callback(null);
    symlinkPaths(srcpath, dstpath, (err, relative) => {
      if (err) return callback(err);
      srcpath = relative.toDst;
      symlinkType(relative.toCwd, type, (err, type) => {
        if (err) return callback(err);
        const dir = path.dirname(dstpath);
        pathExists(dir, (err, dirExists) => {
          if (err) return callback(err);
          if (dirExists) return fs.symlink(srcpath, dstpath, type, callback);
          mkdirs(dir, err => {
            if (err) return callback(err);
            fs.symlink(srcpath, dstpath, type, callback);
          });
        });
      });
    });
  });
}

function createSymlinkSync(srcpath, dstpath, type, callback) {
  callback = typeof type === 'function' ? type : callback;
  type = typeof type === 'function' ? false : type;

  const destinationExists = fs.existsSync(dstpath);
  if (destinationExists) return undefined;

  const relative = symlinkPathsSync(srcpath, dstpath);
  srcpath = relative.toDst;
  type = symlinkTypeSync(relative.toCwd, type);
  const dir = path.dirname(dstpath);
  const exists = fs.existsSync(dir);
  if (exists) return fs.symlinkSync(srcpath, dstpath, type);
  mkdirsSync(dir);
  return fs.symlinkSync(srcpath, dstpath, type);
}

module.exports = {
  createSymlink: u(createSymlink),
  createSymlinkSync
};

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const path = __webpack_require__(0);
const fs = __webpack_require__(1);
const pathExists = __webpack_require__(13).pathExists;

/**
 * Function that returns two types of paths, one relative to symlink, and one
 * relative to the current working directory. Checks if path is absolute or
 * relative. If the path is relative, this function checks if the path is
 * relative to symlink or relative to current working directory. This is an
 * initiative to find a smarter `srcpath` to supply when building symlinks.
 * This allows you to determine which path to use out of one of three possible
 * types of source paths. The first is an absolute path. This is detected by
 * `path.isAbsolute()`. When an absolute path is provided, it is checked to
 * see if it exists. If it does it's used, if not an error is returned
 * (callback)/ thrown (sync). The other two options for `srcpath` are a
 * relative url. By default Node's `fs.symlink` works by creating a symlink
 * using `dstpath` and expects the `srcpath` to be relative to the newly
 * created symlink. If you provide a `srcpath` that does not exist on the file
 * system it results in a broken symlink. To minimize this, the function
 * checks to see if the 'relative to symlink' source file exists, and if it
 * does it will use it. If it does not, it checks if there's a file that
 * exists that is relative to the current working directory, if does its used.
 * This preserves the expectations of the original fs.symlink spec and adds
 * the ability to pass in `relative to current working direcotry` paths.
 */

function symlinkPaths(srcpath, dstpath, callback) {
  if (path.isAbsolute(srcpath)) {
    return fs.lstat(srcpath, (err, stat) => {
      if (err) {
        err.message = err.message.replace('lstat', 'ensureSymlink');
        return callback(err);
      }
      return callback(null, {
        'toCwd': srcpath,
        'toDst': srcpath
      });
    });
  } else {
    const dstdir = path.dirname(dstpath);
    const relativeToDst = path.join(dstdir, srcpath);
    return pathExists(relativeToDst, (err, exists) => {
      if (err) return callback(err);
      if (exists) {
        return callback(null, {
          'toCwd': relativeToDst,
          'toDst': srcpath
        });
      } else {
        return fs.lstat(srcpath, (err, stat) => {
          if (err) {
            err.message = err.message.replace('lstat', 'ensureSymlink');
            return callback(err);
          }
          return callback(null, {
            'toCwd': srcpath,
            'toDst': path.relative(dstdir, srcpath)
          });
        });
      }
    });
  }
}

function symlinkPathsSync(srcpath, dstpath) {
  let exists;
  if (path.isAbsolute(srcpath)) {
    exists = fs.existsSync(srcpath);
    if (!exists) throw new Error('absolute srcpath does not exist');
    return {
      'toCwd': srcpath,
      'toDst': srcpath
    };
  } else {
    const dstdir = path.dirname(dstpath);
    const relativeToDst = path.join(dstdir, srcpath);
    exists = fs.existsSync(relativeToDst);
    if (exists) {
      return {
        'toCwd': relativeToDst,
        'toDst': srcpath
      };
    } else {
      exists = fs.existsSync(srcpath);
      if (!exists) throw new Error('relative srcpath does not exist');
      return {
        'toCwd': srcpath,
        'toDst': path.relative(dstdir, srcpath)
      };
    }
  }
}

module.exports = {
  symlinkPaths,
  symlinkPathsSync
};

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1);

function symlinkType(srcpath, type, callback) {
  callback = typeof type === 'function' ? type : callback;
  type = typeof type === 'function' ? false : type;
  if (type) return callback(null, type);
  fs.lstat(srcpath, (err, stats) => {
    if (err) return callback(null, 'file');
    type = stats && stats.isDirectory() ? 'dir' : 'file';
    callback(null, type);
  });
}

function symlinkTypeSync(srcpath, type) {
  let stats;

  if (type) return type;
  try {
    stats = fs.lstatSync(srcpath);
  } catch (e) {
    return 'file';
  }
  return stats && stats.isDirectory() ? 'dir' : 'file';
}

module.exports = {
  symlinkType,
  symlinkTypeSync
};

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(2).fromCallback;
const fs = __webpack_require__(1);
const path = __webpack_require__(0);
const mkdir = __webpack_require__(5);
const pathExists = __webpack_require__(13).pathExists;

function outputFile(file, data, encoding, callback) {
  if (typeof encoding === 'function') {
    callback = encoding;
    encoding = 'utf8';
  }

  const dir = path.dirname(file);
  pathExists(dir, (err, itDoes) => {
    if (err) return callback(err);
    if (itDoes) return fs.writeFile(file, data, encoding, callback);

    mkdir.mkdirs(dir, err => {
      if (err) return callback(err);

      fs.writeFile(file, data, encoding, callback);
    });
  });
}

function outputFileSync(file, data, encoding) {
  const dir = path.dirname(file);
  if (fs.existsSync(dir)) {
    return fs.writeFileSync.apply(fs, arguments);
  }
  mkdir.mkdirsSync(dir);
  fs.writeFileSync.apply(fs, arguments);
}

module.exports = {
  outputFile: u(outputFile),
  outputFileSync
};

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Parser = __webpack_require__(251),
    through = __webpack_require__(252);

/*

  the value of this.stack that creationix's jsonparse has is weird.

  it makes this code ugly, but his problem is way harder that mine,
  so i'll forgive him.

*/

exports.parse = function (path, map) {
  var header, footer;
  var parser = new Parser();
  var stream = through(function (chunk) {
    if ('string' === typeof chunk) chunk = new Buffer(chunk);
    parser.write(chunk);
  }, function (data) {
    if (data) stream.write(data);
    if (header) stream.emit('header', header);
    if (footer) stream.emit('footer', footer);
    stream.queue(null);
  });

  if ('string' === typeof path) path = path.split('.').map(function (e) {
    if (e === '$*') return { emitKey: true };else if (e === '*') return true;else if (e === '') // '..'.split('.') returns an empty string
      return { recurse: true };else return e;
  });

  var count = 0,
      _key;
  if (!path || !path.length) path = null;

  parser.onValue = function (value) {
    if (!this.root) stream.root = value;

    if (!path) return;

    var i = 0; // iterates on path
    var j = 0; // iterates on stack
    var emitKey = false;
    var emitPath = false;
    while (i < path.length) {
      var key = path[i];
      var c;
      j++;

      if (key && !key.recurse) {
        c = j === this.stack.length ? this : this.stack[j];
        if (!c) return;
        if (!check(key, c.key)) {
          setHeaderFooter(c.key, value);
          return;
        }
        emitKey = !!key.emitKey;
        emitPath = !!key.emitPath;
        i++;
      } else {
        i++;
        var nextKey = path[i];
        if (!nextKey) return;
        while (true) {
          c = j === this.stack.length ? this : this.stack[j];
          if (!c) return;
          if (check(nextKey, c.key)) {
            i++;
            if (!Object.isFrozen(this.stack[j])) this.stack[j].value = null;
            break;
          } else {
            setHeaderFooter(c.key, value);
          }
          j++;
        }
      }
    }

    // emit header
    if (header) {
      stream.emit('header', header);
      header = false;
    }
    if (j !== this.stack.length) return;

    count++;
    var actualPath = this.stack.slice(1).map(function (element) {
      return element.key;
    }).concat([this.key]);
    var data = this.value[this.key];
    if (null != data) if (null != (data = map ? map(data, actualPath) : data)) {
      if (emitKey || emitPath) {
        data = { value: data };
        if (emitKey) data["key"] = this.key;
        if (emitPath) data["path"] = actualPath;
      }

      stream.queue(data);
    }
    delete this.value[this.key];
    for (var k in this.stack) if (!Object.isFrozen(this.stack[k])) this.stack[k].value = null;
  };
  parser._onToken = parser.onToken;

  parser.onToken = function (token, value) {
    parser._onToken(token, value);
    if (this.stack.length === 0) {
      if (stream.root) {
        if (!path) stream.queue(stream.root);
        count = 0;
        stream.root = null;
      }
    }
  };

  parser.onError = function (err) {
    if (err.message.indexOf("at position") > -1) err.message = "Invalid JSON (" + err.message + ")";
    stream.emit('error', err);
  };

  return stream;

  function setHeaderFooter(key, value) {
    // header has not been emitted yet
    if (header !== false) {
      header = header || {};
      header[key] = value;
    }

    // footer has not been emitted yet but header has
    if (footer !== false && header === false) {
      footer = footer || {};
      footer[key] = value;
    }
  }
};

function check(x, y) {
  if ('string' === typeof x) return y == x;else if (x && 'function' === typeof x.exec) return x.exec(y);else if ('boolean' === typeof x || 'object' === typeof x) return x;else if ('function' === typeof x) return x(y);
  return false;
}

exports.stringify = function (op, sep, cl, indent) {
  indent = indent || 0;
  if (op === false) {
    op = '';
    sep = '\n';
    cl = '';
  } else if (op == null) {

    op = '[\n';
    sep = '\n,\n';
    cl = '\n]\n';
  }

  //else, what ever you like

  var stream,
      first = true,
      anyData = false;
  stream = through(function (data) {
    anyData = true;
    try {
      var json = JSON.stringify(data, null, indent);
    } catch (err) {
      return stream.emit('error', err);
    }
    if (first) {
      first = false;stream.queue(op + json);
    } else stream.queue(sep + json);
  }, function (data) {
    if (!anyData) stream.queue(op);
    stream.queue(cl);
    stream.queue(null);
  });

  return stream;
};

exports.stringifyObject = function (op, sep, cl, indent) {
  indent = indent || 0;
  if (op === false) {
    op = '';
    sep = '\n';
    cl = '';
  } else if (op == null) {

    op = '{\n';
    sep = '\n,\n';
    cl = '\n}\n';
  }

  //else, what ever you like

  var first = true;
  var anyData = false;
  var stream = through(function (data) {
    anyData = true;
    var json = JSON.stringify(data[0]) + ':' + JSON.stringify(data[1], null, indent);
    if (first) {
      first = false;this.queue(op + json);
    } else this.queue(sep + json);
  }, function (data) {
    if (!anyData) this.queue(op);
    this.queue(cl);

    this.queue(null);
  });

  return stream;
};

/***/ }),
/* 251 */
/***/ (function(module, exports) {

/*global Buffer*/
// Named constants with unique integer values
var C = {};
// Tokens
var LEFT_BRACE = C.LEFT_BRACE = 0x1;
var RIGHT_BRACE = C.RIGHT_BRACE = 0x2;
var LEFT_BRACKET = C.LEFT_BRACKET = 0x3;
var RIGHT_BRACKET = C.RIGHT_BRACKET = 0x4;
var COLON = C.COLON = 0x5;
var COMMA = C.COMMA = 0x6;
var TRUE = C.TRUE = 0x7;
var FALSE = C.FALSE = 0x8;
var NULL = C.NULL = 0x9;
var STRING = C.STRING = 0xa;
var NUMBER = C.NUMBER = 0xb;
// Tokenizer States
var START = C.START = 0x11;
var STOP = C.STOP = 0x12;
var TRUE1 = C.TRUE1 = 0x21;
var TRUE2 = C.TRUE2 = 0x22;
var TRUE3 = C.TRUE3 = 0x23;
var FALSE1 = C.FALSE1 = 0x31;
var FALSE2 = C.FALSE2 = 0x32;
var FALSE3 = C.FALSE3 = 0x33;
var FALSE4 = C.FALSE4 = 0x34;
var NULL1 = C.NULL1 = 0x41;
var NULL2 = C.NULL2 = 0x42;
var NULL3 = C.NULL3 = 0x43;
var NUMBER1 = C.NUMBER1 = 0x51;
var NUMBER3 = C.NUMBER3 = 0x53;
var STRING1 = C.STRING1 = 0x61;
var STRING2 = C.STRING2 = 0x62;
var STRING3 = C.STRING3 = 0x63;
var STRING4 = C.STRING4 = 0x64;
var STRING5 = C.STRING5 = 0x65;
var STRING6 = C.STRING6 = 0x66;
// Parser States
var VALUE = C.VALUE = 0x71;
var KEY = C.KEY = 0x72;
// Parser Modes
var OBJECT = C.OBJECT = 0x81;
var ARRAY = C.ARRAY = 0x82;
// Character constants
var BACK_SLASH = "\\".charCodeAt(0);
var FORWARD_SLASH = "\/".charCodeAt(0);
var BACKSPACE = "\b".charCodeAt(0);
var FORM_FEED = "\f".charCodeAt(0);
var NEWLINE = "\n".charCodeAt(0);
var CARRIAGE_RETURN = "\r".charCodeAt(0);
var TAB = "\t".charCodeAt(0);

var STRING_BUFFER_SIZE = 64 * 1024;

function Parser() {
  this.tState = START;
  this.value = undefined;

  this.string = undefined; // string data
  this.stringBuffer = Buffer.alloc ? Buffer.alloc(STRING_BUFFER_SIZE) : new Buffer(STRING_BUFFER_SIZE);
  this.stringBufferOffset = 0;
  this.unicode = undefined; // unicode escapes
  this.highSurrogate = undefined;

  this.key = undefined;
  this.mode = undefined;
  this.stack = [];
  this.state = VALUE;
  this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary
  this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read
  this.temp_buffs = { "2": new Buffer(2), "3": new Buffer(3), "4": new Buffer(4) }; // for rebuilding chars split before boundary is reached

  // Stream offset
  this.offset = -1;
}

// Slow code to string converter (only used when throwing syntax errors)
Parser.toknam = function (code) {
  var keys = Object.keys(C);
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    if (C[key] === code) {
      return key;
    }
  }
  return code && "0x" + code.toString(16);
};

var proto = Parser.prototype;
proto.onError = function (err) {
  throw err;
};
proto.charError = function (buffer, i) {
  this.tState = STOP;
  this.onError(new Error("Unexpected " + JSON.stringify(String.fromCharCode(buffer[i])) + " at position " + i + " in state " + Parser.toknam(this.tState)));
};
proto.appendStringChar = function (char) {
  if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {
    this.string += this.stringBuffer.toString('utf8');
    this.stringBufferOffset = 0;
  }

  this.stringBuffer[this.stringBufferOffset++] = char;
};
proto.appendStringBuf = function (buf, start, end) {
  var size = buf.length;
  if (typeof start === 'number') {
    if (typeof end === 'number') {
      if (end < 0) {
        // adding a negative end decreeses the size
        size = buf.length - start + end;
      } else {
        size = end - start;
      }
    } else {
      size = buf.length - start;
    }
  }

  if (size < 0) {
    size = 0;
  }

  if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {
    this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);
    this.stringBufferOffset = 0;
  }

  buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);
  this.stringBufferOffset += size;
};
proto.write = function (buffer) {
  if (typeof buffer === "string") buffer = new Buffer(buffer);
  var n;
  for (var i = 0, l = buffer.length; i < l; i++) {
    if (this.tState === START) {
      n = buffer[i];
      this.offset++;
      if (n === 0x7b) {
        this.onToken(LEFT_BRACE, "{"); // {
      } else if (n === 0x7d) {
        this.onToken(RIGHT_BRACE, "}"); // }
      } else if (n === 0x5b) {
        this.onToken(LEFT_BRACKET, "["); // [
      } else if (n === 0x5d) {
        this.onToken(RIGHT_BRACKET, "]"); // ]
      } else if (n === 0x3a) {
        this.onToken(COLON, ":"); // :
      } else if (n === 0x2c) {
        this.onToken(COMMA, ","); // ,
      } else if (n === 0x74) {
        this.tState = TRUE1; // t
      } else if (n === 0x66) {
        this.tState = FALSE1; // f
      } else if (n === 0x6e) {
        this.tState = NULL1; // n
      } else if (n === 0x22) {
        // "
        this.string = "";
        this.stringBufferOffset = 0;
        this.tState = STRING1;
      } else if (n === 0x2d) {
        this.string = "-";this.tState = NUMBER1; // -
      } else {
        if (n >= 0x30 && n < 0x40) {
          // 1-9
          this.string = String.fromCharCode(n);this.tState = NUMBER3;
        } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) {
          // whitespace
        } else {
          return this.charError(buffer, i);
        }
      }
    } else if (this.tState === STRING1) {
      // After open quote
      n = buffer[i]; // get current byte from buffer
      // check for carry over of a multi byte char split between data chunks
      // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration
      if (this.bytes_remaining > 0) {
        for (var j = 0; j < this.bytes_remaining; j++) {
          this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];
        }

        this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);
        this.bytes_in_sequence = this.bytes_remaining = 0;
        i = i + j - 1;
      } else if (this.bytes_remaining === 0 && n >= 128) {
        // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time
        if (n <= 193 || n > 244) {
          return this.onError(new Error("Invalid UTF-8 character at position " + i + " in state " + Parser.toknam(this.tState)));
        }
        if (n >= 194 && n <= 223) this.bytes_in_sequence = 2;
        if (n >= 224 && n <= 239) this.bytes_in_sequence = 3;
        if (n >= 240 && n <= 244) this.bytes_in_sequence = 4;
        if (this.bytes_in_sequence + i > buffer.length) {
          // if bytes needed to complete char fall outside buffer length, we have a boundary split
          for (var k = 0; k <= buffer.length - 1 - i; k++) {
            this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k]; // fill temp buffer of correct size with bytes available in this chunk
          }
          this.bytes_remaining = i + this.bytes_in_sequence - buffer.length;
          i = buffer.length - 1;
        } else {
          this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);
          i = i + this.bytes_in_sequence - 1;
        }
      } else if (n === 0x22) {
        this.tState = START;
        this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);
        this.stringBufferOffset = 0;
        this.onToken(STRING, this.string);
        this.offset += Buffer.byteLength(this.string, 'utf8') + 1;
        this.string = undefined;
      } else if (n === 0x5c) {
        this.tState = STRING2;
      } else if (n >= 0x20) {
        this.appendStringChar(n);
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === STRING2) {
      // After backslash
      n = buffer[i];
      if (n === 0x22) {
        this.appendStringChar(n);this.tState = STRING1;
      } else if (n === 0x5c) {
        this.appendStringChar(BACK_SLASH);this.tState = STRING1;
      } else if (n === 0x2f) {
        this.appendStringChar(FORWARD_SLASH);this.tState = STRING1;
      } else if (n === 0x62) {
        this.appendStringChar(BACKSPACE);this.tState = STRING1;
      } else if (n === 0x66) {
        this.appendStringChar(FORM_FEED);this.tState = STRING1;
      } else if (n === 0x6e) {
        this.appendStringChar(NEWLINE);this.tState = STRING1;
      } else if (n === 0x72) {
        this.appendStringChar(CARRIAGE_RETURN);this.tState = STRING1;
      } else if (n === 0x74) {
        this.appendStringChar(TAB);this.tState = STRING1;
      } else if (n === 0x75) {
        this.unicode = "";this.tState = STRING3;
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6) {
      // unicode hex codes
      n = buffer[i];
      // 0-9 A-F a-f
      if (n >= 0x30 && n < 0x40 || n > 0x40 && n <= 0x46 || n > 0x60 && n <= 0x66) {
        this.unicode += String.fromCharCode(n);
        if (this.tState++ === STRING6) {
          var intVal = parseInt(this.unicode, 16);
          this.unicode = undefined;
          if (this.highSurrogate !== undefined && intVal >= 0xDC00 && intVal < 0xDFFF + 1) {
            //<56320,57343> - lowSurrogate
            this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate, intVal)));
            this.highSurrogate = undefined;
          } else if (this.highSurrogate === undefined && intVal >= 0xD800 && intVal < 0xDBFF + 1) {
            //<55296,56319> - highSurrogate
            this.highSurrogate = intVal;
          } else {
            if (this.highSurrogate !== undefined) {
              this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate)));
              this.highSurrogate = undefined;
            }
            this.appendStringBuf(new Buffer(String.fromCharCode(intVal)));
          }
          this.tState = STRING1;
        }
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {
      n = buffer[i];

      switch (n) {
        case 0x30: // 0
        case 0x31: // 1
        case 0x32: // 2
        case 0x33: // 3
        case 0x34: // 4
        case 0x35: // 5
        case 0x36: // 6
        case 0x37: // 7
        case 0x38: // 8
        case 0x39: // 9
        case 0x2e: // .
        case 0x65: // e
        case 0x45: // E
        case 0x2b: // +
        case 0x2d:
          // -
          this.string += String.fromCharCode(n);
          this.tState = NUMBER3;
          break;
        default:
          this.tState = START;
          var result = Number(this.string);

          if (isNaN(result)) {
            return this.charError(buffer, i);
          }

          if (this.string.match(/[0-9]+/) == this.string && result.toString() != this.string) {
            // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number
            this.onToken(STRING, this.string);
          } else {
            this.onToken(NUMBER, result);
          }

          this.offset += this.string.length - 1;
          this.string = undefined;
          i--;
          break;
      }
    } else if (this.tState === TRUE1) {
      // r
      if (buffer[i] === 0x72) {
        this.tState = TRUE2;
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === TRUE2) {
      // u
      if (buffer[i] === 0x75) {
        this.tState = TRUE3;
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === TRUE3) {
      // e
      if (buffer[i] === 0x65) {
        this.tState = START;this.onToken(TRUE, true);this.offset += 3;
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === FALSE1) {
      // a
      if (buffer[i] === 0x61) {
        this.tState = FALSE2;
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === FALSE2) {
      // l
      if (buffer[i] === 0x6c) {
        this.tState = FALSE3;
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === FALSE3) {
      // s
      if (buffer[i] === 0x73) {
        this.tState = FALSE4;
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === FALSE4) {
      // e
      if (buffer[i] === 0x65) {
        this.tState = START;this.onToken(FALSE, false);this.offset += 4;
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === NULL1) {
      // u
      if (buffer[i] === 0x75) {
        this.tState = NULL2;
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === NULL2) {
      // l
      if (buffer[i] === 0x6c) {
        this.tState = NULL3;
      } else {
        return this.charError(buffer, i);
      }
    } else if (this.tState === NULL3) {
      // l
      if (buffer[i] === 0x6c) {
        this.tState = START;this.onToken(NULL, null);this.offset += 3;
      } else {
        return this.charError(buffer, i);
      }
    }
  }
};
proto.onToken = function (token, value) {
  // Override this to get events
};

proto.parseError = function (token, value) {
  this.tState = STOP;
  this.onError(new Error("Unexpected " + Parser.toknam(token) + (value ? "(" + JSON.stringify(value) + ")" : "") + " in state " + Parser.toknam(this.state)));
};
proto.push = function () {
  this.stack.push({ value: this.value, key: this.key, mode: this.mode });
};
proto.pop = function () {
  var value = this.value;
  var parent = this.stack.pop();
  this.value = parent.value;
  this.key = parent.key;
  this.mode = parent.mode;
  this.emit(value);
  if (!this.mode) {
    this.state = VALUE;
  }
};
proto.emit = function (value) {
  if (this.mode) {
    this.state = COMMA;
  }
  this.onValue(value);
};
proto.onValue = function (value) {
  // Override me
};
proto.onToken = function (token, value) {
  if (this.state === VALUE) {
    if (token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL) {
      if (this.value) {
        this.value[this.key] = value;
      }
      this.emit(value);
    } else if (token === LEFT_BRACE) {
      this.push();
      if (this.value) {
        this.value = this.value[this.key] = {};
      } else {
        this.value = {};
      }
      this.key = undefined;
      this.state = KEY;
      this.mode = OBJECT;
    } else if (token === LEFT_BRACKET) {
      this.push();
      if (this.value) {
        this.value = this.value[this.key] = [];
      } else {
        this.value = [];
      }
      this.key = 0;
      this.mode = ARRAY;
      this.state = VALUE;
    } else if (token === RIGHT_BRACE) {
      if (this.mode === OBJECT) {
        this.pop();
      } else {
        return this.parseError(token, value);
      }
    } else if (token === RIGHT_BRACKET) {
      if (this.mode === ARRAY) {
        this.pop();
      } else {
        return this.parseError(token, value);
      }
    } else {
      return this.parseError(token, value);
    }
  } else if (this.state === KEY) {
    if (token === STRING) {
      this.key = value;
      this.state = COLON;
    } else if (token === RIGHT_BRACE) {
      this.pop();
    } else {
      return this.parseError(token, value);
    }
  } else if (this.state === COLON) {
    if (token === COLON) {
      this.state = VALUE;
    } else {
      return this.parseError(token, value);
    }
  } else if (this.state === COMMA) {
    if (token === COMMA) {
      if (this.mode === ARRAY) {
        this.key++;this.state = VALUE;
      } else if (this.mode === OBJECT) {
        this.state = KEY;
      }
    } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {
      this.pop();
    } else {
      return this.parseError(token, value);
    }
  } else {
    return this.parseError(token, value);
  }
};

Parser.C = C;

module.exports = Parser;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

var Stream = __webpack_require__(9);

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through;
through.through = through;

//create a readable writable stream.

function through(write, end, opts) {
  write = write || function (data) {
    this.queue(data);
  };
  end = end || function () {
    this.queue(null);
  };

  var ended = false,
      destroyed = false,
      buffer = [],
      _ended = false;
  var stream = new Stream();
  stream.readable = stream.writable = true;
  stream.paused = false;

  //  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false);

  stream.write = function (data) {
    write.call(this, data);
    return !stream.paused;
  };

  function drain() {
    while (buffer.length && !stream.paused) {
      var data = buffer.shift();
      if (null === data) return stream.emit('end');else stream.emit('data', data);
    }
  }

  stream.queue = stream.push = function (data) {
    //    console.error(ended)
    if (_ended) return stream;
    if (data === null) _ended = true;
    buffer.push(data);
    drain();
    return stream;
  };

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false;
    if (!stream.writable && stream.autoDestroy) process.nextTick(function () {
      stream.destroy();
    });
  });

  function _end() {
    stream.writable = false;
    end.call(stream);
    if (!stream.readable && stream.autoDestroy) stream.destroy();
  }

  stream.end = function (data) {
    if (ended) return;
    ended = true;
    if (arguments.length) stream.write(data);
    _end(); // will emit or queue
    return stream;
  };

  stream.destroy = function () {
    if (destroyed) return;
    destroyed = true;
    ended = true;
    buffer.length = 0;
    stream.writable = stream.readable = false;
    stream.emit('close');
    return stream;
  };

  stream.pause = function () {
    if (stream.paused) return;
    stream.paused = true;
    return stream;
  };

  stream.resume = function () {
    if (stream.paused) {
      stream.paused = false;
      stream.emit('resume');
    }
    drain();
    //may have become paused again,
    //as drain emits 'data'.
    if (!stream.paused) stream.emit('drain');
    return stream;
  };
  return stream;
}

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const symbol_1 = __webpack_require__(12);
class HoverProvider {
    constructor(docStore, symbolStore, refStore) {
        this.docStore = docStore;
        this.symbolStore = symbolStore;
        this.refStore = refStore;
    }
    provideHover(uri, pos) {
        let doc = this.docStore.find(uri);
        let table = this.refStore.getReferenceTable(uri);
        if (!doc || !table) {
            return undefined;
        }
        let ref = table.referenceAtPosition(pos);
        if (!ref) {
            return undefined;
        }
        let symbol = this.symbolStore.findSymbolsByReference(ref, 1).shift();
        if (!symbol) {
            return undefined;
        }
        switch (symbol.kind) {
            case 64:
            case 32:
                return {
                    contents: [this.modifiersToString(symbol.modifiers), symbol.name + symbol_1.PhpSymbol.signatureString(symbol)].join(' ').trim(),
                    range: ref.location.range
                };
            case 128:
                return {
                    contents: [symbol_1.PhpSymbol.type(symbol) || 'mixed', symbol.name].join(' ').trim(),
                    range: ref.location.range
                };
            case 16:
                return {
                    contents: [this.modifiersToString(symbol.modifiers), symbol_1.PhpSymbol.type(symbol) || 'mixed', symbol.name].join(' ').trim(),
                    range: ref.location.range
                };
            case 256:
                return {
                    contents: [ref.type, symbol.name].join(' ').trim(),
                    range: ref.location.range
                };
            case 8:
            case 1024:
                return {
                    contents: [this.modifiersToString(symbol.modifiers), 'const', symbol.name, symbol.value ? `= ${symbol.value}` : ''].join(' ').trim(),
                    range: ref.location.range
                };
            default:
                return undefined;
        }
    }
    modifiersToString(modifiers) {
        let modStrings = [];
        if (modifiers & 1) {
            modStrings.push('public');
        }
        if (modifiers & 2) {
            modStrings.push('protected');
        }
        if (modifiers & 4) {
            modStrings.push('private');
        }
        if (modifiers & 8) {
            modStrings.push('final');
        }
        if (modifiers & 16) {
            modStrings.push('abstract');
        }
        return modStrings.join(' ');
    }
}
exports.HoverProvider = HoverProvider;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_types_1 = __webpack_require__(3);
class HighlightProvider {
    constructor(docStore, symbolStore, refStore) {
        this.docStore = docStore;
        this.symbolStore = symbolStore;
        this.refStore = refStore;
    }
    provideHightlights(uri, pos) {
        let doc = this.docStore.find(uri);
        let table = this.refStore.getReferenceTable(uri);
        if (!doc || !table) {
            return undefined;
        }
        let ref = table.referenceAtPosition(pos);
        if (!ref) {
            return [];
        }
        let kindMask = 128 | 256;
        return table.references(r => {
            return (r.kind === ref.kind || (ref.kind & kindMask) > 0 && (r.kind & kindMask) > 0) && ref.name === r.name;
        }).map(r => {
            return vscode_languageserver_types_1.DocumentHighlight.create(r.location.range, vscode_languageserver_types_1.DocumentHighlightKind.Read);
        });
    }
}
exports.HighlightProvider = HighlightProvider;

/***/ })
/******/ ]);
//# sourceMappingURL=main.js.map